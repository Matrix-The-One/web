(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{628:function(t,e,s){"use strict";s.r(e);var a=s(1),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-前端框架原理概览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-前端框架原理概览"}},[t._v("#")]),t._v(" 1. 前端框架原理概览")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("AOT：代码在构建时，被称为 AOT（Ahead Of Time，提前编译或预编译），宿主环境获得的是编译后的代码。")])]),t._v(" "),e("li",[e("p",[t._v("JIT：代码在宿主环境执行时，被称为 JIT（Just In Time，即时编译），代码在宿主环境中编译并执行。")])]),t._v(" "),e("li",[e("p",[t._v("如果模板上有错误。使用 AOT 时，会在编译阶段报出；而 JIT 需要等到在浏览器中执行到错误代码时，才会报出。")])]),t._v(" "),e("li",[e("p",[t._v("使用 JIT 的应用在首次加载时慢于使用 AOT 的应用，因为其需要先编译代码；而使用 AOT 的应用已经在构建时完成编译，可以直接执行代码。")])]),t._v(" "),e("li",[e("p",[t._v("使用 JIT 的应用代码体积可能大于使用 AOT 的应用，因为其在运行时会增加编译器代码。")])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("框架")]),t._v(" "),e("th",[t._v("重渲染层级分类")]),t._v(" "),e("th",[t._v("编译技术分类")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Svelte")]),t._v(" "),e("td",[t._v("元素级框架")]),t._v(" "),e("td",[t._v("极致的编译时框架")])]),t._v(" "),e("tr",[e("td",[t._v("Vue")]),t._v(" "),e("td",[t._v("组件级框架")]),t._v(" "),e("td",[t._v("拥有两者的特效（AOT 和 VDOM），比较均衡")])]),t._v(" "),e("tr",[e("td",[t._v("React")]),t._v(" "),e("td",[t._v("应用级框架")]),t._v(" "),e("td",[t._v("极致的运行时框架")])])])]),t._v(" "),e("h2",{attrs:{id:"_2-react-理念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-理念"}},[t._v("#")]),t._v(" 2. React 理念")]),t._v(" "),e("ul",[e("li",[t._v("Fiber Reconciler 采用双缓冲的更新机制。对于每个应用，同时存在两颗 Fiber Tree，Current Fiber Tree 对应真实 UI，Wip Fiber Tree 对应“正在内存中构建的 UI”。")])]),t._v(" "),e("h2",{attrs:{id:"_3-render-阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-render-阶段"}},[t._v("#")]),t._v(" 3. render 阶段")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Fiber Reconciler 是从 Stack Reconciler 重构而来，通过遍历的方式实现可中断的递归，因此 performUnitOfWork 的工作可以分为两部分：“递”和“归”。")]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("“递”阶段会从 HostRootFiber 开始向下以 DFS 的方式遍历，为“遍历到的每个 fiberNode”执行 beginWork 方法。该方法会根据传入的 fiberNode 创建下一级 fiberNode。当遍历到叶子元素（不包含子 fiberNode）时，performUnitOfWork 就会进入“归”阶段。")]),t._v(" "),e("li",[t._v("“归”阶段会调用 completeWork 方法处理 fiberNode。当某个 fiberNode 执行完 completeWork 方法后，如果其存在兄弟 fiberNode（fiberNode.sibling !== null），会进入其兄弟 fiberNode 的“递”阶段。如果不存在兄弟 fiberNode，则进入父 fiberNode 的“归”阶段。“递”阶段和“归”阶段会交错执行直至 HostRootFiber 的“归”阶段。至此，render 阶段的工作结束。")])])]),t._v(" "),e("div",{staticClass:"language-tsx line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-tsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      Hello\n      ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("World")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 1. HostRootFiber beginWork（生成 App fiberNode）\n * 2. App fiberNode beginWork（生成 DIV fiberNode）\n * 3. DIV fiberNode beginWork（生成 'Hello'、SPAN fiberNode）\n * 4. 'Hello' fiberNode beginWork（叶子元素）\n * 5. 'Hello' fiberNode completeWork\n * 6. SPAN fiberNode beginWork（叶子元素）\n * 7. SPAN fiberNode completeWork\n * 8. DIV fiberNode completeWork\n * 9. APP fiberNode completeWork\n * 10. HostRootFiber completeWork\n */")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br")])])]),t._v(" "),e("li",[e("p",[t._v("beginWork 会根据当前 fiberNode 创建下一级 fiberNode，在 update 时标记 Placement（新增、移动）、ChildDeletion（删除）。completeWork 在 mount 时会构建 DOM Tree，初始化属性，在 update 时标记 Update（属性更新），最终执行 flags 冒泡。")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);