(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{621:function(t,v,_){"use strict";_.r(v);var a=_(1),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"_1-表达式运算-序列检测"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-表达式运算-序列检测"}},[t._v("#")]),t._v(" 1. 表达式运算 - 序列检测")]),t._v(" "),v("ul",[v("li",[t._v("序列检测的含义在于比较变量在序列中的大小，即数学概念中的数轴上点的位置先后。")]),t._v(" "),v("li",[t._v("JavaScript 中可进行序列检测的数据类型")]),t._v(" "),v("li",[v("table",[v("thead",[v("tr",[v("th",[t._v("可比较序列的类型")]),t._v(" "),v("th",[t._v("序列值")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("boolean")]),t._v(" "),v("td",[t._v("0 ~ 1")])]),t._v(" "),v("tr",[v("td",[t._v("string")]),t._v(" "),v("td",[t._v("在 JavaScript 中，“字符串”是有序类型的一种特例。在一般语言中，“字符（char）这种数据类型是有序的（字符#0~#255，或 Unicode 全集）。虽然 JavaScript 不存在“字符”类型，但它的字符串中的每一个字符，都被作为单一字符来参与序列检测。")])]),t._v(" "),v("tr",[v("td",[t._v("number")]),t._v(" "),v("td",[t._v("NEGATIVE_INFINITY ~ POSITIVE_INFINITY （负无穷 ~ 正无穷。值 NaN 没有序列值，任何值与 NaN 进行序列检测都将得到 false）")])])])])]),t._v(" "),v("li",[t._v("序列检测的运算规则")]),t._v(" "),v("li",[v("table",[v("thead",[v("tr",[v("th",[t._v("类型")]),t._v(" "),v("th",[t._v("运算规则")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("两个值类型进行比较")]),t._v(" "),v("td",[t._v("直接比较数据在序列中的大小")])]),t._v(" "),v("tr",[v("td",[t._v("值类型与引用类型进行比较")]),t._v(" "),v("td",[t._v("将引用类型的数据转换为与值类型数据相同的数据，再进行“序列大小”比较")])]),t._v(" "),v("tr",[v("td",[t._v("两个引用类型进行比较")]),t._v(" "),v("td",[t._v("无意义，总是返回 false（对引用类型进行序列检测运算其实是可能的，这与 valueOf()运算的效果有关。但这意味着最终比较的数据并非引用类型本身，而是它们转换后的值类型。）")])])])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);